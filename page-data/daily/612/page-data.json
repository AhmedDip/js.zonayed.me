{"componentChunkName":"component---src-templates-post-page-js","path":"/daily/612","webpackCompilationHash":"c72c4b7935a7a4e576e9","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":612,"date":"2018-09-14T15:48:08","date_gmt":"2018-09-14T15:48:08","guid":{"rendered":"https://with.zonayed.me/?p=612"},"modified":"2018-09-19T14:39:59","modified_gmt":"2018-09-19T14:39:59","slug":"%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-15","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-15/","title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-divider\">\n<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণ সম্পর্কে আমরা জানি। রিমোট কোনো সার্ভার থেকে বা একটু সময় লাগে এমন কোনো অপারেশন শেষ করার জন্যে জাভাস্ক্রিপ্ট অপেক্ষা না করে বরং পরের অপারেশনে চলে যায়। এধরনের অপারেশন হচ্ছে অ্যাসিনক্রোনাস অপারেশন। এখন এই অপারেশন ফেলে অন্য অপারেশনে চলে গেলেও জাভাস্ক্রিপ্ট ঠিকই এটাকেও ট্র্যাক করে রাখে। আর এইজন্যেই জাভাস্ক্রিপ্ট প্রমিস(Promise) ব্যবহার করে।</p>\n<p class=\"graf graf--p\">এখন প্রমিসের কাজ হচ্ছে এ ধরনের অ্যাসিনক্রোনাস অপারেশনকে হ্যান্ডল করা। এখন আমরা রিমোট একটা সার্ভারের উপর অপারেশন চালাচ্ছি, কিন্তু ডাটা না আসা পর্যন্ত কিন্তু আমরা বলতে পারি না সে অপারেশন সফল হবে না বিফলে যাবে। আর মূলত এইসব হ্যান্ডল করার জন্যেই প্রমিস কাজ করে। অধিকাংশ ক্ষেত্রেই আমাদের প্রমিস নিজেদের তৈরী করতে হয় না। আমরা জাস্ট প্রমিসটা হ্যান্ডল করি। প্রমিসের মূল স্ট্রাকচার আমরা যে লাইব্রেরী দিয়ে কাজ করবো, সিস্টেম থেকে করবো, সেখানেই ইমপ্লিমেন্ট করা থাকে। আমাদের জাস্ট প্রমিসটাকে হ্যান্ডল করতে হয়। তবে আমি এখানে প্রমিস কিভাবে আমরা নিজেরা তৈরী করতে পারি সেটাও দেখবো। প্রমিসের মূলত ৩টা স্টেট আছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*eyXprdVQ8MkjN6YPjGD1vw.png?resize=621%2C341&#038;ssl=1\" data-image-id=\"1*eyXprdVQ8MkjN6YPjGD1vw.png\" data-width=\"621\" data-height=\"341\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">প্রমিস তৈরী করাঃ</strong></p>\n<pre class=\"graf graf--pre\">const aPromise = control =&gt; { \r\n   return new Promise((resolve, reject) =&gt; {\r\n      setTimeout(() =&gt; {\r\n         if(control) {\r\n            resolve();\r\n         } else {\r\n            reject();\r\n         }\r\n      }, 3000)\r\n   })\r\n}</pre>\n<p class=\"graf graf--p\">এখানে আমরা একটা ফাংশন তৈরী করেছি, যেটার একটা আর্গুমেন্ট নিবে। এখন এই ফাংশন প্রমিস রিটার্ণ করবে। প্রমিস দুইটা আর্গুমেন্ট নেয়, <code class=\"markup--code markup--p-code\">resolve</code> আর <code class=\"markup--code markup--p-code\">reject</code> । তারপর আমরা ভিতরে <code class=\"markup--code markup--p-code\">setTimeout</code> দিয়ে একটা ফেইক টাইম লাগতে পারে এমন অপারেশন তৈরী করেছি ৩০০০ মিলিসেকেন্ড(৩ সেকেন্ড) টাইম দিয়ে। তারপর আসলে মজার ব্যাপার। আমাদের প্রমিস যদি তখনি সফল হবে যদি আমরা আমাদের কাঙ্খিত ফলাফল পাই। এখন আমরা এই ফাংশনে(<code class=\"markup--code markup--p-code\">aPromise</code>) একটা আর্গুমেন্ট নিয়েছি, এটা দিয়ে আমরা <code class=\"markup--code markup--p-code\">true</code> অথবা <code class=\"markup--code markup--p-code\">false</code> পাস করে প্রমিস সফল না ব্যর্থ সেরকম একটা কন্ডিশন তৈরী করবো। যদি আর্গুমেন্ট টা <code class=\"markup--code markup--p-code\">true</code> হয় তাহলে আমাদের প্রমিস সফল হয়েছে এবং আমরা <code class=\"markup--code markup--p-code\">resolve()</code> কল করবো। আর যদি <code class=\"markup--code markup--p-code\">false</code> হয় তাহলে <code class=\"markup--code markup--p-code\">reject()</code> কল করার মাধ্যমে প্রমিস ব্যর্থ হয়ে যাবে।</p>\n<p class=\"graf graf--p\">এখন আমরা আমাদের ফাংশনটা <code class=\"markup--code markup--p-code\">true</code> আর্গুমেন্ট দিয়ে কল করলেঃ</p>\n<pre class=\"graf graf--pre\">aPromise(true);</pre>\n<p class=\"graf graf--p\">এরকম কিছু একটা আউটপুট দেখতে পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*7LM-E6CiJXpmEf5SJ0YCdw.png?resize=172%2C43&#038;ssl=1\" data-image-id=\"1*7LM-E6CiJXpmEf5SJ0YCdw.png\" data-width=\"172\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">প্রমিস হ্যান্ডল করাঃ</strong></p>\n<p class=\"graf graf--p\">এখন আমরা প্রমিস সফল বা ব্যর্থ হয়েছে কিনা সেটা হ্যান্ডল করবো। সেক্ষেত্রে যদি প্রমিস সফল হয় তাহলে আমাদের <code class=\"markup--code markup--p-code\">aPromise</code> ফাংশনের সাথে <code class=\"markup--code markup--p-code\">.then()</code> চেইন করে এখানে একটা কলব্যাক ফাংশন দিতে পারবো, যেটা প্রমিসে সফল বা অন্যকথায় <code class=\"markup--code markup--p-code\">resolve</code> হলে রান হবেঃ</p>\n<pre class=\"graf graf--pre\">aPromise(true)\r\n  .then(() =&gt; {\r\n     console.log('This is a Success');\r\n  })</pre>\n<p class=\"graf graf--p\">এটা তিন সেকেন্ড পরে <code class=\"markup--code markup--p-code\">true</code> আর্গুমেন্ট হিসেবে দেওয়ায় প্রমিস <code class=\"markup--code markup--p-code\">resolve</code> হয়ে আমাদের কলব্যাক রান করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*gHcIFAp9cpg_aD1ZV0lbiA.png?resize=285%2C102&#038;ssl=1\" data-image-id=\"1*gHcIFAp9cpg_aD1ZV0lbiA.png\" data-width=\"285\" data-height=\"102\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">আর যদি প্রমিস রিজেক্ট হয় তাহলে আমাদের সেটা আরেকটা চেইন অপারেশন <code class=\"markup--code markup--p-code\">.catch()</code> এর মধ্যে কলব্যাক ফাংশন দিয়ে হ্যান্ডল করতে হবে। এখন আমরা কিন্তু জানিনা যে অপারেশন সফল না ব্যর্থ হবে। সেক্ষেত্রে আমাদের <code class=\"markup--code markup--p-code\">.then()</code> আর <code class=\"markup--code markup--p-code\">.catch()</code> দুইটাই রাখতে হবে। <code class=\"markup--code markup--p-code\">.catch()</code> রান করবে কোনো কারণে যদি আমাদের প্রমিস <code class=\"markup--code markup--p-code\">reject</code> হয়ঃ</p>\n<pre class=\"graf graf--pre\">aPromise(false)\r\n  .then(() =&gt; {\r\n     console.log('This is a Success');\r\n  })\r\n  .catch(() =&gt; {\r\n     console.log('This is a Failure');\r\n  })</pre>\n<p class=\"graf graf--p\">এখানে যেহেতু আর্গুমেন্ট এ <code class=\"markup--code markup--p-code\">false</code> দিয়েছি, তাই প্রমিস থেকে <code class=\"markup--code markup--p-code\">reject</code> হবে। আর তাই ৩ সেকেন্ড পরে অপারেশন শেষ হয়ে <code class=\"markup--code markup--p-code\">catch</code> ব্লকের ভিতরের কলব্যাক রান করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*aCMQ6AwNVWV60VgYG-SzJA.png?resize=285%2C142&#038;ssl=1\" data-image-id=\"1*aCMQ6AwNVWV60VgYG-SzJA.png\" data-width=\"285\" data-height=\"142\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে প্রথমে আমরা যে <code class=\"markup--code markup--p-code\">aPromise</code> ফাংশন দিয়ে প্রমিস রিটার্ণ করলাম, সেই প্রমিস তৈরী করার পার্টটা বেশীরভাগ ক্ষেত্রেই আমাদের লেখা লাগে না। বরং আমরা যে সিস্টেম ব্যবহার করে ডাটা আদান-প্রদান করি, বা লাইব্রেরী ব্যবহার করি সেগুলোতেই এই অংশটা কোড করা থাকে কখন কিভাবে প্রমিস <code class=\"markup--code markup--p-code\">resolve</code> করবে নাকি <code class=\"markup--code markup--p-code\">reject</code> করবে এসব। আমাদের বেশীর ভাগ ক্ষেত্রে রিটার্ণ হওয়া প্রমিস <code class=\"markup--code markup--p-code\">.then()</code> আর <code class=\"markup--code markup--p-code\">.catch()</code> দিয়েই হ্যান্ডল করতে হয়। আবার ভিতরে যে কলব্যাক গুলো ব্যবহার করা হয়, সেসব কলব্যাকে বেশীরভাগ ক্ষেত্রে আমাদের রিমোট সার্ভার থেকে যে ডাটা চাই, সেগুলো আর্গুমেন্ট হিসেবে আসে। আমরা কলব্যাকের ভিতর থেকে সেই আর্গুমেন্ট এর সাহায্যে সেগুলো অ্যাক্সেস করতে পারি। যেমন আগের প্রমিসটা একটু মডিফাই করলে, আমরা চাইলে <code class=\"markup--code markup--p-code\">resolve()</code> বা <code class=\"markup--code markup--p-code\">reject()</code> থেকে ডাটা পাঠাতে পারিঃ</p>\n<pre class=\"graf graf--pre\">const aPromiseWithData = control =&gt; { \r\n   return new Promise((resolve, reject) =&gt; {\r\n      setTimeout(() =&gt; {\r\n         if(control) {\r\n            resolve('Simple Success Data');\r\n         } else {\r\n            reject('Simple Error Data');\r\n         }\r\n      }, 3000)\r\n   })\r\n}</pre>\n<p class=\"graf graf--p\">এখানে <code class=\"markup--code markup--p-code\">resolve()</code> বা <code class=\"markup--code markup--p-code\">reject()</code> থেকে ঠিক যেভাবে ডাটাগুলো পাঠানো হয়েছে সেভাবেই আমরা <code class=\"markup--code markup--p-code\">.then()</code> বা <code class=\"markup--code markup--p-code\">.catch()</code> এর কলব্যাক থেকে অ্যাক্সেস করতে পারবো আর্গুমেন্ট হিসেবে অ্যাক্সেপ্ট করেঃ</p>\n<pre class=\"graf graf--pre\">aPromiseWithData(true)\r\n  .then((data) =&gt; {\r\n     console.log(data);\r\n  })</pre>\n<p class=\"graf graf--p\">দেখুন এই ডাটা আমাদের প্রমিস থেকে এসেছে, তারপর এখানে <code class=\"markup--code markup--p-code\">resolve()</code> হয়ে <code class=\"markup--code markup--p-code\">.then()</code> এর কলব্যাকে আর্গুমেন্ট হিসেবে এসেছে, যেটা আমরা পরে অ্যাক্সেস করে প্রিন্ট করতে পেরেছিঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*95TvbHuqsSf8js4TpBtdpA.png?resize=190%2C98&#038;ssl=1\" data-image-id=\"1*95TvbHuqsSf8js4TpBtdpA.png\" data-width=\"190\" data-height=\"98\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">একইভাবে প্রমিস <code class=\"markup--code markup--p-code\">reject</code> হলেওঃ</p>\n<pre class=\"graf graf--pre\">aPromiseWithData(false)\r\n  .then((data) =&gt; {\r\n     console.log(data);\r\n  })\r\n  .catch((err) =&gt; {\r\n     console.log(err);\r\n   })</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*7JNivMt_-5YKz-BkXDSyHQ.png?resize=186%2C147&#038;ssl=1\" data-image-id=\"1*7JNivMt_-5YKz-BkXDSyHQ.png\" data-width=\"186\" data-height=\"147\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">একাধিক প্রমিস হ্যান্ডল করাঃ </strong>এরকম কোনো কোনো সময় আমাদের একাধিক প্রমসিও হ্যান্ডল করতে হতে পারে। যেমন ধরি আমাদের দুইটা প্রমিস আছেঃ</p>\n<pre class=\"graf graf--pre\">const promise1 = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         resolve('Promise 1 Resolved');\r\n      } else {\r\n         reject('Promise 1 Error');\r\n      }\r\n   }, 5000)\r\n })</pre>\n<p class=\"graf graf--p\">আমরা এভাবেও সরাসরি প্রমিস তৈরী করতে পারি। নিচে আরেকটা প্রমিস তৈরী করলামঃ</p>\n<pre class=\"graf graf--pre\">const promise2 = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         resolve('Promise 2 Resolved');\r\n      } else {\r\n         reject('Promise 2 Error');\r\n      }\r\n   }, 5000)\r\n})</pre>\n<p class=\"graf graf--p\">এখন এই দুইটা প্রমিস কমপ্লিট হওয়ার পর কোনো অপারেশন চালাতে চাইলে আমরা দুইটা প্রমিসকে অ্যারে আকারে এভাবে নিতে পারিঃ</p>\n<pre class=\"graf graf--pre\">Promise.all([promise1, promise2]);</pre>\n<p class=\"graf graf--p\">তারপর <code class=\"markup--code markup--p-code\">.then()</code> দিয়ে কলব্যাক কল করতে পারবো যেটা এই দুইটা প্রমিস কমপ্লিট হলে পরেই রান করবে। আর এই প্রমিসগুলো থেকে আসা ডাটাগুলো এই কলব্যাক ফাংশনে অ্যারে আকারে আসবেঃ</p>\n<pre class=\"graf graf--pre\">Promise.all([promise1, promise2]).then((dataArr) =&gt; {\r\n   console.log(dataArr);\r\n})</pre>\n<p class=\"graf graf--p\">ব্যাস এবার setTimeout এর টাইম শেষ হয়ে গেলে আপনার প্রমিসের ফলাফল দেখতে পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*SmYW9ec6VaRaHOTVvGSd4w.png?resize=389%2C75&#038;ssl=1\" data-image-id=\"1*SmYW9ec6VaRaHOTVvGSd4w.png\" data-width=\"389\" data-height=\"75\" data-recalc-dims=\"1\" /></figure>\n<h4 class=\"graf graf--h4\">fetch() অ্যাপিআইঃ</h4>\n<p class=\"graf graf--p\">এখন আমরা সত্যিকারের রিমোট সার্ভার থেকে ডাটা এনে সেটা নিয়ে কাজ করবো, এজন্যে আমরা ব্রাউজারের <code class=\"markup--code markup--p-code\">fetch()</code> অ্যাপিআই ব্যবহার করবো। এই অ্যাপিআই এর কাজ হচ্ছে বাইরের রিমোট কোনো সার্ভার থেকে রিসোর্স আনা। এই অংশটা নোড জেএস এ ঠিক সরাসরি কাজ করবে না। যদিও নোড জেএস এ চাইতেও আরো ভালো ভালো লাইব্রেরী আছে, তবে এটা যেহেটু মডার্ণ ব্রাউজারগুলোতে বিল্ট-ইন ভাবেই আছে, তাই আমরা এখানে এটাই ব্যবহার করবো। এখন এই <code class=\"markup--code markup--p-code\">fetch()</code> অ্যাপিআই নিজে নিজেই প্রমিস রিটার্ণ করার প্রসেসটা হ্যান্ডেল করে। আমাদের জাস্ট রিটার্ণ হওয়া প্রমিসটা হ্যান্ডেল করতে হবে। আমরা একটা একটা একটা রিমোট সার্ভার থেকে ফেইক কিছু ডাটা সত্যিকারেরই আনবোঃ</p>\n<pre class=\"graf graf--pre\">const dataFromRemote = fetch('https://jsonplaceholder.typicode.com/posts');</pre>\n<p class=\"graf graf--p\"><a class=\"markup--anchor markup--p-anchor\" href=\"https://jsonplaceholder.typicode.com/posts\" target=\"_blank\" rel=\"noopener\" data-href=\"https://jsonplaceholder.typicode.com/posts\">এই লিঙ্কটা</a> ওপেন করলে কিছু ডাটা দেখতে পাবেন। এগুলো মূলত জেসন(JSON) ডাটা। যাই হউক, এই কোড রান করলে ব্রাউজারের কন্সোলে এই ডাটাগুলো ফেচ হয়ে <code class=\"markup--code markup--p-code\">dataFromRemote</code> নামক একটা ভ্যারিয়েবলে স্টোর হবে। এখন আমার কথামতো ফেচ অ্যাপিআই প্রমিস রিটার্ণ করার কথা। তাহলে এখানে <code class=\"markup--code markup--p-code\">dataFromRemote</code> নিশ্চই প্রমিস হবেঃ</p>\n<pre class=\"graf graf--pre\">console.log(<code class=\"markup--code markup--pre-code\">dataFromRemote</code>);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*CKcM9lhTCmQ3PeAJ_UQhhw.png?resize=526%2C75&#038;ssl=1\" data-image-id=\"1*CKcM9lhTCmQ3PeAJ_UQhhw.png\" data-width=\"526\" data-height=\"75\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">হ্যা! এটা প্রমিসই। এখন আমরা এটাকে সহজেই <code class=\"markup--code markup--p-code\">.then()</code> <code class=\"markup--code markup--p-code\">.catch</code> দিয়ে সহজেই হ্যান্ডল করতে পারবো। আর এই ফেচ অ্যাপিআই ফেচ করা ডাটাগুলো <code class=\"markup--code markup--p-code\">.then</code> এর কলব্যাকে আর্গুমেন্ট হিসেবে পাস করে। আর কোনো এরর হলে <code class=\"markup--code markup--p-code\">.catch</code> এর কলব্যাকে আর্গুমেন্ট হিসেবে পাস করেঃ</p>\n<pre class=\"graf graf--pre\">dataFromRemote.then((data) =&gt; {\r\n   console.log(data);\r\n})</pre>\n<p class=\"graf graf--p\">এখন এখানে <code class=\"markup--code markup--p-code\">data</code> তে কিছু ডাটা দেখতে পারবেন। এগুলোই আপনার প্রমিস <code class=\"markup--code markup--p-code\">resolve</code> হওয়ার কারণে সাক্সেস টাইপের কিছু ডাটাঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*UPTitYi9ENJTPMlehR1cDQ.png?resize=767%2C85&#038;ssl=1\" data-image-id=\"1*UPTitYi9ENJTPMlehR1cDQ.png\" data-width=\"827\" data-height=\"92\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন ফেচ অ্যাপিআই এর জটিল স্ট্রাকচারের কারণে মূল যে ডাটা ফেচ করেছি সেটা এখানে না থাকলেও এটা মূলত আমাদের প্রমিস <code class=\"markup--code markup--p-code\">resolve</code> হওয়ার পরের ডাটাই এখানে দেখাচ্ছে। তবে সমস্যা নাই, ফেচ অ্যাপিআই থেকে ভালো ভালো আরো অনেক লাইব্রেরী আছে যেগুলোই আসলে আমরা আমাদের ডেভেলপমেন্ট এ সবচেয়ে বেশী ব্যবহার করবো। এখন যদি কোনো কারণে আমরা একটা ভুলভাল রিকোয়েস্ট পাঠাই ফেচ অ্যাপিআই দিয়েঃ</p>\n<pre class=\"graf graf--pre\">const dataFromRemoteFailed = fetch('https://jsonplaceholderdoesntexist.typicode.com/posts');</pre>\n<p class=\"graf graf--p\">আপনি যদিও আপনার কন্সোলে প্রমিস রিজেক্ট হওয়ার ম্যাসেজ পাবেন। তবে আসল ম্যাসেজ আপনি <code class=\"markup--code markup--p-code\">.catch()</code> থেকে পাবেন যেখানে আপনি এই এররটাকে হ্যান্ডল করতে পারবেনঃ</p>\n<pre class=\"graf graf--pre\">dataFromRemoteFailed.then((data) =&gt; {\r\n   console.log(data);\r\n}).catch((err) =&gt; {\r\n   console.log('Your Error:', err);\r\n})</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*sYAZEeE5sddY_gMsNc98mw.png?resize=288%2C116&#038;ssl=1\" data-image-id=\"1*sYAZEeE5sddY_gMsNc98mw.png\" data-width=\"288\" data-height=\"116\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন আমাদের প্রমিস <code class=\"markup--code markup--p-code\">resolve</code> হয়ে গেলে কিন্তু <code class=\"markup--code markup--p-code\">catch</code> ব্লকের কোনো দরকারই পড়ে না। কিন্তু এটাও মোটেও ভালো প্র্যাক্টিস না যে আপনি <code class=\"markup--code markup--p-code\">catch</code> ব্লক না রেখেই আপনার অ্যাপ্লিকেশনে সব প্রমিস হ্যান্ডল করে ফেললেন। এরর হতেই পারে, যেকোনো কারণেই হতে পারে। আর সেজন্যে এই <code class=\"markup--code markup--p-code\">catch</code> ব্লক রেখে সেটাকে হ্যান্ডল করাটাই ভালো প্র্যাক্টিসের মধ্যে পড়ে।</p>\n<h4 class=\"graf graf--h4\">আসল ডাটা উদ্ধার করাঃ</h4>\n<p class=\"graf graf--p\">একটু আগে আমরা অন্য এক জায়গা থেকে ডাটা ফেচ করার জন্যে ফেচ অ্যাপিআই দিয়ে রিকোয়েস্ট করলাম, কিন্তু আসল ডাটা এখনো আমরা দেখিনাই। এটার কারণ ফেচ অ্যাপিআইয়ের জটিল স্ট্রাকচারের জন্যে। তবে যাই হউক একটা জিনিস ভালো হয়েছে যে এখন আমরা দেখবো কিভাবে আসল ডাটা উদ্ধার করা যায় এখান থেকে, আর সেই সাথে আমরা নতুন আরেকটা সমস্যার সাথে পরিচয় করিয়ে দিবো এখানেই। আমরা আমাদের ডাটাগুলো অ্যাক্সেস করবোঃ</p>\n<pre class=\"graf graf--pre\">fetch('https://jsonplaceholder.typicode.com/posts')\r\n   .then((data) =&gt; {\r\n      return data.json();\r\n   }).then((posts) =&gt; {\r\n      console.log(posts);\r\n})</pre>\n<p class=\"graf graf--p\">এখানে আমাদের <a class=\"markup--anchor markup--p-anchor\" href=\"https://jsonplaceholder.typicode.com/posts\" target=\"_blank\" rel=\"noopener\" data-href=\"https://jsonplaceholder.typicode.com/posts\">এই লিঙ্কে</a> থাকা ১০০ টা অ্যারেসহ সব ডাটা চলে আসবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*tQ9UXomOV1d8NQJ6QZ5zOA.png?resize=390%2C179&#038;ssl=1\" data-image-id=\"1*tQ9UXomOV1d8NQJ6QZ5zOA.png\" data-width=\"390\" data-height=\"179\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n</section>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d9cbd4a2fe07-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d9cbd4a2fe07-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণ সম্পর্কে আমরা জানি। রিমোট কোনো সার্ভার থেকে বা একটু সময় লাগে এমন কোনো অপারেশন শেষ করার জন্যে জাভাস্ক্রিপ্ট অপেক্ষা না করে বরং পরের অপারেশনে চলে যায়। এধরনের অপারেশন হচ্ছে অ্যাসিনক্রোনাস অপারেশন। এখন এই অপারেশন ফেলে অন্য অপারেশনে চলে গেলেও জাভাস্ক্রিপ্ট ঠিকই এটাকেও ট্র্যাক করে রাখে। আর এইজন্যেই জাভাস্ক্রিপ্ট প্রমিস(Promise) ব্যবহার করে। [&hellip;]</p>\n","protected":false},"author":1,"featured_media":576,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,94,108,168,78,86,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/612"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=612"}],"version-history":[{"count":4,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/612/revisions"}],"predecessor-version":[{"id":629,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/612/revisions/629"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/576"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=612"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=612"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=612"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}