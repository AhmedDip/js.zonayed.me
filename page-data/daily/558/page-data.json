{"componentChunkName":"component---src-templates-post-page-js","path":"/daily/558","webpackCompilationHash":"6780da8aa55bacfef1d9","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":558,"date":"2018-08-23T13:32:10","date_gmt":"2018-08-23T13:32:10","guid":{"rendered":"https://with.zonayed.me/?p=558"},"modified":"2018-08-23T13:32:10","modified_gmt":"2018-08-23T13:32:10","slug":"%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-3","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-3/","title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">আমরা <a class=\"markup--anchor markup--p-anchor\" href=\"https://js.zonayed.me/#/js-daily/255\" target=\"_blank\" rel=\"noopener\" data-href=\"https://js.zonayed.me/#/js-daily/255\">আগের পর্বে</a> অ্যারের তিনটা মেথড <code class=\"markup--code markup--p-code\">map()</code>, <code class=\"markup--code markup--p-code\">filter()</code> আর <code class=\"markup--code markup--p-code\">reduce()</code> এর ব্যবহার দেখেছিলাম। অ্যারেতে সাধারণত একাধিক ডাটা থাকে। এখন সেই ডাটাগুলো থেকে বেছে বেছে আমাদের প্রয়োজমতো কিছু ডাটা বের করার জন্যে বা প্রয়োজনমতো এগুলোর উপর কোনো অপারেশন চালানোর জন্যে অ্যারেতে বেশ কিছু হ্যান্ডি মেথড রয়েছে। ঠিক আগের সেই ম্যাপ, ফিল্টার, রিডিউস মেথডের মতোই আরো দুইটা কাজের মেথড রয়েছে। এরা হচ্ছে <code class=\"markup--code markup--p-code\">some()</code> ও <code class=\"markup--code markup--p-code\">every()</code> নামের সাথে এদের কাজেরও বেশ মিল আছে।</p>\n<p class=\"graf graf--p\">আমাদের এরকম কোনো পরিস্থিতি আসতে পারে যে একটা অ্যারের ভিতর কোনো নির্দিষ্ট ডাটা আছে কিনা সেটা খুঁজতে হতে পারে। ধরুন আমাদের একটা অ্যারে আছে এরকমঃ</p>\n<pre class=\"graf graf--pre\">const arr = [1, 2, 4, 5, 6, 7, 8];</pre>\n<p class=\"graf graf--p\">এখন আমরা জানতে চাচ্ছি এই অ্যারেতে <code class=\"markup--code markup--p-code\">7</code> আছে কিনা। অথবা অ্যারের ভিতরে থাকা প্রত্যেকটা ডাটা পরীক্ষা করে দেখতে হতে পারে এরা নির্দিষ্ট কিছু মেনে চলছে কিনা। সেক্ষেত্রে আমাদের এই দুইটা মেথড অনেক কাজে আসতে পারে।</p>\n<p class=\"graf graf--p\">মেথড দুইটাই দুইটা আর্গুমেন্ট অ্যাক্সেপ্ট করে। প্রথমটা একটা কলব্যাক ফাংশন আর দ্বিতীয়টা কলব্যাক ফাংশনের ভিতরে <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু ডিটারমাইন করা জন্যে। প্রথম আর্গুমেন্ট অর্থাৎ কলব্যাক ফাংশন অবশ্যই থাকা লাগবে। তবে <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু ডিটারমাইন করা আর্গুমেন্টটা অপশনাল। না দিলে <code class=\"markup--code markup--p-code\">this</code> বাই ডিফল্ট বিহ্যেইভই করবে। আর যদি চান পরিবর্তন করে দিতে তাহলে এখানে আপনি এই আর্গুমেন্টটা দিতে পারেন।</p>\n<pre class=\"graf graf--pre\">anArr.some(callback, thisArg);</pre>\n<pre class=\"graf graf--pre\">anArr.some(callback, thisArg)</pre>\n<p class=\"graf graf--p\">এখানে দ্বিতীয় আর্গুমেন্ট অর্থাৎ <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু কিভাবে সেট করতে হয় সেটা জানার জন্যে <a class=\"markup--anchor markup--p-anchor\" href=\"https://js.zonayed.me/#/js-daily/255\" target=\"_blank\" rel=\"noopener\" data-href=\"https://js.zonayed.me/#/js-daily/255\">আগের লেখাটা</a> দেখতে পারেন। তবে আমি এখানে মূলত এই দুইটা মেথড <code class=\"markup--code markup--p-code\">some()</code> আর <code class=\"markup--code markup--p-code\">every()</code> আসলে কি কাজ করে সেগুলোই দেখাবো।</p>\n<p class=\"graf graf--p\">এই <code class=\"markup--code markup--p-code\">some()</code> আর <code class=\"markup--code markup--p-code\">every()</code> সবসময় হয় সত্য <code class=\"markup--code markup--p-code\">true</code> বা মিথ্যা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করবে।</p>\n<h4 class=\"graf graf--h4\"><strong class=\"markup--strong markup--h4-strong\">some() মেথডঃ</strong></h4>\n<p class=\"graf graf--p\">এই মেথডটা ঠিক নামের মতোই। আমাদের একটা অ্যারে আছে, এখন এই অ্যারেতে কি কিছু ভ্যালু(এক বা একের অধিক) এরকম বা ওরকমভাবে আছে? এই প্রশ্নের উত্তরই দিবে এই <code class=\"markup--code markup--p-code\">some()</code></p>\n<p class=\"graf graf--p\">ধরুন আমাদের একটা অ্যারে আছেঃ</p>\n<pre class=\"graf graf--pre\">const anArrSome = ['hello', 1, 2, 3, 'Bangla', 5, 'world', 7, 8, 9];</pre>\n<p class=\"graf graf--p\">এখন এই অ্যারেতে কি নাম্বার <code class=\"markup--code markup--p-code\">9</code> আছে? দেখি তাহলে <code class=\"markup--code markup--p-code\">some()</code> দিয়েঃ</p>\n<pre class=\"graf graf--pre\">anArrSome.some(function(anElement) {\r\n   return anElement === 9\r\n})</pre>\n<p class=\"graf graf--p\">এটা রান করলে সত্য <code class=\"markup--code markup--p-code\">true</code> আসবে, কারণ আসলেই আমাদের এই অ্যারেতে নাম্বার <code class=\"markup--code markup--p-code\">9</code> আছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*Kbuvqp0jV924gGz3UjkKrQ.png?resize=302%2C78&#038;ssl=1\" data-image-id=\"1*Kbuvqp0jV924gGz3UjkKrQ.png\" data-width=\"302\" data-height=\"78\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন যদি নাম্বার <code class=\"markup--code markup--p-code\">10</code> আছে কিনা দেখিঃ</p>\n<pre class=\"graf graf--pre\">anArrSome.some(function(anElement) {\r\n   return anElement === 10\r\n})</pre>\n<p class=\"graf graf--p\">এটা মিথ্যা আসবে কারণ আমাদের এই অ্যারেতে <code class=\"markup--code markup--p-code\">10</code> নাইঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*mdGvdRUlxFArFTIUHGC3ww.png?resize=298%2C74&#038;ssl=1\" data-image-id=\"1*mdGvdRUlxFArFTIUHGC3ww.png\" data-width=\"298\" data-height=\"74\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এটাকে যদি আরো ব্যাখ্যা করে বলি, ভিতরের কলব্যাক ফাংশনটা অ্যারের প্রত্যেকটা আইটেমের উপর একবার একবার করে চলবে। কলব্যাক ফাংশন আবার তিনটা আর্গুমেন্ট অ্যাক্সেপ্ট করে। যথাক্রমেঃ প্রথম আর্গুমেন্ট অ্যারের বর্তমান আইটেম যেটার উপর কলব্যাক ফাংশনটা চলছে, তারপরের আর্গুমেন্ট সেটার ইন্ডেক্স নাম্বার, তারপরের আর্গুমেন্টটায় পুরো অ্যারেটাই অ্যাক্সেস পাবেন।</p>\n<pre class=\"graf graf--pre\">anArr.some(function(currentElement, index, theArray) {\r\n   //some codes\r\n   // return true or false\r\n});</pre>\n<p class=\"graf graf--p\">ইএস৬ সিনট্যাক্স ইউজ করলেঃ</p>\n<pre class=\"graf graf--pre\">anArr.some((currentElement, index, theArray) =&gt; {\r\n   //some codes\r\n   // return true or false\r\n});</pre>\n<p class=\"graf graf--p\">আমরা নিচের এই একটা উদাহরণ দিয়ে দেখতে পারি এখানে কোন আর্গুমেন্ট কোন কাজ করেঃ</p>\n<pre class=\"graf graf--pre\">anArrSome.some((currentElement, index, theArray) =&gt; {\r\n   console.log(currentElement);\r\n   console.log(index);\r\n   console.log(theArray);\r\n});</pre>\n<p class=\"graf graf--p\">প্রথমটা বর্তমান ইলিমেন্ট, দ্বিতীয়টায় ইন্ডেক্স নাম্বার আর শেষেরটায় পুরো অ্যারেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*2-SDCRHNo4i1tX4NVW8C8w.png?resize=459%2C428&#038;ssl=1\" data-image-id=\"1*2-SDCRHNo4i1tX4NVW8C8w.png\" data-width=\"459\" data-height=\"428\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন <code class=\"markup--code markup--p-code\">some()</code> এর আরেকটা ব্যাপার হলো, এটার যেহেতু জানার দরকার অন্তত একটা ইলিমেন্ট আমাদের শর্ত মানে কিনা, <code class=\"markup--code markup--p-code\">true</code> রিটার্ণ করতেছে কিনা, সেহেতু একবার কোনো শর্ত সত্য <code class=\"markup--code markup--p-code\">true</code> হয়ে গেলে এটা কাজ করা বন্ধ করে দেয়। পরের ইলিমেন্ট এ আর হাত দেয় না। নিচের উদাহরনটা দেখুনঃ</p>\n<pre class=\"graf graf--pre\">anArrSome.some(anElement =&gt; {\r\n   console.log(`Current Element: ${anElement}`);\r\n   return anElement === 1;\r\n})</pre>\n<p class=\"graf graf--p\">এটা রান করলে আউটপুট পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*gqIrFshCmJvG4q6sWiQMTQ.png?resize=410%2C130&#038;ssl=1\" data-image-id=\"1*gqIrFshCmJvG4q6sWiQMTQ.png\" data-width=\"410\" data-height=\"130\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">দেখেন প্রথমটা দেখলো, সেটা মিথ্যা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করেছে। তাই আবার পরেরটায় গেলো যেটা আসলে আমাদের কন্ডিশন/শর্ত মেনেছে, আর তাই এটা সত্য রিটার্ণ করেছে। ব্যাস এই মেথড এখন <code class=\"markup--code markup--p-code\">true</code> রিটার্ণ করে দিবে, আর চলবে না। আমরা আউটপুটেও ঠিক তেমনটাই দেখতে পাচ্ছি।</p>\n<p class=\"graf graf--p\">এখন আমরা একটা স্পেশাল স্টেটমেন্ট এর কথা জানি, সেটা হচ্ছে <code class=\"markup--code markup--p-code\">break</code> এর কাজ হচ্ছে কোনো লুপ চলতে থাকলে সেটাকে নির্দিষ্ট একটা কন্ডিশনে বন্ধ করে দেওয়া। যদি আপনি পরিচিত না থেকে থাকেন তাহলে নিচের এই উদাহরণটা দেখুনঃ</p>\n<pre class=\"graf graf--pre\">var anArr = [1, 2, 4, 5, 6, 7, 8, 9];</pre>\n<pre class=\"graf graf--pre\">for(var i = 0; i &lt; anArr.length; i++) {\r\n   console.log('Current Value: ' + anArr[i]);\r\n   if(anArr[i] === 5) {\r\n      break;\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এখানে আমরা একটা অ্যারের উপর লুপ চালাচ্ছি। এখন যদি আমাদের অ্যারের ইলিমেন্ট <code class=\"markup--code markup--p-code\">5</code> হয় তাহলে লুপ থেকে বেড়িয়ে যাবো। যার জন্যে আমরা কন্ডিশন ইউজ করে <code class=\"markup--code markup--p-code\">break</code> স্টেটমেন্ট দিয়েছি যে ঠিক <code class=\"markup--code markup--p-code\">5</code> আসলেই লুপ থেকে বের হয়ে যাবা। ব্যাস এভাবেই প্রোগ্রাম কাজ করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*jRAWtXXGxxmaqLhhOgm0QQ.png?resize=372%2C219&#038;ssl=1\" data-image-id=\"1*jRAWtXXGxxmaqLhhOgm0QQ.png\" data-width=\"372\" data-height=\"219\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এই <code class=\"markup--code markup--p-code\">break</code> স্টেটমেন্ট আপনি <code class=\"markup--code markup--p-code\">map()</code>, <code class=\"markup--code markup--p-code\">filter()</code>, <code class=\"markup--code markup--p-code\">reduce()</code>, <code class=\"markup--code markup--p-code\">some()</code> বা এরকম কোথাও ব্যবহার করতে পারবেন না। কিন্তু আপনার এরকম সময় আসতে পারে যখন এরকম লুপ বা এক্ষেত্রে ইটারেশন বন্ধ করা লাগতে পারে। তো এটা <code class=\"markup--code markup--p-code\">some()</code> মেথড দিয়েও আমরা একটু অন্যরকমভাবে করতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">anArr.some(anElement =&gt; {\r\n   console.log(`Current value: ${anElement}`);\r\n   return anElement === 5;\r\n})</pre>\n<p class=\"graf graf--p\">দেখুন এটাও ঠিক আমাদের উপরের লুপের মতোই যখনি <code class=\"markup--code markup--p-code\">5</code> পেয়েছে, ইটারেশন ব্রেক করে দিয়েছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*leD88pNbgrdlYzDj8_8HTA.png?resize=375%2C176&#038;ssl=1\" data-image-id=\"1*leD88pNbgrdlYzDj8_8HTA.png\" data-width=\"375\" data-height=\"176\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">তো এরকম বিশেষ কেসের ক্ষেত্রে এধরনের মেথড খুবই কাজের হতে পারে। আমরা এই মেথড অ্যারে অব অবজেক্ট এও কাজে লাগাতে পারি। ধরি আমাদের এরকম অবজেক্ট এর একটা অ্যারে আছেঃ</p>\n<pre class=\"graf graf--pre\">const objSome = [\r\n   {\r\n      name: 'Zawad Ahmed',\r\n      age: 1,\r\n      job: 'Child'\r\n   },{\r\n      name: 'Zobayer Ahmed',\r\n      age: 31,\r\n      job: 'Pharmacists'\r\n   },{\r\n      name: 'Zonayed Ahmed',\r\n      age: 21,\r\n      job: 'Student'\r\n   }\r\n]</pre>\n<p class=\"graf graf--p\">এখন ধরি আমরা পরীক্ষা করতে চাচ্ছি যে এখানে কিছু আইটেমের <code class=\"markup--code markup--p-code\">age</code> নামে কোনো প্রপার্টি আছে কিনাঃ</p>\n<pre class=\"graf graf--pre\">objSome.some(anObj =&gt; anObj.age)</pre>\n<p class=\"graf graf--p\">এটা সত্য রিটার্ণ করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*S4urWeAkXimAv385eVDzHw.png?resize=274%2C39&#038;ssl=1\" data-image-id=\"1*S4urWeAkXimAv385eVDzHw.png\" data-width=\"274\" data-height=\"39\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন আবার চাচ্ছি এখানে থাকা সবার ডাটার মধ্যে ১ বছরের কেউ আছে কিনাঃ</p>\n<pre class=\"graf graf--pre\">objSome.some(anObj =&gt; anObj.age === 1)</pre>\n<p class=\"graf graf--p\">এটাও সত্য রিটার্ন করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*jpQgnnNthxCLaMjQLwjAJA.png?resize=316%2C47&#038;ssl=1\" data-image-id=\"1*jpQgnnNthxCLaMjQLwjAJA.png\" data-width=\"316\" data-height=\"47\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন ধরি আবার চাচ্ছি এখানে টিচার আছে কিনা কেউঃ</p>\n<pre class=\"graf graf--pre\">objSome.some(anObj =&gt; anObj.job === 'Teacher')</pre>\n<p class=\"graf graf--p\">কিন্তু এখানে কোনো টিচার নাই, তাই মিথ্যা রিটার্ণ করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*WWHWlHNBot6OFkN6qJVPKg.png?resize=379%2C43&#038;ssl=1\" data-image-id=\"1*WWHWlHNBot6OFkN6qJVPKg.png\" data-width=\"379\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এভাবেই বিভিন্নরকমভাবে আপনি এই মেথড ইউজ করে আপনার ডেভেলপমেন্ট লাইফ আরো অনেক সহজ করে ফেলতে পারবেন।</p>\n<h4 class=\"graf graf--h4\">every() মেথডঃ</h4>\n<p class=\"graf graf--p\">এটাও ঠিক আগের মেথডগুলোর মতোই, তবে এক্ষেত্রে এটা পরীক্ষা করবে আপনার অ্যারের প্রত্যেকটা আইটেম আপনার দেওয়া শর্ত মেনে চলছে কিনা। যদি প্রত্যেকটা আইটেমই শর্ত মেনে চলে, তাহলেই একমাত্র এটা <code class=\"markup--code markup--p-code\">true</code> রিটার্ণ করবে। আর যদি একটা আইটেমও সেই শর্ত পূরণ না করে তাহলে এটা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করবে।</p>\n<p class=\"graf graf--p\">খুব বোকা টাইপের একটা উদাহরণ দিয়েই শুরু করি। ধরি আমাদের এমন একটা অ্যারে আছেঃ</p>\n<pre class=\"graf graf--pre\">const arrEvery = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];</pre>\n<p class=\"graf graf--p\">এখন এখানকার প্রত্যেকটা আইটেমই কি <code class=\"markup--code markup--p-code\">1</code></p>\n<pre class=\"graf graf--pre\">arrEvery.every(function(anItem) {\r\n   return anItem === 1;\r\n})</pre>\n<p class=\"graf graf--p\">এটা <code class=\"markup--code markup--p-code\">true</code> রিটার্ণ করবে, যেহেতু এখানে প্রত্যেকটা আইটেমই <code class=\"markup--code markup--p-code\">1</code></p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*L7MciicfBJTFnuxDRlLbYw.png?resize=302%2C77&#038;ssl=1\" data-image-id=\"1*L7MciicfBJTFnuxDRlLbYw.png\" data-width=\"302\" data-height=\"77\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">ইএস৬ সিনট্যাক্স এ লিখলেঃ</p>\n<pre class=\"graf graf--pre\">arrEvery.every(anItem =&gt; anItem === 1);</pre>\n<p class=\"graf graf--p\">এখন এখানে যদি একটা আইটেমও <code class=\"markup--code markup--p-code\">1</code> ছাড়া অন্যকিছু হতো তাহলে এটা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করতো। ধরি আমাদের দেখতে সেইম আরেকটা অ্যারে আছে, কিন্তু একটা আইটেম ভিন্নঃ</p>\n<pre class=\"graf graf--pre\">const arrDiffEvery = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2];</pre>\n<p class=\"graf graf--p\">এখন যদি দেখি এখানকার সবগুলো আইটেমই <code class=\"markup--code markup--p-code\">1</code> কিনাঃ</p>\n<pre class=\"graf graf--pre\">arrDiffEvery.every(anItem =&gt; anItem === 1);</pre>\n<p class=\"graf graf--p\">এটা সোজা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করবে যেহেতু এখানে সব আইটেম এক হলেও একটা আইটেম, শেষেরটা ভিন্নঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*ejemzA0ljfmoqIBDiGyngg.png?resize=361%2C47&#038;ssl=1\" data-image-id=\"1*ejemzA0ljfmoqIBDiGyngg.png\" data-width=\"361\" data-height=\"47\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এই মেথডও ঠিক আগেরগুলোর মতোই তিনটা আর্গুমেন্ট নেয়।</p>\n<pre class=\"graf graf--pre\">anArr.every((currentElement, index, theArray) {\r\n   // codes\r\n   // should return true or false\r\n})</pre>\n<p class=\"graf graf--p\">প্রথমটা অ্যারের যে ইলিমেন্ট এর উপর কলব্যাক চলছে সেটা, দ্বিতীয়টা অ্যারেতে তার ইন্ডেক্স নাম্বার এবং শেষেরটা পুরো অ্যারেঃ</p>\n<pre class=\"graf graf--pre\">arrDiffEvery.every((currentElement, index, theArray) =&gt; {\r\n   console.log(`Current Element: ${currentElement}`);\r\n   console.log(`Index: ${index}`);\r\n   console.log(`The Array: ${theArray}`);\r\n   return true;\r\n});</pre>\n<p class=\"graf graf--p\">দেখুন এটা কোন আর্গুমেন্ট এ কি প্রিন্ট করছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*949P1UXd_1RezZvD5OMmiw.png?resize=470%2C414&#038;ssl=1\" data-image-id=\"1*949P1UXd_1RezZvD5OMmiw.png\" data-width=\"470\" data-height=\"414\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এই <code class=\"markup--code markup--p-code\">every()</code> ও ঠিক <code class=\"markup--code markup--p-code\">some()</code> এর মতোই, যেহেতু এখানে কোনো একটা শর্ত<code class=\"markup--code markup--p-code\">false</code> হলেই পুরোটা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করবে। তাই যখনি এমন কোনো শর্ত আসে যেটা <code class=\"markup--code markup--p-code\">false</code> , তখনি এই ইটারেশন বন্ধ হয়ে যায়। ধরি নিচে আমাদের আরেকটা অ্যারে আছেঃ</p>\n<pre class=\"graf graf--pre\">const anNumberArrEvery = [1, 1, 1, 3, 4, 5, 6, 7, 8, 9];</pre>\n<p class=\"graf graf--p\">এখন দেখবো এখানে সব ইলিমেন্ট <code class=\"markup--code markup--p-code\">1</code> কিনাঃ</p>\n<pre class=\"graf graf--pre\">anNumberArrEvery.every(anElement =&gt; {\r\n   console.log(`${anElement} is printed`);\r\n   return anElement === 1;\r\n})</pre>\n<p class=\"graf graf--p\">এখন এটা রান করলে দেখবেন ঠিক যখনি এটা <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করছে, তখনি এটা বন্ধ হয়ে গেছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*vqu0H3PDzecwOOrqi0btng.png?resize=357%2C134&#038;ssl=1\" data-image-id=\"1*vqu0H3PDzecwOOrqi0btng.png\" data-width=\"357\" data-height=\"134\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">তো সেইমভাবে আমরা এখানে ব্রেক স্টেমটমেন্টও ব্যবহার করতে পারবো। আবার এই মেথড আরো নানান কাজে লাগাতে পারবো। যেমন আমরা এখন দেখতে চাচ্ছি আমাদের উপরের অ্যারের সব আইটেম নাম্বার কিনাঃ</p>\n<pre class=\"graf graf--pre\">anNumberArrEvery.every(anElement =&gt; typeof anElement === 'number');</pre>\n<p class=\"graf graf--p\">এটা <code class=\"markup--code markup--p-code\">true</code> রিটার্ণ করবে যেহেতু এই অ্যারের সবগুলো আইটেমই নাম্বারঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*opTum1nxB9n-dERCSZmOYw.png?resize=526%2C43&#038;ssl=1\" data-image-id=\"1*opTum1nxB9n-dERCSZmOYw.png\" data-width=\"526\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এভাবে আরো অনেকরকমভাবে এই মেথড ইউজ করা যাবে। যেমন আমরা অবজেক্টেও ইউজ করতে পারি। ধরি আমাদের নিচে এরকম একটা অবজেক্ট এর অ্যারে আছেঃ</p>\n<pre class=\"graf graf--pre\">const objEvery = [\r\n   {\r\n      name: 'Zawad Ahmed',\r\n      job: 'Child'\r\n   },{\r\n      name: 'Zobayer Ahmed',\r\n      age: 31,\r\n      job: 'Pharmacists'\r\n   },{\r\n      name: 'Zonayed Ahmed',\r\n      age: 21,\r\n      job: 'Student'\r\n   }\r\n]</pre>\n<p class=\"graf graf--p\">এখন আমরা জানতে চাচ্ছি এখানে থাকে প্রত্যেকটা অবজেক্ট এর <code class=\"markup--code markup--p-code\">name</code> প্রপার্টি আছে কিনাঃ</p>\n<pre class=\"graf graf--pre\">objEvery.every(anObj =&gt; anObj.name);</pre>\n<p class=\"graf graf--p\">এটা সত্য রিটার্ন করবে, যেহেতু এখানকার সবগুলো অবজেক্ট এর এই name নামের প্রপার্টি আছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*A1-Em3JeBmyYhSAw6Sr8Eg.png?resize=315%2C43&#038;ssl=1\" data-image-id=\"1*A1-Em3JeBmyYhSAw6Sr8Eg.png\" data-width=\"315\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন আবার যদি এখানে দেখতে চাই সব অবজেক্ট এর <code class=\"markup--code markup--p-code\">age</code> প্রপার্টি আছে কিনাঃ</p>\n<pre class=\"graf graf--pre\">objEvery.every(anObj =&gt; anObj.age);</pre>\n<p class=\"graf graf--p\">এটা দেখবেন <code class=\"markup--code markup--p-code\">false</code> রিটার্ণ করবে, যেহেতু এখানে একটা অবজেক্ট এর <code class=\"markup--code markup--p-code\">age</code> প্রপার্টি নাইঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*rvHGdhqFbXRFkvWPf4rSbw.png?resize=295%2C43&#038;ssl=1\" data-image-id=\"1*rvHGdhqFbXRFkvWPf4rSbw.png\" data-width=\"295\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">একইভাবে এই দুইটা মেথড আরো অনেক কাজে ব্যবহার করা যেতে পারে। সোজা কথায় এরা আপনাকে অনেক বড় হেল্প করতে পারবে যদি আপনি ঠিকমতো এদেরকে ব্যবহার করতে পারেন।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d7fac369ce09-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d7fac369ce09-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>আমরা আগের পর্বে অ্যারের তিনটা মেথড map(), filter() আর reduce() এর ব্যবহার দেখেছিলাম। অ্যারেতে সাধারণত একাধিক ডাটা থাকে। এখন সেই ডাটাগুলো থেকে বেছে বেছে আমাদের প্রয়োজমতো কিছু ডাটা বের করার জন্যে বা প্রয়োজনমতো এগুলোর উপর কোনো অপারেশন চালানোর জন্যে অ্যারেতে বেশ কিছু হ্যান্ডি মেথড রয়েছে। ঠিক আগের সেই ম্যাপ, ফিল্টার, রিডিউস মেথডের মতোই আরো দুইটা [&hellip;]</p>\n","protected":false},"author":1,"featured_media":557,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[94,108,168,78,86,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/558"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=558"}],"version-history":[{"count":1,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/558/revisions"}],"predecessor-version":[{"id":559,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/558/revisions/559"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/557"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=558"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=558"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=558"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}