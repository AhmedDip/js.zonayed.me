{"componentChunkName":"component---src-templates-post-page-js","path":"/basic/post-15","webpackCompilationHash":"3ad146e731814935325b","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"id":15,"data":{"language":"বাংলা","tags":["coding","JavaScript ","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-05-28T16:41:46.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>স্কোপিং(Scoping) জাভাস্ক্রিপ্ট এ আরেকটা গুরুত্বপূর্ন বিষয়। আপনাকে জানতে হবে আপনার ডিক্লেয়ারকৃত ভ্যারিয়েবল/ফাংশন আপনি কোথায় কোথায় অ্যাক্সেস করতে পারবেন বা কোথায় কোথায় ইউজ করতে পারবেন। কোনো ভ্যারিয়েবল বা ফাংশন প্রাইভেট করতে চাইলে বা কোনো ভ্যারিয়েবলকে সব জায়গা থেকে অ্যাক্সেস করতে চাইলে কিভাবে বা কোথায় সেটাকে ডিক্লেয়ার করতে হবে এসবকিছুই স্কোপিং এর ভিতরে আলোচনা করবো।</p>\n<p>জাভাস্ক্রিপ্ট এ প্রধানত দুই ধরনের স্কোপিং হয়ে থাকেঃ</p>\n<p>১। লোকাল(Local) স্কোপ</p>\n<p>২। গ্লোবাল(Global) স্কোপ</p>\n<p>স্কোপিং এ প্রধান আলোচ্য বিষয়গুলো হচ্ছেঃ</p>\n<ul>\n<li>কোথায় কোথায় আপনি আপনার ভ্যারিয়েবল বা ফাংশনকে অ্যাক্সেস করতে পারবেন</li>\n<li>প্রত্যেকটা নতুন ফাংশন একটা স্কোপ তৈরী করে</li>\n<li>লেক্সিকাল স্কোপিং(Lexical Scoping) এ প্যারেন্ট-চাইল্ড রিলেশন</li>\n<li>একটা ফাংশনে ডিক্লেয়ারকৃত ভ্যারিয়েবল আরেকটা ফাংশনে যেতে পারবে না, মানে অ্যাক্সেস করতে পারবেন না।</li>\n</ul>\n<p><strong>১। লোকাল(Local) স্কোপঃ</strong> সাধারণত ফাংশনের ভিতরে ডিক্লেয়ারকৃত ভ্যারিয়েবলগুলো ঐ ফাংশনের লোকাল ভ্যারিয়েবল। এধরনের ভ্যারিয়েবলগুলোর স্কোপ হচ্ছে লোকাল স্কোপ, অর্থাৎ এই ভ্যারিয়েবলটা শুধুমাত্র ডিক্লেয়ারকৃত ফাংশনের ভিতরেই অ্যাক্সেস করা যাবে। এর বাইরে বা অন্যকোনো ফাংশনে অ্যাক্সেস করা যাবে না।</p>\n<pre><code>function localScope() {\n   var local = 'I am local to my own function';\n   console.log(local);\n}\n</code></pre>\n<p>এটা কল করলে ঠিকঠাক আউটপুট দেখাবেঃ</p>\n<pre><code>localScope();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*9E7wEZGWnsAV0jP2GbKm_Q.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি আমরা এই <code>local</code> ভ্যারিয়েবলটাকে এই <code>localScope()</code> এর বাইরে কোথাও বা অন্য কোনো ফাংশনেও অ্যাক্সেস করতে চাই, তাহলে সেটা অ্যাক্সেস করা যাবে না এবং এক্ষেত্রে রিয়েল এরর পাবেন।</p>\n<pre><code>function localScope() {\n   var local = 'I am local to my own function';\n   console.log(local);\n}\n\nlocalScope();\n\nconsole.log(local);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Nn_7CJ3Ho0p7WjECvt_Cgg.png\" alt=\"\" /></p>\n<p><strong>২। গ্লোবাল(Global) স্কোপঃ</strong> ভ্যারিয়েবল যদি কোনো ফাংশনের ভিতরে ডিক্লেয়ার না করা হয় তাহলে সেটা গ্লোবাল স্কোপে ডিক্লেয়ারকৃত ভ্যারিয়েবল, মানে ফাংশনের বাইরে যেকোনো জায়গায় ডিক্লেয়ার করা ভ্যারিয়েবলই গ্লোবাল স্কোপ পাবে। এদেরকে গ্লোবাল ভ্যারিয়েবলও বলা হয়। গ্লোবাল ভ্যারিয়েবল যেকোনো ফাংশনের ভিতরে বা যেকোনো জায়গা থেকেই অ্যাক্সেস করতে পারবেন</p>\n<pre><code>var globalVar = 'I am a Global Variable';\n\nfunction globalScope() {\n   console.log('Inside a Function: ' + globalVar);\n}\n\nglobalScope();\n\nconsole.log('Outside: ' + globalVar);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*94OfU9C4CuyQ9q7V6u7VNQ.png\" alt=\"\" /></p>\n<p>এখন স্কোপিং এর এই আইডিয়া যেমন ভ্যারিয়েবলের ক্ষেত্রে প্রযোজ্য, তেমনি ফাংশন এবং অবজেক্ট এর ক্ষেত্রেও প্রযোজ্য।</p>\n<p>এর মানে আপনি গ্লোবাল স্কোপে কোনো ফাংশন ডিক্লেয়ার করলে সেটা গ্লোবালি যেকোনো জায়গা থেকেই অ্যাক্সেস করতে পারবেন। উপরে উল্লেখিত সবগুলো উদাহরণে ব্যবহৃত ফাংশনগুলো গ্লোবাল স্কোপে ডিক্লেয়ার করা।</p>\n<pre><code>function globalFunc() {\n   console.log('Global Function');\n}\n</code></pre>\n<p>এখন এই ফাংশনকে কল করলে ঠিকঠাকভাবে কাজ করবেঃ</p>\n<pre><code>globalFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ctlZs7SH-MJj09Y5MfXRag.png\" alt=\"\" /></p>\n<p>সেইমভাবে আপনি যদি কোনো ফাংশনের ভিতরে আরেকটা ফাংশন ডিক্লেয়ার করেন তাহলে ফাংশনের ভিতরে ডিক্লেয়ারকৃত ফাংশনটা উক্ত ফাংশনের লোকাল স্কোপ পাবে। এবং এই ফাংশন শুধুমাত্র ঐ ফাংশনের ভিতরেই কল করতে পারবেন। বাইরে এর স্কোপ না থাকায় কল করতে পারবেন না।</p>\n<pre><code>function anoGlobalFunc() {\n   console.log('Global Function');\n   function localFunc() {\n      console.log('Local Function');\n   }\n   localFunc();\n}\n</code></pre>\n<p>লক্ষ্য করুন আমি লোকাল ফাংশন <code>localFunc()</code> ঐ ফাংশনের ভিতরেই কল করেছি, কারণ এখানেই এটার স্কোপ আছে। এখন গ্লোবাল ফাংশন <code>anoGlobalFunc()</code> কল করলে দুইটাই এক্সিকিউট হবে।</p>\n<pre><code>anoGlobalFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ClOMruz-YwhPW43icbxVug.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি এই লোকাল ফাংশন <code>localFunc()</code> আমি <code>anoGlobalFunc()</code> এর বাইরে কল করি তাহলে সেটা এরর দেখাবেঃ</p>\n<pre><code>localFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LZfPG5NxRFd2XuT4qEFsgQ.png\" alt=\"\" /></p>\n<p>সেইম অবজেক্ট এর ক্ষেত্রেও। কোনো ফাংশনের ভিতরে ডিক্লেয়ার করা হলে সেটা ঐ ফাংশনের লোকাল স্কোপ পাবে। উক্ত ফাংশনের ভিতরে ছাড়া আর কোথাও অ্যাক্সেস করা যাবে না। আর বাইরে গ্লোবাল স্কোপে ডিক্লেয়ার করা হলে সেটা গ্লোবাল স্কোপ পাবে এবং সব জায়গা থেকে অ্যাক্সেস করা যাবে।</p>\n<pre><code>var person = {\n   name: 'Zonayed Ahmed',\n   age: 21\n}\n</code></pre>\n<p>এখন এই অবজেক্ট সব জায়গা থেকেই অ্যাক্সেস করা যাবেঃ</p>\n<pre><code>console.log(person);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*HC17ran9QpM3s0PtiAC2rg.png\" alt=\"\" /></p>\n<p>কিন্তু যদি এই অবজেক্ট কোনো ফাংশনের ভিতরে ডিক্লেয়ার করা হয়, তাহলে সেই অবজেক্ট সেই ফাংশনের লোকাল স্কোপ পাবে এবং শুধুমাত্র সেই ফাংশনের ভিতর থেকেই অ্যাক্সেস করা যাবে।</p>\n<pre><code>function objectFunc() {\n   var localObj = {\n      name: 'Zonayed Ahmed',\n      age: 21\n   }\n   console.log(localObj);\n}\n</code></pre>\n<p>এখন এই ফাংশন কল করলে সবকিছু ঠিকঠাক দেখাবেঃ</p>\n<pre><code>objectFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*KFRTSkcu3xTkF3Nla1S4PQ.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি এই অবজেক্ট উক্ত ফাংশনের বাইরে অ্যাক্সেস করতে চাই তাহলে এরর আসবে। কারণ এটা লোকাল স্কোপে ডিক্লেয়ারকৃতঃ</p>\n<pre><code>console.log(localObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*WN2XZyhIhfx3BnGJDwm5qg.png\" alt=\"\" /></p>\n<p><strong>লেক্সিকাল স্কোপিং(Lexical Scoping):</strong> লেক্সিকাল স্কোপিং এ একটা প্যারেন্ট ফাংশনের সাথে একটা চাইল্ড ফাংশনের রিলেশন তৈরী হয়। এখন প্যারেন্ট-চাইল্ড ফাংশন মানে কি? হ্যাঁ যদি আমরা একটা ফাংশনের ভিতরে আরেকটা ফাংশন ডিক্লেয়ার করি, তাহলে যে ফাংশনের ভিতরে নতুন ফাংশন ডিক্লেয়ার করলাম সেটা প্যারেন্ট ফাংশন। আর প্যারেন্ট ফাংশনের ভিতরে ডিক্লেয়ারকৃত অন্য যেকোনো ফাংশনই সেই প্যারেন্ট ফাংশনের চাইল্ড ফাংশন। নিচের উদাহরণ থেকে আশা করি ক্লিয়ার ধারণা হবেঃ</p>\n<pre><code>function parentFunction() {\n   //some codes here\n   function childFunction() {\n      //some more codes\n   } \n}\n</code></pre>\n<p>এখন এখানে <code>parentFunction()</code> গ্লোবাল ফাংশন আর <code>childFunction()</code> <code>parentFunction()</code> এর লোকাল ফাংশন। এখন আমরা জানি কোনো ফাংশনের ভিতরে ডিক্লেয়ারকৃত ভ্যারিয়েবল, ফাংশন বা অবজেক্ট লোকাল স্কোপ পায় এবং এদেরকে শুধুমাত্র উক্ত ফাংশনের ভিতরেই অ্যাক্সেস করা যায়। কিন্তু লেক্সিকাল স্কোপিং এর কারণে এখানে <code>parentFunction()</code> এর ভিতরে ডিক্লেয়ারকৃত লোকাল যেকোনো কিছু <code>parentFunction()</code> এর ভিতর থেকে তো অ্যাক্সেস করা যাবেই এবং সেই সাথে এর সব চাইল্ড ফাংশন এর ভিতর থেকেও, এখানে <code>childFunction()</code> এর ভিতর থেকেও অ্যাক্সেস করা যাবে।</p>\n<pre><code>function parentFunction() {\n   var a = 6;\n   function childFunction() {\n      var b = 4;\n      console.log('Sum: ' + (a + b));\n   } \n   childFunction();\n}\n</code></pre>\n<p>এখন <code>parentFunction()</code> কে কল করলে এটা ঠিক যেরকমভাবে ফলাফল দেখানোর কথা সেরকমভাবেই দেখাবেঃ</p>\n<pre><code>parentFunction();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rJpWOJA3DEx_YATf7di85Q.png\" alt=\"\" /></p>\n<p>একইভাবে সেইম কারণে ক্লোজারসও কাজ করে, তবে এটা নিয়ে পরের পর্বে বিস্তারিত থাকবে।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},"allData":{"basic":[{"language":"বাংলা","tags":["JavaScript","JavaScript-Basic","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-03-10T06:31:58.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>জাভাস্ক্রিপ্ট! জাভাস্ক্রিপ্ট কি? জাভাস্ক্রিপ্ট একটা প্রোগ্রামিং ল্যাংগুয়েজ। হাই লেভেল প্রোগ্রামিং ল্যাংগুয়েজ। হাই লেভেল ল্যাংগুয়েজ মানে? হাই লেভেল ল্যাংগুয়েজ মানে এই ল্যাংগুয়েজ অনেকটা সফটলি কোডেড। আপনাকে আপনার ম্যাশিন সম্পর্কে খুব বেশী কিছু জানতে হবে না এর জন্যে। যেমন সি ইউজ করতে গেলে আপনাকে ম্যাশিন কিভাবে কাজ করে, কিভাবে কোড কম্পাইল করে, কিভাবে রান করে, মেমোরি কতটুকু নিবে এগুলা ভাবতে হয়। হাই লেভেল ল্যাংগুয়েজে এতোকিছু ভাবতে হয় না। এখানে ল্যাংগুয়েজই আপনার হয়ে অনেক কাজ করে দিবে। এতে সুবিধা কি? হ্যা সুবিধা হলো আপনি একটা কপ্লেক্স অ্যাপ বানাবেন এখন আপনাকে অ্যাপের ফানশানিলিটি নিয়ে না ভেবে, সেগুলা নিয়া না কাজ করে যদি একদম রুট থেকে শুরু করেন, কোন টাইপের ডাটা নিবেন, মেমোরি কতটুকু যাবে এগুলা নিয়াই ভাবতে হয়, সময় দিতে হয় তাহলে দেখা যাবে আপনার অ্যাপের ব্যাকবোনই বানাতে বানাতে হয় আপনার বাজেট শেষ, নয়তো আপনি মোটিভেশন হারিয়ে ফেলছেন। সেক্ষেত্রে জাভাস্ক্রিপ্ট এর মতো হাই লেভেল ল্যাংগুয়েজ ফ্লেক্সিবল হওয়ায় আপনি বিহ্যাইন্ড দ্যা সীনে কি হচ্ছে না হচ্ছে এতোকিছু না ভেবেও আপনার মেইন কাজ স্টার্ট করতে পারবেন। আপনার অ্যাপেন মেইন ফানশানিলিটিতে মন সময় দুইটাই দিতে পারতছেন। তাই জাভাস্ক্রিপ্ট কে ল্যাংগুয়েজ হিসাবে বাছাই করা এই সময়ে যথোপযুক্ত সিদ্ধান্ত বলে আমি মনে করি।</p>\n<p>কিন্তু তারপরেও আরো প্রশ্ন থেকে যায়। কেন জাভাস্ক্রিপ্ট? হ্যা, আমরা তো জাভাস্ক্রিপ্ট কে পূর্বে শুধুমাত্র ডম ম্যানিপুলেশনের কিছু একটা বলেই ভাবতাম। ডম ম্যানিপুলেশন মানে একটা ওয়েব পেজে কিছু ইভেন্ট লাগানো, বাটনে ক্লিক করলে এই হবে, সেই হবে। তারপর লোগো চ্যাঞ্জ করা, কালার চ্যাঞ্জ করাসহ অ্যানিমেশন পর্যন্ত বড়জোর জাভাস্ক্রিপ্ট এর ক্ষমতা ছিলো। কিন্তু আধুনিক জাভাস্ক্রিপ্ট এর ক্ষমতা এখন কল্পনার বাইরে। এখন জাভাস্ক্রিপ্ট জাস্ট ডম ম্যানিপুলেশনের জন্য ইউজ হয়না। বরং জাভাস্ক্রিপ্ট এখন জটিল জটিল ক্রস প্ল্যাটফর্ম ওয়েব অ্যাপ্লিকেশন বানাতে ব্যবহার করা হয় এবং সবচেয়ে জনপ্রিয় প্রোগ্রামিং ল্যাংগুয়েজ ২০১৮ তে। নোড জেএস দিয়ে ওয়েব সার্ভার থেকে, ওয়েব অ্যাপ্লিকেশন, ক্রস প্ল্যাটফর্ম অ্যাপ্লিকেশনও বানাতে পারবেন। রিয়েক্ট, অ্যাঙ্গুলার জেএস, ভু জেএস দিয়ে আপনি ইন্ট্যারেক্টিভ ইউজার ইন্টারফেস বানাতে পারবেন। আবার এগুলা একসাথে করে ফুল স্ট্যাক ডেভেলপমেন্ট করতে পারবেন। জাভাস্ক্রিপ্ট ফ্রন্ট ইন্ড এবং ব্যাকেন্ড দুইটাই হ্যান্ডেল করতে পারে। মানে এক ল্যাংগুয়েজ দিয়েই সব। মানে আল্টিমেট ল্যাংগুয়েজ!</p>\n<p>এখন আরো প্রশ্ন আসে। এই ২০১৮ তে আরো প্রোগ্রামিং ল্যাংগুয়েজ ও তো আছে। কোনটা চুজ করবো? আজকে জাভাস্ক্রিপ্ট শিখলে কালকে যদি এটা মার্কেটে আর না থাকে? হ্যা এইটার একটা ভালো আন্সার আছে। যারা কম্পিউটার সাইন্সের স্টুডেন্ট তারা হয়তো জানেন এখানে প্রোগ্রামিং এর দুনিয়ায় সবগুলার কন্সেপ্টই অনেকটা এক। বলতে পারেন সব একই বেসের উপর তৈরী করা। তার মানে সামনে যে ল্যাংগুয়েজ আসবে বা অন্য কোনো টেকনোলিজি আসবে সেটার কন্সেপ্টও এগুলা থেকেই যাবে। মানে আপনি শিখলে ফালানো যাবে না কখনো। আমি কখনো বলবো না অনেক জব আছে জাভাস্ক্রিপ্ট এর উপর মার্কেটে, অনেক টাকা ইনকাম করা যায়। এগুলা তো সবাই জানে। কিন্তু আমি টেকনিকাল কারণগুলো বলবো কেন শিখবেন। আপনার সবকিছুর কন্সেপ্ট একই হওয়ায় আপনি ভালো করে একটা বুঝতে পারলেই পরে যেকোনোটায় সুইচ করে ফেলতে পারবেন। কোনো কোনো ল্যাঙ্গুয়েজে লাইব্রেরী বলে, কোনোটায় মডিউল বলে, কোনোটায় প্যাকেজ বলে। হয়তো একেকটায় একেক নামে ডাকা হয় কিন্তু মেইন আইডিয়া সবসময়ই সেইম। আর ল্যাংগুয়েজ সুইচে সবাই সবসময় আন ইজি ফীল করে। কিন্তু নতুন একটা ল্যাংগুয়েজ তৈরী হয় পুরোনোটার কিছু লিমিটেশনের জন্যই। মানে নতুন ল্যাংগুয়েজ হলেই বুঝবেন এটা আরো ফ্লেক্সিবল। আমি নিজের অভিজ্ঞতা থেকে বলতেছি কোনো জিনিস শিখতে কঠিন হলে সেটা নিয়া কাজ করা ইজি হয়। সেইম থিওরি অ্যাপ্লাই হবে ফ্রেমওয়ার্ক এর ক্ষেত্রেও। নতুন নতুন ফ্রেমওয়ার্ক আসে তার মানে এই না যে এইটা স্ট্যাবল না। অবশ্যই একেকটা ফ্রেমওয়ার্ক এর স্পেশালিটি একেক রকম আর মেইন কথা হলো পুরোনোটার কিছু লিমিটেশন কাটাতেই নতুনটা এসেছে। তাই ভয় করে বা না ভেবে আপনার কাজ সোজা শিখতে নেমে পড়ুন আর শিখা শুরু করেন। সেটা জাভাস্ক্রিপ্ট ই হউক আর পাইথনই হউক।</p>\n<p>আমি প্ল্যান করেছি ৪ টা ভাবে জাভাস্ক্রিপ্ট এর উপর লিখবো। প্রত্যেকটা ভাগের উপর সিরিজ হবেঃ</p>\n<p>১। জাভাস্ক্রিপ্টঃ শুরু করুন প্রোগ্রামিং</p>\n<p>২। জাভাস্ক্রিপ্ট অ্যাডভান্স</p>\n<p>৩। জাভাস্ক্রিপ্টঃ ইকমাস্ক্রিপ্ট ৬ অভ্যাস করুন</p>\n<p>৪। নিত্যদিনের জাভাস্ক্রিপ্ট</p>\n<p>এখানে প্রথম তিনটা সিরিজ আকারে লিখবো আর শেষেরটা মাঝেমধ্যেই লিখবো। কিছু ফাংশন আর টেকনিক যেগুলা ছাড়া আসলে জাভাস্ক্রিপ্ট অপরিপূর্ণই থেকে যেতো, যেগুলা এতোবেশি ইউজ হয় আর এতোটাই উপকারী যে এগুলা না জানলেই নয়। তাই এগুলা মাঝেমধ্যে সময় পেলেই লিখে ফেলবো।</p>\n<p>আর এখানে আমি ডম ম্যানিপুলেশন নিয়ে কিছু লিখবো না। ডম ম্যানিপুলেশন করতে চাইলে জেকোয়েরী ইউজ করে ইজিলিই করে ফেলতে পারবেন। তাছাড়া ডম ম্যানিপুলেশনে সময় নষ্ট না করে আমরা আরো অ্যাডভান্স এবং ইম্পরট্যান্ট টপিকগুলো শিখে ফেলবো। তাই আপনি যদি এই লেখাটি পড়ে থাকেন ডম ম্যানিপুলেশনের শিখতে তাইলে এই লিখা আপনার জন্য না।</p>\n<p>প্রথম সিরিজে কয়েকটি পর্বে লিখবোঃ</p>\n<p>০১। জাভাস্ক্রিপ্টঃ কি, কেন, কখন?</p>\n<p>০২। জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?</p>\n<p>০৩। জাভাস্ক্রিপ্টঃ ক্রোম ডেভেলপার কন্সোল নিয়ে যতকিছু</p>\n<p>০৪। জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ</p>\n<p>০৫। জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু</p>\n<p>০৬। জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু</p>\n<p>০৭। জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু</p>\n<p>০৮। জাভাস্ক্রিপ্টঃ অবজেক্ট নিয়ে সবকিছু</p>\n<p>০৯। জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল</p>\n<p>১০। জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন</p>\n<p>১১। জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?</p>\n<p>১২। জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন</p>\n<p>১৩। জাভাস্ক্রিপ্টঃ হোইস্টিং নিয়ে সবকিছু</p>\n<p>১৪। জাভাস্ক্রিপ্টঃ স্কোপ নিয়ে সবকিছু</p>\n<p>১৫। জাভাস্ক্রিপ্টঃ তারপরে কি?</p>\n<hr />\n<p>সবশেষে আমার পরিচয় দিয়ে শেষ করি। আমি কে জাভাস্ক্রিপ্ট শিখানোর? হ্যা সেটাই। আমি নিজেও এখনো লার্নিং স্টেজে আছি। আমার কম্পিউটারের সাথে সম্পর্ক অনেক ছোটো থেকেই। যখন ক্লাশ থ্রীতে ছিলাম তখনি আমি কম্পিউটার হাতে পাই। যদিও তখন কোনো কাজে ইউজ করি নাই গান আর মুভি দেখা ছাড়া <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f61b.svg\" alt=\"😛\" /> যাই হউক আমি ক্লাশ এইটে থাকার সময় গ্রাফিক্স ডিজাইনের সাথে পরিচিত হই, তারপর ওয়ার্ডপ্রেস(জাস্ট ইন্সটলেশন আর থিম কাস্টমাইজেশন) এর সাথে পরিচিত হই। তারপর ওয়েব ডিজাইন। জাভাস্ক্রিপ্ট আমার কাছে অনেকটা ত্ত্রাস ছিলো তখন থেকেই। কোনোরকম ইন্টারনেট থেকে কপি টপি করে জেকোয়েরী কোড সাইট ডিজাইন করতাম। পরে অবশ্য গ্রাফিকরিভারে কাজ শুরু করি, পাশাপাশি প্রোগ্রামিং এও যথেষ্ট ইন্টারেস্ট ছিলো। এর মধ্যেই ইউনিভার্সিটিতে আসি। আমি বর্তমানে কম্পিটার সাইন্স নিয়ে পড়াশোনা করতেছি। তাই আসলে আমি চাইবো জাভাস্ক্রিপ্ট কে আমার টেকনিকাল নলেজ দিয়ে ব্যাখ্যা করতে। আমি জাভাস্ক্রিপ্ট শিখা শুরু করি ডব্লিওথ্রী স্কুলস থেকে, তারপর মজিলা ওয়েব ডেভ, তারপর ইউডেমীর কয়েকটা কোর্স থেকে। কিন্তু আসলে শিখাই সব না, বা একটা মানুষ একাই সব জানতে পারে না। তবে প্র্যাক্টিস করতে থাকলে অভিজ্ঞতা হয়। আমার এই লেখাও আমার নলেজ বাড়ানোর উদ্দেশ্যই লেখা। যতটুকু লিখবো নির্ভুল্ভাবে লেখার চেষ্টা করবো আর ভুল-ভ্রান্তি পেলে অবশ্যই জানাবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Basic","জাভাস্ক্রিপ্ট"],"date":"2018-03-11T06:31:56.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>ওয়েবে সবচেয়ে ব্যবহৃত এবং জনপ্রিয় <strong>তিনটা টেকনোলিজীর</strong> হচ্ছেঃ</p>\n<p>১। এইচ টি এম এল</p>\n<p>২। সি এস এস</p>\n<p>৩। জাভাস্ক্রিপ্ট</p>\n<p>সব ওয়েবসাইট আর ওয়েব অ্যাপ্লিকেশনে এই তিনটা থাকবেই। মানে বলা চলে এগুলা ওয়েবের <strong>মেইন পাওয়ার</strong>।</p>\n<p>জাভাস্ক্রিপ্ট এ <strong>বিশাল লাইব্রেরী</strong> আর <strong>ফ্রেমওয়ার্ক</strong> এর <strong>সমাহার</strong> থাকায় সব ধরনের কাজই করা যায় এর মাধ্যমে। প্রধানত <strong>দুইভাবে</strong> জাভাস্ক্রিপ্ট কে ওয়েবে ইউজ করা হয়ঃ</p>\n<p><strong>১। ক্লাইন্ট সাইডঃ</strong> শুধুমাত্র ব্রাউজারে চলে</p>\n<p><strong>২। সার্ভার সাইডঃ</strong> সার্ভারে চলে, সাধারণত সার্ভার থেকেই কোড জেনারেট হয় (যেমন নোড জেএস)</p>\n<p>জাভাস্ক্রিপ্ট অনেক <strong>লাইটওয়েট</strong>, <strong>ক্রস প্ল্যাটফর্ম</strong> এবং <strong>অবজেক্ট ওরিয়েন্টেড</strong> প্রোগ্রামিং ল্যাংগুয়েজ।</p>\n<p><strong>লাইটওয়েটঃ</strong> জাভাস্ক্রিপ্ট ম্যাশিনে খুব বেশী লোড নেয় না, আবার অনেক টেকনিকের কারণে অন্যান্য ল্যাংগুয়েজ থেকে বেস ফাস্ট এক্সিকিউট হয়।</p>\n<p><strong>ক্রস প্ল্যাটফর্মঃ</strong> আপনাকে শুধুমাত্র একবার অ্যাপ্লিকেশন বানালেই চলবে। এর জন্য আপনাকে কোন অপারেটিং সিস্টেমে, ম্যাক না উইন্ডোজ না লিনাক্স না অন্য কিছুতে আপনার অ্যাপ্লিকেশন চলবে সেটা ভাবার দরকার নাই। আমরা যেমন সব ওয়েবসাইটই সব অপারেটিং সিস্টেম থেকে অ্যাক্সেস করতে পারি, তেমনি জাভাস্ক্রিপ্ট অ্যাপ্লিকেশনও সব অপারেটিং সিস্টেমে চলবে খুব বেশী বা একেকটা অপারেটিং সিস্টেমের জন্য একেকবার ডেভেলপ করার দরকার নাই</p>\n<p><strong>অবজেক্ট ওরিয়েন্টেডঃ</strong> জাভাস্ক্রিপ্ট এ আলমোস্ট সবকিছুই অবজেক্ট। আপনি একটা অবজেক্ট, আপনার নাক, কান, নাম, গায়ের রঙ আছে। এগুলা সব আপনার মানে অবজেক্ট এর প্রোপার্টি। এই নিয়ে পরে বিস্তারিত আলোচনা করবো</p>\n<p>জাভাস্ক্রিপ্ট এ আছে বিশাল ফ্রেমওয়ার্কের সমাহার। তবে এটা নিয়ে ভাবার কোনো দরকার নাই। বলতে গেলে বেশীর ভাগ ফ্রেমওয়ার্কই একেকটা একেক কাজের জন্যে। তাই আপনি যা করতে চাচ্ছেন সেটার সাথে যে ফ্রেমওয়ার্ক বেশী কাজে দিবে সেটাই শিখা শুরু করুন। আর ফ্রেমওয়ার্ক কয়েকদিন পর পর আপডেট হয় আউটডেটেড হয় এমন কিন্তু না। দেখুন ভালো করে খেয়াল করে দেখুন পপুলার ফ্রেমওয়ার্কগুলা মার্কেটে অনেকদিন ধরেই আছে এবং থাকবে। আর না থাকলেও বা সমস্যা কই। আপনার কাজ হচ্ছে প্রথম জাভাস্ক্রিপ্ট এর ব্যাসিক ইএস ৬ সহ শেষ করা তারপর আপনি যেকোনো ফ্রেমওয়ার্ক শিখতে পারবেন সহজেই। আর আমি আগেও বলেছি এখানে মূলত মেইন কন্সেপ্টগুলা একই থাকে। তাই ফ্রেমওয়ার্ক সুইচ করতেও বেশী সময় লাগে না বা তাতে সমস্যা হয় না। তাই আপনার জন্য ভালো হবে কোনটা ধরবো কোনটা ধরবো না ভেবে সোজা যেকোনো একটায় জাম্প করা।</p>\n<p>জাভাস্ক্রিপ্ট এর ফ্রেমওয়ার্ক ইউজ করার সুবিধা কি?</p>\n<p>হ্যা জাভাস্ক্রিপ্ট এর <strong>ফ্রেমওয়ার্ক</strong> ইউজ করে অনেক কাজ করা যায়। এবং এর অনেকগুলো দিক আছে যেকারনে আপনি ইউজ করবেন, বা বাকিরা করেঃ</p>\n<p><strong>১। সহজঃ</strong> আপনার যে কাজ করতে বছর থেকে বছর চলে যেতে পারে সেগুলা ফ্রেমওয়ার্ক গুছিয়ে সহজ করে দেয়। সেক্ষেত্রে আপনার বিহ্যাইন্ড দ্যা সীনের অনেক কাজ করা লাগে না। অনেককিছু রেডিমেট পাওয়া যায়। তাতে সুবিধা হলো ব্যাসিক কাজগুলা না করে আপনি আপনার মেইন আইডিয়াতে কাজ করতে পারবেন। মানে আরো কমপ্লেক্স আইডিয়াতে সময় দিতে পারবেন আরো ভালো লেভেলের অ্যাপ্লিকেশন বানাতে পারবেন।</p>\n<p><strong>২। সেইফঃ</strong> ডেভেলপার কমিউনিটি অনেক বিশাল হওয়ায় অলমোস্ট সব ধরনের বাগই ধরা পড়ে এবং ফিক্স করা হয়ে যায়। তাই পপুলার ফ্রেমওয়ার্কগুলো অনেকটাই সেইফ। ডেভেলপার কমিউনিটি অন্যান্য ল্যাংগুয়েজ এর সাথে তুলনা করে</p>\n<p><strong>৩। ওপেন সোর্সঃ</strong> সবচেয়ে বড় কথা হলো বেশির ভাগ ফ্রেমওয়ার্ক ই একদম ওপেন সোর্স তাই এরজন্যে এক্সট্রা পে করতে হয় না বা আপনার অ্যাপ্লিকেশন সম্পূর্ন আপনারই।</p>\n<p>নিচে বর্তমানে মার্কেটে থাকা তিনটা জনপ্রিয় টেকনোলজির বিভিন্ন দিক তুলে ধরা হলোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JKC306y5NDlHLOo4wE38Gg.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*178ofikeTaWHFEcnUTPbDA.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Aq-iCff3Yxn8duB_kfddBg.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*oz5_uDAtQFPxzGDTekrOmg.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aV1Txb-Tbxvg6kOWs7u6pA.png\" alt=\"\" /></p>\n<p>এখনকার সময়ে অনেকগুলা ফ্রেমওয়ার্ক/লাইব্রেরী বেশ পপুলার। আমি কয়েকটা নিয়ে নিচে ডিসকাস করবোঃ</p>\n<p><strong>১। নোড জেএসঃ</strong> জাভাস্ক্রিপ্ট এর মোস্ট পপুলার রানটাইম এনভারোমেন্ট এবং সবচেয়ে বেশি ব্যবহৃত। এটা সাধারণত সার্ভার সাইডে ইউজ করা হয়। আমি নোড নিয়ে <a href=\"https://with.zonayed.me/bn/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%a8%e0%a7%8b%e0%a6%a1-%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%a8%e0%a6%bf%e0%a7%9f%e0%a7%87-%e0%a6%b8%e0%a6%ac-%e0%a6%95%e0%a6%bf%e0%a6%9b%e0%a7%81/\">বিস্তারিত এখানে</a> লিখেছি। আরো জানতে চাইলে এই লেখাটি পড়তে পারেন।</p>\n<p><strong>২। রিয়েক্ট জে এসঃ</strong> ফেসবুক থেকে মেইন্টেইন করা হয়। মেইন কাজ ফ্রন্ট এন্ড ডেভেলপমেন্ট। কম্পোনেন্ট বেইজ। লাইট, ঝামেলা কম, আল্ট্রা ফার্স্ট পার্ফর্মেন্স। অল্প কয়েকটা ফাংশানের উপর বেস করেই করা হয়েছে তাই দ্রুত শিখা যায়।</p>\n<p><strong>৩। ভু জেএসঃ</strong> ভু জেএস ও বেশ ভালো অবস্থাতে আছে। মেইনলি ফ্রন্ট এন্ড ডেভেলপমেন্ট এ ইউজ করা হয়। ইজিলি স্টার্ট করা যায়। এবং শেষ কয়েক বছরে রেপিডলি ইউজ হচ্ছে ভু। অ্যাঙ্গুয়াল আর রিয়েক্ট এ একটু স্টেট ম্যানেজমেন্ট কমপ্লেক্স করা হলেও ভু তে সেটা অনেক সহজ।</p>\n<p><strong>৪। অ্যাঙ্গুলার জেএসঃ</strong> গুগুল থেকে মেইন্টেইন করা হয়। দুইটা ভার্শন আছে। অ্যাঙ্গুলার ১ এবং অ্যাঙ্গুলার ২ নামে। প্রধানত ইউজ করা হয় ফ্রন্ট অ্যান্ড ডেভেলপমেন্ট এ।</p>\n<p><strong>৫। মেটেওর জেএস:</strong> মেটেওর ইউজ করে ক্লাইন্ট সাইডের সাথে সার্ভার সাইডেও কাজ করা যায়। এর জন্যে আপনাকে অন্য কোনো ল্যাংগুয়েজ(পিএচপি/রুবি/পাইথন) ইউজ করতে হবে না। জাভাস্ক্রিপ্ট দিয়েই সার্ভার সাইডেও সেইম ফাংশানালিটি আর পার্ফর্মেন্সে কাজ করতে পারবেন।</p>\n<p><strong>৬। এম্বার জেএস:</strong> এটাও ব্যাসিকেলি ওয়ানপেজ অ্যাপ্লিকেশন তৈরীতে ইউজ হয়।</p>\n<p><strong>৭। রিয়েক্ট নেটিভঃ</strong> জাভাস্ক্রিপ্ট আর রিয়েক্ট ইউজ করে মোবাইল অ্যাপ বানাতে চান? হ্যা তাহলে রিয়েক্ট নেটিভ আছে আপনার জন্য। রিয়েক্ট নেটিভ দিয়ে কমপ্লিট মোবাইলে অ্যাপ বানাতে পারবেন</p>\n<p><strong>৮। ব্যাবেলঃ</strong> ব্যাবেল সাধারণত ইউজ করা হয় ES6 কোডকে ES5 এ কনভার্ট করার জন্যে। ES6 এখনো কমপ্লিটলি সাপোর্টেড না আমাদের ব্রাউজারগুলোয়। তাই ব্রাউজারে এই মূহূর্তে ES6 ইউজ করা সেইফ না। কিন্তু তারপরেও ES6 এ অনেক ফিউচার থাকায় আমরা ES6 এ কোড লিখেও ব্যাবেল ইউজ করে সব ব্রাউজারের সাপোর্টেড ভার্শন করতে পারি।</p>\n<p><strong>৯। ওয়েবপ্যাকঃ</strong> সাধারণত একটা অ্যাপ্লিকেশনে অনেক টেকনোলজী ইউজ করা হয়। সবগুলোকে একসাথে বান্ডেল করে একটা ফাইলে নিয়ে সার্ভ করার জন্যে মোস্টলি ইউজ করা হয়। আপনার অ্যাপ্লিকেশনে অনেকগুলো স্ক্রিপ্ট ফাইল থাকতে পারে। ওয়েবপ্যাক সবগুলোকে একসাথে করে একটা স্ক্রিপ্ট করে এবং এটা ইউজ করা অনেক ফ্লেক্সিবল।</p>\n<p><strong>১০। এক্সপ্রেস জেএসঃ</strong> স্পেশালি নোড এর সাথে ইউজ করা হয়। সার্ভার তৈরী করতে এবং আপনার অ্যাপ্লিকেশনের রাউটিং করার জন্যে। অনেক সহজে শিখা যায় এবং অনেক ইউজফুল।</p>\n<p>এছাড়াও আরো অসংখ্য ফ্রেমওয়ার্ক/লাইব্রেরী আছে। রিডাক্স, ইলেক্ট্রন(ক্রস প্ল্যাটফর্ম ডেক্সটপ অ্যাপ বানাতে), নোড প্যাকেজ ম্যানেজার(এটা আরেকটা বিশাল জিনিস <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f600.svg\" alt=\"😀\" /> )সহ আরো কত কি!। এক ল্যাঙ্গুয়েজেই এতোকিছু, তাইলে শিখতে সমস্যা কোথায়?</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট"],"date":"2018-03-12T18:00:00.000Z","series":"","template":"post","title":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>এই পর্বে আমি জাভাস্ক্রিপ্ট এ কোড লেখার আগে ক্রোমের ডেভেলপার কন্সোলের সাথে সবাইকে পরিচয় করিয়ে দিবো। ক্রোমের ডেভেলপার কন্সোল আসলে অনেক পাওয়ারফুল। এর অনেকগুলা কাজের মধ্যে জাভাস্ক্রিপ্ট কোড রান করাটাও একটা কাজ। ক্রোমের কন্সোলের সাহায্যে সহজেই আপনি লাইন বাই লাইন কোড লিখে লিখে রান করতে পারবেন।</p>\n<p>প্রথমে আপনার কম্পিউটারে একটা ফোল্ডার করুন যেখানে জাভাস্ক্রিপ্ট প্র্যাক্টিস করবেন। সেখানে ব্যাসিক একটা html এবং js ফাইল ক্রিয়েট করুন।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*bB_Bp2bywmrO8ViRoiAYwg.png\" alt=\"\" />এরকম দুইটা ফাইল বানাবেন</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0WtubogBKce9UMUVVWNelw.png\" alt=\"\" />ব্যাসিক এইচটিএমএল লিখে ফেলুন সাথে স্ক্রিপ্টটাও লিঙ্ক করিয়ে ফেলুন</p>\n<p>HTML টা এরকম হবে আমার মতো করে ফাইলগুলার নাম নিয়ে থাকলেঃ</p>\n<p><strong>নোটঃ</strong> আপনি আপনার পছন্দমতো কোড এডিটর ইউজ করতে পারেন। এর জন্যে বাধ্যবাধকতা নেই কোনো। আমি <a href=\"http://brackets.io/\">ব্র্যাকেটস </a>ইউজ করতেছি এই লেখায়। আপনি চাইলে <a href=\"http://brackets.io/\">ব্র্যাকেটস</a>, <a href=\"https://atom.io/\">এটম</a>, <a href=\"https://code.visualstudio.com/\">ভিজুয়্যাল স্টুডিও কোড</a> ইউজ করতে পারেন। যেটাতে আপনি স্বাচ্ছন্দ্যবোধ করেন।</p>\n<p>এবার আপনার এইচটিএমএল ফাইলটা খুলে ফেলুন ক্রোম দিয়ে। অবশ্যই ক্রোম এর ডেভেলপার কন্সোল এ কাজ করতে হলে ক্রোমই লাগবে।</p>\n<p>এখন আপনাকে জাভাস্ক্রিপ্ট ডেভেলপমেন্ট এর ক্যারিয়ারে সবচেয়ে বেশী ইউজ করতে হবে ক্রোম কন্সোলটাকেই। আর এটা এতোটাই কাজের, আর এতোটাই ফ্রেন্ডলি একবার ইউজ করা শুরু করলে আর কখনো ভুলতে পারবেন না। আর প্রোগ্রামিং এর অনেক জটিল ব্যাপার যেমন অবজেক্ট কি জিনিস বুঝার জন্য এই কন্সোলই আপনাকে হেল্প করবে। আপনি আসলে ক্রোমের এই ডেভেলপার কন্সোলে অবজেক্ট খুলে দেখতে পারবেন। যাই হউক এখন এদিকে না যাই। আমার এগুলা বলার উদ্দেশ্য এটাই যে এর জন্যে আপনাকে ক্রোমের এই কন্সোলের ব্যাপারে ক্লিয়ার ধারণা থাকতে হবে। সেজন্যই এটা নিয়ে একটা আলাদা পর্ব করলাম, এবং শুরুতেই। কারণ প্রথম দিকে আমরা এটাই ইউজ করবো। ক্রোমের এই ডেভেলপার কন্সোল এর আরো অনেক হ্যাক আছে ওগুলা এখন প্রাসঙ্গিক না হওয়ায় আমি উল্ল্যেখ করবো না, তবে অন্যদিন অন্য কোনো পোস্টে অবশ্যই বলবো। আর ক্রোমের এই কন্সোল ছাড়াও আরো কিছু টুলস দিয়ে সেইম কাজ করা যায় তবে আপাতত আমি এটাই সাজেস্ট করবো সবাইকে।</p>\n<p>আপনার ক্রোম ব্রাউজারের উপরে ডান পাশে এইটা দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*FXws8geGNCptv_4wrn_i5g.png\" alt=\"\" />একদম ডান পাশেরটা</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*J6wTG-xz9G_C2X9_DCh7tw.png\" alt=\"\" /></p>\n<p>এটা ওপেন করে ভিতরে দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6PrsmLKrAXCROw0g1ScfKw.png\" alt=\"\" />ডেভেলপার টুলস ওপেন করুন</p>\n<p>More tools &gt; Developer tools ওপেন করুন, এমন আসবে আপনার খোলা পেজের নিচেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*fXt5m_7UfdblIs1iBYooVQ.png\" alt=\"\" />ক্রোম কন্সোল</p>\n<p>ক্রোম কন্সোল এরকম ফাঁকাই দেখাবে আশা করি, যদি লাল লেখা দেখেন তাইলে ভালো করে দেখুন হয়তো আপনার স্ক্রিপ্ট এর রেফারেন্স এ কোথাও কোনো প্রব্লেম আছে। যাই হউক এখানে কোনো সমস্যা হবে না আশা করি।</p>\n<p>আপনি এই কন্সোল উইন্ডো অন্য আরো অনেকভাবেই খুলতে পারবেন। ওয়েবপেজের খালি জায়গায় রাইট ক্লিক করে Inspect সিলেক্ট করলে এরকম ইউন্ডো আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6fOqg5uSVqHMXwCHShNqgg.png\" alt=\"\" />Inspect এ ক্লিক করুন</p>\n<p>তারপর এই উইন্ডো ওপেন হবে। এখান থেকে দেখেন কয়েকটা ট্যাব আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*VJgestx9amseQKu-mw0Wug.png\" alt=\"\" />Console এ ক্লিক করুন</p>\n<p>তারমধ্যে Console নামে একটা আছে। Console এ ক্লিক করলে দেখবেন কন্সোল চলে আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*BJT2gOPJHdkHQhpkDdYHzg.png\" alt=\"\" /></p>\n<p>শর্টকাটও ইউজ করতে পারেনঃ</p>\n<pre><code>ctrl+shift+I\n</code></pre>\n<p>কন্ট্রোল, শিফট আর আই একসাথে হোল্ড করলে চলে আসবে ডিরেক্ট কন্সোল।</p>\n<p>এবার মেইন কাজে আসি। এটাই হচ্ছে REPL Shell( Read–Eval–Print Loop)। এটা এমন একটা ইনভারোমেন্ট এখানে আপনি ইনপুট দিলে এটা ইভালয়েট করে আউটপুট দেখাবে লাইন বাই লাইন করে। এখানে লিখুনঃ</p>\n<pre><code>4 + 4\n</code></pre>\n<p>এবং এন্টার চাপলে দেখবেন এটা রেজাল্ট শো করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DHoeAWH9rlq0KYslAE6vfQ.png\" alt=\"\" /></p>\n<p>মজার না? না মোটেও মজার না। এটা মাত্র ছোট্টো একটা অ্যাডিশন করলো মাত্র। কিন্তু মজার ব্যাপার হলো এখানে আপনি জাভাস্ক্রিপ্ট কোড রান করাতে পারবেন সহজেই। এখন নিজে জাস্ট টেস্ট করার জন্য কিছু সিন্টেক্স লিখবো, এগুলা না বুঝলেও বুঝার দরকার নাই। পরে সব কভার করা হবে। আপনি জাস্ট কন্সোলের কাজটা কি সেটা দেখবেন।</p>\n<p>এবার লিখুনঃ</p>\n<pre><code>console.log('Hey Teach Me JavaScript!');\n</code></pre>\n<p>এন্টার দিলে দেখবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vuY5OKmv-Dh8d2l-DeyklA.png\" alt=\"\" /></p>\n<p>হ্যা আমরা জাভাস্ক্রিপ্ট কোড রান করিয়ে ফেলেছি এরমধ্যেই। আপনি এতটুকু আসতে পারলে এবার একটু ইঞ্জয় করুন। এখন থেকে এই কন্সোলই হবে আপনার সব কাজের ফ্রেন্ড। এবার চলেন আসল কাজ করি। কন্সোলের লিখিঃ</p>\n<pre><code>a\n</code></pre>\n<p>এন্টার চাপ দেওয়ার পর দেখেন লাল লাল কি আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1Xo9vfl7hqX5jmZkn_juZA.png\" alt=\"\" /></p>\n<p>এটা বলতে চাচ্ছে a ডিফাইন্ড না। আসলেই তো! আজব কাজ কারবার। a আসলো কোথা থেকে! হ্যা ঠিক, a আমরা কোথাও এর আগে লিখি নাই তাই আসলে এই এরর আসছে। এভাবেই কন্সোল থেক আপনি আপনার কোডের এররগুলো দেখতে পাবেন।</p>\n<p>এবার আবার কন্সোলে লিখিঃ</p>\n<pre><code>var a = 10\n</code></pre>\n<p>তারপর এন্টার দিলেঃ</p>\n<p>কিছুই হয় নাই, হয়তো undefined লেখা দেখবেন তবে এটা কিছু না। এখন ইগ্নোর করেন। এবার আবার লিখুনঃ</p>\n<pre><code>a\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*UIG9Q4HoZ_u0nt2LVRXeMw.png\" alt=\"\" /></p>\n<p>দেখুন 10 আসছে আউটপুট হিসাবে। তো আপনার আগের প্রোগ্রামিং ল্যাঙ্গুয়েজের নলেজ থাকলে বা জাভাস্ক্রিপ্ট এর নলেজ থাকলে এতোক্ষনে অবশ্যই এগুলা সব বুঝে ফেলছেন। তবে না বুঝে থাকলেও সমস্যা নেই, এখন বুঝার দরকার নেই, আমি পরে সব ডিসকাস করবো। এবার আসুন আরেকটু গভীরে যাই।</p>\n<p>একটু আগে একটা js ফাইল বানিয়েছিলাম। এটা কোড এডিটর দিয়ে ওপেন করে ভিতরে লিখুনঃ</p>\n<pre><code>console.log('Hello World from Inside!');\n</code></pre>\n<p>এবার html ফাইলটা রিলোড করেন কন্সোল ওপেন থাকা অবস্থাতেই। দেখুন কন্সোলে আপনার লেখা চলে আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*IOmNTSgLSYptkOH9eOYqQQ.png\" alt=\"\" /></p>\n<p>আরেকটু ভালো করে খেয়াল করলে দেখবেন এই লেখার একেবারে ডান পাশে রেফারেন্স দেওয়া আছে এই লেখাটা কোথা থেকে আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Q_RJDMHrf4N0MCeb92N3-Q.png\" alt=\"\" /></p>\n<p>হ্যা এটা js ফাইলের ১ নাম্বার লাইন থেকে আসছে। এটার উপরে মাউস নিয়ে গেলে এক্সেক্টলি লোকেশানও দেখাবে ফাইলটারঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*o37-aIhwoV7hluDv5Wk3dw.png\" alt=\"\" /></p>\n<p>এখন এটার লাভ কি? হ্যা লাভ দেখবো এবার চলেন। আপনার js ফাইলে যান এবং আগের কন্সোল লগের নিচে কিছু লাইন ফাকা দিয়ে নিচের এটা লিখুন আবারঃ</p>\n<pre><code>consle.log('Wrong!')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aa5RjAp1fHMo9f2OTJ1BPw.png\" alt=\"\" />এরকমভাবে</p>\n<p>এখানে বানান আমি ইচ্ছে করেই ভুল করছি। আপনার জানার দরকার নাই কন্সোল লগ সম্পর্কে না জেনে থাকলে, খালি এইটুকু দেখুন এটা আগের টার সাথে মিল নাই, বানানে ভুল আছে। এবার এটা সেইভ করে আপনার পেজ রিলোড করুন আবার। দেখুন এবার কন্সোলে এরর আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*_uAzlQ5yTNqQQJGc-B3xBg.png\" alt=\"\" /></p>\n<p>প্রথমটা ঠিক আছে কিন্তু দ্বিতীয়টায় বলছে অমুক ডিফাইন্ড না। মানে এটা চিনতে পারতেছে না। সোজা কথা এরর। এবার ডান পাশে খেয়াল করুন যেখানে কোন ফাইলের কয় নাম্বার লাইন থেকে এসেছে মেনশন করা থাকেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*QBR-jqZl0x27ymlyvo6TPg.png\" alt=\"\" /></p>\n<p>হ্যা দেখুন এটা বলছে ১১ নাম্বার লাইন থেকে এরর আসছে। সো আপনি আপনার ফাইলটা খুলে ১১ নাম্বার লাইনে গিয়ে এটা ফিক্স করে ফেলতে পারবেন ইজিলি। এখানে হয়তো মাত্র দুই লাইনের কোড। কিন্তু যখন অনেক লম্বা কাজ করবেন। অনেকগুলা লাইন থাকবে তখন আসলে এভাবেই কন্সোল আপনাকে বিভিন্ন রকম এরর দেখিয়ে এক্সক্টলি লোকেশন দেখিয়ে আপনাকে ডিবাগিং বা এরকম এরর সমাধান করতে হেল্প করবে। আরো আপনি লাল একটা ক্রস চিহ্ন দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*IoG6mFNODyNjnRGKpAYxRg.png\" alt=\"\" /></p>\n<p>এটা ইন্ডিকেট করতেছে কয়টা এরর আছে। তো ক্রোম এর ডেভেলপার কন্সোল এভাবেই আপনাকে আপনার কোড ডিবাগিং এ হেল্প করবে।</p>\n<p>আরেকটা ইম্পরট্যান্ট জিনিস। আপনি অনেক্ষন কোড লিখতে লিখতে কন্সোল কোডে যা-তা হয়ে গেলে কন্সোল ক্লিয়ার করে ফেলতে পারবেন জাস্ট এখানে ক্লিক করেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4fO8XHyHVuc6iwkTrOdvRw.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*U8Ow46A0rHh-qCwYYI4SRA.png\" alt=\"\" /></p>\n<p>এখানে ক্লিক করলে সব ক্লিয়ার হয়ে যাবে। আবার এই ফাংশনটাও কন্সোলে লিখে ক্লিয়ার করতে পারবেনঃ</p>\n<pre><code>clear()\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*eGmNWYy9FH6Ms_0Ns6n8fA.png\" alt=\"\" />সব ক্লিয়ার!</p>\n<p>ইনফেক্ট আপনি এখানে জাভাস্ক্রিপ্ট লিখে কুইক ইন্সট্যান্ট রেজাল্টও দেখে ফেলতে পারবেন। একটা ছোটো জিনিস দেখার জন্যে একটা জেএস ফাইল বানাবেন তারপর সেখানে একটা এইচটিএমএল ফাইল বানিয়ে সেটার সাথে জেএস লিঙ্ক করে ব্রাউজারে রান করিয়ে দেখার চাইতে এভাবে আপনি যেকোনো অবস্থায় যেকোনো জায়গায় কন্সোল ওপেন করেই জাভাস্ক্রিপ্ট প্র্যাক্টিস করা শুরু করে দিতে পারবেন। দেখেন না হলে এই পেজেই ওপেন করে দেখেন কাজ করে কিনা :D</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট"],"date":"2018-03-16T18:00:00.000Z","series":"","template":"post","title":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>এখানে দেখানো উদাহরণগুলো সব ক্রোম কন্সোলে করা হয়েছে, এবং এটাই সবচেয়ে ভালো উপায় প্র্যাক্টিস করার জন্য। তাই আপনিও ক্রোম কন্সোল ওপেন করে সেখানে প্র্যাক্টিস করবেন। আর কিছু আগের করা ফাইলের মধ্যে করা হয়েছে, সেগুলাও সেভাবে প্র্যাক্টিস করবেন।</p>\n<p><strong>ভ্যারিয়েবলঃ</strong></p>\n<p>ভ্যারিয়েবল হচ্ছে একটা পাত্রের মতো, যেখানে আপনি ‘কিছু’ রাখতে পারবেন। জাভাস্ক্রিপ্ট এ ‘কিছু’ বলতে অনেককিছু। আপনি চাইলে নাম্বার থেকে শুরু করে স্ট্রিং, অবজেক্ট, এমনকি ফাংশনও ভ্যারিয়েবল এর মধ্যে সেইভ করে রাখতে পারবেন। ভ্যারিয়েবল হলো ধরুন আপনি কথা বলতেছেনঃ “আব্দুল করিম সাহেব অনেক ভালো মানুষ, উনি অমুক কোম্পানীতে জব করে”। এখন এখানে দেখুনঃ আপনি প্রথম ‘আব্দুল করিম সাহেব’ এর নাম বলছেন, কিন্তু দ্বিতীয়বার কিন্তু বলেননি। দ্বিতীয়বার আব্দুল করিম হয়ে গেলো ‘উনি’। হ্যা ভ্যারিয়েবল ও অনেকটা এরকম। ধরুনঃ</p>\n<pre><code>a = Zonayeda is from Bangladesh\n</code></pre>\n<p>ভ্যারিয়েবলও ঠিক এভাবে কাজ করে। আর আপনি যখন যেখানে, যতবার দরকার সেখানেই ভ্যারিয়েবল ডেকেই আপনি তার ভ্যালু পেয়ে যাবেন।</p>\n<p>তবে আপনাকে ভ্যারিয়েবল নেওয়ার আগে সেটাকে অবশ্যই প্রথম বার ডিক্লেয়ার করে নিতে। জাভাস্ক্রিপ্ট এ ভ্যারিয়েবল ডিক্লেয়ার করা হয় <strong>var</strong> কীওয়ার্ড দিয়ে।যে টাইপের ভ্যারিয়েবলই হউক সেটা ভার দিয়েই ডিক্লেয়ার করা হয়। <strong>var</strong> লিখার পর আপনি ভ্যারিয়েবলের নাম দিবেন, কি নামে হবে ভ্যারিয়েবল সেটা। এই নাম যেকোনো কিছু ইউজ করতে পারবেন, তবে কিছু রুলস আছে এখানেঃ</p>\n<p>১। জাভাস্ক্রিপ্ট এর <strong>রিসার্ভড কীওয়ার্ড</strong> ইউজ করতে পারবেন না।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*lmStJDN0I-zjx-SYg9J1oQ.png\" alt=\"\" />Reserved Keywords</p>\n<p>আর এগুলা কোনোভাবে অবজেক্ট, প্রোপ্রার্টিজ এর সাথে সম্পর্ক থাকায় এগুলা এড়িয়ে চলাই ভালোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*6za4xjFGTpKHZZmO8JirEA.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*iQv1QH5D8qPecSAoQHSiPQ.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*5B_TZ_vc75qYA6-6Ikzauw.png\" alt=\"\" />Should Avoid Them</p>\n<p>২। ভ্যারিয়েবলের নাম অক্ষর দিয়ে শুরু হতে পারবে, তবে নাম্বার,স্পেশাল ক্যারেক্টার <strong>!, @, #, %, ^, &, *, (, )</strong> দিয়ে শুরু হতে পারবে না।কিন্তু ‘_’(আন্ডারস্কোর) ও ‘<strong>$</strong>’ (ডলার সাইন) ইউজ করে শুরু করতে পারবেন।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*CtkGEADad1i-opsU93tCig.png\" alt=\"\" />All Valid</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*HOl2gypEKYWzZmEq56-x1g.png\" alt=\"\" />Invalid</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*GYF7S1KbjdCKIbZuBfLjGg.png\" alt=\"\" />Invalid</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ptrjnkz4WyCFQwcKBL-5Xw.png\" alt=\"\" />Totally valid</p>\n<p><strong>Note:</strong> কন্সোলে ভ্যারিয়েবল অ্যাক্সেস করতে চাইলে জাস্ট ভ্যারিয়েবলের নাম লিখলেই সেটার ডাটা চলে আসবে।</p>\n<p>৩। ভ্যারিয়েবলের নামের মাঝখানে স্পেস ইউজ করা যাবে না। যদি এমন কোনো নাম নিতে হয় যেটার মাঝখানে স্পেস দরকার তাইলে আপনি ক্যামেলকেস ফরম্যাট এ(পরে আসছি বিস্তারিত) বা দুইটা ওয়ার্ড এর মাঝখানে ‘_’ (আন্ডারস্কোর) ইউজ করতে পারেন। কিন্তু স্পেস কোনোভাবেই অ্যালাউড না।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*yhBrx04gUUl4HQKVPVpS-Q.png\" alt=\"\" />Not Valid</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*UVpgdLOc54QIblhACNnk2A.png\" alt=\"\" />Valid</p>\n<p>৪। জাভাস্ক্রিপ্ট এ ভ্যারিয়েবল এর নাম <strong>কেস-সেনসিটিভ</strong>। মানে myName এবং Myname বা myname এক না। আপনি ঠিক বড় হাতে ছোটো হাতে যেভাবে ভ্যারিয়েবলের নাম নিবেন সেটাকে অ্যাক্সেস করতে হলে ঠিক সেভাবেই লিখে অ্যাক্সেস করতে হবে। এখানে myName এবং Myname দুইটা সম্পূর্ন আলাদা আলাদা দুইটা ভ্যারিয়েবল।</p>\n<p><strong>ক্যামেলকেস ফরম্যাট:</strong> জাভাস্ক্রিপ্ট ডেভেলপার কমিউনিটিতে বেশী ইউজ হয়। এটাকে আসলে কনভেশনাল ফরম্যাট বলে। জাভাস্ক্রিপ্ট এ ক্যামেলকেস ইউজ করা একটা কনভেনশন। আমিও ব্যক্তিগতভাবে ক্যামেলকেস ফরম্যাট এ লিখি। কারণ সব ল্যাঙ্গুয়েজেরই নিজস্ব কনভেনশন আছে। জাভাস্ক্রিপ্ট এর কনভেনশন ক্যামেলকেস ফরম্যাটঃ</p>\n<pre><code>camelCasemyNamemyAgemyIDformToHandle\n</code></pre>\n<p>এবার ক্রোম ডেভেলপার কন্সোল ওপেন করে সবগুল এক্সাম্পল সাথে নিজে থেকেও কিছু ট্রাই করুন।</p>\n<p>আপনি চাইলে একটা ভ্যারিয়েবলকে আরেকটা ভ্যারিয়েবলেও সেইভ করতে পারবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*xZp0dv4QOhwSUFhdiDSQdQ.png\" alt=\"\" /></p>\n<p>কন্সোল থেকে ডিক্লেয়ারকৃত ভ্যারিয়েবল অ্যাক্সেস করতে চাইলে জাস্ট ভ্যারিয়েবলের নাম লিখলেই চলে আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*dIWvsAHH3z3nmezBHUbOZQ.png\" alt=\"\" /></p>\n<p>স্ক্রিপ্ট ফাইল থেকে(গত পর্বে যেটা সেটাপ করা হয়েছে সেখানে অ্যাক্সেস করতে চাইলে)ঃ</p>\n<pre><code>var myName = 'Zonayed Ahmed';console.log(myName);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*S_PhddpcZ8FAoHZd6xxiag.png\" alt=\"\" />আগের সব কেটে এগুলা লিখুন</p>\n<p>এখানে কন্সোল লগ ইউজ করে ডাটা দেখানো হচ্ছে ব্রাউজারের কন্সোলে।কন্সোল থেকে ভ্যারিয়েবল এর ডাটা দেখতে চাইলে শুধু ভ্যারিয়েবলের নাম লিখলেই চলে, কিন্তু আপনি যদি কোনো স্ক্রিপ্ট ফাইল থেকে কন্সোলে দেখাতে চান ডাটা তাহলে আপনাকে console.log(yourVariableName)এভাবে অ্যাক্সেস করতে হবে।এবার আপনার ইন্ডেক্স ডট এইচটিএমএল ফাইলটা ব্রাউজারে ওপেন করুন এবং কন্সোল ওপেন করে দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*GiwtHqHjFw7aezlbMfQvgA.png\" alt=\"\" /></p>\n<p>আশা করি এবার ভ্যারিয়েবলের ব্যাপার ক্লিয়ার হয়ে গেছে। এবার আসি ডাটা টাইপে।</p>\n<p><strong>ডাটা টাইপঃ</strong></p>\n<p>জাভাস্ক্রিপ্ট এ ব্যাসিকিলি দুই ধরনের ডাটা টাইপ আছেঃ</p>\n<p>১। প্রিমিটিভ ডাটা টাইপ</p>\n<p>২। নন প্রিমিটিভ/রেফারেন্স ডাটা টাইপ</p>\n<p>এই পর্বে প্রিমিটিভ ডাটা টাইপ নিয়ে বিস্তারিত বলবো। আর নন-প্রিমিটিভ ডাটা টাইপ প্রত্যেকটার জন্য আলাদা আলাদা পর্বে লিখবো।</p>\n<p><strong>প্রিমিটিভ ডাটা টাইপঃ</strong></p>\n<p>প্রিমিটিভ টাইপের ডাটাগুলো তে ভ্যালু সরাসরি স্টোর করা থাকে। আমরা জানি জাভাস্ক্রিপ্ট এ সবই অবজেক্ট। কিন্তু এই প্রিমিটিভ ডাটা টাইপগুলো ছাড়া। এগুলা অবজেক্ট না। যেমনঃ</p>\n<p>(i) নাম্বারঃ নরমাল নাম্বার থেকে শুরু করে যেকোনো ধরনের নাম্বার। দশমিক ও হতে পারে</p>\n<pre><code>var aNumber = 10;var anotherNumber = 10.10;\n</code></pre>\n<p>(ii) স্ট্রিংঃ টেক্সট নাম্বার সহ। মানে ক্যারেক্টার এর সিকুয়েন্স। স্ট্রিং অবশ্যই ‘ ’ অথবা “ ” এর ভিতরে থাকবে। ডাবল (“”) নাকি সিঙ্গেল (‘ ’) ইউজ করবেন সেটা একদমি আপনার ইচ্ছা। তবে একবার ডাবল একবার সিঙ্গেল ইউজ করলে খারাপ দেখা যায়(যদিও এটাও লিগ্যাল, কিন্তু ভালো প্র্যাক্টিস না) তাই যেখানে যেভাবে লিখা শুরু করবেন সেভাবেই লিখবেন। নাম্বারও যদি এভাবে ডাবল বা সিঙ্গেল এর ভিতরে লিখেন তাহলে সেটাও স্ট্রিং হিসেবে গণ্য হবে।</p>\n<pre><code>var text = 'I want to say something';var text2 = \"This is exactly the same way, but use either one\";var isString = '10'; //is also a string, not a number\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*TA2o8bvMpP5BYMkAfySjrQ.png\" alt=\"\" /></p>\n<p>(iii) বুলিয়ানঃ সত্য নাইলে মিথ্যা <strong>true, false</strong>। সব ছোটো হাতের। বড় হাতের বা ক্যাপিটেলাইজড ভ্যালু ভুল দেখাবে। কোনো ‘ ’ বা “ ” নেই</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*eM0lvYGAzq4v27xfPDC82A.png\" alt=\"\" /></p>\n<p>(iv) আন্ডিফাইন্ডঃ যখন আপনি ভ্যারিয়েবল ডিক্লেয়ার করেন, কিন্তু কোনো ডাটা ঐটাতে রাখা হয় না, তখন বাই ডিফল্ট <strong>undefined</strong> হয়ে থাকে সেটা</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*KRD5XB9f3Gto9JCXMWUl9w.png\" alt=\"\" /></p>\n<p>(v)ঃ নালঃ এটার কোনো অস্তিত্ব নাই। কিন্তু আন্ডিফাইন্ড না। মানে আপনি আপনার ভ্যারিয়েবলে কিছু রাখতে চাচ্ছেন না, কিন্তু আবার এটা আন্ডিফাইন্ড ও রাখতে চাচ্ছেন না। null ই হবে, Null বার NULL ভুল!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*f7poolehwZilPn6OTdgIiA.png\" alt=\"\" /></p>\n<p><strong>নন-প্রিমিটিভ/রেফারেন্স ডাটা টাইপঃ</strong></p>\n<p>নন-প্রিমিটিভ ডাটা টাইপের ভ্যালু সরাসরি সেইভ করা থাকে না। বরং ভ্যালুর রেফারেন্স সেইভ থাকে। আর এই টাইপের ডাটা অবজেক্ট। মানে এদেরও আবার অনেক প্রোপ্রার্টি আছে। যেমনঃ</p>\n<p>(i) অ্যারে</p>\n<p>(ii) অবজেক্ট</p>\n<p>(iii) ফাংশন</p>\n<p>নন-প্রিমিটিভ ডাটা টাইপ নিয়ে পরে বিস্তারিত আলোচনা করবো। আসলে এগুলা প্রত্যেকটাই বিস্তারিত আলোচনা করার মতো। বললাম যে এগুলা অবজেক্ট এবং প্রত্যেকটার প্রোপ্রার্টিজ ও আছে। তাই সবকিছু নিয়েই আলাদা আলাদা করে আলোচনা করবো পরের পর্বগুলোয়।</p>\n<p><strong>কনকাটিনেশনঃ</strong></p>\n<p>এবার আসি আরো কিছু ব্যাসিক টপিক নিয়ে। কনকাটিনেশন বা কয়েকটা ডাটা একসাথে অ্যাড করতে চাইলে জাভাস্ক্রিপ্ট এ ‘+’ ইউজ করা হয়ঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Dlmb56aeE-eaWPeFZ1u_jw.png\" alt=\"\" /></p>\n<p>আপনি চাইলে এই অ্যাড করা পুরোটাকে একটা ভ্যারিয়েবলের মধ্যে সেইভ করে রেখে দিতে পারবেন। তবে জাভাস্ক্রিপ্ট এ সবকিছুই একটা কীওয়ার্ড দিয়েই ডিক্লেয়ার করা হয়। এখন যদি সবগুলা একটা ভ্যারিয়েবলের ভিতরে রেখে দেই, তাহলে সেটা কোন টাইপের হবে? হ্যা সেজন্যই জাভাস্ক্রিপ্ট এ কোনো ডাটা টাইপ দেখার জন্যে <strong>typeof</strong> অপারেটর ইউজ করা হয়ঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*LkOduDTGmehRjL1p2yxcHg.png\" alt=\"\" /></p>\n<p>এখন যদি কয়েকটা টাইপ একসাথে অ্যাড করে একটা ভ্যারিয়েবলের সেইভ করি তাহলে সেটা কোন টাইপের হবে সেটা ডিপেন্ট করে আপনার ডাটার উপর। আপনি যদি নাম্বার নাম্বার অ্যাড করেন তাহলে সেটা কনকাটিনেশন না হয়ে অ্যাডিশন হবে। আর যদি আপনি স্ট্রিং এর সাথে নাম্বার যোগ করেন বা নাম্বারের সাথে স্ট্রিং যোগ করেন তাহলে পুরোটাই স্ট্রিং টাইপের হয়ে যাবে। কারণ নাম্বার নাম্বার ছাড়া ক্যারেক্টার সেইভ করতে পারে না। কিন্তু স্ট্রিং ক্যারেক্টারসহ নাম্বারও সেইভ করতে পারেঃ</p>\n<p>এখানে অ্যাডিশন হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*iXj19yOqXOVmJOFuSKWOHg.png\" alt=\"\" /></p>\n<p>এখানে কনকাটিনেটেড হয়ে ডাটা টাইপ চ্যাঞ্জ হয়ে যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Zj5ZoZo3e5GvgoiaQvVRZw.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*MQh57tGtMm-57F8vCbEzeQ.png\" alt=\"\" />বাঁ দিক থেকে শুরু করে, যতক্ষন নাম্বার, ততক্ষন অ্যাড করে যাবে। তারপর স্ট্রিং আসার করার কারনে পুরোটা স্ট্রিং এ কনভার্ট হয়ে যাবে।</p>\n<p>এগুলোকে টাইপ কাস্টিং বলে যেটা জাভাস্ক্রিপ্ট অটোমেটিক্যালিই করে।</p>\n<p><strong>ভ্যারিবল এর ডাটা পরিবর্তনঃ</strong></p>\n<p>আপনি চাইলে আপনার একবার ডিক্লেয়ার করা ভ্যারিয়েবলের ডাটা পরিবর্তন করতে পারবেন। তবে একবার ডিক্লেয়ার করে পরে আবার ডিক্লেয়ার করার দরকার নেই। জাস্ট ভ্যারিয়েবল এর নাম লিখে ইকুয়্যাল টু আপনার ডাটা।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*2IVEcvxxofm2J192NIHecA.png\" alt=\"\" /></p>\n<p>আবার প্রথমে নাম্বার নিয়ে পরে স্ট্রিং এও পরিবর্তন করতে পারবেন যেটা জাভাস্ক্রিপ্ট এ একদম লিগ্যালঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Bo7ZLmrSaZgvhzLty_Mq_w.png\" alt=\"\" /></p>\n<p>যেকোনো ডাটা টাইপ থেকে যেকোনো ডাটা টাইপেই পরিবর্তন করতে পারবেন। এখানে আপনার স্বাধীনতা আছে পুরোপুরি।</p>\n<p><strong>কমেন্টঃ</strong></p>\n<p>কোডে কমেন্ট করা ভালো প্র্যাক্টিসের মধ্যে পড়ে। কারণ অনেকসময় কোডের কন অংশ কি করছে সেটা বুঝতে ঝামেলা হয়ে যায়। সেক্ষেত্রে কিছু বর্ননা লিখে রাখলে যে এই অংশ এই কাজ করে ঐ অংশ ঐ কাজ করে তাহলে পরে যেকেউ বা আপনি নিজেও কয়েক বছর পরেও আপনার কোড দেখে বুঝতে পারবেন যে আসলে এই অংশের কাজ হচ্ছে এটা। তাই কোডে প্রোপার কমেন্ট রাখা ভালো। আর কমেন্ট গুলো জাভাস্ক্রিপ্ট এর ইঞ্জিন একদম কমপ্লিটলি এড়িয়ে চলবে। মানে এগুলা আইটপুটে আসবে না কখনো</p>\n<p>কমেন্ট দুইভাবে করা যায়ঃ</p>\n<p><strong>১। সিঙ্গেল লাইন কমেন্টঃ</strong></p>\n<p>একই লাইনের কমেন্ট হলে ভা আপনার কোডের শেষে কিছু লিখতে চাইলেঃ</p>\n<pre><code>var myName = 'Zonayed Ahmed'; // your comment here\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*zjmZ9pFhF-dGbwZ7rHQMOw.png\" alt=\"\" /></p>\n<pre><code>// Output Somethingconsole.log('Something'); \n</code></pre>\n<p><strong>২। মাল্টি-লাইন কমেন্টঃ</strong></p>\n<p>কয়েকটা লাইনে কমেন্ট লিখতে চাইলেঃ</p>\n<pre><code>/*   Your Comments here*/\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*D7RlzzEfpLfmuV8xPWOZvA.png\" alt=\"\" /></p>\n<p><strong>গুরুত্বপূর্ন একটা ব্যাপারঃ</strong></p>\n<p>আপনি যদি কোনো ভ্যালু ডিক্লেয়ার করেন কিন্তু তাতে কিছু সেইভ না করেন তাহলে সেটা বাই ডিফল্ট আন্ডিফাইন্ড হিসাবে সেইভড হয়ঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*eIK8xcbzKdK_I_V4ChpyxA.png\" alt=\"\" /></p>\n<p>জাভাস্ক্রিপ্ট এর নতুন ভার্শনগুলোয় নতুন আরো অনেক কিছু আছে। তবে আমি আমার এই সিরিজে যেহেতু শুধুমাত্র ইএস৫ নিয়েই আলোচনা করবো তাই আমি নতুন (ইএস৬) এর কোনো কিছু এখানে উল্লেখ করবো না। আগে ইএস৫ (এখন যেভাবে লিখতেছি) সেটা বুঝার চেষ্টা করুন তাহলে পরে ইজিলি ইএস৬(আমি এই সিরিজের পরে লিখবো) বুঝতে পারবেন সহজেই :)</p>\n<p>আজকের পর্ব এইটুকুই। ভালো থাকবেন, সবাইকে ভালো রাখবেন। আর মনে রাখবেন প্র্যাক্টিসের উপর কিছু নাই। আপনি উদাহরণ গুলো যতরকমভাবে পারবেন প্র্যাক্টিস করবেন। আপনার নিজের থেকেও প্র্যাক্টিস করবেন যতভাবে পারেন। কোনো সমস্যা হলে গুগুল তো আছেই। আর আমাকে ইমেইল করুন বা এখানে কমেন্ট করতে পারেনঃ</p>\n<pre><code>Email: zonayedpca@gmail.com\n</code></pre>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট\t"],"date":"2018-03-17T06:31:41.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>এই পর্বে আমি অপারেটর নিয়ে বিস্তারিত আলোচনা করবো। অপারেটর খুবই ব্যাসিক জিনিস, আমরা সবাই এমনিতেও জানি। কিন্তু এ সম্পর্কে ভালো ধারণা থাকতে হবে। কারণ অপারেটর অনেকভাবে ইউজ করা হয়।</p>\n<p>ধরুন ২ + ৪ এ ৬ হয়, এখন এখানে + হচ্ছে <strong>অপারেটর</strong>, আর ২ এবং ৪ হচ্ছে <strong>অপারেন্ড</strong>। আমরা এখন এইধরনের অপারেটর নিয়েই আলোচনা করবো।</p>\n<p>এই পর্বে অনেককিছু কি কাজে লাগতে পারে সেটা নিয়া কনফিউশন তৈরী হতে পারে, কিন্তু এগুলা আসলে আপনার সবকিছুর বেইস। তাই আপনার এগুলার ব্যাপারে ক্লিয়ার ধারণা থাকা জরুরী। আপনাকে যে সবকিছু মনে রাখতে হবে বা মুখস্ত করে ফেলতে হবে এমন কোনো কথা নাই। প্র্যাক্টিস করতে করতে এমনেই মনের মধ্যে ঢুকে যাবে।</p>\n<p>জাভাস্ক্রিপ্ট এ কয়েকরকম এর অপারেটর আছেঃ</p>\n<p>১। অ্যারিথমেটিক অপারেটর</p>\n<p>২। কম্পারিজম অপারেটর</p>\n<p>৩। লজিক্যাল/রিলেশনাল অপারেটর</p>\n<p>৪। অ্যাসাইনমেন্ট অপারেটর</p>\n<p>৫। কন্ডিশনাল/টার্নারি অপারেটর</p>\n<p>এগুলা নাম থেকে অনেকটা ধারণা করা যায় কোনগুলো কোন কাজের জন্য হতে পারে। আমি নিচে বিস্তারিত আলোচনা করছি প্রত্যেকটা। আপনি ক্রোমের ডেভেলপার কন্সোল ওপেন করে প্র্যাক্টিস করবেন একটা একটা করেঃ</p>\n<p><strong>১। অ্যারিথমেটিক অপারেটরঃ</strong> যোগ, বিয়োগ, গুণ, ভাগ করার জন্যে এই অ্যারিথমেটিক অপারেটর ইউজ করা হয়। তবে এগুলা ছাড়াও আরো কয়েকটা আছেঃ</p>\n<ul>\n<li><code>+</code> — দুইটা অপারেন্ড যোগ করার জন্যে</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*oOlJUakesXUD72CrJXpadA.png\" alt=\"\" /><strong>সাধারণ যোগ</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Eo97-H10TakMrK62TsRRIw.png\" alt=\"\" /><strong>সেইম ভ্যারিয়েবলের ক্ষেত্রেও</strong></p>\n<ul>\n<li><code>-</code> — দুইটা অপারেন্ড বিয়োগ করার জন্যে</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*D1A50X8aER1ENKXLfZB__Q.png\" alt=\"\" /><strong>বিয়োগ</strong></p>\n<ul>\n<li><code>*</code> — দুইটা অপারেন্ড গুণ করার জন্যে</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*74HEFBvKN03Xjp0gDhbqLg.png\" alt=\"\" /><strong>গুণ</strong></p>\n<ul>\n<li><code>/</code> — দুইটা অপারেন্ড ভাগ করার জন্যে</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*q1K5SKmqkUQQ5UNfgHh1tA.png\" alt=\"\" /><strong>ভাগ</strong></p>\n<p><strong>স্পেশাল নোটঃ</strong> ভাগফল দশমিক এ আসলে দশমিকেই রেজাল্ট শো করবে</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*9mEYsxSe1uEXjmteuI9IZw.png\" alt=\"\" /><strong>দশমিক এ দেখাচ্ছে।</strong></p>\n<ul>\n<li><strong><code>%</code> (মডুলাস)</strong> — ভাগশেষ বের করার জন্যে, এটা আসলে অনেক ইউজফুল একটা অপারেটর। ১৩ ভাগ ৫ এ রেজাল্ট হয় ২, কিন্তু ভাগশেষ থাকে ৩। এই ভাগশেষ বের করতেই এই অপারেটর ইউজ করা হয়</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*qberW9LeLWZWAmTVbRW-Ug.png\" alt=\"\" /><strong>ভাগশেষ দেখাচ্ছে</strong></p>\n<ul>\n<li><strong><code>++</code> (ইনক্রিমেন্ট)</strong> — এটা আপনার অপারেন্ড এর সাথে ১ যোগ করবে। ধরুন আপনার একটা ভ্যারিয়েবল আছে <code>a</code> যেটার ভ্যালু <code>10</code>, এখন <code>a++</code> লিখলে এটার ভ্যালুর সাথে এক যোগ হবে। এটা <code>a = a + 1</code>এটার শর্টকাট বলা চলে।</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*numAFHS-VNNyDXNuubzg7Q.png\" alt=\"\" /><strong>ভ্যালু ইনক্রিমেন্ট হচ্ছে</strong></p>\n<ul>\n<li><strong><code>--</code> (ডিক্রিমেন্ট)</strong> — অনেকটা ইনক্রিমেন্ট অপারেটরের মতোই কিন্তু ভ্যালু ১ কমাবে। সেইমভাবে এটাও <code>a = a - 1</code>এটার শর্টকাট।</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Gmh50pqtqfjH07AHG_aQNQ.png\" alt=\"\" /><strong>ভ্যালু ডিক্রিমেন্ট হচ্ছে</strong></p>\n<p><strong>লক্ষণীয়ঃ</strong> এই ইনিক্রিমেন্টাল/ডিক্রিমেন্টাল অপারেটরগুলো আপনার ভ্যারিয়েবলের আগে এবং পরে দুই পজিশনেই বসতে পারে। পার্থক্য হলো আগে থাকলে ভ্যালুর ইনক্রিমেন্ট/ডিক্রিমেন্ট আগে হয়, তারপর ভ্যালু রিটার্ন করে। আর পরে থাকলে আগে রিটার্ন করে, পরে ভ্যালুর ইনক্রিমেন্ট/ডিক্রিমেন্ট হয়।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0JmdyLVkxx9hSz-a3hGgXg.png\" alt=\"\" /><strong>a++ ১০ ই দেখাচ্ছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*bLIAHUyjcunZCLzkXbvfOQ.png\" alt=\"\" /><strong>কিন্তু পরে আবার অ্যাক্সেস করায় দেখা যাচ্ছে এটার ভ্যালু পরিবর্তন হয়েছে।</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*QziyapWpEX02HpzCQ38jQQ.png\" alt=\"\" /><strong>এখানে প্রথম রিটার্নই করছে চ্যাঞ্জ হওয়া ভ্যালু</strong></p>\n<p>সেইম ডিক্রেমেন্টাল অপারেটরের ক্ষেত্রেও। ক্ষেত্রবিশেষে কাজে লাগে এগুলা অনেক, তাই মাথায় থাকা ভালো।</p>\n<p><strong>২। কম্পারিজম অপারেটরঃ</strong> একটা ভ্যালুর সাথে আরেকটা কম্পেয়ার করার জন্য। দুইটা ভ্যালু সমান কি সমান না, নাকি বড় না ছোটো। এরা রেজাল্ট হিসাবে হয় সত্য <code>true</code> অথবা মিথ্যা <code>false</code> রিটার্ন করে।</p>\n<ul>\n<li><strong><code>==</code> (ইকুয়্যাল)</strong> — দুইটার ভ্যালু সমান সমান কিনা দেখার জন্যে। সমান হলে সত্য <code>true</code> নাইলে মিথ্যা <code>false</code> রিটার্ণ করবে।</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3XLny9RT4imFgVoCZ-rkJQ.png\" alt=\"\" /><strong>সমান সমান কি?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*WXoLZ6GNiIAKvGeJIi41RQ.png\" alt=\"\" /><strong>সমান সমান? না…</strong></p>\n<ul>\n<li><code>!=</code><strong>(ইকুয়্যাল না)</strong> — দুইটার ভ্যালু সমান না হলে সত্য <code>true</code> দেখাবে</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*KmKqX6X-LzrJQYfc1D9QKA.png\" alt=\"\" /><strong>সমান না তো?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*2PID3JcMQOhE-DOjLQlztw.png\" alt=\"\" /><strong>সমান না তো?</strong></p>\n<ul>\n<li><code>&gt;</code><strong>(বড়)</strong> — একটা আরেকটা থেকে বড় কিনা সেটা দেখার জন্যে। বড় হলে সত্য <code>true</code> নাইলে মিথ্যা <code>false</code></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Nndos93bCsS6NKqviANMSw.png\" alt=\"\" /><strong>বড় তো?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7YOxUsbXzh4FBkiXDL4EUg.png\" alt=\"\" /><strong>বড় তো?</strong></p>\n<ul>\n<li><code>&lt;</code><strong>(ছোট)</strong> — একটা আরেকটা থেকে ছোটো কিনা সেটা দেখার জন্যে। ছোটো হলে সত্য <code>true</code> নাইলে মিথ্যা <code>false</code></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Zott-nSc5VQ2tRKycQUc9A.png\" alt=\"\" /><strong>ছোটো তো?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*F2l7YWGQyE2IJim6gb65aQ.png\" alt=\"\" /><strong>ছোটো তো?</strong></p>\n<ul>\n<li><code>&gt;=</code><strong>(বড় অথবা ইকুয়্যাল)</strong> — একটা আরেকটা থেকে বড় বা সমান সমান কিনা সেটা দেখার জন্যে। বড় বা সমান হলে সত্য <code>true</code> নাইলে মিথ্যা <code>false</code></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NtlcHeclWgkmHE2FSYiqkg.png\" alt=\"\" /><strong>বড় অথবা সমান সমান কি?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xhV9pnXPpiwn7Z-UMP7CvA.png\" alt=\"\" /><strong>বড় অথবা সমান সমান কি?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*nYa3MsrJWqMN6JYFBYFO9g.png\" alt=\"\" /><strong>বড় অথবা সমান সমান কি?</strong></p>\n<ul>\n<li><code>&lt;=</code><strong>(ছোটো অথবা ইকুয়্যাল)</strong> — একটা আরেকটা থেকে ছোটো বা সমান সমান কিনা সেটা দেখার জন্যে। ছোটো বা সমান হলে সত্য <code>true</code> নাইলে মিথ্যা <code>false</code></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*k6stw8Jz_4wt_Amx2goVDw.png\" alt=\"\" /><strong>ছোটো অথবা সমান সমান কি?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*AnbVD-Q0czVQqBnGyx5g2w.png\" alt=\"\" /><strong>ছোটো অথবা সমান সমান কি?</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6C8-RGFURLN_nc_uoW2Hcg.png\" alt=\"\" /><strong>ছোটো অথবা সমান সমান কি?</strong></p>\n<p><strong>গুরুত্বপূর্নঃ</strong> এগুলার বাইরেও আরো মোস্ট ইউস কিছু অপারেটর রয়েছে। যেমন <code>===</code> এবং <code>!==</code> এগুলা ব্যাসিকেলি ইকুয়্যাল <code>==</code> বা ইকুয়্যাল না <code>!=</code> অপারেটরের মতোই কিন্তু মেইন পার্থক্য হলো ট্রিপল ইকুয়্যাল অপারেটর ভ্যালু দুইটা সমান কিনা সেটা চ্যাক করে এবং সাথে দুইটা একই টাইপের কিনা সেটাও চ্যাক করে। যেখানে ডাবল অপারেটরগুলো শুধুমাত্র ভ্যালু দুইটা সমান কিনা চ্যাক করে, টাইপ চ্যাক করে না।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*PmdpYOtJmbC9gtGxP8f_tA.png\" alt=\"\" /><strong>এখানে প্রথমটা নাম্বার মনে হলেও এটা স্ট্রিং, তাই ডাবল অপারেটর ট্রু দেখালেও ট্রিপল ফলস দেখাচ্ছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ypkCRZ85lM72Cbh9XqaJQw.png\" alt=\"\" /><strong>সেইম কেইস আগেরটার মতোই</strong></p>\n<p>এগুলা আসলে অনেক ইউজ হয় এবং জাভাস্ক্রিপ্ট এ অনেকটা ইউনিক তাই ভালো করে মনে রাখা বা এগুলা সম্পর্কে ধারণা রাখা ভালো।</p>\n<p><strong>৩। লজিক্যাল অপারেটরঃ</strong> তিনরকমের হতে পারেঃ</p>\n<ul>\n<li><code>&amp;&amp;</code><strong>(এন্ড)</strong> — সাধারণত দুইটা অপারেন্ড এর মাঝখানে বসে। এবং যদি দুইটা স্টেটমেন্ট সত্য <code>true</code> হয় তাহলে পুরোটা সত্ য নাইলে যেকোনো একটাও যদি মিথ্যা <code>false</code>হয় তাহলে পুরোটাই মিথ্যা <code>false</code>। আর যদি দুইটাই মিথ্যা <code>false</code> হয়, তাহলেও পুরোটা মিথ্যা <code>false</code></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*_zgj_6R3z-VgNpl5aiEQIA.png\" alt=\"\" /><strong>সবগুলা সত্য হলেই তবে পুরোটা সত্য</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*L-D8TzlwvJlEjhVYXazDbA.png\" alt=\"\" /><strong>একটা মিথ্যা হলেই পুরোটা মিথ্যা</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ygVOQGXVVUMJSoeItL5gug.png\" alt=\"\" /><strong>আপনি চাইলে অনেকগুলাও একসাথে এভাবে ইউজ করতে পারবেন</strong></p>\n<ul>\n<li><code>।।</code><strong>(অর)</strong> — সাধারণত দুইটা অপারেন্ড এর মাঝখানে বসে। এবং যদি যেকোনো একটা সত্য <code>true</code> হয় তাহলে সত্য <code>true</code>, দুইটাই যদি সত্য <code>true</code> হয় তাহলেও পুরোটা সত্য <code>true</code>। আর যদি একমাত্র দুইটা স্টেট্মেন্টই মিথ্যা <code>false</code> হয় তাহলেই পুরোটা মিথ্যা <code>false</code> হবে</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*nf4rR41JJzjMS0jTgf_vqA.png\" alt=\"\" /><strong>সবগুলা সত্য হলে পুরোটাই সত্য</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NoV4VzeI0ZLwB1qV7gfu-A.png\" alt=\"\" /><strong>যেকোনো একটা সত্য হলেই সবটা সত্য</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*fahmlvkdglFdLWN9FsaB9w.png\" alt=\"\" /><strong>সবগুলা মিথ্যা হলে তবেই পুরোটা মিথ্যা</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*oDRAJPbGRZAbTNUEUzZQPg.png\" alt=\"\" /><strong>এভাবে অনেকগুলো একসাথে ইউজ করা যাবে</strong></p>\n<ul>\n<li><code>!</code> <strong>(নট)</strong> — সাধারণত একটা স্টেটমেন্ট এর পূর্বে বসে। এবং সেটা যদি সত্য <code>true</code> হয় তাহলে এটা রিটার্ন করবে মিথ্যা <code>false</code>, আর মিথ্যা <code>false</code> হলে রিটার্ন করবে সত্য <code>true</code>। মানে উল্টো</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*r_gBkgCT94jTZ8pWpWZeiA.png\" alt=\"\" /><strong>উল্টো</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4LQ4SFGg5jesrfczteTanw.png\" alt=\"\" /><strong>উল্টো</strong></p>\n<p><strong>৪। অ্যাসাইনমেন্ট অপারেটরঃ</strong> সমান, যোগ সমান, বিয়োগ সমান, গুণ সমান, ভাগ সমান, মডুলাস সমান।</p>\n<ul>\n<li><code>=</code> <strong>সিম্পল অ্যাসাইনমেন্ট অপারেটরঃ</strong> আমরা অলরেডি ইউজ করেছি এই অপারেটর। এটা ভ্যারিয়েবলে ভ্যালু অ্যাসাইন করার জন্যে ইউজ করা হয়।</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*WFbHRomQSPXBKsmER-JjDA.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>+=</code> <strong>যোগ এবং অ্যাসাইনমেন্ট অপারেটরঃ</strong> নিজের সাথে নিজের ভ্যালু যোগ করে সেটাকে আবার নিজের সাথেই অ্যাসাইন করা একই সাথে। <code>a += 10</code> এটার ফুল ফর্ম হচ্ছেঃ</p>\n<p>a = a + 10;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-7UY_oCqSD564K6CT-PLZQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>-=</code> <strong>বিয়োগ এবংঅ্যাসাইনমেন্ট অপারেটরঃ</strong> এটাও শর্টকাট আগেরটার মতোই। নিজের সাথে নিজের ভ্যালু বিয়োগ করে সেটাকে আবার নিজের সাথেই অ্যাসাইন করা একই সাথে। <code>a -= 10</code> এটার ফুল ফর্ম হচ্ছেঃ</p>\n<p>a = a - 10;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*q4B2uL7O512Mm4yZXWJ0oA.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>*=</code> <strong>গুণ এবংঅ্যাসাইনমেন্ট অপারেটরঃ</strong> এটাও শর্টকাট।নিজের সাথে নিজের ভ্যালু গুণ করে সেটাকে আবার নিজের সাথেই অ্যাসাইন করা একই সাথে। <code>a *= 5</code> এটার ফুল ফর্ম হচ্ছেঃ</p>\n<p>a = a * 5;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RE28D5SiqcFm4tZbAJaAYA.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>/=</code> <strong>ভাগ এবংঅ্যাসাইনমেন্ট অপারেটরঃ</strong> এটাও শর্টকাট। নিজের সাথে নিজের ভ্যালু ভাগ করে সেটাকে আবার নিজের সাথেই অ্যাসাইন করা একই সাথে। <code>a /= 2</code> এটার ফুল ফর্ম হচ্ছেঃ</p>\n<p>a = a / 2;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*dilHlaGwzHjDR3LocZirzg.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>%=</code> <strong>ভাগশেষ এবংঅ্যাসাইনমেন্ট অপারেটরঃ</strong> এটাও আরেকটা শর্টকাট।নিজের সাথে নিজের ভ্যালু মড করে সেটাকে আবার নিজের সাথেই অ্যাসাইন করা একই সাথে। <code>a %= 5</code> এটার ফুল ফর্ম হচ্ছেঃ</p>\n<p>a = a % 5;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Z9pg-z9FF23cF_CWmQtvSQ.png\" alt=\"\" /></p>\n<p><strong>৫। কন্ডিশনাল/টার্নারি অপারেটরঃ <code>? :</code></strong> এটাও আরেকটা শর্টকাট। উদাহরন দেখলে বুঝতে পারবেনঃ</p>\n<pre><code>যদি কন্ডিশন সত্য হয় ? তাইলে ভ্যালু এটা : নাইলে ভ্যালু এইটা\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*2smafcXgZWE6zZp4UFJNxA.png\" alt=\"\" /></p>\n<p><strong>৬। অন্যান্য অপারেটরঃ</strong></p>\n<ul>\n<li><strong>typeof অপারেটরঃ</strong> আমরা আগের পর্বেও এটা ইউজ করেছি। এটাও আসলে একটা অপারেটর। ডাটার টাইপ বের করতে ইউজ করা হয়। আপনি চাইলে এভাবে <code>typeof(yourVariable)</code> ফার্স্ট ব্র্যাকেটস এর ভিতরে, বা এভাবেও <code>typeof yourVariable</code> লিখতে পারবেন। এটা সবসময় ভ্যালু যে টাইপের সেটাই স্ট্রিং হিসাবে রিটার্ন করবেঃ</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*wP9g3JlFBsjbXQoL2rQ6fg.png\" alt=\"\" /></p>\n<p><strong>typeof</strong> কোনটা কিভাবে রিটার্ন করেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*obO-dzHwYOqnb8wLwPymWw.png\" alt=\"\" /></p>\n<p>আজকের পর্ব এইটুকুই। ভালো থাকবেন, সবাইকে ভালো রাখবেন। আর মনে রাখবেন প্র্যাক্টিসের উপর কিছু নাই। আপনি উদাহরণ গুলো যতরকমভাবে পারবেন প্র্যাক্টিস করবেন। আপনার নিজের থেকেও প্র্যাক্টিস করবেন যতভাবে পারেন। কোনো সমস্যা হলে গুগুল তো আছেই। আর আমাকে ইমেইল করুন বা এখানে কমেন্ট করতে পারেনঃ</p>\n<pre><code>Email: zonayedpca@gmail.com\n</code></pre>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Basic","জাভাস্ক্রিপ্ট"],"date":"2018-03-20T06:31:38.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>এই পর্বে আমি কন্ডিশনাল স্টেটমেন্ট নিয়ে বিস্তারিত আলোচনা করবো। কন্ডিশনাল স্টেটমেন্ট সাধারণত সব প্রোগ্রামিং ল্যাঙ্গুয়েজেই কমন একটা জিনিস। আর গুরুত্বপূর্ন তো অবশ্যই। তেমন ঝামেলাপূর্ন কোনো ব্যাপার না। একদম সিম্পল এবং আশা করি সবাই সহজেই শিখে ফেলতে পারবেন এটা।</p>\n<p>আমরা রিয়েল লাইফে অনেক ডিসিশন নিয়ে থাকি। আমাকে আজকে এই কাজটা নাইলে ঐকাজটা বা দুইটাই করতে হবে। আজকে যদি শুক্রবার হয় তাহলে কোনো কাজ নাই, আর যদি সোমবার হয় তাহলে অফিস বা স্কুল/কলেজ/ভার্সিটি আছে। বা মার্কেটে কেনাকাটা করতে গেলে ডিসিশন নিতে হয়।</p>\n<p>আমাদের প্রোগ্রামিং এর বেলাতেও মাঝেমধ্যে এরকম ডিসিশন নেওয়া লাগে। ধরুন আপনার একটা ওয়েবসাইট আছে, ঐটাতে ইউজাররা রেজিস্ট্রেশন করতে পারে। আবার রেজিস্ট্রেশন না করেও অনেকে ভিসিট করতে পারে যাদেরকে আমরা গেস্ট ইউজার বা ভিসিটর বলতে পারি। এখন যদি আপনার ওয়েবসাইটে সেই ইউজার রেজিস্ট্রেশন করে থাকে তাহলে আপনি তাকে একটা জিনিস দেখাবেন আর যদি রেজিস্ট্রেশন না করে থাকে তাহলে তাকে অন্য জিনিস দেখাবেন।</p>\n<p>ফেসবুককেই উদাহরণ হিসাবে নিলে, আপনি রেজিস্ট্রেশন/লগিন না করলে একটা লগিন/সাইন-আপ পেজ দেখতে পাবেন। আর রেজিস্ট্রেশন করে লগিন করলে আবার অন্যরকম জিনিস দেখতে পারতেছেন। তো এগুলাই আসলে প্রোগ্রামিং এ ডিসিশন। আর এগুলাকেই কন্ট্রোল করা হয় কন্ডিশনাল স্টেটমেন্ট দিয়ে।</p>\n<p>কন্ডিশনাল স্টেটমেন্ট সোজা বাংলায়</p>\n<pre><code>এখন রাত(সত্য হইলে):\n   তাইলে ঘুমানোর টাইম\nনা এখন সকাল(সত্য হইলে):\n   তাইলে ঘুম থেকে উঠার টাইম\nনা এখন বিকাল(সত্য হইলে):\n   তাইলে ঘুরতে যেতে হবে\nকোনোটাই সত্য না:\n   তাইলে বসে থাকি\n</code></pre>\n<p>যাই হউক এবার আশা করি বুঝতে পারেছেন। তাহলে সোজা প্রোগ্রামের দিকে চলে যাই। জাভাস্ক্রিপ্ট এ কন্ডিশনাল স্টেটমেন্ট ৩ রকমের আছেঃ</p>\n<p>১। <code>if</code> statement</p>\n<p>২। <code>if...else</code> statement</p>\n<p>৩। <code>if...else if</code> statement</p>\n<p>আরো একটা আছে <code>switch</code> স্টেটমেন্ট নামে, সেটা নিয়েও এই পর্বে ডিসকাস করেছি শেষের দিকে।</p>\n<p>এখন আসুন বিস্তারিত আলোচনায় যাই। তার আগে প্রথম দিকের পর্বে বানানো স্ক্রিপ্ট ফাইলটা ওপেন করুন। ওখানে আমরা প্র্যাক্টিস করবো। যদি ফাইল না থেকে থাকে তাইলে <a href=\"https://github.com/zonayedpca/basicJavaScriptBoilerplate/archive/master.zip\">এখান থেকে</a> নামিয়ে বা আপনি নিজেই একটা HTML ফাইল নিয়ে সাথে জাভাস্ক্রিপ্ট ফাইল একটা লিঙ্ক করিয়ে নিন। আর রেজাল্ট দেখার জন্যে <code>index.html</code>ফাইল আপনার ব্রাউজারে(ক্রোম হলে ভালো হয়, যেহেতু এই লেখায় সব জায়গায় গুগুল ক্রোমই ইউজ করা হয়েছে) ওপেন করে কন্সোল বের করে দেখবেন।</p>\n<p>কন্ডিশনাল স্টেটমেন্ট এর মেইন কাজ হলো যদি কোনো স্টেটমেন্ট সত্য হয় তাহলেই একমাত্র সেই কন্ডিশনাল স্টেটমেন্ট এর ভিতরে থাকা আপনার কোড/প্রোগ্রাম গুলো রান করবে। আর সত্য না হলে টোটালি ইগ্নোর করে যাবে।</p>\n<p><strong>১। <code>if</code> statement</strong></p>\n<pre><code>if(সত্য কিছু হয়) {\n   তাহলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n}\n</code></pre>\n<p>এটা হচ্ছে শুধু একটা কন্ডিশন চ্যাক করবে। যদি অমুক সত্য হয় তাইলেই আমার ভিতরে যা আছে তা দেখাবা নাইলে কিছু দেখানোর দরকার নাই</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*sTX0H8ohNX5y-zYrt8tO3A.png\" alt=\"\" /><strong>দুইটা নাম্বার কম্পেয়ার করে সত্য/মিথ্যা রেজাল্ট, এবং তার উপর ডিপেন্ড করে ভিতরের কন্সোল লগ প্রিন্ট হবে কি হবে না</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*PB2IInwnriFTj67JgOqISg.png\" alt=\"\" /><strong>৩ যেহেতু ৫ থেকে ছোটো তাই এক্সপ্রেশন সত্য এবং ভিতরের কন্সোল লগ প্রিন্ট হয়েছে</strong></p>\n<p>আরোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iGj_FQClEQNrG93fJx3itA.png\" alt=\"\" /><strong>একইভাবে স্ট্রিংও কম্পেয়ার করা হচ্ছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*B2rhmzpUI1NaymWIgvIuoA.png\" alt=\"\" /><strong>যেহেতু স্ট্রিং দুইটা একই, তাই লেখা প্রিন্ট হয়েছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*XWEYOgDTdd0kJIc7J9lDdg.png\" alt=\"\" /><strong>এখানে এক্সপ্রেশন মিথ্যা</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*wX967twXWiac0hsz7x8-Ag.png\" alt=\"\" /><strong>তাই কিছু প্রিন্ট হয়নি</strong></p>\n<p>আপনি এভাবে পর পর কয়েকবারও লিখতে পারেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*AXZ45JvVKg5bliigen9WqQ.png\" alt=\"\" /><strong>এভাবেও করা যায়</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tN6POqZD55waI8dfOdqUog.png\" alt=\"\" /><strong>যে যে এক্সপ্রেশনগুলো সত্য হয়েছে সেগুলার ভিতরের কন্সোল লগই প্রিন্ট হয়েছে</strong></p>\n<p>তবে কন্ডিশনগুলো যদি একটা সাবজেক্ট বা একটা কারণের উপরেই হয়ে থাকে তাহলে ৩ নাম্বারেরটা <code>if...else if</code>ইউজ করাই উত্তম।</p>\n<p>আর আপনাকে অবশ্যই মনে রাখতে হবে। আপনি <code>if (expression)</code> এখানে এক্সপ্রেশনে যেটা দিবেন সেটা অবশ্যই সত্য <code>true</code> নাইলে মিথ্যা <code>false</code> রেজাল্ট দিতে হবে। কন্ডিশনাল স্টেটমেন্ট শুধু এখানে সত্য <code>true</code> বা মিথ্যা <code>false</code> অ্যাক্সেপ্ট করে, অন্যকিছু করে না। আগের পর্ব তে মনে আছে তো কিভাবে অপারেটরগুলো সত্য মিথ্যা রেজাল্ট দেখাতো? হ্যা ওগুলাই এখানে ইউজ করতে পারবেন ইচ্ছা মতো <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f642.svg\" alt=\"🙂\" /></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*dKJXNgAx1HkaaZaQZO7rFQ.png\" alt=\"\" /><strong>এভাবেও অনেকগুলা এক্সপ্রেশন একসাথে দিতে পারবেন। মনে রাখবেন শেষ পর্যন্ত যদি সত্য হয় তাইলেই প্রিন্ট হবে নাইলে কখনো প্রিন্ট হবে না</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1dYiGe4D6cvvifKZzZ002A.png\" alt=\"\" /><strong>এক্সপ্রেশন সত্য তাই প্রিন্ট হয়েছে</strong></p>\n<p><strong>২। <code>if...else</code> statement</strong></p>\n<pre><code>if(সত্য কিছু হয়) {\n   তাহলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n} else {\n   নাইলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n}\n</code></pre>\n<p>এটা হচ্ছে যদি <code>if</code> অমুক সত্য হয় তাইলে আমার ভিতরে যা আছে দেখাবা নাইলে <code>else</code> এগুলা দেখাবা। এটা আপনাকে আরো কন্ট্রোল এনে দিবে কন্ডিশনাল স্টেটমেন্ট এর উপরে। এখানে যদি সত্য হয় তাহলে <code>if</code> এর ভিতরের জিনিস এক্সিকিউট হবে। আর যদি মিথ্যা হয় তাহলে <code>else</code> এর ভিতরের জিনিস এক্সিকিউট হবে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TKx9PXlSXnscRaP2zq8Lzw.png\" alt=\"\" /><strong>সত্য হলে এটা, আর মিথ্যা হলে ঐটা প্রিন্ট করবে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*77vZ4FuH8eRYHpR87OX1UA.png\" alt=\"\" /><strong>সত্য তাই প্রিন্ট হচ্ছে</strong></p>\n<p><strong>৩। <code>if...else if</code> statement</strong></p>\n<pre><code>if(সত্য কিছু হয়) {\n   তাহলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n} else if(নইলে যদি আমি সত্য হই){\n   তাহলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n} else if(নইলে যদি আমি সত্য হই){\n   তাহলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n} \n...\nelse {\n   নাইলে আমার ভিতরের জিনিস এক্সিকিউট হবে\n}\n</code></pre>\n<p><code>…</code> মানে যতবার ইচ্ছা <code>else if</code> ইউজ করা যাবে</p>\n<p>এটা হচ্ছে যদি অমুক সত্য হয় তাহলে আমার ভিতরে যা আছে দেখাবা নাইলে যদি অন্যকিছু সত্য হয় তাইলে এগুলা দেখাবা বা যদি কিছুই সত্য <code>true</code>না হয় তাহলে <code>else</code> আমার ভিতরের গুলা দেখাবা</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ulTU02jJwye6n4uEJdSuIg.png\" alt=\"\" /><strong>এভাবে যতো ইচ্ছা else if ইউজ করতে পারবেন</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0wqZplcATaxsRCjYNUSwMA.png\" alt=\"\" /><strong>যে এক্সপ্রেশন সত্য হয়েছে সেটার ভিতরেরটা প্রিন্ট হচ্ছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Umgv2aalHlh13JgH3jSi8w.png\" alt=\"\" /><strong>সেইম ভাবে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*I9mIXSdGNXhfcWGkR94anw.png\" alt=\"\" /><strong>যে এক্সপ্রেশন সত্য সেটাই প্রিন্ট হবে</strong></p>\n<p>এগুলাই কন্ডিশনাল স্টেটমেন্ট এর ব্যাসিক বলতে গেলে। কিন্তু এগুলাকে আপনি চাইলে আরো কমপ্লেক্স করেও লিখতে পারবেন।</p>\n<p><em>***বাংলাদেশে শুক্রবার, শনিবার সাপ্তাহিক বন্ধের দিন, আর বৃহস্পতিবার হাফ ডে অনেক জায়গায়।</em></p>\n<p><strong>নেস্টিং কন্ডিশনাল স্টেট্মেন্টঃ</strong></p>\n<p>নেস্টিং মানে হচ্ছে একটা কন্ডিশনাল স্টেটমেন্ট এর ভিতরে আরেকটা কন্ডিশনাল স্টেটমেন্ট। এবং এটা সম্পূর্নরূপে বৈধ। আপনি যেভাবে ইচ্ছা শুধু <code>if</code> এর ভিতরেও <code>else if…else</code> বা <code>else if</code> ইউজ করতে পারবেন বা অন্যগুলার ভিতরেও শুধু <code>if</code> ইউজ করতে পারবেন এখানে ধরা বাধার কোনো নিয়ম নাই।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*_mxMr1Jn10s814xOYaqWRQ.png\" alt=\"\" /><strong>একটার ভিতরে আরেকটা, আরেকটার ভিতরে আরেকটা, এভাবে যতোবার ইচ্ছা করতে পারবেন</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GdjbZpz1-2Okz8OsKWJlxA.png\" alt=\"\" /><strong>প্রিন্ট হচ্ছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*in1BL_qKAMZMeNgissyoxQ.png\" alt=\"\" /><strong>এভাবেও ইউজ করতে পারবেন, এখানে আপনার পরিপূর্ন স্বাধীনতা রয়েছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Ni4OZQXtf3xdFVZp5PKr8A.png\" alt=\"\" /><strong>প্রিন্ট হচ্ছে</strong></p>\n<p><strong>আপনার টাস্কঃ</strong></p>\n<p>আপনার আজকে টাস্ক হলো ৩ টা নাম্বার থেকে বড় নাম্বার খুঁজে বের করবেন। এর জন্যে আপনার মাথায় যা আসে সেভাবেই করতে পারবেন। চেষ্টা করে দেখুন, না পারলে সমস্যা নাই তবে প্র্যাক্টিস করা জরুরী।</p>\n<p><strong>সুইচ স্টেটমেন্টঃ</strong></p>\n<p>এবার আসি <code>switch</code> স্টেটমেন্ট এ। আমরা শেষের যেটা ইউজ করলাম, <code>if…else if</code>ঐটা ইউজ করে সবসময় ফ্লেক্সিবল নাও হতে পারে। ধরুন আপনি একটা ভ্যালুর উপরেই ডিসিশন নিতে চাচ্ছেন। কেস যদি অমুক হয় তাইলে এটা প্রিন্ট করা হবে, আর কেস যদি তমুক হয় তাইলে ঐটা প্রিন্ট করা হবে।</p>\n<pre><code>সুইচ (এক্সপ্রেশন) {\n   কেস যদি এটা(১) হয়ঃ \n      এখানের কোড এক্সিকিউট হবে;\n      ব্যাস তারপর শেষ;\n\nকেস যদি এটা(২) হয়ঃ \n      এখানের কোড এক্সিকিউট হবে;\n      ব্যাস তারপর শেষ;\n   ...\n\n   কেস যদি এটা(.) হয়ঃ \n      এখানের কোড এক্সিকিউট হবে;\n      ব্যাস তারপর শেষ;\n\n   কেস যদি এটা হয়ঃ \n      এখানের কোড এক্সিকিউট হবে;\n      ব্যাস তারপর শেষ;\n\n   কেস যদি কোনোটাই না হয় তাইলে বাই ডিফল্টঃ\n      এখানের কোড এক্সিকিউট হবে;\n}\n</code></pre>\n<p>একটা উদাহরণ দিলে ক্লিয়ার হবেন। নিচের উদাহরণটা ভালো করে দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6Zln1Pdu4Gsv_hRxl-w3Cg.png\" alt=\"\" /><strong>বাহ! অনেক লম্বা কোড তো, কিন্তু সিম্পল</strong></p>\n<p>দেখুন, যদিও এই কাজের জন্যে সুইচ বেস্ট সলিউশন না কিন্তু আপনি আপনার মন মতো যেকোনো কিছু ইউজ করতে পারবেন। এখানে শেষে <code>default</code> লিখা হয়েছে। এটা যদি আপনি না লিখেন তাইলে যেই কেস এ আপনার ভ্যালু মিলবে সেখান থেকে একদম শেষ পর্যন্ত প্রিন্ট হবে। <code>break;</code> এটা দিয়ে বুঝানো হয় যে ব্যাস কাজ শেষ এবার থামো! আর সবশেষে দেখুন একটা ডিফল্ট কেস আছে। যদি কোনোটাই না মিলে তাইলে এইটা প্রিন্ট হবে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GROWeNyzhIUJnPSRZuTHGw.png\" alt=\"\" /><strong>যেই কেস মিলছে, সেটাই প্রিন্ট হচ্ছে</strong></p>\n<p>আরো কিছু উদাহরনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Wc34jg14GSAW0dMho728LQ.png\" alt=\"\" /><strong>এই ধরনের জিনিসের জন্যে সুইচ বেস্ট অপশন</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*z5KkhiGbh3CyZqj8ECZ6LA.png\" alt=\"\" /><strong>প্রিন্ট হচ্ছে</strong></p>\n<p>তো বুঝতে পারছেন ক্ষেত্রবিশেষে এটাও অনেক কাজের হতে পারে। তবে আপনি চাইলে যেকোনো একটা ইউজ করতে পারবেন, এতে ধরাবাঁধা কোনো নিয়ম নেই। যেটা দিয়ে আপনার কাজ হবে সেটাই ইউজ করবেন।</p>\n<p>আর ব্রেক <code>break;</code> শেষে অবশ্যই দিবেন, নাইলে আপনার কেস সবগুলাই প্রিন্ট হবে দেখবেন। তো যদি এরকম কিছু দেখেন তাহলে মেবি <code>break;</code> দিতে ভুলে গেছেন!</p>\n<hr />\n<p>আর সর্বশেষে আরেকটা ব্যাপার, এতোগুলো পর্বে দেখে আসছেন আমি কোড একটু ফাঁকা ফাঁকা করে লিখতেছি কোথাও কোথাও। আসলে এই ফাঁকা জায়গাগুলো কোনো ব্যাপার না। আপনি এভাবেও কোড লিখতে পারবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yUqCPUaKyrhH1N1-lomCxg.png\" alt=\"\" /><strong>তবে var এর পড়ে স্পেসটা ইম্পরট্যান্ট নাইলে কম্পিউটার কিভাবে বুঝবে var ই লিখা হয়েছে নাকি অন্যকিছু (varmyAge)</strong></p>\n<p>কিন্তু আমরা এভাবে লিখি কারণ দেখতে সুন্দর দেখা যায়, আর আপনিই সহজেই কাজ করতে পারবেন। এরর আসলে ফিক্স করতে পারবেন। আর কোডের ফ্লো বুঝতে পারবেন যে কোথায় কোনটা শুরু হইছে আর কোথায় শেষ হইছে। ব্যাসিকেলি এই জন্যেই এভাবে ফাঁকা করে করে লেখা হয়। ফাঁকা গুলো স্পেস <code>space</code> কী দিয়েও করতে পারবেন, তবে ডেভেলপাররা ট্যাব <code>tab</code> কী ইউজ করে এজন্যে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OBebR6nwrjTZyafqEs6O6Q.png\" alt=\"\" /><strong>বাহ! অনেক সুন্দর দেখা যায় তো। আর হ্যা বুঝাও যাচ্ছে কি করা হচ্ছে এই কোডে</strong></p>\n<hr />\n<p><strong>একটা রিকোয়েস্টঃ</strong></p>\n<p>একটু সময় নিয়ে নিচের ফর্মটা পূরণ করার জন্য আপনাকে রিকোয়েস্ট করছি। যাতে ভবিষ্যতে আমার কি করা উচিত, কি টার্গেট করে লেখা উচিত, কি টেকনোলজী নিয়ে লেখা উচিত এগুলা সব বুঝতে পারি তাই আপনার কাছ থেকে একটু সময় নিবো, কষ্ট করে এই ফর্ম টা পূরণ করে সাবমিট করবেন <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f642.svg\" alt=\"🙂\" /></p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["JavaScript","JavaScript-Bangla","JavaScript-Basic","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-03-24T06:31:28.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>প্রোগ্রামিং এ আমাদের মাঝে মধ্যে অনেক কাজ বারবার করতে হয়। সেক্ষেত্রে আমরা লুপ ইউজ করি। আজকের পর্বে আমি বিভিন্নরকম লুপ নিয়ে আলোচনা করবো।</p>\n<hr />\n<p>প্রোগ্রামিং এ লুপ খুবই মজাদার একটা জিনিস। লুপ জিনিসটা বুঝার জন্যে একটু প্রকৃতি তে চলে যেতে হবে। আমাদের পৃথিবীতে দিন রাত সবসময় হয়। একটা নির্দিষ্ট টাইম পর পর দিন হয়, আবার একটা নির্দিষ্ট পর পর রাত হয়। এটা একটা চক্র, মানে লুপ। এরকম আমাদের প্রোগ্রামিং এ বা আমরা যে কাজের জন্যে প্রোগ্রামিং ল্যাংগুয়েজ ইউজ করবো সেখানে এরকম অনেক কাজ থাকতে পারে যেটা এরকম চক্রাকার চলতে থাকে। মোবাইলের টাইমারও আরেকটা ভালো উদাহরণ। আপনি টাইমার স্টার্ট করলে সেটার ভ্যালু বাড়তেই থাকবে যতক্ষন না পর্যন্ত আপনি সেটাকে স্টপ করতেছেন। এভাবে বলা যায়ঃ</p>\n<pre><code>যতক্ষন(বন্ধ না করা হবে)\n   ঘড়ি চলতে থাকবে\n</code></pre>\n<p>বা ধরুন আপনি গেইমস এ আপনার ক্যারেক্টারকে মুভ করতে চাচ্ছেন। এখন আপনি আপনার ক্যারেক্টার কে একটা পজিশন থেকে ১০ কদম সামনে যেতে বললেনঃ</p>\n<pre><code>কদম ০ থেকে শুরু, করে ১০ পর্যন্ত, প্রত্যেক কদমে এক পা\n   সামনের দিকে হাটো\n</code></pre>\n<p>প্রোগ্রামিং এ লুপ অনেক রকমের হয়। তবে জাভাস্ক্রিপ্ট এ বেশ কয়েকরকমের লুপ আছে। নিচের এই স্টেটমেন্টগুলো লুপের জন্যে ইউজ করা হয়ঃ</p>\n<p>১। <code>for</code> স্টেটমেন্ট</p>\n<p>২। <code>do</code>…<code>while</code> স্টেটমেন্ট</p>\n<p>৩। <code>while</code> স্টেটমেন্ট</p>\n<p>৪। <code>break</code> স্টেটমেন্ট</p>\n<p>৫। <code>continue</code> স্টেটমেন্ট</p>\n<p>এখানকার অনেক লুপ এখন বেশী ইউজ করা না হলেও এগুলা যেহেতু নরমাল প্রোগ্রামিং ল্যাংগুয়েজের মধ্যে থাকা কমন কনসেপ্ট তাই এগুলো সম্পর্কে ভালো ধারণা থাকা জরুরী। তাহলে আপনি পরে যেকোনো কনসেপ্টই ধরে ফেলতে পারবেন। এগুলা আসলে মেইন বেইস। আপনার বেইস স্ট্রং থাকলে পড়ে যেকোনো কিছুই শিখে ফেলতে পারবেন সহজে</p>\n<p>১। <code>for</code> স্টেটমেন্টঃ</p>\n<p>জাভাস্ক্রিপ্ট এ ফর লুপ অন্যান্য কমন প্রোগ্রামিং ল্যাংগুয়েজের মতোই। ফর লুপ সাধারণত ইউজ করা হয় আপনি যদি কোন কাজ নির্দিষ্ট টাইম পর্যন্ত করতে চান। এখানে শুরুটা বলে দিবেন, তারপর কতক্ষন পর্যন্ত চলবে সেটা বলে দিবেন আর সবশেষে প্রতিটা স্টেপে কতটুকু যেতে চান</p>\n<pre><code>for(শুরু; কন্ডিশন; স্টেপ) {\n   স্টেটমেন্ট;\n}\n</code></pre>\n<p>উদাহরনঃ</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    console.log('Go ' + i + ' step');\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*meVO_JXJWIwpKz-ONDiFBw.png\" alt=\"\" /></p>\n<p>এখানে <code>i</code> এর ভ্যালু প্রথমে জিরো হিসেবে নিয়েছি তারপর একটা কন্ডিশন সেট করে দিয়েছি যে <code>i</code> এর ভ্যালু ১০ থেকে কম হতে হবে, তাহলেই ভিতরের স্টেটমেন্ট চলবে নাইলে যদি ১০ বা ১০ থেকে বেশী হয় তাহলে ভিতরের স্টেটমেন্ট আর চলবে না, এই লুপ থেকে বের হয়ে যাবে। তারপরে দিয়েছি <code>i++</code> যার মানে হচ্ছে প্রতি স্টেপে ১ করে বাড়বে, মানে<code>i = i + 1</code> অপারেটর সেকশনে নিশ্চয় এটা দেখেছেন। আর এখানে ধারাবাহিকতা মেইন্টেইন করতে হবে ঠিক যেভাবে একটার পর আরেকটা দেওয়া আছে।</p>\n<p>২। <code>do</code>…<code>while</code> স্টেটমেন্টঃ</p>\n<p>এটাও আরেকটা লুপ তবে এখানে আপনি যদি নির্দিষ্টভাবে বলতে না পারেন কখন আপনার লুপ শেষ হতে পারে তাহলে এই লুপ ইউজ করা হয়।</p>\n<pre><code>করো {\n   স্টেটমেন্ট\n}\nযতক্ষন(আমি সত্য);\n</code></pre>\n<p>ডু হোয়াইল এ আপনার লুপ এ কোনোরকম কন্ডিশন যাচাই না করেই প্রথম একবার ভিতরের স্টেটমেন্ট এক্সিকিউট করা হবে তারপর আপনার কন্ডিশন চ্যাক করা হবে। যদি কন্ডিশন সত্য হয় তাহলে আবার লুপের ভিতরের জিনিস এক্সিকিউট হবে আর এভাবে চলতে থাকবে যতক্ষন না আপনার কন্ডিশন মিথ্যা না হবে। কন্ডিশন মিথ্যা হলে লুপ আর চলবে না।</p>\n<pre><code>var num;\n\ndo {\n    console.log('Inside the Loop');\n    num = prompt('Enter the number: ');\n} while(num &lt; 10);\n\nconsole.log('Outside the Loop');\n</code></pre>\n<p>যদি নতুন কোনো কিছু দেখে থাকেন এখানে তাহলে আমি পরিচয় করিয়ে দিচ্ছি <code>prompt</code> ইউজ করলে একটা এলার্ট বক্স আসবে ঐখান থেকে আপনি ম্যানুয়ালি ইনপুট দিতে পারবেন। এখানে আমি তাই করতেছি এই এক্সাম্পলটা রিয়েলেস্টিক করার জন্যে। এবার আউটপুট দেখেনঃ</p>\n<p>কন্সোলে দেখুন প্রথমে লুপের ভিতর থেকে এক্সিকিউট হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*VM8esmLDZvcGUaMMp4fY4w.png\" alt=\"\" /></p>\n<p>ভ্যালু ১০ এর মধ্যে দিলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LNWgQ-YJ8x2WuxMnuefMUg.png\" alt=\"\" /></p>\n<p>ভিতর থেকে আবার এক্সিকিউট হয়েছে এবং আবার এলার্ট বক্স আসবে যেহেতু কন্ডিশন এখনো সত্যঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GBx722qu6_WeIeBubSgDRA.png\" alt=\"\" /><strong>পাশে ২ লেখা এর মানে এই সেইম লেখা সেকেন্ড টাইমের মতো এক্সকিউট হয়েছে</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vEfs56xTndTZmHvyPkla8A.png\" alt=\"\" /></p>\n<p>এবার ১৫ দেওয়াও কন্ডিশন মিথ্যা হয়ে গেলো তাই লুপ থেকে বের হয়ে পরের লাইন কন্সোলে প্রিন্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*VXHYCu7LfXNoOW0_j0z0_Q.png\" alt=\"\" /></p>\n<p>৩। <code>while</code> স্টেটমেন্টঃ</p>\n<pre><code>যতক্ষন(আমি সত্য) {\n   স্টেটমেন্ট; \n}\n</code></pre>\n<p>এটাও আগেরটার মতোই তবে প্রথমেই আপনার কন্ডিশন চ্যাক করে নিবে। যদি মিথ্যা হয় তাহলে সরাসরি লুপ থেকে বের হয়ে যাবে কোনো কিছু জিজ্ঞাসা বা এক্সিকিউট করার আগেই, আর সত্য হলে লুপের ভিতরে থেকে এক্সিকিউট করবে</p>\n<pre><code>var num = 0;\n\nwhile(num &lt; 10) {\n    console.log('Inside the Loop');\n    num = prompt('Enter the number: ');\n}\n\nconsole.log('Out of the loop');\n</code></pre>\n<p>এখানে <code>num</code> এর ভ্যালু প্রথমেই জিরো সেট করে নিয়েছি সে জন্যেই এটা কন্ডিশন ট্রু হওয়ায় লুপের ভিতরে গিয়েছে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*elh1F9zJcuiAdyvx3F-LuQ.png\" alt=\"\" /></p>\n<p>এখন যদি <code>num</code> এর ভ্যালু প্রথমে ১০ থেকে বেশী সেট করি তাহলে সেটা কখনই লুপের ভিতরের কিছু এক্সিকিউট করবে না।</p>\n<pre><code>var num = 20;\n\nwhile(num &lt; 10) {\n    console.log('Inside the Loop');\n    num = prompt('Enter the number: ');\n}\n\nconsole.log('Out of the loop');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7hEqdxgHGDjTdUejVJ9dtw.png\" alt=\"\" /><strong>কখনো লুপের ভিতরে যাবে না, কিন্তু ডু হোয়াইল হলে অন্তত একবার প্রথমে লুপের ভিতরে যেতো</strong></p>\n<p>৪। <code>break</code> স্টেটমেন্টঃ</p>\n<p>আপনি লুপের স্টেটমেন্ট এর ভিতরে থেকেও লুপকে কন্ট্রোল করতে পারবেন। একটা চলন্ত লুপে একটা নির্দিষ্ট টাইমে যদি আপনি চান লুপ থেকে পুরোপুরি বের হয়ে আসতে তাহলে <code>break</code> স্টেটমেন্ট ব্যবহার করা হয়ঃ</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    if(i === 5) {\n        break;\n    }\n    console.log('i is now at: ' + i);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vzKj5ugiuzCnDb0SOI0v2A.png\" alt=\"\" /></p>\n<p>যখনি <code>i</code> এর মান ৫ তখনি সাথে সাথে প্রোগ্রাম লুপ থেকে পুরোপুরি বের হয়ে আসছে।</p>\n<p>৫। <code>continue</code> স্টেটমেন্টঃ</p>\n<p>এটাও এরকম লুপকে কন্ট্রোল করতে ব্যবহার করা হয়। কিন্তু এক্ষেত্ত্রে লুপ থেকে পুরোপুরি বের হয়ে না এসে জাস্ট সেই লুপটা স্কিপ করে যায়ঃ</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    if(i === 5) {\n        console.log(i + ' is skipped');\n        continue;\n    }\n    console.log('i is now at: ' + i);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*cdS_WD4LXaXtruhaRPCJoA.png\" alt=\"\" /></p>\n<hr />\n<p>আজকে এই পর্যন্তই, তবে আপনি এই সবগুলো বিভিন্নভাবে প্র্যাক্টিস করবেন। নিজে থেকে একটা html এবং js ফাইল বানিয়ে সেখানে প্র্যাক্টিস করতে পারেন বা আমার এই <a href=\"https://github.com/zonayedpca/basicJavaScriptBoilerplate/archive/master.zip\">স্টার্টার ফাইলটা</a> নামিয়ে যেকোন কোড এডিটর দিয়ে এটার ভিতরে লিখে ক্রোম ব্রাউজার দিয়ে ওপেন করে প্র্যাক্টিস করতে পারেন। বেস্ট অফ লাক!</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-03-24T18:01:45.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>আপনি ধরুন অনেকগুলো ডাটা/ভ্যারিয়েবল স্টোর করতে চাচ্ছেন। এজন্যে আপনি কি করতে পারেনঃ</p>\n<pre><code>var name1 = 'Zonayed Ahmed';\nvar name2 = 'Zawad Ahmed';\nvar name3 = 'Zobayer Ahmed';\nvar name4 = 'Masood Ahmed';\nvar name5 = 'Ahmed Zonayed';\n</code></pre>\n<p>এখন দেখুন এখানে অনেকগুলো ভ্যারিয়েবল স্টোর করতে চাচ্ছি, আর তারজন্যে প্রত্যেকবারই একটা একটা করে নাম নিয়ে নিয়ে ভ্যারিয়েবলগুলো স্টোর করতে হচ্ছে। আবার এখানে ডাটা সবগুলো একই টাইপের অনেকটা। কিছু নাম আর কি। এখন এভাবে অবশ্যই খুব বেশী ভালো দেখাচ্ছে না। হয়তো দুই একটা ভ্যারিয়েবলের জন্যে এভাবে আলাদা আলাদা করে ভ্যারিয়েবল নিয়ে ডাটা স্টোর করা ঠিক আছে। কিন্তু যখন অনেকগুলো হয়ে যায় তখন এটার চাইতেও ভালো সমাধান আছে। যেটা হচ্ছে অ্যারে। আমি আজকে অ্যারে নিয়েই আলোচনা করবো।</p>\n<p>ধরুনঃ</p>\n<pre><code>নাম = রহিম, করিম, সালাম, রফিক, জাব্বার, শফিক\n</code></pre>\n<p>শফিকের নাম চাইঃ</p>\n<pre><code>নাম[৫ নাম্বারের টা]\n</code></pre>\n<p>এভাবেই কাজ করে অ্যারে অনেকটা। যদিও আসল কোড থেকে উদাহরন দিলে ক্লিয়ার হয়ে যাবে। তবে আসল কনসেপ্ট ক্লিয়ার হওয়া জরুরী। অ্যারে <strong>নন-প্রিমিটিভ/রেফারেন্স ডাটা টাইপ।</strong> আমি এগুলো নিয়ে <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%AD%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%B0%E0%A6%BF%E0%A7%9F%E0%A7%87%E0%A6%AC%E0%A6%B2-%E0%A6%8F%E0%A6%AC%E0%A6%82-%E0%A6%A1%E0%A6%BE%E0%A6%9F%E0%A6%BE-%E0%A6%9F%E0%A6%BE%E0%A6%87%E0%A6%AA-41c6085196c5\">পূর্বে</a> লিখেছিলাম। অ্যারে একধরনের অবজেক্ট। আর অবজেক্ট মানে কি জানি? হ্যা, অবজেক্ট মানে এটার কিছু প্রপার্টিজ থাকবে। আপনি অবজেক্ট হলে আপনার হাত, কান, গলা, চোখ ইত্যাদি ইত্যাদি আপনার প্রপার্টিজ। সেভাবে অ্যারেরও কিছু প্রপার্টিজ আছে যেগুলো ইউজ করে আপনি অ্যারে থেকে অনেক কিছু অ্যাক্সেস করতে পারবেন। অ্যারে সম্পর্কে জানতে পারবেন। অ্যারে কে মডিফাই করতে পারবেন। আমি এগুলো সবকিছু নিয়েই আজকে আলোচনা করবো</p>\n<p><strong>অ্যারে ডিক্লেয়ার করাঃ</strong> অ্যারে দুইভাবে ডিক্লেয়ার করা যায়। তার মধ্যে প্রথমটা খুব বেশী ইউজ করা হয় না কিন্তু জেনে রাখা ভালো</p>\n<pre><code>var arrayName = new Array('Rahim', 'Karim', 'Rafiq', 'Jabbar');\n</code></pre>\n<p>এটার আউটপুট আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*krhqXZwd8IkCUA8seaUieg.png\" alt=\"\" /></p>\n<p>ক্রোম কন্সোলেই সরাসরি ওপেন করে লিখে প্র্যাক্টিস করতে পারবেন। দেখুন এখানে আউটপুট এসেছে আপনার ভিতরে দেওয়া সবগুলো ডাটা। এখন এইভাবে ডিক্লেয়ার করা টা খুব বেশী পপুলার না। আর একটু কঠিনও বটে। আপনি নরমালিও করতে পারবেনঃ</p>\n<pre><code>var arrName = ['Rahim', 'Karim', 'Rafiq', 'Jabbar'];\n</code></pre>\n<p>এভাবেও সহজেই করে ফেলা যায়। এবার এটাও ক্রোম কন্সোলে লিখে আউটপুট দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*BJINlkpChl-BYhckRNiv6A.png\" alt=\"\" /><strong>Same Output</strong></p>\n<p>এ তো গেলো ডিক্লেয়ারেশনের পর্ব। এবার আসি আরো কিছু গভীর জিনিস নিয়ে। আগে বলেছিলাম ক্রোম ডেভেলপার কন্সোল আপনাকে অনেকভাবে হেল্প করবে আপনার জাভাস্ক্রিপ্ট এর ক্যারিয়ারে। দেখুন তাহলে আপনি যে আউটপুট টা পেয়েছেন কন্সোলে সেখানে যদি বাম পাশে ত্রিভূজ আকৃতির বাটনে ক্লিক করেন তাইলে অ্যারে টা খুলে যাবে। যেটার ভিতরে অনেক কিছু দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*8yg5aBea_NVd4H2O0ZK0sQ.png\" alt=\"\" /></p>\n<p>দেখুন এখানে প্রত্যেকটা ডাটার সাথে একটা নাম্বার দেখাচ্ছে। হ্যা, এটাকে বলে ইন্ডেক্স নাম্বার। ইন্ডেক্স নাম্বার সাহায্য করবে আপনাকে অ্যারে থেকে স্পেসেফিক কোনো ডাটা বের করে আনতে। এখন জিরো থেকে কেন শুরু হয়েছে? হ্যা প্রোগ্রামিং এর দুনিয়ায় কাউন্ট জিরো থেকেই বেশী শুরু করা হয়। আর অ্যারের ইন্ডেক্সও জিরো থেকে শুরু হয়। এখন ধরেন আপনি জাব্বার এর নাম অ্যাক্সেস করতে চাচ্ছেন। এটা নরমাল কাউন্টে ৪ নাম্বার পজিশনেও থাকলে যদি জিরো থেকে গণনা শুরু করেন তাহলে এটার পজিশন হচ্ছে ৩ নাম্বারে। আর এই ৩ ই হচ্ছে এটার ইন্ডেক্স নাম্বার। তো এভাবে অ্যারে থেকে স্পেসেফিক কোনো ভ্যালু অ্যাক্সেস করা হয়ঃ</p>\n<pre><code>arrName[3]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*MlRh8KqkqXOpITq25fsMaQ.png\" alt=\"\" /></p>\n<p>এখন যদি আপনি স্পেসেফিক কোনো ভ্যালুও চেঞ্জ করতে চান তাহলেও পারবেন এই ইন্ডেক্স নাম্বারের সাহায্যেইঃ</p>\n<pre><code>arrName[3] = 'Shafiq';\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*M2jHsVRyyhYcX1psetbcbQ.png\" alt=\"\" /></p>\n<p>এ তো গেলো অ্যারে থেকে আইটেম অ্যাক্সেস করা নিয়ে। এবার আসুন অ্যারে যে অবজেক্ট এখন আমি অ্যারে সম্পর্কে কিছু জানতে চাই। কি জানতে চাই? হ্যা আমি অ্যারেতে কয়টা আইটেম আছে জানতে চাই। দেখুন একই জায়গায় নিচে একটা প্রপার্টিজ <code>length</code> আছে যেটা জানে যে এই অ্যারেতে কয়টা আইটেম আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*fjk6iMwZ0YZWkiTtuT1nHA.png\" alt=\"\" /></p>\n<p>এখানে সাধারনত অবজেক্ট এর ভিতরের প্রপার্টিজগুলো অ্যাক্সেস করা হয় <code>.</code> ডট এর মাধ্যমে, একে ডট নোটেশান বলে। আমরা যদি এখন অ্যারেতে কয়টা আইটেম আছে সেটা জানার জন্যে <code>length</code> প্রপার্টিজ অ্যাক্সেস করতে চাই তাহলে আমাদের এভাবে লিখতে হবেঃ</p>\n<pre><code>arrName.length\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*wZq6-RdslmipZ7sd130atQ.png\" alt=\"\" /></p>\n<p>তো এতা দেখাচ্ছে আসলে এখানে ৪ টা আইটেম আছে। এখন তো আমি ডট নোটেশান এর কথা বললাম। আরো একটা আছে সেটা হচ্ছে ব্র্যাকেটস নোটেশান। এই ডট নোটেশান আর ব্র্যাকেট নোটেশান সব অবজেক্ট এর বেলাতেই ইউজ হয়। তাই এগুলার ইউসেজ মাথায় রাখা অবশ্যই জরুরী। ব্র্যাকেট নোটেশান ইউজ করে এই প্রপার্টিজ অ্যাক্সেস করতে চাইলেঃ</p>\n<pre><code>arrName['length']\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*GWKrg5Lwso-cOMEbsCFGCg.png\" alt=\"\" /></p>\n<p>নামের সাথে বেশ মিল আছে তাই আশা করি ডট নোটেশান আর ব্র্যাকেট নোটেশান মনে রাখতে হবে না। আপনি কোনটা ইউজ করবেন সেটা আপনার ইচ্ছা, তবে জাভাস্ক্রিপ্ট এর বেলায় ডট নোটেশানটাই বেশী ইউজ করা হয়। মানে এটা কনভেনশন।</p>\n<p>এবার কিভাবে অ্যারের সবগুলো আইটেম অ্যাক্সেস করা যেতে পারে? মনে হয় আগের পর্বে লুপ নিয়ে আলোচনা করেছিলাম। একইরকম কাজ বারবার করা লাগলে নাকি লুপ ইউজ করতে হয়। হ্যা! আপনি লুপ ইউজ করে ইজিলি অ্যারের সবগুলো আইটেম অ্যাক্সেস করতে পারবেনঃ</p>\n<pre><code>for(var i = 0; i &lt; arrName.length; i++) {\n   console.log('Name: ' + arrName[i]);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*vA7JxwDwjZ9mSLdMTrQQXw.png\" alt=\"\" /></p>\n<p>এই কোডটা যদি কনফিউজিং হয়ে থাকে তাহলে ভালো করে খেয়াল করুন তাহলেই বুঝতে পারবেন। এখানে ফর লুপ ইউজ করা হয়েছে এবং প্রত্যেকটা লাইন, এক্সপ্রেশনই নিয়ম মেনে চলছে এবং সবশেষে যেভাবে চাচ্ছেন সেভাবেই সব প্রিন্ট করে দেখাচ্ছে।</p>\n<p>এখন যদি নিচের <code>__proto__</code> এটা খুলেন তাহলে বেশ আরো অনেকগুলো প্রপার্টিজ দেখতে পারবেন।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*8W4zKxMQJYTSygA4onfz5Q.png\" alt=\"\" /></p>\n<p>এখানে কিছু ফাংশন আছে যেগুলো আপনি এই অ্যারের জন্যে ইউজ করতে পারবেন। তবে আমি সবগুলাতে যাবো না। আপনি চাইলে যদি কিউরিসিটি থাকে তাহলে ট্রাই করতে পারেন নিজে থেকে একটা একটা করে। আমি জাভাস্ক্রিপ্ট কে সেজন্যই কমফোর্টেবল ল্যাংগুয়েজ বলি কারণ আপনি ভিতরে সব খুলে দেখতে পারবেন। তাতে সুবিধা হলো আপনি আপনার প্রব্লেম অনেকসময় নিজেই সল্ভ করে ফেলতে পারবেন। যদি কোনো এরর আসে আপনাকে গুগুল করতে হবে না। আপনি জাস্ট ওপেন করে এভাবে দেখতে পারবেন আসলে আমি যেটা ইউজ করতে চাচ্ছি এটা এখানে আছে কিনা বা থাকলেও বানানটা কিরকম। এরকম আরো কতকিছু করতে পারবেন কন্সোল থেকে এভাবে। তবে আমি অ্যারেতে ব্যবহৃত মোস্ট কমন কিছু ফাংশন নিয়ে আলোচনা করবো।</p>\n<p><strong>অ্যারেতে শেষের দিক হতে কোনো নতুন আইটেম অ্যাড করতেঃ</strong></p>\n<p>একটা অ্যারে যেখানে অলরেডি কিছু আইটেম আছে এখন যদি আরো আইটেম অ্যাড করতে চান তাহলে আপনি শুরুর দিক হতে বা শেষের দিক হতে নতুন আইটেম অ্যাড করতে পারবেন। শেষের দিক হতে আইটেম অ্যাড করতে চাইলেঃ</p>\n<pre><code>arrName.push('Shafiq');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Sz61GZeGJ99NShV_6xjuXA.png\" alt=\"\" /></p>\n<p><strong>অ্যারেতে শেষের দিক হতে আইটেম রিমুভ করতেঃ</strong></p>\n<p>সেইমভাবে আমরা কোনো আইটেম অ্যারে থেকে রিমুভ করতে চাইলে শুরুর দিক থেকে বা শেষের দিক থেকেও করতে পারি। যদি শেষের দিক থেকে করতে চাইঃ</p>\n<pre><code>arrName.pop();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*CUUEjyNCUdqGwheAnhb3tg.png\" alt=\"\" /></p>\n<p><strong>অ্যারেতে শুরুর দিক হতে আইটেম রিমুভ করতেঃ</strong></p>\n<p>সেইমভাবে যদি আমরা শুরুর দিক থেকে কোনো আইটেম রিমুভ করতে চাইঃ</p>\n<pre><code>arrName.shift();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Ff1mmGEnYPuq723r9Kvndw.png\" alt=\"\" /></p>\n<p>এখন শুরু আইটেম রিমুভ করায় সবার ইন্ডেক্স নাম্বার পরিবর্তন হবে খেয়াল রাখবেন।</p>\n<p><strong>অ্যারেতে শুরুর দিক হতে কোনো নতুন আইটেম অ্যাড করতেঃ</strong></p>\n<p>সেইমভাবে যদি আমরা শুরুর দিক থেকে কোনো আইটেম অ্যাড করতে চাইঃ</p>\n<pre><code>arrName.unshift('Shafiq');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*I1TOu5nhV0cglTfLdeaTeA.png\" alt=\"\" /></p>\n<p>এখানেও শুরুর দিকে নতুন আইটেম অ্যাড করায় সবার ইন্ডেক্স নাম্বার চ্যাঞ্জ হবে।</p>\n<p><strong>নির্দিষ্ট কোনো আইটেম এর ইন্ডেক্স নাম্বার জানতেঃ</strong></p>\n<p>কোনো আইটেম এর যদি ইন্ডেক্স নাম্বার জানতে চান তাহলে কন্সোল থেকে তো জানতে পারবোই, কিন্তু মাঝেমধ্যে কোড থেকেও জানার প্রয়োজন হতে পারে সেক্ষেত্রে আমরা এটা ইউজ করতে পারিঃ</p>\n<pre><code>arrName.indexOf('Karim');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*aVm-jXrDb7gKf3J3cdWQJg.png\" alt=\"\" /></p>\n<p><strong>ইন্ডেস্ক নাম্বার দিয়ে কোনো আইটেম রিমুভ করতেঃ</strong></p>\n<pre><code>arrName.splice(1, 2);\n</code></pre>\n<p>এখানে ইনডেক্স নাম্বার কত থেকে শুরু করে কত পর্যন্ত রিমুভ করতে চাচ্ছেন সেগুলা আর্গুমেন্ট হিসেবে এখানে যাবে</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*KaOwQz1OgEHhM8Se7kEE1A.png\" alt=\"\" /></p>\n<p>আর যদি চান একটা নির্দিষ্ট ইন্ডেক্স নাম্বার থেকে শুরু করে বাকি সবগুলো রিমুভ করতে তাইলে প্রথম আর্গুমেন্টে জাস্ট যেখান থেকে রিমুভ করা শুরু করবেন সে ইন্ডেক্স নাম্বারটা দিলেই হবেঃ</p>\n<pre><code>arrName.splice(3);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*nkxs7wCeTZt_p2_vUDDegQ.png\" alt=\"\" /></p>\n<p>এখানে একটা জিনিস হয়তো খেয়াল করবেন যে যতবারই আমরা <code>splice</code> মেথড ইউজ করতেছি, এটা কিছু ডাটা রিটার্ণ করছে। হ্যাঁ, আমরা যেগুলো রিমুভ করতে চাচ্ছি সেগুলোই রিটার্ন করে এই <code>splice</code> মেথড। তো আপনি চাইলে রিমুভ করা ডাটাগুলোও আবার আরেকটা ভ্যারিয়েবলে স্টোর করে রাখতে পারবেন। ধরি আমাদের একটা অ্যারে আছেঃ</p>\n<pre><code>var newArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n</code></pre>\n<p>এখন এটার ইন্ডেক্স নাম্বার ৩ থেকে বাকী সবগুলো স্প্লাইস করে ফেললাম, আর স্প্লাইসড ডাটাগুলো <code>spliceArr</code> তে স্টোর করলামঃ</p>\n<pre><code>var spliceArr = newArr.splice(3)\n</code></pre>\n<p>এখন মেইন অ্যারেটা দেখলেঃ</p>\n<pre><code>console.log(newArr);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*uv5VqbdZVDLgtXwvMam3Yw.png\" alt=\"\" /></p>\n<p>আর আমাদের এই নতুন <code>spliceArr</code> টা দেখলেঃ</p>\n<pre><code>console.log(spliceArr);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*0Ub9EE-ENRf8_znkbNqV2A.png\" alt=\"\" /></p>\n<p><strong>অ্যারে কপি করতেঃ</strong></p>\n<p>যদি একটা অ্যারে থেকে আরেকটা অ্যারে কপি করতে চাই তাহলে অনেকভাবেই করা যায়। সবচেয়ে সিম্পলভাবে(কপি বাই রেফারেন্স)ঃ</p>\n<pre><code>var newArr = arrName;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*SlnA5y-Oqw0XDWx-JdTzVQ.png\" alt=\"\" /></p>\n<p>অথবা আমরা চাইলে এভাবেও করতে পারি। সেক্ষেত্রে একটু মডিফাই করেও আপনি অ্যারে টাকে কপি করতে পারবেনঃ</p>\n<pre><code>var newArr = arrName.slice(0, 2);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ysYa9s3Aj8VjvqItp1En5A.png\" alt=\"\" /></p>\n<p>তবে ডিরেক্ট অ্যারে কপি করা আর স্লাইস ইউজ করে কপি করার মধ্যে একটু তফাৎ আছে। ডিরেক্ট অ্যারে কপি করাকে কপি বাই রেফারেন্স বলে। এখানে আমি নতুন যে অ্যারে নিয়েছি সেটা আর আগেরটা সেইম অবজেক্ট কেই রেফার করবে যদি আপনি অ্যাসাইনমেন্ট <code>=</code> অপারেটর ইউজ করেন। আপনি যদি যেকোনো একটাতে কিছু চ্যাঞ্জ করেন তাইলে দুইটা তেই সেটার ইফেক্ট পাবেন। কারণ দুইজনই সেইম অবজেক্ট রেফার করতেছে</p>\n<pre><code>newArr[0] = 'Changed Rahim'\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*tz_ZDEyK6E3y-DVxlOhTpg.png\" alt=\"\" /></p>\n<p>নতুন অ্যারেতে আইটেম চ্যাঞ্জ করার কারণে সেটা আগের অ্যারেতেও ইফেক্ট পড়েছে। কারণ আসলে দুইটা অ্যারে সেইম মেমোরি লোকেশান বা সেইম অবজেক্টকেই রেফার করছে।</p>\n<pre><code>arrName === newArr\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*FVcQFU20H7uscPJ2DWbPSA.png\" alt=\"\" /></p>\n<p>আর স্লাইস ইউজ করে কপি করাকে কপি বাই ভ্যালু বলে। এখানে শুধু ভ্যালু বা আইটেমগুলোই কপি হবে নতুন অ্যারেতে। কিন্তু দুইটা অ্যারে সম্পূর্ন পৃথক পৃথক দুইটা অবজেক্ট</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Lf9FNxj4yed72JXt4lIDmw.png\" alt=\"\" /></p>\n<p>আর <code>===</code> ইউজ করলে দেখবেন ফলস দেখাচ্ছে কারণ দুইটা সেইম অবজেক্ট না, জাস্ট ভ্যালুগুলো কপি হয়েছেঃ</p>\n<pre><code>arrName === newArr\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*u-c-fzoK0p-AuE-zsusv4A.png\" alt=\"\" /></p>\n<p>তো আজকে এই পর্যন্তই। আশা করি অ্যারেটা বুঝতে কোনো সমস্যা হবে না। তারপরেও কোথাও কিছু বুঝতে প্রবলেম হলে আমাকে অবশ্যই জানাবেন। আমি চেষ্টা করবো সব কনফিউসান দূর করে দিতে। আমাকে সবসময় আমার ইমেইল <code>zonayedpca@gmail.com</code> এ পাবেন</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-03-25T06:31:19.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>আমরা গত পর্বে অ্যারে নিয়ে আলোচনা করেছি। অ্যারেতে আইটেমগুলো ইনডেক্স নাম্বার দিয়ে অ্যাক্সেস করতে হয়। এবং সেজন্যে অ্যারেতে থাকা আইটেমগুলোর সিরিয়াল ঠিক রাখা জরুরী। কিন্তু আমরা যদি ইনডেক্স ছাড়া স্পেসেফিক কোনো কীওয়ার্ড দিয়ে এরকমভাবে অ্যারেরমতো কোনো ডাটা স্ট্রাকচার থেকে আইটেম অ্যাক্সেস করতে চাই তাহলে কি উপায় থাকতে পারে? হ্যা একটা উপায় আছে, সেটা হচ্ছে অবজেক্ট। অবজেক্ট ইউজ করা অনেকটা হ্যান্ডি এবং অ্যারে থেকেও আরো অনেক ফ্লেক্সিবল।</p>\n<p>ধরুন আপনি একজনের কিছু ইনফরমেশন স্টোর করতে চাচ্ছেন। এখন ইনফরমেশনগুলো কোনো না কোনোভাবে একে অপরের সাথে সম্পর্কযুক্ত। সেক্ষেত্রে আমরা পৃথক পৃথক ভ্যারিয়েবল না নিয়ে অ্যারে ইউজ করতে পারি। কিন্তু তারপরেও অ্যারেতে একটা সমস্যা, অ্যারেতে আমরা আইটেম অ্যাক্সেস করতে চাইলে ইনডেক্স নাম্বার দিয়ে করতে হয় যেটা খুব অর্থপূর্ন না। যদি এমন কিছু হয় তাহলে কেমন হয়ঃ</p>\n<pre><code>রহিম = {\n   পুরোনামঃ রহিম মিয়া,\n   বয়সঃ ২১,\n   ঠিকানাঃ ঢাকা,\n   পেশাঃ চাকুরীজীবী\n}\n</code></pre>\n<p>এখানে ধরুন রহিম একটা অবজেক্ট, তাহলে তার পুরোনাম, বয়স, ঠিকানা, পেশা এগুলো তার প্রপার্টিজ। এইখানে এগুলো একটা আরেকটা সাথে সম্পর্কযুক্ত। এক্ষেত্রে এরকম ডাটা স্ট্রাকচার পার্ফেক্ট কাজ করে। আর এখন রহিমের এই ইনফরমেশন বা প্রপার্টিজ গুলো অ্যাক্সেস করতে চাইলে, রহিমের পুরোনাম চাইলে <code>রহিম.পুরোনাম</code> বা রহিমের বয়স চাইলে <code>রহিম.বয়স</code> লিখলেই চলে আসবে। হ্যা জাভাস্ক্রিপ্ট এর অবজেক্ট সেইমভাবেই কাজ করে। এভাবে অ্যারের মতো ইনডেক্স নাম্বার ইউজ না করে কীওয়ার্ড ইউজ করে আপনি আইটেমগুলো অ্যাক্সেস করতে পারবেন।</p>\n<p>এভাবে একটা অবজেক্ট ডিক্লেয়ার করা যায় কয়েকভাবে। যেমন এভাবেও করা যায় যেটা একটু কঠিন আর তত বেশী ইউজও করা হয় নাঃ</p>\n<pre><code>var rahim = new Object()\n</code></pre>\n<p>তবে এভাবে করা সবচেয়ে ইজি এবং এভাবেই সাধারণত বেশী ইউজ করা হয়ঃ</p>\n<pre><code>var rahim = {\n   fullName: 'Rahim Miya',\n   age: 21,\n   address: 'Dhaka',\n   job: 'Job Holder'\n}\n</code></pre>\n<p>এবার পুরো অবজেক্ট অ্যাক্সেস করতে চাইলে জাস্ট অবজেক্ট এর নামটা লিখুনঃ</p>\n<pre><code>rahim\n</code></pre>\n<p>আউটপুট দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iAji-MsShjBhSE7Oj252vQ.png\" alt=\"\" /></p>\n<p><strong>বিঃদ্রঃ</strong> ক্রোমের কন্সোলে মাল্টিলাইন কোড লিখতে গেলে দেখবেন সেটা এন্টার হয়ে এক্সিকিউট হয়ে যায়। তবে আপনি এটা স্কিপ করে মাল্টিলাইন কোড লিখতে পারবেন জাস্ট <code>shift + Enter</code> একসাথে চেপে। তাহলে কোড এক্সিকিউট না হয়ে পরের লাইনে যাবে যেখানে আপনি আপনার কোড লিখতে পারবেন।</p>\n<p>এবার দেখুন এখানেও পুরো অবজেক্ট দেখাচ্ছে। বাম পাশের ত্রিভুজাকৃতির বাটনে ক্লিক করলে এখানেও সব দেখতে পারবেন। কিন্তু ইনডেক্স নাম্বারের পরিবর্তে কীওয়ার্ড দেখতে পারবেন যেগুলো ইউজ করে আপনি এই অবজেক্ট এর আইটেমগুলো অ্যাক্সেস করতে পারবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ohxyt2Fa5WMpsu-QSgYYNw.png\" alt=\"\" /></p>\n<p>এবার আসি কিভাবে অবজেক্ট অ্যাক্সেস করবেন। আমি গত পর্বে যদিও এটা নিয়ে আলোচনা করেছি, তবে এখানে এটা বেশী কাজে আসবে। আমরা দুইভাবে একটা অবজেক্ট থেকে আইটেম অ্যাক্সেস করতে পারি</p>\n<p>১। ডট নোটেশান</p>\n<p>২। ব্র্যাকেটস নোটেশান</p>\n<p>এখন চলুন এই নোটেশানের বিস্তারিত আলোচনায় যাইঃ</p>\n<p><strong>১। ডট নোটেশানঃ</strong> এখানে ডট দিয়ে একটা অবজেক্ট এর ভিতরের আইটেম অ্যাক্সেস করা হয়। এবং জাভাস্ক্রিপ্ট এ সাধারণত এই নোটেশানটাই বেশী ইউজ করা হয়। <code>rahim</code> এর পুরোনাম ডট নোটেশানে অ্যাক্সেস করতে চাইলে অবজেক্ট এর নাম তারপর ডট দিয়ে পুরোনামের কীওয়ার্ড দিলেই হবেঃ</p>\n<pre><code>rahim.fullName\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EcpDeduCg1ybIOwn7ksOdQ.png\" alt=\"\" /></p>\n<p><strong>২। ব্র্যাকেটস নোটেশানঃ</strong> আবার ব্র্যাকেটস নোটেশানেও অবজেক্ট এর আইটেম অ্যাক্সেস করতে পারবেনঃ</p>\n<pre><code>rahim['fullName']\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*_bpvAOrFc90FcW7OfxQzQg.png\" alt=\"\" /></p>\n<p>এখন একটা অবজেক্ট ডিক্লেয়ার করা হয়ে গেছে। এখন যদি এখানে নতুন কোনো আইটেম অ্যাড করতে চাই তাহলে কি উপায়? হ্যা আমরা দেখেছি যে অবজেক্ট এর কোন ইনডেক্স নাম্বার নাই। তাই এখানে একটার পর একটা আইটেমের সিরিয়াল মেইন্টেইন করা জরুরী না। আমরা জাস্ট কীওয়ার্ড দিয়েই যেকোনো আইটেম অ্যাক্সেস করতে পারি। একবার অবজেক্ট ডিক্লেয়ার করা হয়ে গেলে পড়ে যদি আমরা নতুন কোনো আইটেম অ্যাড করতে চাইঃ</p>\n<pre><code>rahim.zipCode = 3517\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vVtWdGPUeG5gcrLSoiEdzQ.png\" alt=\"\" /></p>\n<p>কি সুন্দর করে নতুন আইটেম অ্যাড হয়ে গেলো। এখন আমরা যদি অলরেডি আছে এমন একটা আইটেমের ভ্যালু চ্যাঞ্জ করতে চাইঃ</p>\n<pre><code>rahim.job = 'Student'\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3QItcuXrIIIuFT6e6mkz6w.png\" alt=\"\" /></p>\n<p>ব্যাস এভাবেই সবকিছু অনেক সহজ জাভাস্ক্রিপ্ট এর অবজেক্ট এ। অ্যারে থেকে অনেক ফ্লেক্সিবল।</p>\n<p>এবার আসি অবজেক্ট এর স্পেশালিটি নিয়ে। আপনি কন্সোলে অবজেক্ট খুলে <code>__proto__</code> এর ভিতরে অনেক ফাংশন পাবেন যেগুলো আপনি এই অবজেক্ট এর সাথে ইউজ করতে পারবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Mm-vY6ahIS9hOqaJzXczKw.png\" alt=\"\" /></p>\n<p>তবে <code>__proto__</code> এর ভিতরের সবকিছু এখনি বুঝতে পারবেন না হয়তো, কিন্তু জাস্ট মাথায় রাখেন যে এভাবে খুলে খুলে সব দেখতে পারবেন কন্সোলে। যেটা অনেক কাজে লাগে কোনো কিছু ডেভেলপমেন্ট এর সময়।</p>\n<p>এখন অবজেক্ট এ আরো স্পেশাল যে ব্যাপারটা সেটা হচ্ছে আপনি চাইলে এখানে ফাংশন ও সেইভ করে রেখে দিতে পারবেন আইটেম হিসেবে। ফাংশন কি বুঝতে না পারলে আমি পরের পর্বে এটা নিয়ে ডিসকাস করবো আপাতত না বুঝলেও মাথায় রাখবেন যে অবজেক্ট এর ভিতরে ফাংশনকে আইটেম হিসেবে নেওয়া যায়ঃ</p>\n<pre><code>rahim.welcomeMsg = function() {\n   console.log('Hello There');\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*adZQ13Nf-ORx46oX5WaxEg.png\" alt=\"\" /></p>\n<p>এখন সেই ফাংশন কে অ্যাক্সেস করতে চাইলে সেইমভাবেই বাট একটু অন্যরকম ভাবে করতে হবে। কারণ ফাংশন কল করতে হলে ফার্স্ট ব্র্যাকেট ইউজ করতে হয়ঃ</p>\n<pre><code>rahim.welcomeMsg()\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*CmGQ7i0iKP1Yh3enWbQqsw.png\" alt=\"\" /></p>\n<p>এখন উপরের এই ফাংশনটা অবজেক্ট ডিফাইন করার সময় ভ্যারিয়েবলের মতো করেও ফাংশন স্টেটমেন্ট আকারে নিতে পারবো আমরা এভাবেঃ</p>\n<pre><code>var rahim = {\n   fullName: 'Rahim Miya',\n   age: 21,\n   address: 'Dhaka',\n   job: 'Job Holder',\n   welcomeMsg: function() {\n      console.log('Hello There');\n   }\n}\n</code></pre>\n<p>দুইটাই এক। প্রথমটায় আমরা অবজেক্ট ডিক্ল্যেয়ার করে ফেলেছি, পরে ফাংশন অ্যাসাইন করেছি সেটাতে। আর দ্বিতীয়টায় অবজেক্ট ডিফাইন করার সময়েই ফাংশনটাও দিয়ে দিয়েছি অন্যান্যগুলোর মতোই।</p>\n<p>অবজেক্ট এর সবগুলো আইটেম অ্যাক্সেস করতে চাইলে? হ্যা তাইলে মনে হয় লুপ ইউজ করতে হবে। কিন্তু সমস্যা হলো এখানে তো ইনডেক্স নাম্বার নাই। লুপ দিয়ে আইটেম অ্যাক্সেস করতে ত লুপ লাগবে…? কিন্তু না। আরেকধরনের স্পেশাল লুপ আছে যেটা ইউজ করে আপনি সবগুলো আইটেম অ্যাক্সেস করতে পারবেন। যদিও এটা তত কাজের না তাই আমি লুপের পর্বে বিশেষ করে আলোচনা করিনি।</p>\n<pre><code>for(item in rahim) {\n   console.log(item)\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*bSgcEZ0O25fKPlYP6Q_eIg.png\" alt=\"\" /></p>\n<p>এখন অবজেক্ট এতোই ফ্লেক্সিবল যে আপনি চাইলে অবজেক্ট এর ভিতরে অ্যারেও ইউজ করতে পারবেন আবার অ্যারের ভিতরেও অবজেক্ট ইউজ করতে পারবেন।</p>\n<p><strong>অবজেক্ট এর ভিতরে অ্যারেঃ</strong></p>\n<pre><code>var objArr = {\n   normal: 'Normal Item',\n   name: ['Rahim', 'Karim', 'Rafiq', 'Shafiq'],\n   age: [10, 20, 30, 40, 50]\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*FX0h-RSTz-mlDGUT8YQJXQ.png\" alt=\"\" /></p>\n<p>ভিতরের আইটেমগুলোও ঠিকঠাক মতো অ্যারে আর অবজেক্ট এর নিয়ম-কানুন মেনেই অ্যাক্সেস করতে পারবেন। ধরুন আমি রাফিকের নাম চাচ্ছিঃ</p>\n<pre><code>objArr.name[2]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1D2-Nlnka3rAMKCCbrjv5A.png\" alt=\"\" /></p>\n<p><strong>অ্যারের ভিতরে অবজেক্টঃ</strong></p>\n<p>আমরা জানি অ্যারেতে আমরা অনেকগুলো আইটেম স্টোর করতে পারি। এখন সে আইটেম আরেকটা অ্যারেও হতে পারে, নাম্বার, স্ট্রিং, বুলিয়ান, ফাংশন বা আরেকটা অবজেক্ট ও হতে পারেঃ</p>\n<pre><code>var arrObj = ['Zonayed', {name: 'Rafiq', age: 21, job: 'Student'}, 'Bangladesh']\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1yCQLbX7KPim121X5XUMzg.png\" alt=\"\" /></p>\n<p>এখানে অবজেক্ট এর ইনডেক্স নাম্বার কতো বলুন তো? হ্যা অবজেক্ট এর ইন্ডেক্স নাম্বার ১ এবং তারপরে বাংলাদেশের ইনডেক্স নাম্বার ২ এ। আর এই অবজেক্ট থেকে আইটেম অ্যাক্সেস করতে চাইলেঃ</p>\n<pre><code>arrObj[1].name\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*FaQ9QpVzLThzpo2pYKPFhg.png\" alt=\"\" /></p>\n<p>এভাবে আপনি অ্যারের ভিতরে অবজেক্ট, আবার সেই অবজেক্ট ভিতরে অ্যারে, আবার সেই অ্যারের ভিতরে অবজেক্ট বা অবজেক্ট এর ভিতরে অ্যারে, আবার সেই অ্যারের ভিতরে অবজেক্ট, আবার সেই অবজেক্টের ভিতরে অ্যারে নিতে পারবেন। আর আপনি যতক্ষন পর্যন্ত অ্যারের বেলায় অ্যারের নিয়ম-কানুন আর অবজেক্ট এর বেলায় অবজেক্ট এর নিয়ম-কানুন মানছেন ততক্ষন আপনি এভাবে নেস্টেড করে ডাটা স্টারকচার বানাতেও পারবেন আবার ভিতর থেকে আইটেম অ্যাক্সেসও করতে পারবেন। অনেকটাই ফ্লেক্সিবল তাই না…? হ্যা তাই <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f642.svg\" alt=\"🙂\" /></p>\n<p>আজকে এই পর্যন্তই। ভালো থাকবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-03-29T06:31:12.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>ধরুন আপনি ২ যোগ ২ এ কতো রেজাল্ট আসে সেটা জানতে চাচ্ছেন। এর জন্যে কয়েক লাইন কোড লিখলেন এবং রেজাল্টও ঠিকঠাক আসলো। এখন আবার পরে ৪ যোগ ৪ এ কতো আসে সেটা জানতে চাইলেন, তো এখন কি করবেন? আবার কিছু লাইন কোড লিখবেন। কিন্তু দেখুন এখানে বারবার আপনি দুইটা ডিজিটের যোগফলই বের করতে চাচ্ছেন। এখন এর জন্যে বারবার নতুন করে কোড না লিখে যদি এমন কোনো কিছুর ব্যবস্থা করা যায় যেটাতে আমি দুইটা নাম্বার দিলেই সেটা আমাকে যোগফল দিয়ে দিবে? হ্যাঁ, প্রোগ্রামিং এ ফাংশনের কাজ সেটাই। আজকে আমি আপনাদের সাথে এই ফাংশন নিয়েই কথা বলবো।</p>\n<hr />\n<p>ফাংশনকে একটা ম্যাশিনের সাথে তুলনা করতে পারেন। এখানে আপনি জাস্ট কিছু ইনপুট দিবেন আর সেটা আপনাকে আপনার মতো করে আউটপুট দিবে। আপনার কাছে ধরেন কিছু কাপড় আছে, সেগুলো থেকে আপনি জামা বানাতে চান। আপনি কি করবেন? হয়তো আপনি নিজে বানাতে পারবেন, বা বেশীরভাগ ক্ষেত্রে আমরা যেটা করি কাপড় টা নিয়ে একটা দোকানে দিয়ে আসি আর সেখানে আমাদের শরীরের মাপ রাখা হয়। একটা নির্দিষ্ট সময় পরে আপনি গিয়ে আপনার তৈরী জামা নিয়ে আসেন। এখানে অনেকসময় আপনার জানারও দরকার নাই টেইলর কি করলো আপনার কাপড় দিয়ে। আপনি জাস্ট কাপড় দিলেন, সে আপনার মতো করে জামা তৈরী করে দিলো।</p>\n<p>ঠিক ঐরকমভাবেই শুরুতে দেওয়া যোগফলের উদাহরণটা নিলেঃ</p>\n<pre><code>যোগফল_ম্যাশিন(সংখ্যা১, সংখ্যা২) {\n   যোগফল = সংখ্যা১ + সংখ্যা২;\n   পাঠাও যোগফল;  \n}\n\nদেখাও যোগফল_ম্যাশিন(২, ২); \nদেখাও যোগফল_ম্যাশিন(৪, ৪);\n</code></pre>\n<p>এখন আমরা জেনেছি জাভাস্ক্রিপ্ট এ বলতে গেলে সবকিছুই অবজেক্ট। তাইলে কি ফাংশনও অবজেক্ট? হ্যাঁ, জাভাস্ক্রিপ্ট এ ফাংশনও অবজেক্ট। জাভাস্ক্রিপ্ট এ ফাংশনকে ফার্স্ট ক্লাস ফাংশন বলা হয়। কারণ আপনি ফাংশন থেকে ফাংশন রিটার্ণ করতে পারবেন। আবার ফাংশনকে ভ্যারিয়েবলেও স্টোর করে রাখতে পারবেন। আবার চাইলে একটা ফাংশনের আর্গুমেন্ট হিসেবে আরেকটা ফাংশনকেও পাস করতে পারবেন। আমি নিচে উদাহরণসহ আলোচনা করবো। সব ক্লিয়ার হয়ে যাবে।</p>\n<p>আমরা অনেক বিল্ট-ইন ফাংশন অলরেডি অনেকগুলো ইউজ করেছি ইতিমধ্যেই। যেমনঃ <code>console.log(‘Something here’)</code> আমরা এখানে কন্সোল ডট লগ লিখে ভিতরে একটা কিছু লিখে দিয়েছি আর সেটা ব্রাউজারের কন্সোলে প্রিন্ট হয়ে গিয়েছে। এখন আমাদের আসলে কন্সোল ডট লগ কি কি করে তারপর কিভাবে ব্রাউজারের কন্সোলে পৌঁছে আমার দেওয়া লেখাটাই প্রিন্ট করলো সেটা আমাদের ভাবার দরকার হয়নি। কারণ এটাও একটা ফাংশন। আর এর কাজ হলো আমাদের দেওয়া ইনপুটকে ব্রাউজারের কন্সোলে প্রিন্ট করা, ব্যাস। এরকম আরো অনেক বিল্ট ইন ফাংশন আছে যেগুলো অলরেডি জাভাস্ক্রিপ্ট এর সাথে বা অন্যকিছুর সাথে এসেছে। আপনি জাস্ট কল করলেও কাজ করা শুরু করে দিবে।</p>\n<p>এখন এমন পরিস্থিতি আসতে পারে যেখানে আমাদের কাজ বিল্ট-ইন ফাংশনগুলো দিয়ে নাও হতে পারে। সেক্ষেত্রে আমরা নিজেরাই নিজেদের ফাংশন বানাতে পারি। এখন আসি ফাংশন কিভাবে ডিক্লেয়ার করতে হয় সে কথায়। ফাংশন ডিক্লেয়ার করতে অবশ্যই <code>function</code> কীওয়ার্ড ইউজ করতে হবে। তারপর ফাংশনটার নাম, তারপর কার্লি ব্র্যাকেট দিয়ে শুরু হবে এবং ভিতরে আপনি কি করবেন সেগুলোর স্টেটমেন্ট যাবে এবং সবশেষে আবার কার্লি ব্র্যাকেট দিয়ে ফাংশন শেষ হয়ে যাবে।</p>\n<pre><code>function funcName() {\n   //Statements\n}\n</code></pre>\n<p>এভাবে ফাংশন ডিক্লেয়ার করাকে ফাংশন স্টেটমেন্ট বলে।</p>\n<p>আবার এভাবেও ফাংশন ডিক্লেয়ার করতে পারিঃ</p>\n<pre><code>var funcName = function() {\n   //Statement\n}\n</code></pre>\n<p>এখানে যেকোনো একটা পরিচয়হীন ফাংশন নিয়ে সেটাকে একটা ভ্যারিয়েবলে অ্যাসাইন করেছি। এভাবে ফাংশন ডিক্লেয়ার করাকে ফাংশন এক্সপ্রেশন বলে।</p>\n<p>এবার আসি ফাংশন তো ডিক্লেয়ার করা হলো। এখন কিভাবে ইউজ করবো? হ্যাঁ, এবার আপনাকে সেই ফাংশনকে কল বা ডাকতে হবে। না ডাকলে ফাংশন আসবে না বা প্রিন্ট হবে না। ফাংশন এক্সপ্রেশন বা স্টেটমেন্ট যাই হউক না কেন ফাংশন কল উপরের উদাহরণগুলোর ক্ষেত্রেঃ</p>\n<pre><code>funcName();\n</code></pre>\n<p>জাস্ট এভাবেই শেষে প্রথম ব্র্যাকেটসগুলো দিলেই ফাংশন সেটা কল হয়ে যাবে।</p>\n<pre><code>function funcName() {\n    console.log('Hello I am from the function');\n}\n\nfuncName();\n</code></pre>\n<p>এবং</p>\n<pre><code>var funcName = function() {\n    console.log('Hello I am from the function');\n}\n\nfuncName();\n</code></pre>\n<p>উপরের দুইটা কোডেরই আউটপুট সেইম আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TSvtFQCELD3knPaIb1LZDA.png\" alt=\"\" /><strong>Output</strong></p>\n<p>এখানে ফাংশন জাস্ট নরমালি ভিতরে থাকা কন্সোল ডট লগ দেখিয়ে যাচ্ছে। এটা তেমন ইউজফুল মনে হচ্ছে না। আমরা চাচ্ছি এমন একটা ফাংশন বানাতে যেটা দুইটা সংখ্যা নিবে এবং তাদের যোগফল রিটার্ণ করে দিবে।</p>\n<pre><code>function aFunc(parameters) {\n   //do something with the parameters\n   //return the result\n}\n\naFunc(arguments);\n</code></pre>\n<p>হ্যাঁ, এখানেই আসে প্যারামিটার আর আর্গুমেন্ট এর কথা। আমরা ফাংশনের ভিতরে ডাটা দিতে এগুলো ইউজ করি। এখন ফাংশন যত ইচ্ছা ততোটাই প্যারামিটার নিতে পারবে। দুইটা সংখ্যা না, চাইলে একশো সংখ্যাও নিতে পারবে। কিন্তু যতটা প্যারামিটার দিবেন আপনার ফাংশনে, ঠিক ততোটাই আর্গুমেন্ট দিতে হবে ফাংশন কল করার সময়। নতুবা আপনার ফাংশন ঠিকমতো রেজাল্ট দেখাবে না। প্যারামিটার আর আর্গুমেন্ট নিয়ে প্যাঁচ লেগে গেলে নিচের উদাহরণ দেখে ক্লিয়ার হবেন। ফাংশন ডিক্লেয়ার করার সময় আমরা প্রথম ব্র্যাকেটস এর ভিতরে প্যারামিটার পাস করেছি আর কল করার সময় আর্গুমেন্টগুলো পাস করেছিঃ</p>\n<pre><code>function sumMachine(a, b) {\n    var sum = a + b;\n    return sum;\n}\n\nconsole.log(sumMachine(2, 2));\nconsole.log(sumMachine(4, 4));\n</code></pre>\n<p>এখানে আমি ফাংশন স্টেটমেন্ট ইউজ করেছি, আপনি চাইলে এক্সপ্রেশনও ইউজ করতে পারবেন। স্টেটমেন্ট আর এক্সপ্রেশন এর ব্যাপারে ডিটেইলস অন্য পর্বে লিখবো। এখন শুধু জেনে রাখুন কোনটা স্টেটমেন্ট আর কোনটা এক্সপ্রেশন।</p>\n<p>এখানে রিটার্ণ স্টেটমেন্ট খেয়াল করবেন। আমরা উপরে যে ফাংশন ইউজ করে কন্সোলে কিছু লগ করিয়েছি সেটা কিন্ত কোনো ভ্যালু প্রডিউস করে নি। কারণ সেই ফাংশন থেকে কিছু রিটার্ণ করা হয়নি। আপনি আপনার ফাংশন থেকে কিছু একটা ভ্যালু ফিরে পেতে চাইলে রিটার্ণ স্টেটমেন্ট ইউজ করতে হবে। আপনি ভ্যারিয়েবল বা যেকোনো ডাটা টাইপের ডাটাই এখানে রিটার্ণ করতে পারবেন। আর ফাংশনের ভিতরে শুধু একটা রিটার্ণ স্টেট্মেন্টই যাবে। দুইটা ডিক্লেয়ার করলেও প্রথমটা ইউজ করে রিটার্ণ করে ফাংশন তার কাজ করা বন্ধ করে দিবে। তাই পরেরটা কখনোই কাজ করবে না।</p>\n<p>এখানে <code>sumMachine</code> নামে একটা ফাংশন দুইটা প্যারামিটার <code>a</code> এবং <code>b</code> নিয়েছে। ফাংশনের ভিতরে দুইটা যোগ করে একটা ভ্যারিয়েবল <code>sum</code> এ নেওয়া হয়েছে। তারপরআমরা <code>sum</code> রিটার্ণ করেছি। এখানে দেখুন আমাকে <code>sum</code> কে কোথাও প্রিন্ট করতে বলা হয় নি। আমি ফাংশনটাকে কল করে সেটা প্রিন্ট করতে বলেছি। এখানে <code>sum</code> রিটার্ণ করায় ফাংশনের ভ্যালু হিসেবে sum টাই প্রিন্ট হচ্ছে কন্সোলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SlLiK091kPjYF2LdFwf66A.png\" alt=\"\" /></p>\n<p>এখান, আপনি আর্গুমেন্ট হিসেবে যেকোনো ভ্যারিয়েবল, স্ট্রিং, বুলিয়ান, অ্যারে বা অবজেক্ট যেকোনো ডাটা টাইপই পাস করতে পারবেন।</p>\n<pre><code>function printMyName(name, age) {\n    console.log('My name is: ' + name + ' and I am ' + age + ' years old!');\n}\n\nprintMyName('Zonayed Ahmed', 21);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EIgOwx1G-GMdEsSvcwsMrw.png\" alt=\"\" /></p>\n<p>এখন জাভাস্ক্রিপ্ট এ যেহেতু ফাংশনকে ফার্স্ট ক্লাশ ফাংশন ধরা হয় তাই আপনি চাইলে একটা ফাংশনকে আরেকটা ফাংশনের আর্গুমেন্ট হিসেবে পাস করতে পারবেন। নিচের কোডটা ভালো করে খেয়াল করুনঃ</p>\n<pre><code>function callMyName(name, callback) {\n    var myAge = 20;\n    callback(myAge);\n    console.log('Is it interesting? Yes it is Mr.' + name);\n}\n\nfunction hello(age) {\n    console.log('I am passed through argument and my age is: ' + age);\n}\n\ncallMyName('Zonayed Ahmed', hello);\n</code></pre>\n<p>আউটপুটঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LWcOaGMKITB9Fsl35n_B5g.png\" alt=\"\" /></p>\n<p>সেইম কারণে আপনি একটা ফাংশন থেকে আরেকটা ফাংশনও রিটার্ণ করতে পারবেনঃ</p>\n<pre><code>function welcomeMsg(name) {\n    console.log('Welcome Mr. ' + name);\n    return function options(menu) {\n        console.log('Do you like ' + menu + ' Mr. ' + name);\n    }\n}\n\nwelcomeMsg('Zonayed Ahmed')('Coffee');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vRELsxYmPL812L9splLpUw.png\" alt=\"\" /></p>\n<p>এখন অনেকের মনে একটা প্রশ্ন থেকে থাকতে পারে। যেমন এই প্রোগ্রামটা লক্ষ্য করুনঃ</p>\n<pre><code>function changeValue(a) {\n    console.log('Value of a inside function before changing: ' + a);\n    a = 10;\n    console.log('Value of a inside function after changing: ' + a);\n    return a;\n}\n\nvar a = 100;\nconsole.log('Value of a before changing function is applied: ' + a);\nchangeValue(a);\nconsole.log('Value of a after changing function is applied: ' + a);\n</code></pre>\n<p>এখন এখানে আমরা <code>a</code> কে আর্গুমেন্ট হিসাবে ফাংশনে পাস করে সেটার ভ্যালু চ্যাঞ্জ করে রিটার্ণ করে আবার প্রিন্ট করেছি। কি মনে হচ্ছে ফাংশন অ্যাপ্লাই করার পর কি <code>a</code> এর ভ্যালু চ্যাঞ্জ হবে? আউটপুট দেখুন তাইলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MLcc_tan5PfEj7Si2F8CCQ.png\" alt=\"\" /></p>\n<p>দেখুন <code>a</code> এর ভ্যালু চ্যাঞ্জ হয়নি। কারণ এখানে আর্গুমেন্ট হিসাবে a পাস করা হয়েছে জাস্ট ভ্যালু হিসাবে। মানে জাস্ট আপনি <code>a</code> এর একটা কপি পাঠিয়েছেন। আসল <code>a</code> বা রেফারেন্সটা পাঠাননি। তাই আপনার অরিজিনাল ভ্যালু চ্যাঞ্জ হয়নি। এটা থেকে বুঝা গেলো আপনি এভাবে আর্গুমেন্ট পাস করলে সেটার একটা কপি পাস হয়, রেফারেন্স পাস হয় না।</p>\n<hr />\n<p><strong>প্রশ্নোত্তরঃ</strong></p>\n<p>১। কোনটা রেফারেন্স আর কোনটা বাই ভ্যালু হিসাবে পাস করেছি কিভাবে বুঝবো?</p>\n<p><strong>উঃ</strong> জাভাস্ক্রিপ্ট এর ফাংশনে যখন আপনি কোনো( প্রিমিটিভ ডাটা টাইপ) আর্গুমেন্ট পাস করবেন ঐটা সবসময় ভ্যালু হিসাবে পাস হবে। তবে আপনি যদি নন-প্রিমিটিভ ডাটা টাইপ(বা আরেকনামে রেফারেন্স ডাটা টাইপ) যেমনঃ অবজেক্ট, অ্যারে পাস করে এতে কোনো পরিবর্তন করেন(পুশ, বা অবজেক্ট এর প্রপার্টি) তাহলে সেটা বাই রেফারেন্স পাস হবে(যেহেতু এরা রেফারেন্স ডাটা টাইপ) এবং আপনার অরিজিনাল ডাটাতে সেটার ইফেক্ট পড়বে:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yvZHGSV4lJ32yWEcedJ2dg.png\" alt=\"\" /><strong>অবজেক্ট রেফারেন্স ডাটা টাইপ হওয়ায় ফাংশন আর্গুমেন্ট হিসাবে পাস করে চ্যাঞ্জ করার পরও সেটার ইফেক্ট মেইন অবজেক্ট এ পড়েছে</strong></p>\n<hr />\n<p>আজকে এই পর্যন্তই। ফাংশনটা প্রচুর প্র্যাক্টিস করতে হবে নাইলে আয়ত্তে আনা যাবে না। তাই আশা করি আপনি আপনার মতো করে বিভিন্নরকম ফাংশন প্র্যাক্টিস করবেন <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f642.svg\" alt=\"🙂\" /></p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-04-01T06:31:09.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>আমি আমার অনেক পর্বে স্ট্যাটমেন্ট আর এক্সপ্রেশন এই দুইটা শব্দ অনেক ইউজ করেছি বা হয়তো অনেক জায়গায় দেখে থাকবেন এই দুইটা জিনিস। আজকে আমি শুধুমাত্র এই দুইটা নিয়েই কথা বলবো।</p>\n<p>আমাদের কোডে মাঝেমধ্যে কিছু লাইন ভ্যালু প্রডিউস করে। যেমন ১০ + ১০ সমান ২০ হয়। আবার কিছু কোড আছে যেগুলো শুধুমাত্র অ্যাকশন নেয়। যেমন কন্ডিশনাল স্ট্যাটমেন্টগুলো। এগুলো কোনো ভ্যালু প্রডিউস করে না, জাস্ট কিছু নির্দিষ্ট কিছু অ্যাকশন নেয়। এগুলোর উপর ভিত্তি করেই আমরা স্ট্যাটমেন্ট আর এক্সপ্রেশনকে পার্থক্য করে থাকি। সোজা বাংলায় এক্সপ্রেশন ভ্যালু প্রডিউস করে আর স্ট্যাটমেন্ট শুধুমাত্র অ্যাকশন নেয়।</p>\n<p><strong>এক্সপ্রেশনঃ</strong></p>\n<p>নিচের উদাহরণে ১০ যোগ ১০ করা হয়েছে। এখানে ভ্যালু প্রডিউস হয়েছে যেহেতু তাই এটা এক্সপ্রেশনঃ</p>\n<pre><code>10 + 10;\n</code></pre>\n<p>এক্সপ্রেশন সাধারণত এক লাইনের কোড হয়। পাশাপাশি আরো অনেক কিছু অ্যাড করা যেতে পারে, কিন্তু দিন শেষে একটা একটা ভ্যালু সে প্রডিউস করবেই। নিচের উদাহরণগুটাও এক্সপ্রেশনঃ</p>\n<pre><code>'Zonayed' + ' ' + 'Ahmed';\n</code></pre>\n<p>আরো উদাহরনঃ</p>\n<pre><code>2 + 2\n3 * 7\n1 + 2 + 3 * (8 ** 9) - Math.sqrt(4.0)\nmin(2, 22)\nmax(3, 94)\nround(81.5)\n'Zonayed'\n'Ahmed'\n'Zonayed' + 'Ahmed'\nnull\ntrue\ntalse\n2\n3\n4.0\n</code></pre>\n<p>কিন্তু যখনি আবার এই ভ্যালুগুলো কোথাও অ্যাসাইন করতে যাবেন, তখন সেটা স্টেটমেন্ট হিসেবে গণ্য হবে। যেমন নিচের এই পুরোটা একটা স্টেটমেন্টঃ</p>\n<p>| --- |\n| var assignValue = 10 + 10; |</p>\n<p><strong>স্ট্যাটমেন্টঃ</strong></p>\n<p>আর অন্যদিকে স্ট্যাটমেন্ট জাস্ট কিছু অ্যাকশন নিবে। যেমন লুপ, কন্ডিশনাল স্ট্যাটমেন্টসহ আরো অনেক কিছুঃ</p>\n<pre><code>if(10 &lt; 20) {\n   console.log('Yeah! It is true');\n} else {\n   console.log('No! It is not True');\n}\n</code></pre>\n<p>উপরের এটা জাস্ট অ্যাকশন নিচ্ছে। ভিতরে থাকা এক্সপ্রেশন অনুযায়ী, সত্য না মিথ্যা হবে সেটার উপর ভিত্তি করে পার্টিকুলার পার্ট প্রিন্ট করছে। সেইমভাবে অন্য সবগুলোওঃ</p>\n<pre><code>for(expressions) {\n   //Some Code here\n}\n\ndo {\n   //Some code here\n} while(expression);\n\nwhile(expression) {\n   //Some code here\n}\n</code></pre>\n<p>আবার লক্ষ্য করুন, স্ট্যাটমেন্ট কয়েক লাইনের হয়। এক্সপ্রেশন যেখানে বেশীরভাগ সময়ে এক লাইনের হয়, সেখানে স্ট্যাটমেন্ট কয়েক লাইনের হতে পারে। তো এটাও একপ্রেশন আর স্ট্যাটমেন্ট চিনতে কাজে দিতে পারে। কিন্তু তারপরেও কিছু ভিন্নতা রয়েছে</p>\n<p><strong>বিভিন্নরকম ফাংশনঃ</strong></p>\n<p>আমরা জানি ফাংশনকেও ভ্যারিয়েবলে স্টোর করা যায়। এখন ফাংশনকে যদি ভ্যারিয়েবলে স্টোর করি তাহলে সেটা কি হবে? এক্সপ্রেশন নাকি স্ট্যাটমেন্ট? হ্যা আমার কথামতো সেটা এক্সপ্রেশনই হবে।</p>\n<p><strong>ফাংশন এক্সপ্রেশনঃ</strong></p>\n<p>এভাবে ফাংশন নিয়ে সেটা কোনো ভ্যারিয়েবলে স্টোর করলে সেটা ফাংশন এক্সপ্রেশন হবেঃ</p>\n<pre><code>var someFunc = function(params) {\n   //Some code here\n}\n</code></pre>\n<p><strong>ফাংশন স্ট্যাটমেন্টঃ</strong></p>\n<p>আর নরমালভাবে ফাংশন নিলে সেটা ফাংশন স্ট্যাটমেন্ট হবেঃ</p>\n<pre><code>function sumFunc(params) {\n   //Some Code here\n}\n</code></pre>\n<p>আশা করি এবার স্ট্যাটমেন্ট আর এক্সপ্রেশন এই দুইটা ব্যাপার একদম ক্লিয়ার হয়ে গেছে। আজকে এই পর্যন্তই।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-04-05T06:31:02.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>প্রোগ্রামিং এ অনেক প্রিন্সিপ্যাল আছে। তার মধ্যে অন্যতম একটা হচ্ছে ড্রাই প্রিন্সিপ্যাল। আজকে আমি এটা নিয়েই আলোচনা করবো। এখানে নতুন কিছু শিখাবো না, বরং কিভাবে আরো ভালোভাবে আমরা কোড লিখতে পারি ড্রাই প্রিন্সিপ্যাল মেনে সেটাই আলোচনা করবো।</p>\n<p>ড্রাই প্রিন্সিপ্যাল অথবা ইংরেজীতে DRY মানে হচ্ছে Don’t Repeat Yourself. এর আসল উদ্দেশ্য হচ্ছে বারবার একই কাজ না করে সেটা কিভাবে শর্ট করে, সুন্দর করে করা যায়। প্রোগ্রামিং এ এমন সিচুয়েশান আসতে পারে যেখানে আমাদের একই রকম সমস্যা সমাধানের জন্য কোড লিখতে হতে পারে। সেক্ষেত্রে আমরা বারবার একই রকম কোড না লিখে কিছু টেকনিক ইউজ করে এক কোডেই সব কাজ সেরে ফেলতে পারি। তাছাড়া কোড যত বেশী লাইনের হবে। মেইন্টেইন করতে তত সমস্যায় পড়তে হবে। কোনো বাগ বা সমস্যা খুঁজে বের করতেও তত জটিল হয়ে যাবে। তাই কোড শর্ট আর সুন্দর রাখতে ড্রাই প্রিন্সিপ্যাল এর বিকল্প কিছু নেই।</p>\n<p>প্রথমে একদম ব্যাসিক থেকে শুরু করি। ধরি আমরা একটা লেখা প্রিন্ট করতে চাচ্ছি। এখন বারবার সেটা না লিখে একটা ফাংশন ডিক্লেয়ার করে সেটা বারবার ইউজ করতে পারিঃ</p>\n<pre><code>function printAText() {\n   console.log('This Post is written by Zonayed Ahmed');\n}\n</code></pre>\n<p>তাহলে এবার আমরা যেখানে এই লেখাটা প্রিন্ট করতে চাই জাস্ট ফাংশনটা কল করলেই হচ্ছে।</p>\n<pre><code>// Some Code\nprintAText();\n//Some More Code\nprintAText();\n</code></pre>\n<p>এভাবে আপনি বারবার লেখাটা না লিখে জাস্ট ফাংশন ইউজ করে কাজ করে কাজ করে ফেলতে পারতেছেন। যদিও এই উদাহরনটা এতোটা ইফেক্টিভ না, তবে ব্যাসিক বুঝার জন্যে ভালো।</p>\n<p>এবার আরো কাজের উদাহরণে যাই। ধরি, আমরা দুইটা নাম্বারের যোগফল চাচ্ছি। এখন বারবার দুইটা নাম্বার যোগ করে, একটা ফাংশন নিয়ে ফাংশনে আর্গুমেন্ট হিসেবে নাম্বারগুলো পাঠিয়ে কাজ সেরে ফেলতে পারিঃ</p>\n<pre><code>function addTwoNum(x, y) {\n   var sum = x + y;\n   console.log('Sum of ' + x + ' and ' + y + ' is: ' + sum);\n}\n</code></pre>\n<p>এখন এই ফাংশন দুইটা আর্গুমেন্ট নিবে এবং সেগুলো যোগ করে <code>sum</code> এ স্টোর করবে। সবশেষে কন্সোল লগে ডিটেইলস প্রিন্ট করবে। এখন যতবার এই ফাংশনটা কল করা হবে দুইটা নাম্বার আর্গুমেন্ট হিসেবে দিয়ে, ততো বারই আপনি ঐ কন্সোল লগ দেখতে পাবেন। আপনার বারবার যোগ করতে হবে না।</p>\n<pre><code>addTwoNum(5, 10);\naddTwoNum(20, 30);\naddTwoNum(40, 50);\naddTwoNum(60, 70);\naddTwoNum(80, 90);\n</code></pre>\n<p>রেজাল্ট দেখুন ক্রোম কন্সোলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aWBN9JHTPFUYAC7qBvHrZQ.png\" alt=\"\" /></p>\n<p>এভাবে ড্রাই প্রিন্সিপ্যাল মেইন্টেইন করে আমরা এরকম আরো অনেকভাবে করতে পারি। এখানে মেইন উদ্দেশ্য একই কোড রিপিট না করা। যদি সম্ভব হয় তাহলে এভাবে ড্রাই করে কোড লিখা। আরো উদাহরণ নিলেঃ</p>\n<pre><code>function welcomeMsg(name) {\n   console.log('Welcome Mr. ' + name);\n}\n</code></pre>\n<p>এখন যেখানেই <code>name</code> এর জন্যে আর্গুমেন্ট পাস করে এই ফাংশন কল করবেন, সেখানেই ওয়েলকাম ম্যাসেজ প্রিন্ট হবে।</p>\n<pre><code>welcomeMsg('Zonayed');\nwelcomeMsg('Ramazan');\nwelcomeMsg('Sagar');\nwelcomeMsg('Niraj');\n</code></pre>\n<p>আউটপুট দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*sA0qL3MqgMWy6SQ063EQug.png\" alt=\"\" /></p>\n<p>তো এভাবেই আমাদের বারবার না লিখেও ড্রাই প্রিন্সিপ্যাল মেইন্টেইন করে একেকসময় একেকটা টেক্সট প্রিন্ট করতে পারতেছি।</p>\n<p>এখানে এই পর্বে আমি শুধুমাত্র ড্রাই প্রিন্সিপ্যাল এর সাথে পরিচয় করিয়ে দিয়েছি। আমি শুধুমাত্র ফাংশন দিয়েই উদাহরণ সব দিয়েছি। তার মানে এই না যে ফাংশন ইউজ করেই কোড ড্রাই করা যায়। কোড আরো অনেকভাবে ড্রাই করা যায়। কোড ড্রাই করার আরো টেকনিক আমি সামনে লিখবো। তবে এখন থেকে কেউ কখনো কোড ড্রাই করার কথা বললে, বা কোথাও এই টার্ম দেখলে বুঝে নিবেন আশা করি এর মানেটা কি। আমার আজকে ড্রাই প্রিন্সিপ্যাল নিয়ে লিখার উদ্দেশ্য এটাই। ড্রাই প্রিন্সিপ্যাল এর বিপরীতে অনেকে অয়েট (wet) কোড টার্মও ইউজ করে। এর মানে হচ্ছে ঠিক ড্রাই এর বিপরীত। আশা করি বুঝতে পেরেছেন। আজকে এই পর্যন্তই, ধন্যবাদ।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-04-07T06:30:59.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>আমরা প্রায়ই জাভাস্ক্রিপ্ট এর সাথে ES5 বা ES6 বা এরকম অনেককিছুর কথা শুনে থাকি। ES এর ফুল মিনিং হচ্ছে ECMAScript, আর সাথের নাম্বারটা এডিশন মিন করে। তো এটার সাথে জাভাস্ক্রিপ্ট এর সম্পর্ক কোথায় বুঝতে হলে আগে একটু হিস্টোরি ঘাটতে হবে। আজকে এই পর্বে আমি আসলে এগুলো নিয়েই আলোচনা করবো।</p>\n<p>এখন জাভাস্ক্রিপ্ট এর বেশ কিছু ভার্শন আছে। কিন্তু জাভাস্ক্রিপ্ট ফার্স্ট রিলিজ হয় ১৯৯৫ সালের দিকে। তখন সেটা লাইভস্ক্রিপ্ট (LiveScript) নামে রিলিজ হয়, যদিও ডেভেলপ করার সময় নাম ছিলো মকা ( Mocha)। কিন্তু জাস্ট এর পরের বছর ১৯৯৬ সালে এটার নাম পরিবর্তন করে জাভাস্ক্রিপ্ট (JavaScript) করা হয়।</p>\n<p>আর এদিকে ইকমাস্ক্রিপ্ট হচ্ছে স্ক্রিপ্টিং ল্যাংগুয়েজের স্পেসেফিকেশন। এর কাজ হচ্ছে নিয়ম-কানুন দেওয়া। যে এগুলো এগুলো মেনে চলতে হবে একটা স্ক্রিপ্টিং ল্যাংগুয়েজকে। এই ইকমাস্ক্রিপ্ট বানানো হয়েছে ইকমা ইন্টারন্যাশনাল (Ecma International) নামে একটা অরগানাইজেশন থেকে। ইকমা ইন্টারন্যাশনালের কাজই হচ্ছে এরকম বিভিন্ন টেকনোলিজীর স্ট্যান্ডার্ড মেইন্টেইন করার জন্য স্পেশিফিকেশন প্রদান করা। এখন স্ট্যান্ডার্ড কি? স্ট্যান্ডার্ড যেমন আপনি যদি ASCII ভ্যালুর কথা শুনে থাকেন, ASCII হচ্ছে বিভিন্ন ক্যারেক্টার ইনকোডিং করার স্ট্যান্ডার্ড। আরো রিয়েল এক্সাম্পলের দিকে গেলে QWERTY কীবোর্ডের কথা বলা যায়। বেশীরভাব জায়গাতেই এই QWERTY কীবোর্ড দেখবেন। এই কীবোর্ডগুলো QWERTY স্ট্যান্ডার্ড মেইন্টেইন করে। এখন ইকমা ইন্টারন্যাশনার ASCII বা QWERTY স্ট্যান্ডার্ড নির্ধারন না করলেও ইকমাস্ক্রিপ্ট ইকমা ইন্টারন্যাশনাল প্রদান করে থাকে। ইকমা আরো <a href=\"https://www.ecma-international.org/publications/standards/Standard.htm\">অনেক কিছু</a>র জন্যেই স্পেসিফিকেশন দেয়। কিন্তু স্ক্রিপ্টিং ল্যাংগুয়েজের জন্যে ECMA-262 নামে <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\">একটা স্ট্যান্ডার্ড</a> পাবলিশ করেছে ইকমাস্ক্রিপ্ট।</p>\n<p>এখন ES5 বা ES6 কি? ১৯৯৬ সালের দিকেই জাভাস্ক্রিপ্ট এর প্রতিষ্ঠাতা প্রতিষ্ঠান জাভাস্ক্রিপ্ট কে ইকমা ইন্টারন্যাশনালের হাতে দিয়ে দেয় স্ট্যান্ডার্ড মেইন্টেইন করার জন্যে। প্রথম ভার্শন(ES1) বের হয়েছিলো ১৯৯৭ সালে। আর হ্যা, এগুলো ECMA-262 এর এডিশন। তারপর আগে-পরে অনেক ভার্শন বের হলেও সবচেয়ে বড় পরিবর্তন আসে ভার্শন নাম্বার ৫ (ES5) এ। যেটার পরপরি জাভাস্ক্রিপ্ট এর আসলে এভাবে ওয়েবে পাওয়ারফুল হয়ে যাওয়া। তারপর থেকে ইকমা ইন্টারন্যাশনাল ২০১৫ তে সিদ্ধান্ত নেয় প্রতি বছর বছর তারা স্পেসেফিকেশন এর ভার্শন করবে। মানে ইয়ারলি তারা আপডেট করতে থাকবে। কিন্তু এর আগেই ES6 নামে একটা ভার্শন রিলিজ হয়। তাই পরিবর্তিতে ES6 এর নাম চ্যাঞ্জ করে ES2015 করা হয়। আর প্রতি বছর বছর যেটা আসবে সেটা সেই বছরের নামে হবে। যেমনঃ ES2015, ES2016, ES2017 এভাবে।</p>\n<p>এখন জাভাস্ক্রিপ্ট কি সবসময় ইকমাস্ক্রিপ্ট এর স্ট্যান্ডার্ড ফলো করে? উত্তর হলোঃ না জাভাস্ক্রিপ্ট এ এমন কিছু ফিচার আছে যেগুলো ইকমাস্ক্রিপ্ট এর স্ট্যান্ডার্ড ফলো করে না। দেখতে মজিলার <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_Next_support_in_Mozilla\">রেফারেন্স ডকুমেন্টগুলো</a> দেখতে পারেন। কিছু ফিচার আছে যেটা ইকমাস্ক্রিপ্ট এর স্পেসিফিকেশনে না থাকা সত্বেও জাভাস্ক্রিপ্ট এ ইমপ্লিমেন্ট করা হয়েছে।</p>\n<p>ইকমাস্ক্রিপ্ট স্পেসেফিকেশনের <a href=\"https://github.com/tc39/ecma262#ecmascript\">গিটহাব রিপোজিটরি</a>ও আছে। চাইলে দেখে আসতে পারে। এখানে পুরোনো ভার্শন, বর্তমান ভার্শনসহ সামনে কি কি আসতে পারে সব খুঁজে পাবেন।</p>\n<h3 id=\"\">কোন ভার্শন ইউজ করবো?</h3>\n<p>অবশ্যই যে জিনিসের জন্যে কাজ করবেন সেটা কোন ভার্শন ১০০% সাপোর্ট করে সেটা দেখে সেই অনুযায়ী ভার্শন ইউজ করতে হবে। যেমন ES5 সব ব্রাউজারেই কমপ্লিটলি সাপোর্ট করে যেখানে ES6 এর বেশ কিছু ফিচার এখনো অনেক ব্রাউজারে সাপোর্ট করে না। কোথায় কোন ভার্শন কতটুকু সাপোর্ট করে দেখতে চাইলে <a href=\"https://kangax.github.io/compat-table/es6/\">এই ওয়েবসাইটে</a> দেখতে পারেন।</p>\n<p>ES5 সব ব্রাউজারে সাপোর্ট করে পুরোপুরি।</p>\n<p>ES6 সব ব্রাউজারে অনেকটাই সাপোর্ট করে, কিন্তু অনেক ফিচার আছে যেগুলো সাপোর্ট করে না। তাই এই মূহূর্তে ইউজ করা সেইফ না</p>\n<p>ES2016 একদমই কোনো ব্রাউজারে সাপোর্ট নেই বললেই চলে।</p>\n<p>তবে <a href=\"https://babeljs.io/\">ব্যাবেল </a>নামে একটা কম্পাইলার আছে যেটা ইউজ করে আপনি চাইলে জাভাস্ক্রিপ্ট এর একদম নতুন ভার্শনে কোড লিখে ES5 এ কনভার্ট করে নিতে পারবেন যেটা কমপ্লিটিলি সাপোর্টেড।</p>\n<p>আজ এই পর্যন্তই। যদিও আজকের পর্বে কিছু শিখানো হয়নি। তারপরেও এগুলো অনেক গুরুত্বপূর্ন কিছু ছিলো তাই আলাদা করে পর্বে লিখলাম। আশা করি এরপর থেকে ইকমাস্ক্রিপ্ট নিয়ে আর কনফিউশান সৃষ্টি হবে না। আর আমি জাভাস্ক্রিপ্ট ব্যাসিক এর সিরিজে শুধুমাত্র ES5 নিয়েই লিখবো। পরে অ্যাডভান্স জাভাস্ক্রিপ্ট লিখে তারপর ES6 নিয়ে লেখা শুরু করবো। ES5 এর সাথে তুলনা করে করে ES6 নিয়ে লিখবো যাতে সহজেই বুঝে ফেলা যায় সবকিছু</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-05-25T04:41:57.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>কোড করা অনেক সহজ। কিন্তু ভালো কোড লিখা আর সেই কোড কিভাবে কাজ করছে সেটা বুঝা অনেক কঠিন। কঠিন বলে ডিমোটিভেট করতে চাই না। আসলে কোড কিভাবে কাজ করছে সেটা হচ্ছে বুঝার বিষয়। একবার যদি বুঝে যান কোড বিহ্যাইন্ড দ্যা সীনে কিভাবে কাজ করছে তাইলে আপনি যেকোনোভাবেই আপনার সুবিধামতো কোড লিখে যেতে পারবেন। আমার আজকের এই পর্বে তাই জাভাস্ক্রিপ্ট বিহ্যাইন্ড দ্যা সীনে কিভাবে কাজ করে সেগুলো নিয়েই যতটুকু সম্ভব বিস্তারিত আলোচনা করবো।</p>\n<p>জাভাস্ক্রিপ্ট সাধারণত কোনো এনভারোমেন্ট এ হোস্ট করা থাকে। প্রায়সময় সেটা আমাদের বহুল ব্যবহ্রত ব্রাউজার হতে পারে, বা অন্য কোনো অ্যাপ্লিকেশন প্রোগ্রাম যেমন <a href=\"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%a8%e0%a7%8b%e0%a6%a1-%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%a8%e0%a6%bf%e0%a7%9f%e0%a7%87-%e0%a6%b8%e0%a6%ac-%e0%a6%95%e0%a6%bf%e0%a6%9b%e0%a7%81/\">নোড জেএস</a>ও হতে পারে।</p>\n<p>এখন এই জাভাস্ক্রিপ্ট যেখানে হোস্ট করা থাকে, সেখানে একটা জাভাস্ক্রিপ্ট এর ইঞ্জিনও(Google V8 Engine, Spider Monkey, JavaScript Core etc…) থাকে যার কাজ হচ্ছে এই জাভাস্ক্রিপ্ট কোডকে এক্সিকিউট করা। কোথায় কোন ইঞ্জিন থাকে সেটা পূর্বে আলোচনা করা হয়েছে।</p>\n<p>এখন এই জাভাস্ক্রিপ্ট কোড কয়েকটা ধাপে এক্সিকিউট হয়ে রান করে। আমরা নিচের ডায়াগ্রাম থেকে সেটা দেখতে পারিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6hxSzZC9K0wZUXygi03CJg.png\" alt=\"\" /><strong>ফটোশপটা ক্রাশ করতেছিলো কোনো কারনে তাই ভালোভাবে করতে পারিনাই। পরে আপডেট করে দিবো।</strong></p>\n<p>এখানে কোড প্রথমে পার্সারের মধ্যে দিয়ে যায়। এখানে সাধারণত সিনট্যাক্স এরর চ্যাক করা হয়। যদি কোনো সিনট্যাক্স এরর পাওয়া যায় তাহলে এখান থেকে সে এররটা থ্রো করা হয়। আর যদি সব সিনট্যাক্স কারেক্ট হয়ে থাকে, তাহলে এখান থেকে অ্যাবস্ট্রাক্ট সিনট্যাক্স ট্রি(Abstract Syntax Tree) নামে একটা ডাটা স্ট্রাকচার তৈরী করা হয়।</p>\n<p>তারপরের ধাপে এই কোড ম্যাশিন কোডে কনভার্ট করা হয়, যেটা আসলে আমাদের কম্পিউটার বুঝতে পারে। এবং সবশেষে আমাদের কোড রান হয়।</p>\n<p>এখন কেন এতো ধাপ ক্রস করতে হয় একটা কোড রান করার আগে? হ্যাঁ আমাদের কম্পিউটার ব্যাসিকালি ম্যাশিন কোড ছাড়া অন্যকিছু বুঝতে পারে না। আমরা যে ল্যাংগুয়েজেই কোড লিখি না কেন সেটা অবশ্যই ম্যাশিন কোডে কনভার্ট হতে হয়, নতুবা আমাদের কম্পিউটার সেটা বুঝতে পারে না।</p>\n<p>এক্সিকিউশেন কন্টেক্সট এবং এক্সিকিউশেন স্ট্যাক</p>\n<p>এক্সিকিউশেন কন্টেক্সট(Execution Context) এবং এক্সিকিউশেন স্ট্যাক(Execution Stack) সম্পর্কে পরিষ্কার ধারনা থাকা খুবই গুরত্বপূর্ন। জাভাস্ক্রিপ্ট এ অনেক ট্রিকি বিষয় রয়েছে যেগুলো বুঝা অনেক কষ্টসাধ্য যদিনা আপনি ঠিক মতো এই এক্সিকিউশেন কন্টেক্সট(Execution Context) আর এক্সিকিউশেন স্ট্যাক(Execution Stack) বুঝতে পারেন।</p>\n<p><strong>এক্সিকিউশেন কন্টেক্সট(Execution Context):</strong></p>\n<p>বাই ডিফল্ট জাভাস্ক্রিপ্ট গ্লোবাল কন্টেক্সট এক্সিকিউট করে। অন্যান্য কিছু ল্যাঙ্গুয়েজের মতো কোনো স্পেসেফিক ফাংশন থেকে এক্সিকিউট হয় না। আর জাভাস্ক্রিপ্ট এর গ্লোবাল এক্সিকিউশন কন্টেক্সট হচ্ছে ব্রাউজারের <code>window</code> অবজেক্ট। কোনো গ্লোবাল ভ্যারিয়েবল ডিক্লেয়ার করা বা <code>window</code> অবজেক্ট এ অ্যাসাইন করা একই কথা</p>\n<pre><code>var a = 10;\n</code></pre>\n<p>এখন যদি দেখি <code>window</code> এর ভিতরে <code>a</code> আছে কিনা তাহলে দেখতে পারঃ</p>\n<pre><code>window.a\n</code></pre>\n<p>তাহলে দেখবেন যে এটা সেইম আপনার ডিক্লেয়ারকৃত <code>a</code> এর ভ্যালুই দেখাচ্ছে</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YVLr_m0HE6gYv0aJnwhkNg.png\" alt=\"\" /></p>\n<pre><code>a === window.a //true\n</code></pre>\n<p>মানে দুইটা একই জিনিস। তো গ্লোবাল ভ্যারিয়েবল ডিক্লেয়ার করা বা <code>window</code> অবজেক্ট এ অ্যাসাইন করা একই কথা।</p>\n<p>তবে আপনার এনভারোমেন্ট যদি ব্রাউজার না হয় তাহলে এই গ্লোবাল এক্সিকিউশন কন্টেক্সট এনভারোমেন্ট অনুযায়ী ভিন্ন ভিন্ন হতে পারে। যেমন নোড জেএস এর গ্লোবাল এক্সিকিউশন কন্টেক্সট হচ্ছে <code>global</code> অবজেক্ট। এনভারোমেন্ট অনুযায়ী এটা চ্যাঞ্জ হতে পারে।</p>\n<p>এক্সিকিউশেন কন্টেক্সট নিয়ে পরে আরো বিস্তারিত আলোচনা করা হয়েছে।</p>\n<p><strong>এক্সিকিউশেন স্ট্যাক(Execution Stack):</strong></p>\n<p>জাভাস্ক্রিপ্ট এ এক্সিকিউশেন স্ট্যাক(Execution Stack) সম্পর্কে ক্লিয়ার ধারণার জন্যে আমরা একটা উদাহরণ ব্যবহার করবো এবং দেখবো সেই কোডগুলো কিভাবে এক্সিকিউট হচ্ছে।</p>\n<pre><code>var name = 'Zonayed';\n\nfunction first() {\n   var welcome = 'Hello ';\n   second();\n   console.log(welcome + name);\n}\n\nfunction second() {\n   var welcome2 = 'Hi! ';\n   third();\n   console.log(welcome2 + name);\n}\n\nfunction third() {\n   var welcome3 = 'Hey! ';\n   console.log(welcome3 + name);\n}\n\nfirst();\n</code></pre>\n<p>উপরের এই কোড রান করলে দেখবেন এভাবে রান হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*L7GmbhbipE25Dbu6i4r7RA.png\" alt=\"\" /></p>\n<p>শেষেরগুলো আগে আসতেছে আর আগেরগুলো পরে। কেমন এলোমেলো লাগতেছে না? হ্যাঁ এখানেই আমাদের এক্সিকিউশেন স্ট্যাকটা কিভাবে কাজ করতে সেটা বুঝতে হবে। তাইলেই একমাত্র তখন আমাদের পরিষ্কার ধারনা হবে কিভাবে এই কোড রান করলো। প্রথমে আমার নিচের এই ডায়াগ্রামটা লক্ষ্য করুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*kSGrVKeWSeyut11ErT2_nA.png\" alt=\"\" /><strong>প্রয়োজনে জুম করে দেখুন</strong></p>\n<p>এখানে নাম্বার কোডগুলো সিরিয়াল নাম্বার অনুযায়ী এক্সিকিউট হবে। আর ডান পাশের ডায়াগ্রামটা ব্যাসিকালি এক্সিকিউশেন স্ট্যাক। স্ট্যাক ডাটা স্ট্রাকচার সম্পর্কে যদি আপনার ধারণা না থেকে থাকে তাহলে স্ট্যাক এমন একটা স্ট্রাকচার যেখানে ফার্স্ট ইন লাস্ট আউট সিস্টেম মেইন্টেইন করা হয়। এর মানে হচ্ছে এখানে ডাটা বের হওয়ার একটাই মাত্র রাস্তা থাকবে, আর যখনই কোনো ডাটা বের করা হবে সেটা একদম উপর থেকে বের করা যাবে। আপনি যদি অনেকগুলো কাঁচের প্লেট একটার উপরে আরেকটা স্ট্যাক দিয়ে রাখেন, তাহলে আপনি কোনো একটা প্লেট নিতে চাইলে প্রথমে আপনাকে উপরের প্লেটটাই নিতে হবে, নাইলে নিচে থেকে নিতে পারবেন না বা নিতে চাইলেও দুর্ঘটনার সম্ভাবনা থাকবে। আপনি সবার শেষে যে প্লেটটা রাখবেন স্ট্যাক ডাটা স্ট্রাকচার সিস্টেমে আপনি কোনো প্লেট নিতে চাইলে সেটাই নিতে হবে যেহেতু এই প্লেটটাই আপনার সবার উপরে। আর সবার প্রথমে যে প্লেটটা রেখেছেন সেটা হবে সবার নিচে, উপরের সবগুলো একটা একটা করে নেওয়া শেষ হলে পরেই আপনি সেই প্লেটটা নিতে পারবেন।</p>\n<p>এখন আমাদের কোড যখন নাম্বার ১ এ তখন <code>name</code> ভ্যারিয়েবলে <code>Zonayed</code> অ্যাসাইন হয়ে যায়। তারপর শুধুমাত্র ফাংশন ডেফিনেশনগুলো একটা একটা করে প্রথমে <code>first()</code>, তারপরে <code>second()</code> এবং সবশেষে <code>third()</code> এক্সিকিউশেন স্ট্যাক এ গ্লোবাল এক্সিকিউশেন কন্টেক্সট এ চলে যায়। এখানে ফাংশনের ভিতরে থেকে কিছুই এক্সকিউট হবে না যেহেতু আমরা ফাংশন কোনোটাই এখন পর্যন্ত কল করি নাই।</p>\n<p>তারপরের নাম্বার ৫ এ আমরা <code>first()</code> ফাংশনটাকে কল করেছি। এখন এই ফার্স্ট এক্সিকিউশেন স্ট্যাক এ গ্লোবাল এক্সিকিউশেন কন্টেক্সট এর উপরে স্থান পাবে এবং এখন <code>first()</code> এর ভিতর থেকে কোড এক্সিকিউট হওয়া শুরু করবে। এখন নাম্বার ৬ এ একটা ভ্যারিয়েবল নিয়ে সেখানে কিছু ডাটা অ্যাসাইন করা হলো। কিন্তু আবার নাম্বার ৭ এ আরেকটা ফাংশন <code>second()</code> কে কল করা হয়েছে। তাই এখন এক্সিকিউশেন স্ট্যাক এ <code>first()</code> এর উপরে নতুন আরেকটা এক্সিকিউশেন কন্টেক্সট <code>second()</code> স্থান নিবে এবং এখন <code>second()</code> এর ভিতর থেকে কোড এক্সিউকিউট হওয়া শুরু করবে। এখন এখানেও নাম্বার ৮ এ নতুন একটা ভ্যারিয়েবলে কিছু ডাটা অ্যাসাইন করা হয়েছে। আবার এর পরের নাম্বার ৯ এ আবার আরেকটা ফাংশন <code>third()</code> কে কল করা হয়েছে। তাই এখন এক্সিকিউশেন স্ট্যাক এ নতুন আরেকটা এক্সিকিউশেন কন্টেক্সট <code>third()</code> স্থান পাবে এবং এখন <code>third()</code> এর ভিতর থেকে কোড এক্সিকিউট হওয়া শুরু করবে। এখন <code>third()</code> এর ভিতরে নাম্বার ১০ এ আবার নতুন একটা ভ্যারিয়েবল নিয়ে কিছু ডাটা অ্যাসাইন করা হয়েছে। এবং পরের লাইনে কন্সোল লগ করা হয়েছে যেটা এখন আপনার কন্সোলে শো করবে। তাই এখানকার লগটাই আপনি প্রথমে দেখতে পাবেন আপনার আউটপুটে। এখন <code>third()</code> এক্সিকিউট হওয়া শেষ এবং এটা এখান থেকে সরে যাবে। তাই এখন এক্সিকিউশেন কন্টেক্সট যাবে <code>second()</code> এ যেহেতু এটাই এখন এক্সিকিউশেন স্ট্যাক এর একদম উপরে। এখন <code>second()</code> এর ভিতরে নাম্বার ১২ এর কন্সোল লগটা প্রিন্ট হবে আউটপুটে এবং তাই এটাই আপনি দ্বিতীয় পজিশনে আউটপুট হিসাবে দেখতে পাবেন। এখন সেইমভাবে <code>second()</code> ও শেষ এবং এক্সিকিউশেন স্ট্যাক থেকে চলে যাবে। এখন এক্সিকিউশেন স্ট্যাক এ একদম উপরে থাকবে <code>first()</code> । তাই এখন <code>first()</code> এক্সিকিউট হবে। <code>first()</code> এ নাম্বার ১৩ তে থাকা কন্সোল লগ প্রিন্ট হবে আউটপুটে এবং এই ফাংশন ফিনিশ হয়ে যাবে এবং এক্সিকিউশেন স্ট্যাক থেকে সরে যাবে। আর তাই এখানকার আউটপুটটা সবার শেষে দেখতে পাবেন। এভাবেই জাভাস্ক্রিপ্ট এ এক্সিকিউশেন স্ট্যাক কাজ করে। আর তাই আমরা এরকম আউটপুট দেখতে পাই।</p>\n<p><strong>এক্সিকিউশেন কন্টেক্সট (Execution Context) নিয়ে বিস্তারিতঃ</strong></p>\n<p>এক্সিকিউশেন কন্টেক্সট নিয়ে বিস্তারিত জানা খুবই গুরত্বপূর্ন। আপনি হয়তো জাভাস্ক্রিপ্ট এ দেখে থাকবেন আপনি চাইলে একটা ফাংশন ডিফাইন করার আগেই কল করতে পারবেন এবং সেই কোড কমপ্লিটলি ঠিকঠাক কাজ করবে।</p>\n<pre><code>first();\n\nfunction first() {\n console.log('Jello');\n}\n</code></pre>\n<p>এই কোড পুরোটা একসাথে রান করলে ঠিকঠাক কাজ করবে।</p>\n<p>অথবা একটা ভ্যারিয়েবলও ইউজ করতে পারবেন এটা ডিফাইন করার আগে(ডিফাইন করার আগে ইউজ করলে সেটার ভ্যালু আন্ডিফাইন্ড দেখাবে, কোনো এরর দেখাবে না)।</p>\n<pre><code>console.log(welcome);\n\nvar welcome = 'Hello World!';\n</code></pre>\n<p>আউটপুট আসবে এরকম কিন্তু কোনো এরর আসবে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RMEC3dJ4qD9bU3SQM_jOyw.png\" alt=\"\" /></p>\n<p>কি কারনে এরকম হয়? হ্যাঁ সেজন্যেই আমাদের এক্সিকিউশেন কন্টেক্সট নিয়ে বিস্তারিত গভীর নলেজ থাকতে হবে তাহলেই আপনি বুঝতে পারবেন এগুলো কেন কাজ করে।</p>\n<p>যখন একটা ফাংশন কল করা হয়, তখন এখানে দুইটা ফেজ ঘটেঃ</p>\n<p>১। ক্রিয়েশন ফেজ</p>\n<p>২। এক্সিকিউশেন ফেজ</p>\n<p><strong>১। ক্রিয়েশন ফেজঃ</strong> ক্রিয়েশন ফেজে প্রথমে ভ্যারিয়েবল অবজেক্ট ক্রিয়েট করা হয়। তারপর স্কোপ চেইন ক্রিয়েট করা হয়। স্কোপ নিয়ে পরের পর্বে আলোচনা করা হয়েছে। তারপর সবশেষে <code>this</code> কীওয়ার্ড এর ভ্যালু ডিটারমাইন করা হয়। <code>this</code> যদি চিনে না থাকেন তাহলে চিন্তার কারণ নেই। আপাতত মাথায় রাখবেন এখানেই এটার ভ্যালু ডিটারমাইন করা হয়, আমি পরে <code>this</code> নিয়ে আলোচনা করবো।</p>\n<p>সোজা বাংলায় ক্রিয়েশন ফেজে কি কি হয় বললেঃ</p>\n<ul>\n<li>ফাংশনে যতগুলো আর্গুমেন্ট পাস করা হয়েছে সেগুলার আর্গুমেন্ট লিস্ট তৈরী করা হয়</li>\n<li>কোড সব ফাংশন স্ক্যান করে এবং প্রত্যেকটা ফাংশন একটা ভ্যারিয়েবল অবজেক্ট এ স্টোর করা হয় যেটা সাধারণত ফাংশনটাকে পয়েন্ট করে।</li>\n<li>তারপর কোড ভ্যারিয়েবল এর ডিক্লেয়ারেশনগুলো খোঁজ করে। এবং প্রত্যেকটা ডিক্লেয়ারকৃত ভ্যারিয়েবলের জন্যে <code>undefined</code> প্রপার্টি সেট করে দেয়।</li>\n</ul>\n<p><strong>২। এক্সিকিউশেন ফেজঃ</strong> তারপর এই ফেজে কোড এক্সিকিউট হয়। কোড এক্সিকিউশনের ক্ষেত্রে এক্সিকিউশেন কন্টেক্সট মেইন্টেইন করে কোড লাইন বাই লাইন এক্সিকিউট হয়। এজন্যেই পরে ফাংশন ডিফাইন করার আগে কল করলেও সেটা ঠিকঠাক কাজ করে। আর কোনো ভ্যারিয়েবল ডিক্লেয়ার করার আগে ইউজ করলে সেটার ভ্যালু <code>undefined</code> হিসাবে সেট হয়ে যায় এবং কোনো এরর শো করে না।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Basic"," programming","জাভাস্ক্রিপ্ট"],"date":"2018-05-25T16:00:00.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>হোইস্টিং নিয়ে আসলে আমাদের কিছু করতে হবে না। এটা জাভাস্ক্রিপ্ট এর ডিফল্ট বিহেভিয়ার। আগের পর্বে যেখানে আমি জাভাস্ক্রিপ্ট এর বিহ্যাইন্ড দ্যা সীন নিয়ে আলোচনা করেছি সেখানে দেখে থাকবেন জাভাস্ক্রিপ্ট যাবতীয় ডিক্লেয়ারেশনগুলোকে সবসময় সবকিছুর আগে নিয়ে যায়। এটাই মূলত হোইস্টিং। এটা যেহেতু ডিফল্ট বিহেভিয়ার তাই হয়তো অনেকজায়গায় এটা নিয়ে লেখা নাও পেতে পারেন। তবে জাভাস্ক্রিপ্ট এর বেস স্ট্রং করার জন্যে সবকিছু নিয়ে জানা উচিত। আর হোইস্টিং এর উদাহরন আমি বেশ কয়েকটা আগের পর্বেও উল্ল্যেখ করেছি। কিন্তু এই পর্বে শুধুমাত্র স্পেসেফিকলি হোইস্টিং নিয়েই আলোচনা করবো।</p>\n<p>যেহেতু হোইস্টিং ডিফল্ট বিহেভিয়ার, তাই জাভাস্ক্রিপ্ট এ সব ফাংশনগুলো ক্রিয়েশন ফেজে হোইস্টেড করা থাকে। এজন্যে আসলে আমরা চাইলে একটা ফাংশন ডিক্লেয়ার করার আগে সেটাকে কল করতে পারি।</p>\n<pre><code>aFunc();\n\nfunction aFunc() {\n   var a = 10;\n   var b = 20;\n   var sum = a + b;\n   console.log('Sum: ' + sum);\n}\n</code></pre>\n<p>আউটপুটঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-OAtCwf1SDiefWk9xsEIpw.png\" alt=\"\" /></p>\n<p>কাজ করার কারণ ক্রিয়েশন ফেজে জাভাস্ক্রিপ্ট এর ডিফল্ট বিহেভিয়ারের জন্যে। আমি ক্রিয়েশন ফেজ নিয়ে গত পর্বে আলোচনা করেছিলাম, তারপরেও সুবিধার্থে এখানেও কিছু পয়েন্ট তুলে ধরলামঃ</p>\n<ul>\n<li>ফাংশনে যতগুলো আর্গুমেন্ট পাস করা হয়েছে সেগুলার আর্গুমেন্ট লিস্ট তৈরী করা হয়</li>\n<li>কোড সব ফাংশন স্ক্যান করে এবং প্রত্যেকটা ফাংশন একটা ভ্যারিয়েবল অবজেক্ট এ স্টোর করা হয় যেটা সাধারণত ফাংশনটাকে পয়েন্ট করে।</li>\n<li>তারপর কোড ভ্যারিয়েবল এর ডিক্লেয়ারেশনগুলো খোঁজ করে। এবং প্রত্যেকটা ডিক্লেয়ারকৃত ভ্যারিয়েবলের জন্যে <code>undefined</code> প্রপার্টি সেট করে দেয়।</li>\n</ul>\n<p>তারপর কোড এক্সিকিউশেন ফেজে যায় এবং এক্সকিউশেন কন্টেক্সট অনুযায়ী লাইন বাই লাইন কোড এক্সিকিউট হয়।</p>\n<p>আর এজন্যেই ফাংশন ডিক্লেয়ারেশন আগে আগে ক্রিয়েশন ফেজে থাকার কারনে এবং ফাংশন কল এক্সিকিউশেন ফেজে এক্সিকিউট হওয়ার কারণে আমরা ফাংশন ডিক্লেয়ার করার আগেও চাইলে ব্যবহার করতে পারি।</p>\n<p>কিন্তু ফাংশন এক্সপ্রেশন এইভাবে কাজ করবে না। কারণ ফাংশন এক্সপ্রেশনে আমাদের ফাংশন একটা ভ্যারিয়েবলে স্টোর করে রাখি। আর সেই ভ্যারিয়েবল ক্রিয়েশন ফেজে <code>undefined</code> হিসাবে সেট করা হয়। অরিজিনাল ফাংশনটা পরে এক্সিকিউট হয়, তাই ফাংশন এক্সপ্রেশনের ক্ষেত্রে ডিক্লেয়ারের আগে ফাংশন কল করলে সেটা ফাংশন না বলে এরর দেখাবে। কারণ আসলেই সেটা এই মূহূর্তে ফাংশন না, জাস্ট একটা ভ্যারিয়েবল।</p>\n<pre><code>name();\n\nvar name = function() {\n   console.log('My name is Zonayed Ahmed');\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*bzrHPLG90xbBq6r85A2oSA.png\" alt=\"\" /></p>\n<p>সেইমভাবে আমরা চাইলে একটা ভ্যারিয়েবলও ডিক্লেয়ার করার আগে সেটা ব্যবহার করতে পারি। ক্রিয়েশন ফেজের কারণে আপনি একটা ভ্যারিয়েবল ডিক্লেয়ার করার আগে সেটা ব্যবহার করলে কোনো এরর দেখাবে না, কিন্তু সেই ভ্যারিয়েবলটা <code>undefined</code> দেখাবে যেহেতু ক্রিয়েশন ফেজে এটাকে <code>undefined</code> হিসাবে সেট করা হয়েছে।</p>\n<pre><code>console.log('Value: ' + a);\nvar a = 10;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*8JzfH3W8YJYWljdrO3henQ.png\" alt=\"\" /></p>\n<p>কিন্তু পরে যদি কখনোই সেই ভ্যারিয়েবল ডিক্লেয়ার করে না থাকেন তাহলে সেটা ব্যবহার করতে চাইলে এরর আসবেঃ</p>\n<pre><code>console.log('Value: ' + x);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MQb51eypUJUUCc9nSt9lnw.png\" alt=\"\" /></p>\n<p>তো আশা করি এবার হোইস্টিং সম্পর্কে ক্লিয়ার ধারণা হয়েছে। তবে ভালো প্র্যাক্টিসের জন্যে কখনোই ফাংশন ডিক্লেয়ার করার আগে সেটা ইউজ করা ঠিক না। কিন্তু জাভাস্ক্রিপ্ট বিহ্যাইন্ড দ্যা সীনে কীরকমভাবে কাজ করে সেটা বুঝার জন্যে অবশ্যই অনেক কাজের। কোনো কোনো সিচুয়েশানে হয়তো এধরনের টেকনিকের জন্যে অনেক হেল্পফুল হতে পারে।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript ","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-05-28T16:41:46.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>স্কোপিং(Scoping) জাভাস্ক্রিপ্ট এ আরেকটা গুরুত্বপূর্ন বিষয়। আপনাকে জানতে হবে আপনার ডিক্লেয়ারকৃত ভ্যারিয়েবল/ফাংশন আপনি কোথায় কোথায় অ্যাক্সেস করতে পারবেন বা কোথায় কোথায় ইউজ করতে পারবেন। কোনো ভ্যারিয়েবল বা ফাংশন প্রাইভেট করতে চাইলে বা কোনো ভ্যারিয়েবলকে সব জায়গা থেকে অ্যাক্সেস করতে চাইলে কিভাবে বা কোথায় সেটাকে ডিক্লেয়ার করতে হবে এসবকিছুই স্কোপিং এর ভিতরে আলোচনা করবো।</p>\n<p>জাভাস্ক্রিপ্ট এ প্রধানত দুই ধরনের স্কোপিং হয়ে থাকেঃ</p>\n<p>১। লোকাল(Local) স্কোপ</p>\n<p>২। গ্লোবাল(Global) স্কোপ</p>\n<p>স্কোপিং এ প্রধান আলোচ্য বিষয়গুলো হচ্ছেঃ</p>\n<ul>\n<li>কোথায় কোথায় আপনি আপনার ভ্যারিয়েবল বা ফাংশনকে অ্যাক্সেস করতে পারবেন</li>\n<li>প্রত্যেকটা নতুন ফাংশন একটা স্কোপ তৈরী করে</li>\n<li>লেক্সিকাল স্কোপিং(Lexical Scoping) এ প্যারেন্ট-চাইল্ড রিলেশন</li>\n<li>একটা ফাংশনে ডিক্লেয়ারকৃত ভ্যারিয়েবল আরেকটা ফাংশনে যেতে পারবে না, মানে অ্যাক্সেস করতে পারবেন না।</li>\n</ul>\n<p><strong>১। লোকাল(Local) স্কোপঃ</strong> সাধারণত ফাংশনের ভিতরে ডিক্লেয়ারকৃত ভ্যারিয়েবলগুলো ঐ ফাংশনের লোকাল ভ্যারিয়েবল। এধরনের ভ্যারিয়েবলগুলোর স্কোপ হচ্ছে লোকাল স্কোপ, অর্থাৎ এই ভ্যারিয়েবলটা শুধুমাত্র ডিক্লেয়ারকৃত ফাংশনের ভিতরেই অ্যাক্সেস করা যাবে। এর বাইরে বা অন্যকোনো ফাংশনে অ্যাক্সেস করা যাবে না।</p>\n<pre><code>function localScope() {\n   var local = 'I am local to my own function';\n   console.log(local);\n}\n</code></pre>\n<p>এটা কল করলে ঠিকঠাক আউটপুট দেখাবেঃ</p>\n<pre><code>localScope();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*9E7wEZGWnsAV0jP2GbKm_Q.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি আমরা এই <code>local</code> ভ্যারিয়েবলটাকে এই <code>localScope()</code> এর বাইরে কোথাও বা অন্য কোনো ফাংশনেও অ্যাক্সেস করতে চাই, তাহলে সেটা অ্যাক্সেস করা যাবে না এবং এক্ষেত্রে রিয়েল এরর পাবেন।</p>\n<pre><code>function localScope() {\n   var local = 'I am local to my own function';\n   console.log(local);\n}\n\nlocalScope();\n\nconsole.log(local);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Nn_7CJ3Ho0p7WjECvt_Cgg.png\" alt=\"\" /></p>\n<p><strong>২। গ্লোবাল(Global) স্কোপঃ</strong> ভ্যারিয়েবল যদি কোনো ফাংশনের ভিতরে ডিক্লেয়ার না করা হয় তাহলে সেটা গ্লোবাল স্কোপে ডিক্লেয়ারকৃত ভ্যারিয়েবল, মানে ফাংশনের বাইরে যেকোনো জায়গায় ডিক্লেয়ার করা ভ্যারিয়েবলই গ্লোবাল স্কোপ পাবে। এদেরকে গ্লোবাল ভ্যারিয়েবলও বলা হয়। গ্লোবাল ভ্যারিয়েবল যেকোনো ফাংশনের ভিতরে বা যেকোনো জায়গা থেকেই অ্যাক্সেস করতে পারবেন</p>\n<pre><code>var globalVar = 'I am a Global Variable';\n\nfunction globalScope() {\n   console.log('Inside a Function: ' + globalVar);\n}\n\nglobalScope();\n\nconsole.log('Outside: ' + globalVar);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*94OfU9C4CuyQ9q7V6u7VNQ.png\" alt=\"\" /></p>\n<p>এখন স্কোপিং এর এই আইডিয়া যেমন ভ্যারিয়েবলের ক্ষেত্রে প্রযোজ্য, তেমনি ফাংশন এবং অবজেক্ট এর ক্ষেত্রেও প্রযোজ্য।</p>\n<p>এর মানে আপনি গ্লোবাল স্কোপে কোনো ফাংশন ডিক্লেয়ার করলে সেটা গ্লোবালি যেকোনো জায়গা থেকেই অ্যাক্সেস করতে পারবেন। উপরে উল্লেখিত সবগুলো উদাহরণে ব্যবহৃত ফাংশনগুলো গ্লোবাল স্কোপে ডিক্লেয়ার করা।</p>\n<pre><code>function globalFunc() {\n   console.log('Global Function');\n}\n</code></pre>\n<p>এখন এই ফাংশনকে কল করলে ঠিকঠাকভাবে কাজ করবেঃ</p>\n<pre><code>globalFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ctlZs7SH-MJj09Y5MfXRag.png\" alt=\"\" /></p>\n<p>সেইমভাবে আপনি যদি কোনো ফাংশনের ভিতরে আরেকটা ফাংশন ডিক্লেয়ার করেন তাহলে ফাংশনের ভিতরে ডিক্লেয়ারকৃত ফাংশনটা উক্ত ফাংশনের লোকাল স্কোপ পাবে। এবং এই ফাংশন শুধুমাত্র ঐ ফাংশনের ভিতরেই কল করতে পারবেন। বাইরে এর স্কোপ না থাকায় কল করতে পারবেন না।</p>\n<pre><code>function anoGlobalFunc() {\n   console.log('Global Function');\n   function localFunc() {\n      console.log('Local Function');\n   }\n   localFunc();\n}\n</code></pre>\n<p>লক্ষ্য করুন আমি লোকাল ফাংশন <code>localFunc()</code> ঐ ফাংশনের ভিতরেই কল করেছি, কারণ এখানেই এটার স্কোপ আছে। এখন গ্লোবাল ফাংশন <code>anoGlobalFunc()</code> কল করলে দুইটাই এক্সিকিউট হবে।</p>\n<pre><code>anoGlobalFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ClOMruz-YwhPW43icbxVug.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি এই লোকাল ফাংশন <code>localFunc()</code> আমি <code>anoGlobalFunc()</code> এর বাইরে কল করি তাহলে সেটা এরর দেখাবেঃ</p>\n<pre><code>localFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LZfPG5NxRFd2XuT4qEFsgQ.png\" alt=\"\" /></p>\n<p>সেইম অবজেক্ট এর ক্ষেত্রেও। কোনো ফাংশনের ভিতরে ডিক্লেয়ার করা হলে সেটা ঐ ফাংশনের লোকাল স্কোপ পাবে। উক্ত ফাংশনের ভিতরে ছাড়া আর কোথাও অ্যাক্সেস করা যাবে না। আর বাইরে গ্লোবাল স্কোপে ডিক্লেয়ার করা হলে সেটা গ্লোবাল স্কোপ পাবে এবং সব জায়গা থেকে অ্যাক্সেস করা যাবে।</p>\n<pre><code>var person = {\n   name: 'Zonayed Ahmed',\n   age: 21\n}\n</code></pre>\n<p>এখন এই অবজেক্ট সব জায়গা থেকেই অ্যাক্সেস করা যাবেঃ</p>\n<pre><code>console.log(person);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*HC17ran9QpM3s0PtiAC2rg.png\" alt=\"\" /></p>\n<p>কিন্তু যদি এই অবজেক্ট কোনো ফাংশনের ভিতরে ডিক্লেয়ার করা হয়, তাহলে সেই অবজেক্ট সেই ফাংশনের লোকাল স্কোপ পাবে এবং শুধুমাত্র সেই ফাংশনের ভিতর থেকেই অ্যাক্সেস করা যাবে।</p>\n<pre><code>function objectFunc() {\n   var localObj = {\n      name: 'Zonayed Ahmed',\n      age: 21\n   }\n   console.log(localObj);\n}\n</code></pre>\n<p>এখন এই ফাংশন কল করলে সবকিছু ঠিকঠাক দেখাবেঃ</p>\n<pre><code>objectFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*KFRTSkcu3xTkF3Nla1S4PQ.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি এই অবজেক্ট উক্ত ফাংশনের বাইরে অ্যাক্সেস করতে চাই তাহলে এরর আসবে। কারণ এটা লোকাল স্কোপে ডিক্লেয়ারকৃতঃ</p>\n<pre><code>console.log(localObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*WN2XZyhIhfx3BnGJDwm5qg.png\" alt=\"\" /></p>\n<p><strong>লেক্সিকাল স্কোপিং(Lexical Scoping):</strong> লেক্সিকাল স্কোপিং এ একটা প্যারেন্ট ফাংশনের সাথে একটা চাইল্ড ফাংশনের রিলেশন তৈরী হয়। এখন প্যারেন্ট-চাইল্ড ফাংশন মানে কি? হ্যাঁ যদি আমরা একটা ফাংশনের ভিতরে আরেকটা ফাংশন ডিক্লেয়ার করি, তাহলে যে ফাংশনের ভিতরে নতুন ফাংশন ডিক্লেয়ার করলাম সেটা প্যারেন্ট ফাংশন। আর প্যারেন্ট ফাংশনের ভিতরে ডিক্লেয়ারকৃত অন্য যেকোনো ফাংশনই সেই প্যারেন্ট ফাংশনের চাইল্ড ফাংশন। নিচের উদাহরণ থেকে আশা করি ক্লিয়ার ধারণা হবেঃ</p>\n<pre><code>function parentFunction() {\n   //some codes here\n   function childFunction() {\n      //some more codes\n   } \n}\n</code></pre>\n<p>এখন এখানে <code>parentFunction()</code> গ্লোবাল ফাংশন আর <code>childFunction()</code> <code>parentFunction()</code> এর লোকাল ফাংশন। এখন আমরা জানি কোনো ফাংশনের ভিতরে ডিক্লেয়ারকৃত ভ্যারিয়েবল, ফাংশন বা অবজেক্ট লোকাল স্কোপ পায় এবং এদেরকে শুধুমাত্র উক্ত ফাংশনের ভিতরেই অ্যাক্সেস করা যায়। কিন্তু লেক্সিকাল স্কোপিং এর কারণে এখানে <code>parentFunction()</code> এর ভিতরে ডিক্লেয়ারকৃত লোকাল যেকোনো কিছু <code>parentFunction()</code> এর ভিতর থেকে তো অ্যাক্সেস করা যাবেই এবং সেই সাথে এর সব চাইল্ড ফাংশন এর ভিতর থেকেও, এখানে <code>childFunction()</code> এর ভিতর থেকেও অ্যাক্সেস করা যাবে।</p>\n<pre><code>function parentFunction() {\n   var a = 6;\n   function childFunction() {\n      var b = 4;\n      console.log('Sum: ' + (a + b));\n   } \n   childFunction();\n}\n</code></pre>\n<p>এখন <code>parentFunction()</code> কে কল করলে এটা ঠিক যেরকমভাবে ফলাফল দেখানোর কথা সেরকমভাবেই দেখাবেঃ</p>\n<pre><code>parentFunction();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rJpWOJA3DEx_YATf7di85Q.png\" alt=\"\" /></p>\n<p>একইভাবে সেইম কারণে ক্লোজারসও কাজ করে, তবে এটা নিয়ে পরের পর্বে বিস্তারিত থাকবে।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-05-29T04:41:41.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>আমরা <a href=\"https://with.zonayed.me/bn/%E0%A6%95%E0%A6%AE%E0%A7%8D%E0%A6%AA%E0%A6%BF%E0%A6%89%E0%A6%9F%E0%A6%BE%E0%A6%B0-%E0%A6%B8%E0%A6%BE%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%B8/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8B%E0%A6%AAscope-%E0%A6%A8%E0%A6%BF/\">গত পর্বে</a> দেখেছি জাভাস্ক্রিপ্ট এর লেক্সিক্যাল স্কোপিং। এবার এর সাথে রিলেটেড আরেকটা টপিক ক্লোজারস নিয়ে এই পর্বে আলোচনা করবো। ক্লোজারসেও আমাদের আলাদা করে কিছু করতে হবে না। বরং এটা জাভাস্ক্রিপ্ট এর বাই ডিফল্ট বিহেভিয়ার। তবে বুঝার এবং বিভিন্ন টেকনিকের জন্যে অবশ্যই ক্লোজারস সম্পর্কে জানতে হবে। জাভাস্ক্রিপ্ট এর অনেকগুলো আশ্চর্যজনক বিহেভিয়ার এবং স্পেশালিটির মধ্যে ক্লোজারসও অন্যতম একটা।</p>\n<p>একটা চাইল্ড ফাংশন সবসময় তার প্যারেন্ট ফাংশনের ভ্যারিয়েবল, ফাংশন অথবা অবজেক্ট অ্যাক্সেস করতে পারে। এটা আমরা জেনেছি <a href=\"https://with.zonayed.me/bn/%E0%A6%95%E0%A6%AE%E0%A7%8D%E0%A6%AA%E0%A6%BF%E0%A6%89%E0%A6%9F%E0%A6%BE%E0%A6%B0-%E0%A6%B8%E0%A6%BE%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%B8/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8B%E0%A6%AAscope-%E0%A6%A8%E0%A6%BF/\">গত পর্বে</a> আলোচিত লেক্সিক্যাল স্কোপিং এ। কিন্তু এখানে আরো মজার ব্যাপার হচ্ছে ইভেন আমরা যদি প্যারেন্ট ফাংশনটা রিটার্ন করে ফেলি তারপরেও আমরা চাইল্ড ফাংশন থেকে প্যারেন্ট ফাংশনের ভ্যারিয়েবল, ফাংশন অথবা অবজেক্ট অ্যাক্সেস করতে পারবো। কারণ এগুলো রিটার্ন হওয়ার পরও মেমোরী তে থেকে যায়। আর এটাই হচ্ছে ক্লোজারস।</p>\n<p>আগেই যেহেতু বলেছি এটাও জাভাস্ক্রিপ্ট এর ডিফল্ট বিহেভিয়ার। অর্থাৎ আমাদের ক্লোজারস আলাদা করে কোড করতে হবে না।</p>\n<p>এখন কিভাবে এই ক্লোজারস কাজ করে। আমরা জানি জাভাস্ক্রিপ্ট এ আপনি চাইলে ফাংশন থেকেও আরেকটা ফাংশন রিটার্ন করতে পারবেন। আর তখনি তৈরী হয় প্যারেন্ট-চাইল্ড রিলেশন। আর রিটার্নকৃত ফাংশনের সবকিছু চাইল্ড ফাংশন চাইলেও অ্যাক্সেস করতে পারে ক্লোজারস এর কারণে।</p>\n<pre><code>function closuresDemo() {\n   var x = 10;\n   return function() {\n      var y = 20;\n      console.log('Sum: ' + (x + y));\n   }\n}\n</code></pre>\n<p>এখন এই ফাংশনকে কল করলে দেখবেন নিচের চাইল্ড ফাংশন প্যারেন্ট ফাংশনের ভ্যারিয়েবল <code>x</code> এর অ্যাক্সেস পাচ্ছে যদিও প্যারেন্ট ফাংশনটা রিটার্ন হয়ে গেছে।</p>\n<pre><code>closuresDemo()();\n</code></pre>\n<p>এখানে ভিতরের চাইল্ড ফাংশনটা অ্যানিনোমাস ফাংশন যেহেতু এটাকে রিটার্ন করা হচ্ছে সরাসরি, আপনি চাইলে চাইল্ড ফাংশনটাকেও একটা নাম দিতে পারেন তবে কাজে লাগবে না এক্ষেত্রে। আর তাই <code>closuresDemo</code> এর প্রথম কলে প্রথম প্যারেন্ট ফাংশন এক্সিকিউট হবে এবং আরেকটা কলে চাইল্ড ফাংশন এক্সিকিউট হবে। তাই এখানে দুইটা ব্র্যাকেটস <code>()()</code> লেগেছে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*kaRw0Qa8w8xgSJa7nSTiYg.png\" alt=\"\" /></p>\n<p>আমরা চাইলে প্রথম প্যারেন্ট ফাংশনটা এক্সিকিউট করে একটা ভ্যারিয়েবলে রাখতে পারে, তাহলে এই ভ্যারিয়েবলটাও আরেকটা ফাংশন হয়ে যাবে। আমরা জাভাস্ক্রিপ্ট এ ফাংশনকেও ভ্যারিয়েবলে স্টোর করতে পারি। এখন এই ভ্যারিয়েবলটে আবার কল করলে ফাইনালী চাইল্ড ফাংশনটাও এক্সিকিউট হয়ে যাবে</p>\n<pre><code>var aVar = closuresDemo();\nvar total = aVar();\nconsole.log(total);\n</code></pre>\n<p>এটাও ঠিক আগেরমতোই রেজাল্ট শো করবে। জাস্ট দেখানোর জন্যে চাইলে এভাবেও কাজ করা যায়। কোনটা ইউজ করবেন সেটা সম্পূর্ন আপনার উপর।</p>\n<p>এভাবে চাইলে আমরা আর্গুমেন্টস পাস করেও সেগুলা প্যারেন্টস থেকে চাইল্ড এ শেয়ার করতে পারবো। মানে প্যারেন্টস এর আর্গুমেন্টসগুলোও চাইল্ড অ্যাক্সেস করতে পারবে।</p>\n<pre><code>function aParentFunc(a) {\n   return function(b) {\n      console.log('Sum: ' + (a + b));\n   }\n}\n</code></pre>\n<p>এখন এই ফাংশনটাকে আর্গুমেন্টসহ পাস করে কল করলে দেখবেন এটা প্যারেন্ট থেকে নেওয়া <code>a</code> এবং চাইল্ডের <code>b</code> একসাথে যোগ করে সেটার সাম দেখাচ্ছেঃ</p>\n<pre><code>aParentFunc(6)(4);\n</code></pre>\n<p>এখানে প্যারেন্ট এর আর্গুমেন্ট প্যারেন্ট ফাংশন কল করার সময় সেটার ব্র্যাকেটস এর ভিতরে যাবে এবং চাইল্ডেরটা চাইল্ডের কলের সময়কার ব্র্যাকেটসের ভিতরে যাবে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-8DE_4Yh51gdqiM77I5WUg.png\" alt=\"\" /></p>\n<p>এভাবে ডাবল ব্র্যাকেটস ইউজ না করে প্রথমে প্যারেন্ট ফাংশনটাকে কল করে একটা ভ্যারিয়েবলে রেখে পরে আবার সেই ভ্যারিয়েবলের সাহায্যেও চাইল্ড ফাংশনটাকে কল করতে পারবেন</p>\n<pre><code>var aParentVar = aParentFunc(6);\nvar total = aParentVar(4);\n</code></pre>\n<p>এটাও ঠিক আগের মতোই ফলাফল দেখাবে। কিন্তু লক্ষ্য করুন যার যার আর্গুমেন্ট তার তার কলেই পাস করা হয়েছে</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*mSmST2-PHgXB0Bg3bGTlHQ.png\" alt=\"\" /></p>\n<p>আশা করি ক্লোজারস নিয়ে আর কোনো কনফিউশান থাকবে না আজকে থেকে। ব্যাসিক আইডিয়াটা রাখতে পারলে পরে যেকোনো সিচুয়েশানেই আপনি ক্লোজারস নিয়ে কাজ করতে পারবেন।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Basic","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-05-29T16:41:36.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)","thumb_img_path":"/images/1_L-UKP7ooUzP1U8796MxeTg.jpeg","content":"<p>আমাদের সাধারনত কোনো ফাংশন বানানোর পর পরে সেটাকে কল করে ইউজ করতে হয়। কিন্তু যদি আমরা ফাংশন বানানোর সাথে সাথেই সেটাকে কল করতে চাই সেক্ষেত্রে আমরা ইফি Immediately Invoked Function Expressions (IIFE) টেকনিক ইউজ করতে পারি। আজকে তাই ছোটো করে ইফি সম্পর্কেই আলোচনা করবো এবং এর কিছু রিয়েল লাইফ ইউসেজ দেখাবো।</p>\n<p>জাভাস্ক্রিপ্ট এ আমরা ফাংশন ক্রিয়েট করতে পারি কয়েকভাবেঃ</p>\n<pre><code>function aDemoFunc() {\n   console.log('Hello World!');\n}\n</code></pre>\n<p>বা,</p>\n<pre><code>var aDemoFunc = function() {\n   console.log('Hello World!');\n}\n</code></pre>\n<p>কিন্তু যেভাবেই ফাংশন ক্রিয়েট করি না কেন, আমাদের সেটা ইউজ করতে হলে অবশ্যই ডাকতে হবে।</p>\n<pre><code>aDemoFunc();\n</code></pre>\n<p>এটা কন্সোলে <code>Hello World!</code> প্রিন্ট করবে।</p>\n<p>কিন্তু আমরা যদি চাই ফাংশন ক্রিয়েট করার সাথে সাথেই সেটা কল করতে তাহলে আমরা সেক্ষেত্রে ইফি ইউজ করতে পারি।</p>\n<p>ইফি তে সাধারণত পুরো ফাংশনটাকে প্রথম ব্র্যাকেটস এর ভিতরে রাখতে হয় এবং সবশেষে আরো দুইটা আর্গুমেন্ট ব্র্যাকেটস দিয়ে কল করতে হয়। উদাহরন দেখলে ক্লিয়ার হয়ে যাবে। ধরি উপরের ফাংশনটাই আমি সরাসরি ক্রিয়েট করে সাথে সাথেই কল করতে চাইঃ</p>\n<pre><code>(function aDemoFunc() {\n   console.log('Hello World!');\n})();\n</code></pre>\n<p>এখানে পুরো ফাংশনটা প্রথম ব্র্যাকেটস এর ভিতরে চলে যাবে। এবং সবশেষে আরো দুইটা ব্র্যাকেটস হবে যেখানে যদি উক্ত ফাংশনের কোনো আর্গুমেন্ট থাকে তাহলে পাস করতে পারবেন।</p>\n<p>দেখবেন এটা এক্সিকিউট করলে সাথে সাথেই কন্সোলে <code>Hello World!</code> প্রিন্ট হচ্ছে। আলাদা করে আবার ফাংশনটাকে কল করতে হচ্ছে না।</p>\n<p>সেইমভাবে ফাংশন এক্সপ্রেশন এর ক্ষেত্রেও কাজ করবে। তবে এক্ষেত্রে ফাংশন থেকে রিটার্নকৃত ভ্যালু উক্ত ভ্যারিয়েবলটায় স্টোর হয়ে যাবে ইমিডিয়েটলি।</p>\n<pre><code>var sum = (function() {\n   return 10 + 20; \n})();\n</code></pre>\n<p>এটা এক্সিকিউট করে <code>sum</code> এর ভ্যালু চ্যাক করলে দেখবেন এটা 30 দেখাচ্ছে। আপনাকে সেইমভাবে আলাদা করে সেই ফাংশনটাকে কল করতে হচ্ছে না।</p>\n<p>এবার গেলো তো Immediately Invoked Function Expressions বা ইফি নিয়ে আলোচনা, কিন্তু এটা আসলে কিভাবে আমাদের উপকারে লাগবে? হ্যা এবার আমি সেটা নিয়েই আলোচনা করবো।</p>\n<p>যেহেতু এখানে পুরোটা ফাংশন প্রথম ব্র্যাকেটস এর ভিতরে থাকে, তাই এখানে পুরোটা ফাংশন স্টেটমেন্ট না বরং এক্সপ্রেশন হিসাবে গণ্য হবে।</p>\n<p>এটা দিয়ে আপনি প্রাইভেট ফাংশন ক্রিয়েট করতে পারবেন। এই ফাংশন বাইরে কোথাও ইউজ করতে পারবেন না। না পারবেন এর ভিতরের কিছু ইউজ করতে। সো প্রাইভেসি মেইন্টেইন করতে চাইলে বা আপনি যদি চান কোনো ফাংশনের ভিতরের ডাটা বাইরে এক্সপোজ না করতে তাইলে এটা খুব ভালো একটা ইউসেজ হতে পারে। যেমনঃ</p>\n<pre><code>(function aDemoFunc() {\n   console.log('Hello World!');\n})();\n</code></pre>\n<p>এটা যেমন সাথে সাথে কন্সোলে উক্ত লেখা প্রিন্ট করে ফেলবে, কিন্তু আপনি পরে যদি কোথাও <code>aDemoFunc()</code> কল করেন, এটা কাজ করবে না।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NWp5pNgAyFN8l3P0o9d62A.png\" alt=\"\" /></p>\n<p>ফাংশনের আসল কাজ হচ্ছে একটা নির্দিষ্ট সমস্যার সমাধান করা। আমরা যখন বড় প্রোজেক্ট তৈরী করি, তখন যতটুকু সম্ভব পুরো প্রোজেক্টটাকে মডুলার করার চেষ্টা করি। একেকটা কাজের জন্যে একেকটা ফাংশন তৈরী করি। ধরি একটা জাভাস্ক্রিপ্ট এর গেইম এ আপনার পয়েন্ট গণনার জন্যে একটা ফাংশন থাকবে, আরেকটা থাকবে গেইম কন্ট্রোলের জন্যে, আরেকটা থাকতে পারে ইউজার ইন্টারফেজের পরিবর্তনের জন্যে। তো এভাবে একেকটা কাজের জন্যে একেকটা ফাংশন ইউজ করলে পুরো প্রোজেক্ট এর স্ট্রাকচার যেমন সুন্দর হবে তেমনি কোনো বাগ খুজে পেতে বা ভবিষ্যৎ ডেভেলপারদের জন্যেও কোডিং স্ট্রাকচার বুঝতে সমস্যা হবে না। আরেকটা সমস্যা আমাদের যেটা খুব বেশী হয়। আমরা অনেকগুলো ভ্যারিয়েবল নিয়ে নিতে একটা সময় দেখি পার্ফেক্ট নাম খুজে পাই না। হয়তো এই নাম আগে ইউজ করা হয়েছে সেইম প্রোগ্রামের কোনো অংশে বা অন্যরকম নাম দিলে বুঝতে সমস্যা হয়ে যেতে পারে পরবর্তিতে। তো সেক্ষেত্রে এইরকম প্রাইভেট ফাংশন ক্রিয়েট করে নিলে আপনি একই নামে ভ্যারিয়েবল পৃথক পৃথক ফাংশনে ইউজ করতে পারবেন যেহেতু এরা সম্পূর্ন প্রাইভেট। সেক্ষেত্রে আপনার জন্যে আরো সিমেন্টিক কোড লিখা সম্ভব হবে।</p>\n<p>মডুলার প্রোগ্রামিং এ আপনি প্রাইভেট ফাংশন থেকে কিছু ভ্যালু পেতে চাইলে ফাংশন এক্সপ্রেশন ইউজ করতে পারেন এবং সেই ফাংশন থেকে ভ্যালু অবজেক্ট বা অ্যারে আকারে রিটার্ন করে দিতে পারেন। তাইলে সেটা পরবর্তিতে বাইরেও ইউজ করতে পারবেন। যেমনঃ</p>\n<pre><code>var controller = (function() {\n   var a = {\n           name: 'Zonayed Ahmed',\n           uid: 1062\n           };\n   return a;\n})();\n</code></pre>\n<p>এখানে <code>controller</code> এ একটা অবজেক্ট স্টোর হয়েছে যেটা প্রাইভেট ফাংশনের ভিতর থেকে রিটার্ন করা হয়েছে।</p>\n<p>এভাবে আপনার কাজ শেষে যেকোনো কিছু রিটার্ন করতে পারবেন যেটা আপনি পরবর্তিতে বাইরেও ইউজ করতে পারবেন।</p>\n<pre><code>var interface = (function() {\n   return 'Hello ' + controller.name;   \n})();\n</code></pre>\n<p>এখন <code>interface</code> কল করলে দেখবেন <code>Hello Zonayed Ahmed</code> প্রিন্ট হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-PJr6CFl5YvP0Y8iItsDKg.png\" alt=\"\" /></p>\n<p>তো এভাবেই আপনি আপনার পুরো প্রোজেক্টটিকে মডুলার করতে পারবেন। একটা ফাংশন থেকে ডাটা আরেকটা ফাংশনে নিতে পারবেন। আরো সিমেন্টিক, গুড প্র্যাক্টিস ওয়ালা প্রোগ্রামিং করতে পারবেন।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"}],"advance":[{"language":"বাংলা","tags":["coding","JavaScript","javascript-advance","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-অ্যাডভান্স","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-06T16:40:36.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ‘this’ কীওয়ার্ড","thumb_img_path":"/images/jsadvanced.jpeg","content":"<p>জাভাস্ক্রিপ্ট এ সবচেয়ে ট্রিকি এবং কনফিউজিং একটা টপিক বা ওয়ার্ড হচ্ছে <code>this</code> তবে আজকে আমি আমার এই লেখায় সেটাকে পানির মতো সোজা করে দিবো। কিন্তু তারপরেও আপনাকে প্রথম প্রথম ফিফটি-ফিফটি চান্স নিয়ে কোডে <code>this</code> ইউজ করতে হবে। কয়েকবার প্র্যাকটিস করার পর, রুলসগুলো জানার পর আস্তে আস্তে <code>this</code> কীওয়ার্ডটা পুরোপুরি ধরতে পারবেন।</p>\n<p><code>this</code> জাভাস্ক্রিপ্ট এ একটা রিসার্ভড কীওয়ার্ড, মানে এই নামটা আর কোনো ভ্যারিয়েবল বা ফাংশনের জন্যে ইউজ করতে পারবেন না। আর এই <code>this</code> অনেকভাবে অনেকরকম জায়গায় ব্যবহার করা হয়। তাই আপনি যে প্রথমদিকেই সবজায়গায় বুঝে ফেলবেন <code>this</code> টা আসলে কি ব্যাপারটা এরকম নয়। কিন্তু যদি ব্যাসিক রুলসগুলো জানা থাকে <code>this</code> কিভাবে কাজ করে তাহলে আশা করি আরো বড়, জটিল কোডেও আপনার বুঝতে বেশী টাইম লাগবে না।</p>\n<p>সাধারণত একটা ফাংশনকে কিভাবে কল করা হচ্ছে সেটার উপর ভিত্তি করে <code>this</code> এর ভ্যালু ডিটারমাইন করা হয়। আর এটার ভ্যালু ডিটারমাইন করা হয় এক্সিকিউশনের সময়। কি? কনফিউজিং লাগছে? হ্যাঁ তাহলে আজকে থেকে সব বাদ। শুধুমাত্র নিচের এই চারটা রুলস মনে রাখবেন যেগুলো দিয়ে <code>this</code> এর ভ্যালু ডিটারমাইন করা যাবেঃ</p>\n<p>১। গ্লোবাল রুলস</p>\n<p>২। অবজেক্ট রুলস</p>\n<p>৩। স্পষ্ট রুলস</p>\n<p>৪। <code>new</code> কীওয়ার্ড রুলস</p>\n<blockquote>\n  <p><em>আমার এখানে বলা রুলসগুলো অফিশিয়ালভাবে কোথাও বলা নেই, কিন্তু <code>this</code> কীওয়ার্ড বুঝতে এই রুলসগুলো বেশ কাজে লাগে তাই আমি এভাবে লিখেছি…</em></p>\n</blockquote>\n<p><strong>১। গ্লোবাল রুলসঃ</strong> যদি আপনি <code>this</code> কীওয়ার্ড যেকোনো জায়গায় ইউজ করেন, আপনার কাস্টমভাবে ডিফাইন করা কোনো অবজেক্ট এর ভিতরে ছাড়া, তাহলে সেটা সবসময় আপনার গ্লোবাল অবজেক্টকে ইন্ডিকেট করবে। ব্রাউজারের ক্ষেত্রে গ্লোবাল অবজেক্ট হচ্ছে <code>window</code> অবজেক্ট। অন্য এনভারোমেন্ট এ যেমন নোড জেএস এ গ্লোবাল অবজেক্ট হচ্ছে <code>global</code></p>\n<p>ধরুন আমরা <code>this</code> কে <code>console.log</code> করলামঃ</p>\n<pre><code>console.log(this);\n</code></pre>\n<p>দেখবেন এটা <code>window</code> অবজেক্টই দেখাচ্ছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MNMZWD80bfRObUV6wIJhEA.png\" alt=\"\" /></p>\n<p>আরো ভালোভাবে দেখতে এটা দিয়েও দেখতে পারেনঃ</p>\n<pre><code>console.log(this === window);\n</code></pre>\n<p>এটা সত্য দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*WkOwUP_u5PlT-IicqBLIVg.png\" alt=\"\" /></p>\n<p>মানে সেইম জিনিসই এরা। গ্লোবাল কন্টেক্সট এ স্ট্রিক্ট(Strict Mode) মোড বা নন-স্ট্রিক্ট মোডে <code>this</code> এর ভ্যালু সবসময়ই একরকম থাকবে।</p>\n<p>এবার সেইমভাবে যদি আমাদের কোনো ডিফাইন করা ফাংশনের ভিতরেও <code>this</code> ইউজ করি, তাহলে সেটার ভ্যালু কি হবে সেটা সম্পূর্ণ ডিপেন্ড করবে আপনি উক্ত ফাংশনটাকে কিভাবে কল করছেন সেটার উপর। এখন এখানে স্ট্রিক্ট মোড ও নন-স্ট্রিক্ট মোডে ভ্যালু ডিফারেন্ট হতে পারেঃ</p>\n<p>যেমন এই উদাহরণে যদি দেখিঃ</p>\n<pre><code>function helloThis(){\n   console.log(this);\n}\n\nhelloThis();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GNAiXbWB2erZGU1v6PG2DQ.png\" alt=\"\" /></p>\n<p>এখানে <code>this</code> গ্লোবাল অবজেক্ট(ব্রাউজারের ক্ষেত্রে <code>window</code> অবজেক্ট দেখাচ্ছে)। কারণটা আগেই বলেছি যে <code>this</code> ফাংশনের ভিতরে ইউজ করা হলেও <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%AC%E0%A6%BF%E0%A6%B9%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%A1-%E0%A6%A6%E0%A7%8D%E0%A6%AF%E0%A6%BE-%E0%A6%B8%E0%A7%80%E0%A6%A8-4857f19f4059\">গ্লোবাল এক্সিকিউশন কন্টেক্সট</a> এর কারণে সেটা গ্লোবাল অবজেক্টকেই ইন্ডিকেট করবে।</p>\n<p>সেইম জিনিসটা স্ট্রিক্ট মোডে কাজ করবে নাঃ</p>\n<pre><code>function helloThis(){\n   'use strict';\n    console.log(this);\n}\n\nhelloThis();\n</code></pre>\n<p>এখানে দেখবেন আপনার রেজাল্ট <code>undefined</code> আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Kg8b_Y4kllDPnuifwdE6IQ.png\" alt=\"\" /></p>\n<p>এখন এখানে এক মোডে কাজ করে আর আরেক মোডে না করার আসল কারণ হচ্ছে এখানে আমাদের <code>‘use strict’;</code> ইউজ করায়। এই স্ট্রিক্ট মোড আসলে এসেছে ব্যাড প্র্যাক্টিস অ্যাভয়েড করার জন্যে। জাভাস্ক্রিপ্ট এ অনেক কিছু নিয়মের বাইরে পরে যায়। আমরা এখানে ফাংশনের ভিতরে <code>this</code> চাচ্ছি। এখন স্বভাবতই এটা ফাংশন কলের সময় একটা অবজেক্ট খুঁজবে। কিন্তু পাবে গ্লোবাল অবজেক্ট (ব্রাউজারের ক্ষেত্রে <code>window</code>), যেহেতু আমরা জানি বাইরের সবকিছুই গ্লোবাল অবজেক্ট এর আন্ডারে। আর তাই যখন আমরা নন-স্ট্রিক্ট মোডে রেজাল্ট দেখি, তখন গ্লোবাল অবজেক্টই দেখি। কিন্তু স্ট্রিক্ট মোড ইউজ করায় আর সেটা হচ্ছে না। এটা স্বভাবতই ঐ ফাংশনের ভিতরে কল করায় একটা অবজেক্ট খুঁজবে। কিন্তু পাবে গ্লোবাল অবজেক্ট(<a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%AC%E0%A6%BF%E0%A6%B9%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%A1-%E0%A6%A6%E0%A7%8D%E0%A6%AF%E0%A6%BE-%E0%A6%B8%E0%A7%80%E0%A6%A8-4857f19f4059\">গ্লোবাল এক্সিকিউশন কন্টেক্সট</a> এর কারণে) <code>window.helloThis()</code>, যেটা হয়তো আমরা চাচ্ছি না। আমরা কোনো গ্লোবাল অবজেক্ট এর আন্ডারে <code>window.helloThis()</code> চাচ্ছি না, বরং আমরা শুধুমাত্র <code>helloThis()</code> চাচ্ছি। তাই সেটা <code>undefined</code> দেখাবে। এখন এখান থেকেই কন্সট্রাকটর ফাংশনের আইডিয়া আসছে, আর সেই সাথে <code>new</code> কীওয়ার্ডের। যেটা আমাদের চার নাম্বার রুলস এ পড়বে। তাই এ সম্পর্কে বিস্তারিত পরে আরেকটা পর্বে আলোচনা করা হবে।</p>\n<p>আর অনেকসময় দেখবেন এভাবে একটা ভ্যারিয়েবল নিলেও সেটা কাজ করে অন্যান্য গ্লোবাল ভ্যারিয়েবলের মতোইঃ</p>\n<pre><code>function unNamed() {\n   this.name = 'Zonayed Ahmed';\n}\n\nunNamed();\n</code></pre>\n<p>এখন এই ফাংশনের বাইরে <code>name</code> নামে কোনো ভ্যারিয়েবল কল করলে দেখবেন সেটা কাজ করছে!</p>\n<pre><code>console.log(name);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*662cSLOxDF6dezVcI48oUg.png\" alt=\"\" /></p>\n<p>কারণটা কি? হ্যাঁ কারণ হচ্ছে আপনি যখন ফাংশন এর ভিতরে <code>this.name</code> লিখলেন এবং সেই ফাংশনটা গ্লোবাল কন্টেক্সট এ কল করলেন তখন এই <code>this.name</code>আসলে গ্লোবাল অবজেক্ট এর আন্ডারে <code>name</code> এ অ্যাসাইন(<code>window.name</code>) হয়ে যাচ্ছে। তাই সিম্পলি আপনি এটা বাইরে যেকোনো জায়গায় অ্যাক্সেস পাচ্ছেন। <strong><em>‘strict mode’ এ এটা কাজ করবে না।</em></strong></p>\n<p>এবার কাস্টমভাবে ডিফাইন করা অবজেক্ট এর ভিতরে যদি <code>this</code> ইউজ করি তাহলে কি হবে? হ্যাঁ তাহলে আমাদের দ্বিতীয় রুলস চলে আসবে।</p>\n<p><strong>২। অবজেক্ট রুলসঃ</strong> এখন কাস্টমভাবে কোনো অবজেক্ট ডিফাইন করে সেটার ভিতর <code>this</code> কীওয়ার্ড ইউজ করলে সেটার ভ্যালু আর গ্লোবাল অবজেক্টকে ইন্ডিকেট করবে না। এখানে এটার ভ্যালু চেঞ্জ হয়ে যাবে।</p>\n<p>আমরা এভাবে কাস্টমভাবে অবজেক্ট ডিফাইন করিঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student'\n}\n</code></pre>\n<p>এখানে <code>myCustomObj</code> হচ্ছে কাস্টমভাবে ডিফাইনকৃত অবজেক্ট। এটার ভিতরে <code>this</code> কীওয়ার্ডের ভ্যালু চেঞ্জ হয়ে যাবে। এখানে <code>this</code> কীওয়ার্ড সবসময় কাছের কাস্টমভাবে ডিফাইনকৃত অবজেক্টটাকে ইন্ডিকেট করবে। যেমন নিচের এই অবজেক্ট টাকে রান করলেঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   msg: function() {\n        console.log('My name is '+ this.name);\n   }\n}\n</code></pre>\n<p>এবার ভিতরের ফাংশনটাকে যদি এভাবে কল করিঃ</p>\n<pre><code>myCustomObj.msg();\n</code></pre>\n<p>তাহলে এবার ভাবেন তো এখানে ফাংশনের ভিতরের <code>console.log</code> এ <code>this.name</code> কাকে ইন্ডিকেট করবে? প্রথম রুলস(গ্লোবাল রুলস) এ এটা পড়বে না, কারণ এটা একটা কাস্টমভাবে ডিফাইনকৃত অবজেক্ট এর ভিতরে রয়েছে। এখানে দ্বিতীয় রুলস(অবজেক্ট রুলস) অনুযায়ী এটা কাছের কাস্টমভাবে ডিফাইনকৃত অবজেক্ট কেই ইন্ডিকেট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iSA3omClJ9S20P0snc6R5w.png\" alt=\"\" /></p>\n<p>সে হিসাবে <code>this.name</code> <code>myCustomObj</code> এর ভিতরের <code>name</code> কেই ইন্ডিকেট করবে। এখন আমরা তাহলে আসলে একটা কাস্টমভাবে ডিফাইনকৃত অবজেক্ট এর ভিতরে <code>this</code> কীওয়ার্ডের ভ্যালু কি হয় সেটা দেখবোঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   isTrue: function() {\n        console.log(this === myCustomObj);\n   }\n}\n</code></pre>\n<p><code>this</code> আর আমাদের ডিফাইনকৃত অবজেক্ট <code>myCustomObj</code> কি সেইম জিনিসই?</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-lUh_E3wQ-YY7kH9QdRyqQ.png\" alt=\"\" /></p>\n<p>হ্যাঁ এটা সত্য বলছে, তার মানে এটা আমাদের কাস্টম অবজেক্ট টাকেই ইন্ডিকেট করছে এখানে।</p>\n<p>এখন অবজেক্ট এর ভিতরে যদি আরেকটা অবজেক্ট থাকে আর সেখানে <code>this</code> ইউজ করা হয় তাহলে কি হবে? হ্যাঁ তাহলে দেখে নেই ঐরকম একটা উদাহরনঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      msg: function() {\n         console.log('My name is: ' + this.name);\n      }\n   }\n}\n</code></pre>\n<p>এখন দ্বিতীয় অবজেক্ট এর <code>msg</code> ফাংশনটাকে কল করিঃ</p>\n<pre><code>myCustomObj.anotherObj.msg();\n</code></pre>\n<p>এখন বলেন তো দেখি এখানে <code>this</code> কাকে ইন্ডিকেট করবে? <code>myCustomObj</code> নাকি <code>anotherObj</code> কে? দ্বিতীয় রুলসটা আবার মনে করার চেষ্টা করুন। <code>this</code> কীওয়ার্ডের ভ্যালু ডিটারমাইন করা হয় কাছের অবজেক্টটাকে দেখে। এখানে কাছের অবজেক্ট <code>anotherObj</code> , তাই এখানে <code>this.name</code> <code>anotherObj</code> এর <code>name</code> টাকেই ইন্ডিকেট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6Ey0YWxJ9eUuwrc_bmPKdA.png\" alt=\"\" /></p>\n<p>আরো ক্লিয়ায়লি দেখতেঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log(this);\n      }\n   }\n}\n</code></pre>\n<p>এখন এখানে দ্বিতীয় অবজেক্ট এর <code>value</code> ফাংশনটাকে কল করলেঃ</p>\n<pre><code>myCustomObj.anotherObj.value();\n</code></pre>\n<p>তাহলে দেখবেন এটা দ্বিতীয় অবজেক্ট অর্থাৎ <code>anotherObj</code> কেই প্রিন্ট করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Ns2ggbMfyfTPEdn7HSFuRw.png\" alt=\"\" /></p>\n<p>এখন আপনি চাইলে এখানে <code>this</code> এর ভ্যালু কাস্টমভাবেই ডিফাইন করে দিতে পারবেন, কোন অবজেক্ট কে ইন্ডিকেট করবে সেটা বলে দিতে পারবেন। এখানেই আসবে তৃতীয় রুলস(স্পষ্ট রুলস)</p>\n<p><strong>৩। স্পষ্ট রুলসঃ</strong> আপনারা হয়তো <code>call</code>, <code>bind</code>, <code>apply</code> মেথডের কথা শুনেছেন। এগুলোই আসলে স্পষ্টভাবে <code>this</code> কীওয়ার্ডের ভ্যালু সেট করতে ইউজ করা হয়। কোথাও যদি দেখেন এগুলো ইউজ হয়েছে তাহলে খুব সহজেই সেখানে <code>this</code> কীওয়ার্ড কাকে ইন্ডিকেট করছে সেটা ধরে ফেলতে পারবেন। কারণ এই <code>call</code>, <code>bind</code>, <code>apply</code> মেথডগুলো ইউজ করে প্রথম প্যারামিটারেই <code>this</code> কীওয়ার্ড কাকে ইন্ডিকেট করবে সেটা সেট করা যায়। এগুলো প্রত্যেকটা নিয়ে আলাদা আলাদা পর্ব লেখা হবে তাই এখানে বিস্তারিত আলোচনা করা হবে না। তবে আগের উদাহরণটায় আমরা একটা ইউজ করে দেখবো। আমাদের অবজেক্ট টা এরকম ছিলো দেখতেঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log(this);\n      }\n   }\n}\n</code></pre>\n<p>এখন <code>value</code> ফাংশনটাকে কল করলে এরকম প্রিন্ট হবেঃ</p>\n<pre><code>myCustomObj.anotherObj.value();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*dqyyZBztmLDy5afQIdnheQ.png\" alt=\"\" /></p>\n<p>মানে এখানে <code>this</code> <code>anotherObj</code> কে ইন্ডিকেট করছে। কিন্তু আমরা যদি কাস্টমভাবে বলে দিতে চাই <code>anotherObj</code> না বরং আমরা চাই এখানে <code>this</code> <code>myCustomObj</code> কে ইন্ডিকেট করুক তাহলে এভাবে call মেথড ইউজ করে বলে দিতে পারিঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log(this);\n      }\n   }\n}\n</code></pre>\n<p>এখন এখানে <code>this</code> আমাদের কথামতো যাতে <code>myCustomObj</code> কেই ইন্ডিকেট করে সেটা call মেথড ইউজ করে বলে দিবোঃ</p>\n<pre><code>myCustomObj.anotherObj.value.call(myCustomObj);\n</code></pre>\n<p><img src=\"https://miro.medium.com/max/476/1*FizGPzzFdk1-SvrmPZQu7g.png\" alt=\"\" /></p>\n<p><code>call</code>, <code>bind</code>, <code>apply</code> এই মেথডগুলো শুধুমাত্র ফাংশনের সাথে ইউজ করা যায় যেমনটা আমরা উদাহরণটায় করেছি। অন্য কোনো ডাটা টাইপ যেমন অবজেক্ট, স্ট্রিং, নাম্বার বা বুলিয়ানের সাথে ইউজ করা যাবে না। এগুলো নিয়ে বিস্তারিত পরের পর্বগুলোয় আলোচনা করা হবে। এখানে জাস্ট আমি ধারণা দিলাম। এভাবেই <code>this</code> এর ভ্যালু কাস্টমভাবে বা স্পষ্টভাবে বলে দেওয়া যায়।</p>\n<p><strong>৪। <code>new</code> কীওয়ার্ড রুলসঃ</strong> শেষ কিন্তু বহুল ব্যবহৃত আরেকটা কীওয়ার্ড <code>new</code> ও <code>this</code> কীওয়ার্ডের ভ্যালু ডিটারমাইন করতে পারে। কোথাও <code>this</code> কোনোভাবে এই <code>new</code> কীওয়ার্ডের আওতায় থাকলে সেটার ভ্যালুও অন্যরকম হতে পারে। এ নিয়ে আমি পরে বিস্তারিত পর্ব লিখবো। এর জন্যে আমাদের আরো কিছু কনসেপ্ট ক্লিয়ার করে নিতে হবে আগে।এখানে জাস্ট ধারণা দিয়ে রাখলাম এই কীওয়ার্ডও <code>this</code> এর ভ্যালু ডিটারমাইন করতে পারে।</p>\n<p>আশা করি এখন থেকে আর এই <code>this</code> কীওয়ার্ড নিয়ে আর কনফিউশন সৃষ্টি হবেনা।</p>\n<p>তবে সবসময় মনে রাখবেনঃ</p>\n<ul>\n<li>গ্লোবালি যেকোনো জায়গায়, কাস্টমভাবে তৈরীকৃত অবজেক্ট এর ভিতরে ছাড়া <code>this</code> সবসময় গ্লোবাল অবজেক্টকেই ইন্ডিকেট করবে।</li>\n<li>এটা নরমাল রেগুলার ফাংশন কলেও গ্লোবাল অবজেক্ট কে পয়েন্ট করে</li>\n<li>এটার ভ্যালু অ্যাসাইন হয় না যতক্ষন না পর্যন্ত আপনি ডিক্ল্যেয়ারকৃত ফাংশনটাকে কল না করছেন বা এটা যেখানে ইউজ করা হয়েছে সেটাকে কল না করছেন।</li>\n</ul>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","javascript-advance","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-অ্যাডভান্স","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-07T16:40:29.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড","thumb_img_path":"/images/jsadvanced.jpeg","content":"<p><a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">গত পর্বে</a> আমি <code>this</code> কীওয়ার্ড নিয়ে আলোচনা করেছি। সেখানে <code>this</code> কীওয়ার্ডের ভ্যালু বা অন্য কথায় <code>this</code> এর কন্টেক্সট(Context) ডিটারমাইন করার জন্যে চারটা রুলস এর কথা বলেছিলামঃ</p>\n<p>১। গ্লোবাল রুলস</p>\n<p>২। অবজেক্ট রুলস</p>\n<p>৩। স্পষ্ট রুলস</p>\n<p>৪। <code>new</code> কীওয়ার্ড রুলস</p>\n<p>তার মধ্যে প্রথম দুইটা আলোচনা করা হয়েছে <a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">গত পর্বে</a>ই। এই পর্বে তিন নাম্বার রুলস নিয়ে আলোচনা করবো। এখানেই আমি <code>call()</code>, <code>bind()</code>ও <code>apply()</code> এই তিনটা মেথডকে পরিচয় করিয়ে দিয়েছিলাম। জাভাস্ক্রিপ্ট ভালো করে আয়ত্তে আনতে হলে এই তিনটা মেথড সম্পর্কে আপনার পরিষ্কার ধারণা থাকতে হবে। আজকে তাই আমি এগুলো নিয়ে বিস্তারিত লিখবো।</p>\n<p>এই তিনটা মেথডই প্রথম আর্গুমেন্ট হিসাবে <code>this</code> কীওয়ার্ডের কন্টেক্সট বা ভ্যালু কি হবে সেটা নেয়। তারমধ্যে <code>call()</code> আর <code>bind()</code> আনলিমিটেড আর্গুমেন্ট নিতে পারে আর অন্যদিকে <code>apply()</code> মাত্র দুইটা আর্গুমেন্ট(প্রথমটা সবসময়েই <code>this</code>এর ভ্যালু ডিটারমাইন করতে, আর দ্বিতীয়টা একটা অ্যারে) নেয়। এখন বুঝলাম প্রথম আর্গুমেন্ট <code>this</code> ডিটারমাইন করার জন্যে দেওয়া হয়, কিন্তু বাকী আর্গুমেন্টগুলা কিসের? হ্যাঁ বাকিগুলো আপনি যে ফাংশনের সাথে এই মেথডগুলো লাগাবেন সেই ফাংশনেরও আর্গুমেন্ট থাকতে পারে, সে আর্গুমেন্ট যতটাই হউক আপনি <code>call()</code> আর <code>bind()</code> এর ক্ষেত্রে একটার পর একটা দিতে পারবেন। অন্যদিকে <code>apply()</code> এর ক্ষেত্রে যে অ্যারেটা দিবেন সেটা হবে সেই ফাংশনের সবগুলো আর্গুমেন্টের অ্যারে। কনফিউজড হয়ে গেলে সমস্যা নাই আমি প্রত্যেকটা উদাহরনসহ নিচে দেখাবো। আশা করি পরিষ্কার ধারণা হয়ে যাবে।</p>\n<p>আরেকটা ডিফারেন্স হলো <code>call()</code> , <code>apply()</code> আর <code>bind()</code> এর মধ্যে। যেখানে <code>call()</code> , <code>apply()</code> যে ফাংশনের সাথে ইউজ করবেন সেটা সাথে সাথে কল হয়ে যাবে। অন্যদিকে <code>bind()</code> সাথে সাথে ফাংশনটাকে কল করে না, বরং আপনি সেটা পরে যেকোনো সময় চাইলে নিজের মন মতো করে কল করতে পারবেন।</p>\n<h4 id=\"call\">call() মেথডঃ</h4>\n<p><a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">আগের পর্বে</a> একটা উদাহরণ দিয়েছিলাম। সেইমটার উপরেই আজকে কাজ করবোঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log('My name is ' + this.name);\n      }\n   }\n}\n</code></pre>\n<p>এখানে যদি আমরা <code>value()</code> ফাংশনটাকে কল করি তাহলে <em>My name is Ahmed Zonayed</em> দেখাবে। মানে এখানে <code>this</code> এর ভ্যালু হচ্ছে <code>anotherObj</code> , আর তাই এভাবে আউটপুট পাবেন।</p>\n<pre><code>myCustomObj.anotherObj.value();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Cnf-sSImumYH5EkxyMuLGw.png\" alt=\"\" /></p>\n<p>কিন্তু এখানে যদি আমরা চাই <code>value()</code> এর ভিতরের <code>this</code> এর কন্টেক্সট বা ভ্যালু হিসাবে <code>myCustomObj</code> সেট করতে তাহলে সেটা আমরা স্পষ্ট করে <code>call()</code> দিয়ে সেট করে দিতে পারি এভাবেঃ</p>\n<pre><code>myCustomObj.anotherObj.value.call(myCustomObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*jmn8qxI65YZgtPJ5v5SEMA.png\" alt=\"\" /></p>\n<p>দেখুন এবার প্রিন্ট হয়েছে <em>My name is Zonayed Ahmed,</em> মানে <code>this</code> এর ভ্যালু এখানে আমরা আমাদের মতো করে চেঞ্জ করতে পেরেছি। আরেকটা জিনিস আমরা চাইলে <code>call()</code> টা আমাদের অবজেক্ট এর সাথেও দিতে পারতাম। কিন্তু ঐ যে বললাম <code>call()</code> যেখানে ইউজ করা হয় সেটা সাথে সাথে কল হয়ে যায়, তাই আপনি যেরকম আশা করবেন সেরকম রেজাল্ট নাও আসতে পারেঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log('My name is ' + this.name);\n      }.call(myCustomObj)\n   }\n}\n</code></pre>\n<p>এটা এভাবে রান করার পর পরই দেখবেন আপনার ফাংশন কল করা ছাড়াই প্রিন্ট হয়ে গেছেঃ</p>\n<p><img src=\"https://miro.medium.com/max/349/1*S72LqoxxZ8dwwRmkECQsnQ.png\" alt=\"\" /></p>\n<p>সেইমভাবে আপনার দুইটা সম্পূর্ন পৃথক পৃথক অবজেক্ট এর ক্ষেত্রেও আপনি এই মেথডগুলো কাজে লাগাতে পারবেন। যেমন ধরি আমাদের দুইটা অবজেক্ট আছে এরকমঃ</p>\n<pre><code>var karim = {\n   name: 'Karim Rahman',\n   dob: 1996,\n   age: function(currentYear) {\n      console.log(this.name + ' is ' + (currentYear - this.dob) + ' years old!');\n   }\n}\n</code></pre>\n<p>আরেকটাঃ</p>\n<pre><code>var rahim = {\n   name: 'Rahim Abdu',\n   dob: 1986\n}\n</code></pre>\n<p>দেখুন প্রথম অবজেক্ট <code>karim</code> থেকে আমরা খুব সহজেই <code>age</code> ফাংশনটা কল করে <code>karim</code> এর বয়স জানতে পারবোঃ</p>\n<pre><code>karim.age(2018)\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ZJfy5oriByCd5QcE1N8jdw.png\" alt=\"\" /></p>\n<p>এখন লক্ষ্য করুন <code>rahim</code> এ আমাদের কিন্তু <code>age</code> নামক ফাংশনটা নাই, কিন্তু তারপরেও আমরা চাইলে এই <code>age</code> ইউজ করে এর সাথে <code>call()</code>, <code>bind()</code> বা <code>apply()</code> দিয়ে এর ভিতরের <code>this</code> এর ভ্যালু চেঞ্জ করে সেটা <code>rahim</code> এর জন্যেও ইউজ করতে পারিঃ</p>\n<pre><code>karim.age.call(rahim, 2018);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*sX8od8VzVMMgoVh6XTbWRA.png\" alt=\"\" /></p>\n<p>আরো দেখবেন এখানে দ্বিতীয় আর্গুমেন্ট হিসাবে <code>age</code> এর আর্গুমেন্ট হিসাবে ভ্যালু পাস করেছি। সেইম জিনসটা <code>bind()</code> আর <code>apply()</code> দিয়েও করা যাবে।</p>\n<h4 id=\"apply\">apply() মেথডঃ</h4>\n<p>এটাও সেইম টু সেইম <code>call()</code> এর মতোই, জাস্ট এটা দুইটা আর্গুমেন্ট নিবে আর দ্বিতীয় আর্গুমেন্ট টা আপনার ফাংশনের জন্যে যে কয়টা আর্গুমেন্ট থাকবে সেগুলার অ্যারে নিবেঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log('My name is ' + this.name);\n      }\n   }\n}\n</code></pre>\n<p>আগের এই সেইম উদাহরণে <code>apply()</code> ইউজ করলেও সেইম রেজাল্ট পাবেনঃ</p>\n<pre><code>myCustomObj.anotherObj.value.apply(myCustomObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SbMoo-xA8kTyB6SQEnqu3Q.png\" alt=\"\" /></p>\n<p><code>call()</code> থেকে<code>apply()</code> এর পার্থক্যটা দ্বিতীয় আর্গুমেন্ট নেওয়ার ক্ষেত্রে যেখানে <code>apply()</code> আর্গুমেন্ট এর অ্যারে নেয়। আগের <code>rahim</code> আর <code>karim</code> একটু মডিফাই করেঃ</p>\n<pre><code>var karim = {\n   name: 'Karim Rahman',\n   dob: 1996,\n   age: function(currentYear, msg) {\n      console.log(msg + ' ' + this.name + ' is ' + (currentYear - this.dob) + ' years old!');\n   }\n}\n</code></pre>\n<p>এবংঃ</p>\n<pre><code>var rahim = {\n   name: 'Rahim Abdu',\n   dob: 1986\n}\n</code></pre>\n<p><code>karim</code> এর <code>age</code> কল করলেঃ</p>\n<pre><code>karim.age(2018, 'Hello World!');\n</code></pre>\n<p><code>age</code> ফাংশনটায় দুইটা আর্গুমেন্ট লাগিয়েছি বুঝার সুবিধার্থে। এটা রান করলে কন্সোলে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*cgOrXBkrcxqmCjWQorZUjw.png\" alt=\"\" /></p>\n<p>এখন এই সেইম <code>age</code> ফাংশন <code>rahim</code> এ ঠিক আগের মতো করে ইউজ করতে চাচ্ছি। কিন্তু এবার <code>apply()</code> দিয়েঃ</p>\n<pre><code>karim.age.apply(rahim, [2018, 'Hello World!']);\n</code></pre>\n<p>লক্ষ্য করুন এখানে দ্বিতীয় আর্গুমেন্ট টা একটা অ্যারে যেটা আপনার <code>age</code> ফাংশনের সবগুলো আর্গুমেন্ট নিয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*M9jdfdr0ooYE5qbx9WpKag.png\" alt=\"\" /></p>\n<p>আশা করি এবার <code>call()</code> আর <code>apply()</code> মধ্যে তফাৎ টা ধরতে পেরেছেন। এবার চলি আসুন <code>bind()</code> নিয়ে কথা বলি।</p>\n<h4 id=\"bind\">bind() মেথডঃ</h4>\n<p><code>bind()</code> ঠিক <code>call()</code> এর মতো হলেও যেখানে <code>call()</code> আর<code>apply()</code> সাথে সাথে যে ফাংশনের সাথে ইউজ করা হয়েছে সেটাকে কল করে ফেলে, <code>bind()</code> সেখানে সে ফাংশনকে কল করে না, বরং এটা সেই ফাংশনের আরেকটা ডেফিনেশন রিটার্ন করে যেটা পরবর্তিতে আপনি যেকোনো জায়গায় কল করতে পারবেন বা ইউজ করতে পারবেন। আগের সেইম উদাহরণেই যদি সেইমভাবে <code>bind()</code> ইউজ করি তাহলে পার্থক্যটা ধরতে পারবেনঃ</p>\n<pre><code>var myCustomObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student',\n   anotherObj: {\n      name: 'Ahmed Zonayed',\n      value: function() {\n         console.log('My name is ' + this.name);\n      }\n   }\n}\n</code></pre>\n<p>এবার সেইমভাবে <code>value</code> এর <code>this</code> এর ভ্যালু <code>myCustomObj</code> এ সেট করতে আগের মতোই <code>bind()</code> মেথড ইউজ করলেঃ</p>\n<pre><code>myCustomObj.anotherObj.value.bind(myCustomObj);\n</code></pre>\n<p>এটা দেখবেন সরাসরি আপনার কাঙ্ক্ষিত লেখা প্রিন্ট করছে না, বরং এটা যা রিটার্ণ করছে সেটা আরেকটা ফাংশন ডেফিনেশনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*B_Pzwu09_JdKR8vHVOckhw.png\" alt=\"\" /></p>\n<p>এখন এই ফাংশনটাকে আপনি আরেকটা ভ্যারিয়েবলে স্টোর করে পরে যেকোনো সময়, যেকোনো জায়গায় ইউজ করতে পারবেনঃ</p>\n<pre><code>var anotherFunc = myCustomObj.anotherObj.value.bind(myCustomObj);\n</code></pre>\n<p>এবার এই ফাংশন যেখানে কল করবেন সেখানেই আপনার কাঙ্ক্ষিত ফলাফল আসবেঃ</p>\n<pre><code>anotherFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SuRGrkJ3mFrsmwx0azbxow.png\" alt=\"\" /></p>\n<p>আর এ জন্যেই <a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">গত পর্বে</a> উদাহরনটায় আমরা <code>bind()</code> ইউজ করেছিলাম <code>call()</code> বা <code>apply()</code> ইউজ না করে। আর এজন্যেই এই তিনটা মেথডের মধ্যে এই <code>bind()</code> সবচেয়ে ইউজফুল।</p>\n<p><code>bind()</code> এ আপনি আর্গুমেন্টগুলোও পৃথক পৃথক ভাবে কল করতে পারবেন। ধরেন প্রথমে আপনি আপনার কিছু আর্গুমেন্ট দিলেন, পরে আবার ফাংশন কল করার সময় বাকি আর্গুমেন্টগুলো দিতে পারবেন। যেমন <code>apply()</code> তে ইউজ করা <code>kahim</code> আর <code>rahim</code> এর উদাহরণের ক্ষেত্রেঃ</p>\n<pre><code>var karim = {\n   name: 'Karim Rahman',\n   dob: 1996,\n   age: function(currentYear, msg) {\n      console.log(msg + ' ' + this.name + ' is ' + (currentYear - this.dob) + ' years old!');\n   }\n}\n</code></pre>\n<p>আরঃ</p>\n<pre><code>var rahim = {\n   name: 'Rahim Abdu',\n   dob: 1986\n}\n</code></pre>\n<p>এই উদাহরণের ক্ষেত্রে যদি আমরা চাই <code>msg</code> এর ভ্যালু পরে সেট করতে তাহলে এটা এভাবেও করা যাবেঃ</p>\n<pre><code>var rahimAge = karim.age.bind(rahim, 2018);\n</code></pre>\n<p>লক্ষ্য করুন আমরা এখানে মাত্র একটা আর্গুমেন্ট দিয়েছি, আরেকটা দেই নাই। যেটা পরবর্তিতে আমরা এই ফাংশনটাকে কল করার সময় দিতে পারবোঃ</p>\n<pre><code>rahimAge('Hello World!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tTJYjsYepXmkUIpQ9i4ZDw.png\" alt=\"\" /></p>\n<p>বা আমরা চাইলে এটাকে আরো এক ধাপ আগায় নিতে পারি এভাবে। প্রথমে জাস্ট <code>bind()</code> দিয়ে আরেকটা ফাংশন বানাইলাম যেটার কাজ হবে <code>rahim</code> এর <code>age</code> ক্যালকুলেট করাঃ</p>\n<pre><code>var rahimAgeCalculate = karim.age.bind(rahim);\n</code></pre>\n<p>এখন এই <code>rahimAgeCalculate</code> ফাংশনে বাকি আর্গুমেন্ট গুলা পাস করতে পারবোঃ</p>\n<pre><code>rahimAgeCalculate(2018, 'Hello Dolly!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*w_Oe5eDgghn5Mqah9g8fAw.png\" alt=\"\" /></p>\n<p>যতবার যতভাবে ইচ্ছাঃ</p>\n<pre><code>rahimAgeCalculate(2028, 'Hello Ahmed!');\nrahimAgeCalculate(2028, 'Hello Zonayed!');\nrahimAgeCalculate(2050, 'Hi!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Gb9KvEX-Py4YP8ynZQ-MNw.png\" alt=\"\" /></p>\n<p>এখানেই এই <code>bind()</code> একটু স্পেশাল আর ইউজ কেসও বেশী এটার।</p>\n<h4 id=\"\">স্পেশাল উদাহরণঃ</h4>\n<p>নিচের এই উদাহরনে <code>this</code> এর ভ্যালু কি হতে পারে অনুমান করার চেষ্টা করুনঃ</p>\n<pre><code>var myObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   timer: function() {\n      setTimeout(function() {\n         console.log('My name is ' + this.name);\n      }, 1000)\n    }\n}\n</code></pre>\n<p>এখান আমরা <code>timer</code> ফাংশনটাকে কল করলেঃ</p>\n<pre><code>myObj.timer();\n</code></pre>\n<p>এটা দ্বিতীয় রুলস(অবজেক্ট রুলস) এ পড়ে যেহেতু এই ফাংশনটা একটা কাস্টমভাবে ডিফাইন করা অবজেক্ট এর ভিতরে আছে। তাহলে সে হিসাবে এটার ভিতরের <code>this</code> আমার সেই অবজেক্ট <code>myObj</code> কেই ইন্ডিকেট করার কথা। কিন্তু এটা এক্সিকিউট করলে ১০০০ মিলিসেকেন্ড পরে এমন আউটপুট আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YQU24J1Cwijnt7mNWZA9gQ.png\" alt=\"\" /></p>\n<p>কোনো কারনে <code>name</code> এর ভ্যালু আসছে না, তারমানে এখানে তাহলে কোথাও একটা প্রবলেম হচ্ছে। আচ্ছা তাহলে ঠিক এখানে <code>this</code> এর ভ্যালু কি দেখে নেওয়া যাকঃ</p>\n<pre><code>var myAnotherObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   timer: function() {\n      setTimeout(function() {\n         console.log(this);\n      }, 1000)\n    }\n}\n</code></pre>\n<p>এখানে <code>timer</code> ফাংশনটাকে কল করলেঃ</p>\n<pre><code>myAnotherObj.timer();\n</code></pre>\n<p>১০০০ মিলিসেকেন্ড পরে প্রিন্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*zaU0alUOPhG0yUAnpESC9A.png\" alt=\"\" /></p>\n<p>এখানে কোনো কারনে <code>this</code> গ্লোবাল অবজেক্ট(ব্রাউজারের ক্ষেত্রে <code>window</code> অবজেক্ট) কে ইন্ডিকেট করছে। কেনো? হ্যাঁ আপনি যদি আপনার গ্লোবাল অবজেক্ট ওপেন করে দেখেন দেখবেন এই <code>setTimeout</code> আসলে সেই গ্লোবাল অবজেক্ট এর একটা মেথডঃ</p>\n<pre><code>console.dir(window);\n</code></pre>\n<p>এটা ওপেন করলে অনেকগুলো মেথড পাবেন। তারমধ্যে <code>setTimeout</code> ও পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*5FlVyqJukPprK5zvFgIKUw.png\" alt=\"\" /></p>\n<p>তো আমাদের কথামতো <code>setTimeout</code> এর ভিতরে <code>this</code> তাই গ্লোবাল অবজেক্ট কেই ইন্ডিকেট করছে। যদিও <code>setTimeout</code> আরেকটা কাস্টমভাবে ডিফাইনকৃত অবজেক্ট এর ভিতরে কিন্তু এটার ভিতরে থাকা <code>this</code> এর সবচেয়ে কাছের অবজেক্ট হচ্ছে গ্লোবাল অবজেক্ট যেহেতু <code>setTimeout</code> আসলে গ্লোবাল অবজেক্ট এরই একটা মেথড। তাই এভাবে একটার ভিতরে আরেকটা মেথড থাকলেও আপনার <code>this</code> এর ভ্যালু চেঞ্জ হয়ে যেতে পারে।</p>\n<p>এখন আমরা যেহেতু <code>call()</code>, <code>apply()</code>, <code>bind()</code> মেথডগুলো জানি তাই চলেন আমরা এটা ফিক্স করে ঠিক যেটা প্রিন্ট করাতে চাচ্ছিলাম সেটাই প্রিন্ট করাইঃ</p>\n<pre><code>var myObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   timer: function() {\n      setTimeout(function() {\n         console.log('My name is ' + this.name);\n      }.bind(myObj), 1000)\n    }\n}\n</code></pre>\n<p>এখন <code>timer</code> ফাংশনটাকে কল করলেঃ</p>\n<pre><code>myObj.timer();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SjK9GOoIxSk1_tuwaElrKg.png\" alt=\"\" /></p>\n<p>এখন এখানে <code>call()</code> বা<code>apply()</code> কেনো ইউজ করলাম না? হ্যাঁ এই দুইটা মেথড ইউজ করা যাবে কিন্তু আমরা যেভাবে আশা করছিলাম সেরকম রেজাল্ট আসবে নাঃ</p>\n<pre><code>var myObj = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   timer: function() {\n      setTimeout(function() {\n         console.log('My name is ' + this.name);\n      }.call(myObj), 1000)\n    }\n}\n</code></pre>\n<p><code>setTimeout</code> দিয়ে আমরা চাচ্ছি ১০০০ মিলিসেকেন্ড পরে উক্ত লেখাটা প্রিন্ট হউক, কিন্তু <code>call()</code> ইউজ করায় সেটা সাথে সাথেই কল হয়ে যাবেঃ</p>\n<pre><code>myObj.timer();\n</code></pre>\n<p>দেখবেন আপনার কন্সোলে সাথে সাথে প্রিন্ট হয়ে গেছে, কন্সোল ১০০০ মিলিসেকেন্ড ওয়েট করে নাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Ia9iyYscz30MIcVg6CcZCw.png\" alt=\"\" /></p>\n<p>সেইম <code>apply()</code> ক্ষেত্রেও হবে। তাই ক্ষেত্রবিশেষে এদের বিহেভিয়ার অনুযায়ী আপনাকে যেসময় যেটা দরকার সেটা ইউজ করতে হবে।</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n<hr />\n<p>[wysija_form id=”6″]</p>"},{"language":"বাংলা","tags":["coding","JavaScript","javascript-advance","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-অ্যাডভান্স","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-08T16:40:23.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট","thumb_img_path":"/images/jsadvanced.jpeg","content":"<p>জাভাস্ক্রিপ্ট আসলে অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজ(Object Oriented Programming Language)। যদিও অন্যান্য OOP(Object Oriented Programming) ল্যাংগুয়েজগুলো থেকে জাভাস্ক্রিপ্ট এ অনেক কিছু একটু অন্যরকম, কিন্তু তারপরেও এটা অবজেক্ট ওরিয়েন্টেটেড ল্যাংগুয়েজের মধ্যেই পড়ে। নতুন ভার্শনগুলোয় সেগুলো আপডেটও করা হচ্ছে আস্তে আস্তে। আর তাই আজকে এই পর্বে আমরা সেই অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট নিয়ে আলোচনা করবো।</p>\n<p>জাভাস্ক্রিপ্ট এ অলমোস্ট সবকিছুই অবজেক্ট। কিছু ছাড়া, যেগুলোকে প্রিমিটিভ ডাটা টাইপ বলে।</p>\n<p>জাভাস্ক্রিপ্ট এ সাধারণত দুই ধরনের ডাটা টাইপ আছেঃ</p>\n<p>১। প্রিমিটিভ ডাটা টাইপ(Primitive Data Type)</p>\n<p>২। অবজেক্ট</p>\n<p><strong>১। প্রিমিটিভ ডাটা টাইপ(Primitive Data Type)ঃ</strong> জাভাস্ক্রিপ্ট এ প্রিমিটিভ ডাটা টাইপ খুবই অল্প। যেমন নাম্বার(Number), স্ট্রিং(String), বুলিয়ান(Boolean), আন্ডিফাইন্ড(<code>undefined</code>), নাল(<code>null</code>) এগুলো হচ্ছে প্রিমিটিভ ডাটা টাইপ।</p>\n<p><strong>২। অবজেক্টঃ</strong> উপরে উল্লেখিত প্রিমিটিভ ডাটা টাইপগুলো ছাড়া বাকি সবই জাভাস্ক্রিপ্ট এ অবজেক্ট। যেমনঃ অ্যারে, ফাংশন, অবজেক্ট, ডেট, নাম্বার/স্ট্রিং/বুলিয়ান এর র‍্যাপার(Wrapper) ফাংশন সবই অবজেক্ট।</p>\n<p>এখন প্রিমিটিভ ডাটা টাইপ আর অবজেক্ট এর মধ্যে প্রধান ডিফারেন্স হচ্ছে এদের ভ্যালু স্টোর করার সিস্টেমে। যেখানে প্রিমিটিভ ডাটা টাইপে ভ্যালু নিজের কাছেই স্টোর করে, অন্যদিকে অবজেক্ট সাধারণত সরাসরি ডাটা স্টোর করে না, বরং ঐ ডাটাটা অন্যকোথাও থাকে, অবজেক্ট এ জাস্ট ঐটার রেফারেন্স থাকে।</p>\n<p>আর যখন আমরা প্রিমিটিভ টাইপের কোনো ডাটা প্যারামিটার/আর্গুমেন্ট হিসাবে কোনো ফাংশনে পাস করি, ঐটা সবসময় ঐ ডাটার কপি পাঠায়, সরাসরি ডাটা পাঠায় না। একটা কমন উদাহরণ দিলে হয়তো বুঝতে পারবেন। নিচের এই প্রোগ্রামটা দেখিঃ</p>\n<pre><code>var a = 10, b = 20;\n\nconsole.log('Before swap: Value of a: ' + a + ' and value of b: ' + b);\n\nfunction swap(a, b) {\n   console.log('Before Swap inside function: Value of a: ' + a + ' and value of b: ' + b);\n   var temp = a;\n   a = b;\n   b = temp;\n   console.log('After Swap inside function: Value of a: ' + a + ' and value of b: ' + b);\n}\n\nswap(a, b);\nconsole.log('After swap: Value of a: ' + a + ' and value of b: ' + b);\n</code></pre>\n<p>এ প্রোগ্রামটা রান করালে দেখবেন ফাংশনের ভিতরে <code>a</code> এবং <code>b</code> ঠিকি সোয়াপ হয়েছে কিন্তু বাইরের <code>a</code> আর <code>b</code> তে কোনো ইফেক্ট পড়ে নাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*_P3eJBPVXIq0AiPq_hDqlA.png\" alt=\"\" /></p>\n<p>কারণ এখানে আমরা প্রিমিটিভ টাইপের ডাটা পাঠিয়েছি আর্গুমেন্টে, এটা নিজের ডাটা সেন্ড না করে সেটার কপি সেন্ড করছে, আর তাই এটার নিজের উপর কোনো ইফেক্ট পড়ে নাই।</p>\n<p>কিন্তু সেইম কাজ যদি আমরা অবজেক্ট(রেফারেন্স) ডাটা টাইপ দিয়ে করিঃ</p>\n<pre><code>var obj = {\n   a: 10,\n   b: 20\n};\n\nconsole.log('Before swap: Value of a: ' + obj.a + ' and value of b: ' + obj.b);\n\nfunction swap(x) {\n   console.log('Before Swap inside function: Value of a: ' + x.a + ' and value of b: ' + x.b);\n   var temp = x.a;\n   x.a = x.b;\n   x.b = temp;\n   console.log('After Swap inside function: Value of a: ' + x.a + ' and value of b: ' + x.b);\n}\n\nswap(obj);\nconsole.log('After swap: Value of a: ' + obj.a + ' and value of b: ' + obj.b);\n</code></pre>\n<p>এখন দেখবেন আপনার ডাটা ফাংশনের ভিতরেও চেঞ্জ হয়েছে আবার সেটার ইফেক্ট বাইরেও পড়েছে। আপনার আসল <code>obj</code> এর ডাটাও চেঞ্জ হয়ে গেছে। এটার কারণ একটাই, এখানে <code>obj</code> অবজেক্ট টাইপ ডাটা, যেটা নিজে ডাটা হোল্ড করে না, বরং সেই ডাটার একটা রেফারেন্স হোল্ড করে যে এই ডাটাটা অমুক জায়গায় আছে। আপনি যখন একে আর্গুমেন্টে পাস করলেন, তো আপনি সেই রেফারেন্সটাই পাস করলেন। এখন ফাংশনের ভিতরে যখন ডাটাগুলো সোয়াপ করলেন, সেটা সেই রেফারেন্স অনুযায়ী গিয়ে আসল ডাটাকেই সোয়াপ করে দিছে। এজন্যে ফাংশন শেষ হওয়ার পরেও, ফাংশন থেকে কিছু রিটার্ন না করা সত্বেও আপনার ডাটা দেখবেন চেঞ্জ হয়ে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*qPlIQNcyUQvD9AunWYaO3Q.png\" alt=\"\" /></p>\n<p>আশা করি এই দুই টাইপের ডাটা সম্পর্কে ধারণা হয়েছে। আরো জানতে চাইলে আপনি মাদার অব অল ল্যাংগুয়েজ C শিখতে পারেন।</p>\n<p>এখন অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজগুলোতে সবকিছুই অবজেক্ট। এখন অবজেক্টটা কি? হ্যাঁ অবজেক্ট হচ্ছেন আপনি, আপনি পুরোটা একটা অবজেক্ট। আপনার কিছু প্রপার্টিজ(properties) আছে যেমন আপনার গায়ের রঙ, আপনার উচ্চতা, আপনি কোন দেশে থাকেন, আপনার নাম, আপনার চাকরী এগুলো সবই আপনার সম্পর্কে তথ্য দেয়। আপনাকে কেউ যদি জিজ্ঞাসা করে আপনার নাম কি তাহলে আপনি আপনার নাম বলবেন। ঠিক তেমনি জাভাস্ক্রিপ্ট এর অবজেক্ট এরও এরকম প্রপার্টিজ আছে। আর আমাদের অনেক ভাগ্য ভালো যে জাভাস্ক্রিপ্ট এ আসলে অবজেক্ট এর এইসব প্রপার্টিজ ব্রাউজারের কন্সোলে ওপেন করে দেখা যায়। কার কি প্রপার্টি আছে সবই দেখতে পারবেন ব্রাউজারের কন্সোল থেকে। যাই হউক ধরি আমাদের একটা অ্যারে আছেঃ</p>\n<pre><code>var arr = [0, 1, 3, 4, 8];\n</code></pre>\n<p>এখন এই অ্যারেতে কয়টা ইলিমেন্ট আছে সেটা জানতে আপনার নিজের গণনা করার দরকার নাই, আপনি চাইলে এই অ্যারেকেও জিজ্ঞাসা করতে পারেন। কারণ অ্যারেরও একটা প্রপার্টি আছে যে জানে তার ইলিমেন্ট কয়টাঃ</p>\n<pre><code>arr.length;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*XNYZg4jhvDxSyR6VEQOxUA.png\" alt=\"\" /></p>\n<p>এভাবেই অবজেক্টগুলোতে তাদের নিজস্ব প্রপার্টি থাকে। এখন আপনার কাছে একটা মোবাইল ফোনও আছে(অনেকের কাছে নাও থাকতে পারে তবে ধরে নেই আছে)। এখন এই মোবাইল ইউজ করে আপনি কিছু অপারেশন করতে পারেন, যেমন দূরের কারো সাথে যোগাযোগ করা বা ইন্টারনেট ব্রাউজ করা। এমন অবজেক্টগুলোরও কিছু ম্যাশিন থাকে, যেগুলোকে ওদের মেথড বলে। মেথডও এক রকমের ফাংশন। যেমন আমরা যদি উক্ত অ্যারেতে আরেকটা আইটেম ঢুকাতে চাই তাহলে সেই অ্যারের একটা মেথড ইউজ করতে পারিঃ</p>\n<pre><code>arr.push(100);\n</code></pre>\n<p>এখন দেখেন অ্যারেতে সেটা অ্যাড হয়ে গেছেঃ</p>\n<pre><code>arr\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*AEGfX3tG7qJHWBsiDVimZA.png\" alt=\"\" /></p>\n<p>এখন এই <code>push</code> মেথড আসলো কোথা থেকে? হ্যাঁ সেটা আপনি এই অবজেক্ট অ্যারেটা ওপেন করে দেখতে পারেনঃ</p>\n<pre><code>console.dir(arr);\n</code></pre>\n<p>এটা রান করলে ব্রাউজারের কন্সোলে দেখবেন আপনার <code>Array</code> অবজেক্ট টা আসছে। এখন পাশের ত্রিভুজাকৃতির বাটনে ক্লিক করলে সেই অবজেক্ট টা খুলে যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TT-8pzqXhDoeMrauLPu9Ew.png\" alt=\"\" /></p>\n<p>এখানে আমরা <code>length</code> প্রপার্টি দেখতে পাচ্ছি, যেটা এই অ্যারে অবজেক্ট এর একটা প্রপার্টি সেটা কনফার্ম হওয়া গেলো। কিন্তু <code>push</code> মেথডটা কোথায়? হ্যাঁ সেজন্যেই নিচে দেখেন <code>__proto__</code> নামে আরেকটা জিনিস আছে। ঐটাও ওপেন করতে পারবেন। ওপেন করলে অনেকগুলো প্রপার্টি আর মেথড দেখবেন। এগুলো সবই অ্যারের মেথড। এখানে খুজলে আপনার <code>push</code> মেথডও পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*8qbLgrYlLb-tCH1TtJGThQ.png\" alt=\"\" /></p>\n<p>তো এখানেই অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজগুলোর আসল খেলা। এভাবেই অবজেক্টগুলো একটা আরেকটার সাথে মিলিতভাবে কমপ্লেক্স একটা স্ট্রাকচার তৈরী করে আমাদের কাজের সুবিধার্থে অনেকগুলো প্রপার্টি আর মেথড একসাথে করে ফেলে। এখানে যেমনটা দেখলেম <code>length</code> আর <code>push</code> ।</p>\n<p>এভাবেই প্রত্যেকটা জাভাস্ক্রিপ্ট অবজেক্ট এর প্রোটোটাইপ প্রপার্টি(Prototype property) থাকে যার জন্যে এরকম প্রপার্টি বা মেথড ধার(Inherit) করে আনা যায়। আর এভাবেই জাভাস্ক্রিপ্ট বাই ডিফল্ট প্রোটোটাইপ প্রপার্টি(Prototype property) তে মেথড বা প্রপার্টিগুলো রাখে আমাদের পরবর্তিতে সেই অবজেক্ট এর সাথে ইউজ করার জন্যে। আমরা চাইলে নিজেওরাও কাস্টমভাবে সেই প্রোটোটাইপ প্রপার্টি(Prototype property) তে মেথড বা প্রপার্টি রাখতে পারবো। তবে সেটা আমি পরে কোনো পর্বে দেখাবো। আজকে জাস্ট মেইন আইডিয়াটা দিয়ে রাখলাম।</p>\n<h4 id=\"prototypechain\"><strong>প্রোটোটাইপ চেইন(Prototype Chain):</strong></h4>\n<p>জাভাস্ক্রিপ্ট অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাঙ্গুয়েজ হলেও মূলত এটা প্রোটোটাইপ বেসড। অন্যান্য মেজর ল্যাঙ্গুয়েজের অবজেক্ট মডেল আর জাভাস্ক্রিপ্ট এর অবজেক্ট মডেল এক না। জাভাস্ক্রিপ্ট এর সব অবজেক্টেই প্রোটোটাইপ <code>__proto__</code> অবজেক্ট পাবেনঃ</p>\n<pre><code>console.dir({});\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*H_N-TWOZ2GEUjp6B64gKCw.png\" alt=\"\" /></p>\n<p>এই <code>__proto__</code> টাকে আসলে ডান্ডার প্রোটো (dunder proto) বলে। সব অবজেক্টেই পাবেন এটাঃ</p>\n<pre><code>var oneArr = [1, 2, 3, 4, 5];\nconsole.dir(oneArr);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*c0ksTeuQ6DqQtoPeTvnl2Q.png\" alt=\"\" /></p>\n<p>এভাবে যখন আমরা আমাদের অ্যারের ভিতরে প্রথম ওপেন করার পর শুধুমাত্র ইলিমেন্ট আর <code>length</code> প্রপার্টি টা দেখলেম শুধুমাত্র, বাকিগুলো বা <code>push</code> মেথড কিন্তু সেখানে ছিলো না। সেটা যখন আমরা আবার ডান্ডার প্রোটো <code>__proto__</code> (Dunder Proto) ওপেন করলাম তখন আমরা <code>push</code> পাইলাম। আবার একদম নিচে গেলে আবার দেখবেন সেই ডান্ডার প্রোটো আরেকটা আছে। ঐটা ওপেন করলেও আরো কিছু মেথড পাবেন। এখন এটাকেই আসলে প্রোটোটাইপ চেইন বলে। এখানে যখন একটা মেথড কল করা হয়, প্রথমে সেটা একদম প্রথম থেকে অবজেক্ট একদম নিজের থেকে খোঁজাখুঁজি শুরু করে, সেখানে না পাওয়া গেলে ভিতরে(ডান্ডার প্রোটোর ভিতরে) আবার খোঁজা হয়, সেখানেও না পাওয়া গেলে আরো ভিতরে(আরেকটা ডান্ডার প্রোটোর ভিতরে) খোঁজা হয়… এরকমভাবে খুঁজতেই থাকে যতক্ষন না সেই মেথড বা প্রপার্টি না পাওয়া যায়।</p>\n<p>তো এভাবেই জাভাস্ক্রিপ্ট এর অবজেক্ট ওরিয়েন্টেড এর ব্যাপারটা প্রোটোটাইপ বেসড কাজ করে। সব অবজেক্ট এভাবে একটা আরেকটার সাথে লিঙ্ক হয়ে থাকে এই মডেলের মাধ্যমে।</p>\n<p>এখন আমরা এখানে জানলাম স্ট্রিং নাকি অবজেক্ট না, প্রিমিটিভ। তাহলে স্ট্রিং এর তো কোনো প্রপার্টি বা মেথড থাকার কথা না। নাকি? চলুন দেখি তাহলেঃ</p>\n<pre><code>var str = 'My name is Zonayed Ahmed';\n</code></pre>\n<p>দেখি তাহলে কিছু আছে নাকিঃ</p>\n<pre><code>console.dir(str);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*zF1sBYZyPvHYTRkI9uJHbA.png\" alt=\"\" /></p>\n<p>কিচ্ছু নাই! হ্যাঁ এটাই আমরা আশা করছিলাম। কারণ এটা প্রিমিটিভ, তাই স্বাভাবিকভাবেই এর কোনো প্রপার্টি বা মেথড থাকার কথা না। কিন্তু দেখি একটা অপারেশন চালিয়েঃ</p>\n<pre><code>str.length\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*qaVoWGjPEH5ERAx50aAP6g.png\" alt=\"\" /></p>\n<p>কিন্তু একি! এরো দেখি <code>length</code> প্রপার্টি আছে! কিভাবে কি…? প্রিমিটিভ হলে তো কোনো প্রপার্টি থাকার কথা না। হ্যাঁ এখানেই আসে র‍্যাপার(Wrapper) ফাংশনের কথা।</p>\n<p>আপনি সেইম স্ট্রিং টা একটা স্ট্রিং র‍্যাপার(Wrapper) ফাংশন দিয়েও নিতে পারবেনঃ</p>\n<pre><code>var str = new String('My name is Zonayed Ahmed');\n</code></pre>\n<p>এখন এটাকে খুলে দেখলেঃ</p>\n<pre><code>console.dir(str);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*oMTsnm8pwNui6NelR2cOCQ.png\" alt=\"\" /></p>\n<p>এখন এখানে এটা অবজেক্ট। আপনি খুলে ভিতরে এর প্রপার্টি বা মেথডগুলোও দেখতে পারবেন। র‍্যাপার(Wrapper) ফাংশনের কাজগুলো ঠিক তাই। এটা একটা প্রিমিটিভকে অবজেক্ট করে ফেলতে পারে, আর সেই সুবিধার্থে আমরা অনেকগুলো প্রপার্টি ও মেথড এর অ্যাক্সেস পাই। এখন স্ট্রিং এর জন্যে <code>String</code> আর নাম্বারের জন্যে <code>Number</code> এবং বুলিয়ান এর জন্যে <code>Boolean</code> র‍্যাপার ফাংশন রয়েছেঃ</p>\n<pre><code>var num = new Number(10);\nconsole.dir(num);\n\nvar bool = new Boolean(true);\nconsole.dir(bool);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*uliuFMzV22QgUHBHuWDDAA.png\" alt=\"\" /></p>\n<p>এগুলোর কাজই হচ্ছে কাঙ্ক্ষিত প্রিমিটিভ ডাটা টাইপকে অবজেক্ট টাইপ করে ফেলা আর সেই সুবাধে আমরাও অনেক প্রপার্টি বা মেথডের অ্যাক্সেস পাই।</p>\n<p>কিন্ত উপরের উদাহরণে দেখলাম প্রিমিটিভ টাইপ নেওয়ার পরও আমাদের কিছু প্রপার্টির অ্যাক্সেস পাচ্ছি। কিভাবে? হ্যাঁ এখানেই আসল ফ্লেক্সিবিলিটি। আমাদের সেই প্রিমিটিভ টাইপেও ঐটার অবজেক্ট রূপে ঠিক যতগুলো প্রপার্টি বা মেথডের অ্যাক্সেস পাইতাম ঐটাতেও আমরা অটোম্যাটিকালি সেগুলো পাবো। কারণ আমরা যখন সেই প্রিমিটিভ এর কোনো প্রপার্টি বা মেথডের জন্য কোড রান করি, জাভাস্ক্রিপ্ট তখন সেটাকে ফোর্স করে র‍্যাপার ফাংশন দিয়ে(<code>new String</code>, <code>new Boolean</code>, <code>new Number</code>) অবজেক্ট রূপে নিয়ে যায় আর আমাদের কোডও ঠিকমতো রান করে। আমাদের ভাবাই লাগে না। এজন্যেই আমরা যখন প্রিমিটিভ টাইপের ডাটা খুলতে চেষ্টা করি, তখন কিছু পাই না। কিন্তু কোনো মেথড বা প্রপার্টি দিলে তখন আবার কাজ করে। কারণ আমরা যখনি কোনো মেথড বা প্রপার্টি দেই, তখনি সেটাকে জাভাস্ক্রিপ্ট ফোর্স করে সেটাকে অবজেক্ট এ নিয়ে যায়। আবার মনে রাখবেন একবার প্রপার্টি বা মেথড অ্যাক্সেস করার কারণে কিন্তু আপনার প্রিমিটিভ টাইপের ডাটা অবজেক্ট রূপে পার্মানেন্টলি চলে যায় না, কারণ এখানে আপনার মেইন ডাটা টাচ করাই হয় না। আপনি চাইলে আপনার কন্সোলেও দেখতে পারেন একটা ট্রাই করে।</p>\n<p>উপরের অপারেশনটা আরো গভীরভাবে দেখলেঃ</p>\n<pre><code>var str = 'My name is Zonayed Ahmed';\n</code></pre>\n<p>এখন আমরা <code>length</code> অ্যাক্সেস করতে চাই এভাবেঃ</p>\n<pre><code>str.length\n</code></pre>\n<p>কিন্তু পিছনে আসলে যা হয়ঃ</p>\n<pre><code>(new String(str)).length\n</code></pre>\n<p>এর ফলে আমরা দেখতে পাই আমাদের ফলাফলঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tlPhqhD2SqHfh_VRkko7Cg.png\" alt=\"\" /></p>\n<p>কিন্তু এটা দেখেন পার্মানেন্ট কোথাও অ্যাসাইন করা হচ্ছে না, তাই আমাদের আসল প্রিমিটিভ প্রিমিটিভই থেকে যাচ্ছে। ঐ ডাটাকে টাচই করা হয় নাই।</p>\n<p>আশা করি আজকে অবজেক্ট সম্পর্কে ভালো আইডিয়া হয়েছে। আর কখনো এটা নিয়ে কনফিউজ হবেন না। তারপরেও কোনো প্রশ্ন থাকলে আমাকে ইমেইল করতে পারেন <code>contact@zonayed.me</code> এ</p>\n<p>তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","javascript-advance","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-অ্যাডভান্স","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-07T16:39:18.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড","thumb_img_path":"/images/jsadvanced.jpeg","content":"<p>জাভাস্ক্রিপ্ট যদিও অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাঙ্গুয়েজ, কিন্তু যারা অন্য কোনো ল্যাঙ্গুয়েজ থেকে জাভাস্ক্রিপ্ট এ এসেছেন তারা হয়তো একটা জিনিস এখানে মিসিং দেখবেন। সেটা হচ্ছে ক্লাস (<code>Class</code>)। অবজেক্ট ওরিয়েন্টেড ল্যাঙ্গুয়েজ কিন্তু ক্লাস নাই এটা কেমন কথা! হ্যাঁ, এজন্যেই জাভাস্ক্রিপ্ট একটু অন্যরকম। জাভাস্ক্রিপ্ট এ ক্লাস কনসেপ্ট এর পরিচয় করানো হয় নাই ডেভেলপারদের সাথে।</p>\n<p>জাভাস্ক্রিপ্ট অবজেক্ট ওরিয়েন্টেড হলেও এটা অন্যান্য ল্যাঙ্গুয়েজ যেমন সি++ বা জাভা থেকে একটু অন্যরকমভাবে কাজ করে। ঐ ল্যাঙ্গুয়েজগুলো ক্লাস বেসড হলেও জাভাস্ক্রিপ্ট মূলত প্রোটোটাইপ বেসড ল্যাঙ্গুয়েজ। অন্যান্য ল্যাগুয়েজের মতো জাভাস্ক্রিপ্ট ক্লাস এর ভিতরে সব রাখে না, বরং এখানে একটা অবজেক্ট আরেকটা অবজেক্ট এর সাথে প্রোটোটাইপ দিয়ে লিঙ্ক থাকে। আমরা গত পর্বে প্রোটোটাইপ চেইন নিয়ে কথা বলেছি। মূলত প্রোটোটাইপ চেইনে এরকমভাবে একটা আরেকটার সাথে লিঙ্ক করা থাকে, এমন লিঙ্ক হতে হতে সবশেষে নাল <code>null</code> হয়ে যায়। নাল এর কোনো প্রোটোটাইপ নেই, অর্থাৎ এটাই প্রোটোটাইপ চেইনের শেষ। জাভাস্ক্রিপ্ট এ বলতে গেলে সব অবজেক্টই এরকম প্রোটোটাইপ চেইন থাকে।</p>\n<p>ফাংশন কন্সট্রাকটরও সেইম ভাবে ক্লাসের মতো অবজেক্ট এর ব্লু-প্রিন্ট তৈরী করতে ইউজ করা হয়। এখন ব্লু-প্রিন্ট মানে? হ্যাঁ, আমাদের একই রকম দেখতে অনেকগুলো অবজেক্ট থাকতে পারে এরকমঃ</p>\n<pre><code>var samir = { \n   name: 'Samir Hossain',\n   age: 22,\n   job: 'Student'\n}\n\nvar kinan = { \n   name: 'Kinan Hossain',\n   age: 29,\n   job: 'Businessman'\n}\n\nvar jamil = { \n   name: 'Jemil Hossain',\n   age: 18,\n   job: 'Driver'\n}\n\nvar zawad = { \n   name: 'Zawad Ahmed',\n   age: 1,\n   job: 'Child'\n}\n\nvar zonayed = { \n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Developer'\n}\n</code></pre>\n<p>এখন প্রত্যেকটা অবজেক্ট আমাদের আলাদা আলাদা করে লিখতে হচ্ছে এখানে, কিন্তু এটা মনে হচ্ছে একইরকম প্যাটার্ন আমরা বারবার রিপিট করতেছি। এমন কিছু যদি থাকতো যেটা ইউজ করে আমরা একটা প্যাটার্ন বানাবো, তারপরে জাস্ট সেটাকে আমাদের ভ্যালুগুলো দিয়ে করলেই নতুন অবজেক্ট তৈরী হয়ে যেতো, তাইলে কেমন হতো? হ্যাঁ সেজন্যেই ফাংশন কন্সট্রাকটর ইউজ করা হয়। ফাংশন কন্সট্রাকটর ইউজ করে আমরা একটা ব্লু-প্রিন্ট তৈরী করি, পরে ঐটা থেকে সহজেই নতুন <code>new</code> অবজেক্ট তৈরী করতে পারি। উপরের সেইম কাজটাই ফাংশন কন্সট্রাকটর দিয়ে করবো। তার আগে ব্লু-প্রিন্ট তৈরী করে নিবোঃ</p>\n<pre><code>var Person = function(name, age, job) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n}\n</code></pre>\n<p>এখানে খেয়াল করবেন <code>Person</code> এর <code>P</code> বড় হাতের, কারন এটা একটা কনভেনশন। জাভস্ক্রিপ্ট কমিউনিটিতে ফাংশন কন্সট্রাকটর তৈরীর ক্ষেত্রে এটার নামকরনে প্রথম অক্ষর বড় হাতের দেওয়ার হয় যাতে সহজেই ধরা যায় এটা একটা ফাংশন কন্সট্রাকটর। যাই হউক উপরে <code>this.name = name</code> এই লাইনটা একটু কনফিউজিং, আর্গুমেন্টস এর ভ্যারিয়েবল ও ভিতরের (সম্ভাব্য)অবজেক্ট এর ভ্যারিয়েবল সেইম নামেই দেওয়া হয়েছে। এটাও একটা কনভেনশন, তাই আমি এভাবে দেখিয়েছি। কিন্তু এটাও সম্পূর্ণ ভ্যালিডঃ</p>\n<pre><code>var Person = function(nameArg, ageArg, jobArg) {\n   this.name = nameArg;\n   this.age = ageArg;\n   this.job = jobArg;\n}\n</code></pre>\n<p>যাই হউক আমি কনভেনশন মেনেই কোড লিখবো। পরে আরেকটা জিনিস কনফিউজিং এখানে। সেটা হচ্ছে <code>this</code> কীওয়ার্ড। ফাংশন এর ভিতরে <code>this</code> কীওয়ার্ড, তার মানে তো আমরা এই ভ্যালুগুলো গ্লোবাল অবজেক্ট এ অ্যাড করতে যাচ্ছি মনে হয়…? কিন্তু না! মনে করুন <code>this</code> এর উপরে <a href=\"https://js.zonayed.me/#/js-advance/352\">লেখায়</a> আমার চারটি রুলস এর কথা। এখানে ৪ নাম্বার রুলসটা ছিলো <strong><code>new</code></strong> কীওয়ার্ড রুলস। আর হ্যাঁ আমরাও এই ফাংশন কন্সট্রাকটর থেকে <code>new</code> কীওয়ার্ড দিয়ে নতুন অবজেক্ট তৈরী করবো। আর তাই এখানে <code>this</code> দিয়েছি। আমরা প্রথমে একটা অবজেক্ট তৈরী করিঃ</p>\n<pre><code>var samir = new Person('Samir Hossain', 22, 'Student');\n</code></pre>\n<p>এখানে <code>new</code> কীওয়ার্ড <code>this</code> এর জন্যে ভ্যালু নির্ধারণ করছে, আর সেই সাথে পুরোটা আমরা একটা ভ্যারিয়েবলে, এখানে <code>samir</code> এ অ্যাসাইন করায় <code>this</code> মানে এখন <code>samir</code> এখানে। এভাবেই বাতাসের উপরে <code>this</code> এর ভ্যালু নির্ধারণ করে <code>new</code> কীওয়ার্ড, আর সেই সাথে সেটা কোনোকিছুরে অ্যাসাইন করা হলে <code>this</code> এ সেটাকে ইন্ডিকেট করা শুরু করে। আর তাই এখানে এখন <code>samir.name</code> মানে <code>Samir Hossain</code> হবে। এখানে আমাদের আর্গুমেন্টসগুলো আমাদের ফাংশন কন্সট্রাকটরে গিয়েছে, সেখানে গিয়ে <code>this</code> এর সাথে অ্যাসাইন হয়েছে। আর এই <code>this</code> <code>new</code> কীওয়ার্ড ইউজ করায় <code>this</code> এর কন্টেক্সট চেঞ্জ হয়ে গেছে। গ্লোবাল অবজেক্টকে ইন্ডিকেট না করে <code>this</code> অ্যাসাইনকৃত ভ্যারিয়েবলকেই ইন্ডিকেট করবে। এখানে এই উদাহরনে সেটা <code>semir</code> কে। আর তাই আমরা ভ্যালুগুলো এভাবে অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>console.log(samir.name);\nconsole.log(samir.age);\nconsole.log(samir.job);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*pVFkBElGYdWqfRNd5nb7Tw.png\" alt=\"\" /></p>\n<p>আর এভাবেই আমরা নতুন নতুন যত ইচ্ছা অবজেক্ট তৈরী করতে পারবোঃ</p>\n<pre><code>var kinan = new Person('Kinan Hossain', 29, 'Businessman');\nvar jamil = new Person('Jamil Hossain', 18, 'Driver');\nvar jamil = new Person('Zawad Ahmed', 1, 'Child');\nvar zonayed = new Person('Zonayed Ahmed', 21, 'Developer');\n</code></pre>\n<p>এখন এখানে খুব সহজেই আমাদের সবগুলো অবজেক্ট তৈরী হয়ে গেলো। দেখতেও কত সুন্দর, আর সব কিছু গুছানো। এটাই ফাংশন কন্সট্রাকটরের কাজ মূলত।</p>\n<p>আপনি চাইলে সেইমভাবে ফাংশন কন্সট্রাকটরে মেথডও অ্যাড করতে পারবেন। আমরা অলরেডী একটা ফাংশন কন্সট্রাকটর তৈরী করে ফেলেছি। অলরেডী তৈরী করা হয়ে গেছে এমন ফাংশন কন্সট্রাকটরে কিভাবে নতুন মেথড বা ভ্যারিয়েবল ঢুকাতে হবে সেগুলো নিয়ে পরের পর্বে আলোচনা করা হবে। তবে এখানে আমি নতুন আরেকটা কন্সট্রাকটর তৈরী করবো মেথডসহঃ</p>\n<pre><code>var Personwitmethod = function(name, age, job) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n   this.dateOfBirth = function() {\n      console.log(this.name + ' is born in ' + (2018 - this.age));\n   }\n}\n</code></pre>\n<p>এখন এটা থেকে একটা অবজেক্ট তৈরী করবোঃ</p>\n<pre><code>var samirwithmethod = new Personwitmethod('Samir Hossain', 22, 'Student');\n</code></pre>\n<p>এখন ভ্যারিয়েবলগুলোকে তো আগের মতোই অ্যাক্সেস করতে পারবেন, সেই সাথে মেথডটাকেও অ্যাক্সেস করতে পারবেনঃ</p>\n<pre><code>samirwithmethod.dateOfBirth();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0oyV9aFTBrkllnPJ6nvPHA.png\" alt=\"\" /></p>\n<p>এভাবে একটা ফাংশন কন্সট্রাকটর ইউজ করে যতো ইচ্ছা অবজেক্ট তৈরী করতে পারবেন সহজেই। আশা করি এটা নিয়ে আর সমস্যা হবে না।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","javascript-advance","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-অ্যাডভান্স","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-08T16:39:12.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)","thumb_img_path":"/images/jsadvanced.jpeg","content":"<p>অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং এ ইনহেরিট্যান্স খুবই গুরুত্বপুর্ণ এবং কাজের একটা জিনিস। এটার সাহায্যে চাইলে সহজেই একটা অবজেক্ট এর ফিচার আরেকটা অবজেক্ট এ নেওয়া যায়। এখন এর মানে এখানে ক্লিয়ার না হলেও একটু বাস্তব উদাহরণ দিলে ঠিকমতো বুঝতে পারবেন।</p>\n<p>ধরি আমাদের একটা ফাংশন কন্সট্রাকটর আছে <code>Person</code> নামে। এখন একটা পার্সনের কি কি থাকতে পারে? নাম (<code>name</code>), বয়স(<code>age</code>), কি করে(<code>job</code>) এরকম কিছু থাকতে পারে। তাইলে এর জন্যে একটা ব্লু-প্রিন্ট তৈরী করলে এরকম হবেঃ</p>\n<pre><code>var Person = function(name, age, job) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n}\n</code></pre>\n<p>এখন এখান থেকে আমরা ইচ্ছামতো পার্সনের জন্যে অবজেক্ট তৈরী করতে পারবো। কিন্তু এখন যদি ধরি আমরা আরেকটা ব্লু-প্রিন্ট চাই <code>Teacher</code> নামে। এখন টিচারের কি কি থাকতে পারে? ধরে নিলাম টিচারেরও নাম(<code>name</code>), বয়স(<code>age</code>) ও কি করে(<code>job</code>) এগুলো আছে। সেই সাথে অতিরিক্ত আরেকটা আছে কোন সাবজেক্ট(<code>subject</code>) পড়ায়। এখন এই টিচারের জন্যে ব্লু-প্রিন্ট তৈরী করতে চাইলেঃ</p>\n<pre><code>var Teacher = function(name, age, job, subject) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n   this.subject = subject;\n}\n</code></pre>\n<p>কিন্তু এভাবে আমরা সেইম জিনিসগুলো পুনরায় ইউজ করাটা খুব ক্লিন দেখায় না। আমরা এখানে এমন কিছু করতে চাই যাতে আমরা <code>Person</code> থেকে পার্সনের ফিচারগুলো <code>Teacher</code> এ আনবো, এবং সেই সাথে টিচারের অতিরিক্ত যেটা আছে সেটা ডিফাইন করে দিবো। এটাকেই মূলত ইনহেরিট করা বলে। এখন ইনহেরিট্যান্স কয়েকরকমের হতে পারে। নিচে আমি বিস্তারিত আলোচনা করলাম।</p>\n<h4 id=\"\">প্রোটোটাইপ বেসড ইনহেরিট্যান্সঃ</h4>\n<p>ধরি গত পর্বে আমরা একটা ফাংশন কন্সট্রাকটর তৈরী করেছিলাম এরকমঃ</p>\n<pre><code>var PersonOnly = function(name, age, job) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n}\n</code></pre>\n<p>ধরি আমরা এই কন্সট্রাকটরটা ডিফাইন করে ফেলছি অলরেডি। কিন্তু এখন জন্ম তারিখ() বের করার জন্যে আরেকটা মেথড ঢুকাতে চাই এটার ভিতরে। কি করা যায়? আবার নতুন করে ডিফাইন করবো?? না! অবশ্যই না। এখান আমরা <code>prototype</code> ইউজ করে নতুন মেথডটাকে আগের থাকা <code>PersonOnly</code> এ ঢুকাতে পারবো এভাবেঃ</p>\n<pre><code>PersonOnly.prototype.dateOfBirth = function() {\n   console.log(this.name + ' born in ' + (2018 - this.age));\n}\n</code></pre>\n<p>এখন কন্সোলে এটা লিখুনঃ</p>\n<pre><code>console.log(PersonOnly.prototype);\n</code></pre>\n<p>দেখবেন এখানে আমাদের নতুন তৈরী করা মেথডটা আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*oZ97VERNJIK9Yja90rjurA.png\" alt=\"\" /></p>\n<p>এখন আমরা প্রোটোটাইপ চেইনের কথা আগের পর্বে জেনেছি। প্রোটোটাইপ চেইনের কারনে এখন এই মেথডটাকেও অ্যাক্সেস করা যাবে এই <code>PersonOnly</code> থেকে তৈরী করা অবজেক্টগুলো থেকে। ধরি নিচে একটা অবজেক্ট তৈরী করলাম এই কন্সট্রাকটর ফাংশন থেকেঃ</p>\n<pre><code>var zawad = new PersonOnly('Zawad Ahmed', 1, 'Child');\n</code></pre>\n<p>এখন আমরা আমাদের তৈরীকৃত মেথডটাকে অ্যাক্সেস করতে চাইলেঃ</p>\n<pre><code>zawad.dateOfBirth();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*uofIwFa_HKlydk4HgF9LRQ.png\" alt=\"\" /></p>\n<p>ব্যাস! এভাবেই আমরা অ্যাক্সেস করে ফেলতে পারতেছি। একইরকমভাবে আমরা ভ্যারিয়েবলকেও কন্সট্রাকটর ফাংশনে দিতে পারবো। যেমন আমরা নতুন আরেকটা ভ্যারিয়েবল দিলাম <code>PersonOnly</code> এঃ</p>\n<pre><code>PersonOnly.prototype.address = 'Bangladesh';\n</code></pre>\n<p>এখন এটা আমরা <code>zawad</code> অবজেক্ট থেকেও অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>console.log(zawad.address)\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ykZZmmUgm3BbqCswx6yp9A.png\" alt=\"\" /></p>\n<p>ম্যাজিক! এটাই ইনহেরিট্যান্স এর ম্যাজিক। এবার আসুন আমরা আরো বড় কিছুর দিকে যাই।</p>\n<h4 id=\"-1\">কন্সট্রাকটর ইনহেরিট্যান্সঃ</h4>\n<p>যেটা প্রথমে আমরা আলোচনা করেছিলাম। একটা পার্সন আর একটা টিচারের মধ্যে একটা বৈশিষ্ট্যে খালি পার্থক্য রয়েছে। এখন আমাদের সেজন্যে কি দুইটা পৃথক পৃথক ফাংশন কন্সট্রাকটর তৈরী করতে হবে? অবশ্যই না! আমাদের ইনহেরিট্যান্স আছে কি জন্যে?</p>\n<p>ধরি আমাদের একটা ফাংশন কন্সট্রাকটর আছে <code>Person</code> নামেঃ</p>\n<pre><code>var Person = function(name, age, job) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n}\n</code></pre>\n<p>এখন আমাদের টিচারদের জন্যেও একটা ফাংশন কন্সট্রাকটর দরকার যেখানে ঠিক এইগুলোও থাকবে সেই সাথে অতিরিক্ত একটা <code>subject</code> নামে আরেকটা থাকবে। এখন এটার জন্যে ফাংশন কন্সট্রাকটর এমন হতে পারেঃ</p>\n<pre><code>var Teacher = function(name, age, job, subject) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n   this.subject = subject;\n}\n</code></pre>\n<p>এখন আমাদের ইনহেরিট্যান্স থাকার কারনে এভাবে নতুন করে <code>Teacher</code> এর ভিতরে সবকিছু ডিফাইন করার কোনো দরকার নাই। আমরা চাইলে সহজেই <code>Person</code> থেকে <code>name</code>, <code>age</code> আর <code>job</code> নিয়ে আসতে পারি এভাবেঃ</p>\n<pre><code>var Teacher = function(name, age, job, subject) {\n   Person.call(this, name, age, job);\n   this.subject = subject;\n}\n</code></pre>\n<p>নতুন নতুন কিছু দেখা যাচ্ছে মনে হয়? হ্যাঁ, এটা একটু বুঝার জিনিস। এখানে আমরা ভিতরে <code>Person</code> কে কল করে এনেছি এবং <code>call</code> মেথড ইউজ করে <code>this</code> এর ভ্যালু ডিটারমাইন করে দিলাম। এখন এখানে <code>this</code> মানে <code>this</code> ই! কেনো? হ্যাঁ মনে করার চেষ্টা করুন। আমরা যখন এটা দিয়ে অবজেক্ট তৈরী করবো, তখন <code>new</code> কীওয়ার্ড ইউজ করবো। আর সেজন্যে আমাদের <code>this</code> এর নতুন কন্টেক্সট তৈরী হবে যেটা নতুন অবজেক্টটাকে ইন্ডিকেট করবে। তার মানে এখানে ডিফাইন করা <code>this</code> টা আসলে আমরা ভবিষ্যতে যে অবজেক্ট তৈরী করবো সেটাকেই ইন্ডিকেট করছে। এখন বাকি অংশ ঠিক আগের মতোইঃ</p>\n<pre><code>var kamaljeet = new Teacher('Kamaljeet Saini', 53, 'Teacher', 'CSE');\n</code></pre>\n<p>ব্যাস এভাবেই আমাদের নতুন অবজেক্ট তৈরী করা যাবে। এটা ঠিকঠাকমতোই কাজ করবেঃ</p>\n<pre><code>console.log(kamaljeet.name);\nconsole.log(kamaljeet.age);\nconsole.log(kamaljeet.job);\nconsole.log(kamaljeet.subject);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*hiPpaLpUB_FJkRQM5rZFBA.png\" alt=\"\" /></p>\n<p>ব্যাস! আমরা এভাবেই <code>Person</code> এর ফিচারগুলো <code>Teacher</code> এ ইনহেরিট করে নিয়ে আসলাম। এটা কিছুটা হলেও আমাদের লাইফ সহজ করে দিবে।</p>\n<p>এখন আমাদের এমনও ফাংশন কন্সট্রাকটরও থাকতে পারে যেটা কোনো প্যারামিটার নেয় না। বাই ডিফল্ট ভ্যালু সেট করা থাকতে পারে এরকমঃ</p>\n<pre><code>var GeneralPeople = function(name, age, job) { \n   this.name = name;\n   this.age = age;\n   this.job = job;\n}\n</code></pre>\n<p>এখন ধরি আরেকটা অবজেক্ট আছে <code>Athlete</code> নামে যেটা ঠিক <code>GeneralPeople</code> এর সবগুলো ফিচারই থাকবে। সাথে এক্সট্রা আরেকটা থাকবে। তো এখানেও সেইমভাবে ইনহেরিট্যান্স ইউজ করা যাবেঃ</p>\n<pre><code>var Athlete = function(name, age, job, prize) {\n   GeneralPeople.call(this);\n   this.prize = 100;\n}\n</code></pre>\n<p>ব্যাস এভাবেই আমরা কোনো প্যারামিটার/আর্গুমেন্ট ছাড়াও ইনহেরিট্যান্স নিয়ে কাজ করতে পারি। এখানে দুইটার মধ্যে কোনো পার্থক্যই নেই আসলে।</p>\n<p>আশা করি ইনহেরিট্যান্স নিয়ে আর কোনো সমস্যা থাকবে না। এখন থেকে আপনি রিয়েল লাইফ কোনো জিনিসেও ইনহেরিট্যান্স কাজে লাগাতে পারবেন আর আপনার ডেভেলপমেন্ট এর লাইফ সহজ করতে পারবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","javascript-advance","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-অ্যাডভান্স","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-18T16:38:53.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড","thumb_img_path":"/images/jsadvanced.jpeg","content":"<p>জাভাস্ক্রিপ্ট এ নতুন একটা জিনিসের সাথে ডেভেলপারদের পরিচয় করিয়ে দেওয়া হয় স্ট্রিক্ট মোড (Strict Mode)নামে। জাভাস্ক্রিপ্ট এ কিছু কিছু আশ্চর্য্যজনক বিহ্যেভিয়ার আছে, যেগুলো দূর করার জন্যেই মূলত এই স্ট্রিক্ট মোডের পরিচয় করিয়ে দেওয়া হয় ডেভেলপার কমিউনিটিতে। স্ট্রিক্ট মোডের বিপরীত, অর্থাৎ নন-স্ট্রিক্ট মোডকে সাধারণত ডেভেলপার কমিউনিটিতে স্লপি মোড (Sloppy Mode) বলা হয়। বাই ডিফল্ট আমরা স্ট্রিক্ট মোড মেনশন না করে দিলে সেই কোড স্লপি মোডেই কাজ করে।</p>\n<p>এখন এই স্ট্রিক্ট মোডের জন্যে আমাদের কি করতে হবে? হ্যাঁ এর জন্যে আমাদের খুব বেশী কিছু করতে হবে না। জাস্ট নিচের এই লাইনটা লিখে দিলেই কোড স্ট্রিক্ট মোডে চলে যাবেঃ</p>\n<pre><code>'use strict';\n</code></pre>\n<p>কিন্তু স্ট্রিক্ট মোড ইউজ করার ক্ষেত্রে আপনার একটু সতর্ক থাকা লাগবে। অনেক এনভারোমেন্ট বা ব্রাউজারে স্ট্রিক্ট মোড নাও থাকতে পারে। সেক্ষেত্রে স্ট্রিক্ট মোডওয়ালা কোডের বিহ্যেভিয়ার অন্যরকম হতে পারে। তাই এই স্ট্রিক্ট মোডের উপর খুব বেশী নির্ভরশীল না হওয়াই বেটার অপশন। বা আপনি যদি জানেন আপনার ওয়েব অ্যাপ্লিকেশন ঠিক কোন কোন এনভারোমেন্টে চলবে, এবং সেখানে স্ট্রিক্ট মোড সাপোর্ট করে কিনা, তাহলেই একমাত্র আপনি এটার উপর পুরোপুরি নির্ভরশীল হতে পারেন।</p>\n<p>স্ট্রিক্ট মোড ব্যাসিক্যালি জাভাস্ক্রিপ্ট এর সাথে পরিচয় করিয়ে দেওয়া হয়ঃ</p>\n<p>১। জাভাস্ক্রিপ্ট এর কিছু আন-স্পেসিফাইড এরর কে আরো বিস্তারিত এরর থ্রো করার জন্যে,</p>\n<p>২। জাভাস্ক্রিপ্ট এর ইঞ্জিনগুলোর কিছু কোড অপ্টিমাইজ করতে প্রবলেম হয়, সেক্ষেত্রে ঠিকমতো অপ্টিমাইজ না করা হলে কোড স্বাভাবিকভাবেই একটু স্লো রান করবে, স্ট্রিক্ট মোড সেই টাইপের কোডগুলো যাতে ইঞ্জিন ঠিকমতো অপ্টিমাইজ করতে পারে সেভাবে ফিক্স করতে সাহায্য করে।</p>\n<p>৩। আর জাভাস্ক্রিপ্ট এ এখনো নতুন নতুন জিনিস অ্যাড হচ্ছে, আরো হবে ভবিষ্যতে। আর তাই ভবিষ্যতে কোনো সিনট্যাক্স জাভাস্ক্রিপ্ট এ অ্যাড হতে পারে, ঐরকম সিনট্যাক্সগুলো ডেভেলপারদের লিখতে নিষেধ করে।</p>\n<blockquote>\n  <p>এই লেখার জন্যে আপনাকে আলাদা একটা স্ক্রিপ্ট ফাইল করে সেখানে কোড লিখে টেস্ট করতে হবে। আর তাই আমরা আমাদের পূর্বে ডিফাইনকৃত <a href=\"https://github.com/zonayedpca/basicJavaScriptBoilerplate/archive/master.zip\">এই ফাইলটা</a>তেই কাজ করবো উদাহরণ দেখানোর জন্যে। ফাইলটা ডাউনলোড করার পর আনজিপ করুন , তারপর <code>script.js</code> এর ভিতরে কোড লিখে <code>index.html</code> ফাইলটা আপনার ব্রাউজার দিয়ে ওপেন করে ডেভেলপার কন্সোল ওপেন করে আপনার কাঙ্ক্ষিত ফলাফল দেখবেন।</p>\n</blockquote>\n<h4 id=\"\">স্ট্রিক্ট মোড অ্যাপ্লাই করাঃ</h4>\n<p>স্ট্রিক্ট মোড সাধারণত দুইভাবে অ্যাপ্লাই করা যায়। একে তো আপনার লেখা পুরো স্ক্রিপ্ট এর উপর অ্যাপ্লাই করতে পারবেন। অথবা আপনি চাইলে শুধুমাত্র আপনার কাঙ্ক্ষিত ফাংশনগুলোর উপর অ্যাপ্লাই করতে পারবেন।</p>\n<p><strong>পুরো স্ক্রিপ্ট এ স্ট্রিক্ট মোড অ্যাপ্লাই করাঃ</strong> প্রথমে <code>script.js</code> এর ভিতরের সব কোড মুছে ফেলুন। তারপর নিচের এটা ট্রাই করুনঃ</p>\n<pre><code>'use strict'\n\nvar name = 'Zonayed Ahmed';\nvar age = 10;\n\naddress = 'Cumilla';\n\nconsole.log('My name is ' + name + ' and I am ' + age + ' years old!');\n\nfunction aFunc() {\n   job = 'Student';\n   console.log('A Function with Strict Mode Enabled');\n}\n\naFunc();\n\nconsole.log('I am a ' + job + ' And I am from ' + address);\n</code></pre>\n<p>ডাবল কোটেশন <code>””</code> বা সিঙ্গেল <code>‘’</code> দুইটাই চলবে এখানে। এই কোড রান করালে দেখবেন এরর আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*lILZ1-TQkfRHd_Mp0CykGQ.png\" alt=\"\" /></p>\n<p>৪ নাম্বার লাইন থেকে অ্যাড্রেস ফিক্স করে দিলেঃ</p>\n<pre><code>'use strict'\n\nvar name = 'Zonayed Ahmed';\nvar age = 10;\n\nvar address = 'Cumilla';\n\nconsole.log('My name is ' + name + ' and I am ' + age + ' years old!');\n\nfunction aFunc() {\n   job = 'Student';\n   console.log('A Function with Strict Mode Enabled');\n}\n\naFunc();\n\nconsole.log('I am a ' + job + ' And I am from ' + address);\n</code></pre>\n<p>এবার ফাংশনের ভিতর থেকে এরর আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*sc1J4NPWimiuG9H4pQTXIA.png\" alt=\"\" /></p>\n<p>এর মানে হচ্ছে এই স্ট্রিক্ট মোড পুরো স্ক্রিপ্ট এর উপরই অ্যাপ্লাই হয়েছে।</p>\n<p><strong>স্পেসেফিক ফাংশনের উপর অ্যাপ্লাই করাঃ</strong> এখন আমরা চাইলে শুধুমাত্র আমাদের একটা স্পেসিফিক ফাংশনের উপরেও স্ট্রিক্ট মোড অ্যাপ্লাই করতে পারি। আগের প্রোগ্রামেই এখন স্ট্রিক্ট মোডটা শুধুমাত্র ফাংশনের জন্যে দিবো। এজন্যে প্রথমে <code>script.js</code> ক্লিয়ার করে তারপর নিচের কোডগুলো লিখুনঃ</p>\n<pre><code>var name = 'Zonayed Ahmed';\nvar age = 10;\n\naddress = 'Cumilla';\n\nconsole.log('My name is ' + name + ' and I am ' + age + ' years old!');\n\nfunction aFunc() {\n   'use strict'\n   job = 'Student';\n   console.log('A Function with Strict Mode Enabled');\n}\n\naFunc();\n\nconsole.log('I am a ' + job + ' And I am from ' + address);\n</code></pre>\n<p>দেখুন সেইম প্রোগ্রামই লিখেছি, কিন্তু স্ট্রিক্ট মোডটা ফাংশনের ভিতর দেওয়া। তাই এটা শুধুমাত্র উক্ত ফাংশনের ক্ষেত্রেও কাজ করবে। আর বাইরে এটার কোনো ইফেক্ট পড়বে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*tivf3tF5QZI2jGT3II0WIw.png\" alt=\"\" /></p>\n<p>আর সেইম এই প্রোগ্রামটা নন-স্ট্রিক্ট বা স্লপি মোডে চালালে, যেটা জাভাস্ক্রিপ্ট এর ডিফলট বিহ্যেভিয়ার, আমাদের এক্ষেত্রে কোনোকিছু মেনশন করতে হবে নাঃ</p>\n<pre><code>var name = 'Zonayed Ahmed';\nvar age = 10;\n\naddress = 'Cumilla';\n\nconsole.log('My name is ' + name + ' and I am ' + age + ' years old!');\n\nfunction aFunc() {\n   job = 'Student';\n   console.log('A Function with Strict Mode Enabled');\n}\n\naFunc();\n\nconsole.log('I am a ' + job + ' And I am from ' + address);\n</code></pre>\n<p>আউটপুটঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*YH3m7xzx-wcSum1a_RROvQ.png\" alt=\"\" /></p>\n<p>এভাবেই আপনি চাইলে শুধুমাত্র আপনার স্পেসেফিক একটা ফাংশনের উপরে স্ট্রিক্ট মোড অ্যাপ্লাই করতে পারবেন।</p>\n<h4 id=\"-1\">স্ট্রিক্ট মোডে জাভাস্ক্রিপ্ট এর বিহ্যেভিয়ারঃ</h4>\n<p>এই মোডে জাভাস্ক্রিপ্ট এ ভুলে গ্লোবাল ভ্যারিয়েভল ডিক্লেয়ার করা যায় না। যেমন আমরা আমাদের <code>script.js</code> এ ফাইলে যদি নিচের এই কোড লিখিঃ</p>\n<pre><code>var name = 'Zonayed Ahmed';\nnama = 'Ahmed Zonayed';\n\nconsole.log(name);\n</code></pre>\n<p>এখন <code>index.html</code> ওপেন করে ডেভেলপার কন্সোল দেখলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*a7egjbuzfo7Hl3YIgZpkPA.png\" alt=\"\" /></p>\n<p>এই কোড পুরোপুরি কাজ করছে এবং <code>name</code> আর <code>nama</code> দুইটা পৃথক ভ্যারিয়েবল হিসাবে গণ্য হবে এখানে, যদিও <code>nama</code> কে দেখে মনে হচ্ছে এটা আসলে <code>name</code> হওয়ার কথা ছিলো, বানান ভুল করার কারণে এটাও আরেকটা গ্লোবাল ভ্যারিয়েবল হয়ে গেছে। এখন সেইম কোডগুলোই স্ট্রিক্ট মোডে কাজ করবে নাঃ</p>\n<pre><code>'use strict';\n\nvar name = 'Zonayed Ahmed';\nnama = 'Ahmed Zonayed';\n\nconsole.log(name);\n</code></pre>\n<p>আউটপুটঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*8WXw_Lv-QTzLBtgE_pnp9Q.png\" alt=\"\" /></p>\n<p>সিম্পলি এভাবে ভুলে আর কোনো ভ্যারিয়েবল গ্লোবাল ভ্যারিয়েবল হিসাবে সেট হবে না স্ট্রিক্ট মোডের কারণে।</p>\n<p><strong>অবজেক্ট এঃ</strong> ধরি আমাদের একটা অবজেক্ট আছে। এখন এইটাতে অলরেডি কয়েকটা প্রপার্টি আছে। এখন আমরা চাচ্ছি এই ডিফাইন করা অবজেক্টটাতে আর নতুন প্রপার্টি যাতে অ্যাসাইন না করা যায়। সে জন্যে <code>Object</code> এর একটা মেথড আছে <code>preventExtensions(...)</code> নামে। এটা প্রথম আর্গুমেন্ট হিসাবে যে অবজেক্টটাতে নতুন প্রপার্টি অ্যাসাইন করতে নিষেধ করতে চাচ্ছেন সেটা নিবে। এটা ব্যবহার করার পরও যদি আমি আবার নতুন আরেকটা অ্যাসাইন করে প্রিন্ট করতে চাইঃ</p>\n<pre><code>// Existing Object\nvar obj = {\n    name: 'Zonayed Ahmed',\n    job: 'Student'\n}\n\nObject.preventExtensions(obj);\n\n// Assign a new properties\nobj.age = 35;\n\n// Try to print this new one\nconsole.log(obj.age);\n</code></pre>\n<p>এখন আপনার <code>script.js</code> এ এই কোড সেইভ করে ব্রাউজারে <code>index.html</code> ফাইলটা ওপেন করলে দেখবেন এটা <code>undefined</code> আউটপুট দেখাচ্ছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*7H7apGpM_2URBRz0fsmPMQ.png\" alt=\"\" /></p>\n<p>কিন্তু সেইম জিনিসটা আমাদের স্ট্রিক্ট মোডে কাজ করবে না। কারন আমরা অলরেডি বলেই দিয়েছি নতুন প্রপার্টি না নেওয়ার জন্যে। কিন্তু তারপরেও নতুন প্রপার্টি দেওয়ার পরও এটা কোনো এরর দেখায় না। কোড স্ট্রিক্ট মোডে নিয়ে গেলে এটা পরিষ্কার এরর দেখাবেঃ</p>\n<pre><code>'use strict';\n// Existing Object\nvar obj = {\n    name: 'Zonayed Ahmed',\n    job: 'Student'\n}\n\nObject.preventExtensions(obj);\n\n// Assign a new properties\nobj.age = 35;\n\n// Try to print this new one\nconsole.log(obj.age);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*s8rsgRa8wshrsKWy8sJCZA.png\" alt=\"\" /></p>\n<p>একদম কি সমস্যা পুরো বলে দিয়েছে। এটাই স্ট্রিক্ট মোডের কাজ প্রধানত।</p>\n<p>এ ছাড়াও এই স্ট্রিক্ট মোডের আরো ইউজ কেস আছে। তবে এই মোড মূলত জাভাস্ক্রিপ্টকে আরো নিরাপদভাবে লিখতে সাহায্য করে।</p>"}],"es6":[{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-03T00:40:58.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এর অনেকগুলো ভার্শন আছে। পূর্বে <a href=\"https://with.zonayed.me/bn/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f%e0%a6%83-%e0%a6%a8%e0%a6%be%e0%a6%95%e0%a6%bf-%e0%a6%87%e0%a6%95%e0%a6%ae%e0%a6%be/\">এই লেখায়</a> এগুলো নিয়ে আলোচনা করেছি। কিন্তু আজকে এই লেখাতে স্পেশালি ইএস ৬ বা ইকমাস্ক্রিপ্ট ৬ নিয়ে আলোচনা করবো। নতুন কি আছে এটাতে সেগুলো জানবো।</p>\n<p>তার আগে বর্তমানে জাভাস্ক্রিপ্ট এর অবস্থা দেখে নেই। বর্তমানে জাভাস্ক্রিপ্ট এর কয়েকটা ভার্শন আছে।</p>\n<p><strong>ইএস ৫ঃ</strong> সবচেয়ে বহুল ব্যবহৃত এবং বর্তমান সময়ের সবগুলো ব্রাউজারে কমপ্লিটলি সাপোর্টেড জাভাস্ক্রিপ্ট এর ভার্শন। ইএস ৫ তাই চোখ বন্ধ করেই ইউজ করা শুরু করতে পারবেন যেহেতু এটা সব ব্রাউজারেই কমপ্লিটলি সাপোর্টেড। তাই কম্পাটিবিলিটি নিয়ে ভাবতে হবে না।</p>\n<p><strong>ইএস ৬ঃ</strong> ইএস ৬ বর্তমানে জাভাস্ক্রিপ্ট ডেভেলপারদের সবচেয়ে পছন্দনীয় ভার্শন। কিন্তু সমস্যা হচ্ছে এটা এখনো সব ব্রাউজারে কমপ্লিটলি সাপোর্টেড না। তবে বেশিরভাগ ফিচারই সাপোর্ট করে এখন। কিন্তু তারপরেও যেহেতু কমপ্লিটলি সাপোর্টেড না তাই ইউজ করার ক্ষেত্রে অনেকটা সতর্ক থাকা লাগে। মাঝে মধ্যে ট্রান্সপাইলার ইউজ করে ইএস ৬ এর কোডকে ইএস ৫ এ নেওয়া লাগে।</p>\n<p><strong>ইএস ২০১৬, ইএস ২০১৭, ইএস ২০১৮ঃ</strong> এগুলোও জাভাস্ক্রিপ্ট নতুন ভার্শন, তবে এদের বেশীরভাগ ফিচারই বর্তমান ব্রাউজারগুলোয় সাপোর্ট করে না। তাই এগুলো সরাসরি ইউজ করা যায় না।</p>\n<p>এখানে এই ভার্শনগুলোর মধ্যে ইএস ৫ সবচেয়ে সেইফ হলেও আপনি অনেক ফ্রেমওয়ার্কে হয়তো ইএস ৬ ব্যবহার করতে দেখবেন। তারমধ্যে বেশিরভাগ ফ্রেমওয়ার্কই আপনার কোডকে বান্ডেল করার সময় বা প্রোডাকশন ভার্শনে নিয়ে যাওয়ার সময় ব্রাউজার কম্পাটিবিলিটি নিশ্চিত করে নিয়ে যায়। সেক্ষেত্রে আপনাকে এগুলো নিয়ে ভাবতে হবে না। আপনি নিশ্চিন্তে ইএস ৬ ইউজ করতে পারবেন।</p>\n<p>তবে কেনো ইএস ৬? ইএস ৫ এ সমস্যা কোথায়? হ্যা জাভাস্ক্রিপ্ট ডেভেলপাররা অনেক স্মার্ট। সত্যিই স্মার্ট। ইএস ৫ এ একটা কাজ অনেক লাইন কোড লিখে করতে হলেও ইএস ৬ এ অল্প কোডে, অল্প ঝামেলায় সহজেই কাজ সেরে ফেলতে পারবেন। আবার জাভাস্ক্রিপ্ট অবজেক্ট ওরিয়েন্টেড হওয়ার পরেও ইএস ৫ এর অনেক কিছু অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজের সাথে মিল নেই। আমি বিস্তারিত এই সিরিজে আলোচনা করবো একটা একটা করে। আরো সবচেয়ে বড় ব্যাপার হলো জাভাস্ক্রিপ্ট এর যত লাইব্রেরী বা ফ্রেমওয়ার্ক দেখবেন সবাই ইএস ৬ ই ইউজ করে বাই ডিফল্ট। তাই আপনার ইএস ৬ জানা থাকতে হবে। তাছাড়া আরো স্মার্টলি কাজ করতে কে না পছন্দ করে। ইএস ৬ জানুন, স্মার্ট জাভাস্ক্রিপ্ট ডেভেলপার হউন। ইএস ৬ এ নতুন যে টপিকগুলো নিয়ে আমি আলোচনা করবোঃ</p>\n<ul>\n<li><code>let</code> ও <code>const</code> দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা</li>\n<li>ইফি(Immediately Invoked Function Expressions)</li>\n<li>টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড</li>\n<li>অ্যারো ফাংশন ও ‘this’ কীওয়ার্ড</li>\n<li>ডি-স্ট্রাকচারিং (Destructuring)</li>\n<li>অ্যারে (Array) মেথড</li>\n<li>স্প্রেড অপারেটর(Spread Operator)</li>\n<li>রেস্ট(Rest) প্যারামিটার</li>\n<li>ডিফল্ট(Default) প্যারামিটার</li>\n<li>ম্যাপ(Map)</li>\n<li>ক্লাস(Class) এবং সাব-ক্লাস</li>\n</ul>\n<p>এগুলো ছাড়াও আরো কিছু জিনিস আছে, তবে এগুলোই মেজর টপিক। আমি আমার এই ইএস ৬ এর লেখায় এগুলোর উপরেই ফোকাস করবো। প্রত্যেকটা ইএস ৫ এর সাথে তুলনা করে দেখানোর চেষ্টা করবো। আশা করি আপনি আগে থেকেই ইএস ৫ জানেন। আর যদি না জেনে না থাকেন তাহলে আগে ইএস ৫ কমপ্লিট করে আসতে হবে। নতুবা কিছু বুঝতে পারবেন না।</p>\n<p>এখন এর বাইরেও আরো নতুন কিছু আছে, যেগুলো আসলে ইকমাস্ক্রিপ্ট এর পরের ভার্শনে অন্তর্ভুক্ত। তাই এগুলো নিয়ে এই সিরিজে আলোচনা করবো না।</p>\n<p>এখন কোনো ভার্শন কোন কোন ব্রাউজার বা ইনভারোমেন্ট সাপোর্ট করে বা সাপোর্ট করলেও কতটুকু করে সেগুলো জানতে চাইলে নিচের এই লিঙ্ক থেকে দেখতে পারবেন। এই লিঙ্ক সময়ে সময়ে আপডেট হয়। তাই এখানে পুরো সবকিছুর লিস্ট পাবেনঃ</p>\n<ul>\n<li><a href=\"http://kangax.github.io/compat-table/es6/\" title=\"http://kangax.github.io/compat-table/es6/\"><strong>ECMAScript 6 compatibility table</strong></a></li>\n</ul>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming"],"date":"2018-07-03T05:37:53.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এ প্রথমেই আমার ব্যাক্তিগতভাবে যে জিনিসটা ভালো লেগেছিলো সেটা হচ্ছে যে টাইপের ডাটাই নেই না কেনো সবকিছুই একটা কীওয়ার্ড <code>var</code> দিয়ে ডিক্লেয়ার করতে হয়। হাই-লেভেল প্রোগ্রামিং ল্যাংগুয়েজ হওয়ার কারনে আমাদের স্পেসেফিকলি মেনশন করতে হয় না যে আমরা যে টাইপের ডাটা নিচ্ছি সেটা কি ইন্টিজার, নাকি ক্যারেক্টার নাকি স্ট্রিং… জাভাস্ক্রিপ্ট অটোমেটিক্যালি ডিটারমাইন করে নিতে পারে। আমরা শুধুমাত্র <code>var</code> ইউজ করেই ডিক্লেয়ারেশনের ঝামেলা সারতে পারি।</p>\n<p>তবে ইএস ৬ এ নতুন আরো দুইটা কীওয়ার্ড আসছে, <code>let</code> আর <code>const</code> । তবে নতুন আরো কীওয়ার্ড অ্যাড হওয়ায় ভয়ের কোনো কারন নাই, কারন ডাটা টাইপের সাথে বরাবরের মতোই এগুলোরও কোনো সম্পর্ক নাই। আপনি যেকোনো টাইপের ডাটাই ডিক্লেয়ার করতে এগুলো ইউজ করতে পারবেন। কিন্তু এদের মেইন পার্থক্য এদের বিহ্যেভিয়ারে।</p>\n<p>তবে নতুন এই দুই কীওয়ার্ডের মধ্যে আমরা প্রথমেই বলতে পারি <code>let</code> কিছুটা <code>var</code> এর মতোই। কিন্তু <code>const</code> একটু অন্যরকম। যেমন আমরা চাইলে <code>var</code> দিয়ে একটা ভ্যারিয়েবল ডিক্লেয়ার করে পরবর্তিতে আমরা চাইলে সেটার ভ্যালু চেঞ্জ করতে পারি, যেটা <code>let</code> এর ক্ষেত্রেও পুরোপুরি সম্ভব।</p>\n<p>ইএস ৫ এ <code>var</code> দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা এবং পরবর্তিতে ভ্যালু চেঞ্জ করাঃ</p>\n<pre><code>var a = 'Zonayed Ahmed';\nconsole.log('My name is: ' + a);\na = 'Zawad Ahmed';\nconsole.log('Now the name is: ' + a);\n</code></pre>\n<p>আউটপুট আসবে এভাবে, কোনো এরর নাই এবং এটা সম্পূর্ন ভ্যালিডঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OQFi65LP8TEECb8wKn75WA.png\" alt=\"\" /></p>\n<p>একইভাবে যদি সেইম কাজটা আমরা <code>let</code> দিয়ে করিঃ</p>\n<pre><code>let a6 = 'Zonayed Ahmed';\nconsole.log('My name is: ' + a6);\na6 = 'Zawad Ahmed';\nconsole.log('Now the name is: ' + a6);\n</code></pre>\n<p>এটারও সেইম আউটপুটই আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6sk1mleG8lq6XMRu74F_kg.png\" alt=\"\" /></p>\n<p>কিন্তু <code>const</code> একটু অন্যরকম। এটা আসলে যে নামে নামকরন করা হয়েছে এটার বিহ্যেভও অনেকটা ঐরকমই। <code>const</code> মানে কন্সট্যান্ট, যার ভ্যালু চেঞ্জ করা যায় না। তাই আপনি কোনোকিছু একবার <code>const</code> দিয়ে ডিক্লেয়ার করলে সেটার পরে আর পরিবর্তন করতে পারবেন না। করতে চাইলে এরর আসবে। উপরের উদাহরনটাই <code>const</code> দিয়ে করলেঃ</p>\n<pre><code>const b6 = 'Zonayed Ahmed';\nconsole.log('My name is: ' + b6);\nb6 = 'Zawad Ahmed';\nconsole.log('Now the name is: ' + b6);\n</code></pre>\n<p>আউটপুটে এরর আসবে, বলা হবে <strong>Uncaught TypeError: Assignment to constant variable:</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*IPz4AgKATRd5-PRDFrmfvg.png\" alt=\"\" /></p>\n<p>এর মানে হচ্ছে আপনি <code>const</code> দিয়ে ডিক্লেয়ার করা ভ্যারিয়েবলে অ্যাসাইনমেন্ট ইউজ করতে পারবেন না।</p>\n<p>এতো গেলো ব্যাসিক পার্থক্য। কিন্তু এর বাইরেও এই নতুন দুইটা কীওয়ার্ড <code>var</code> থেকে একটু আলাদা। সেটা হচ্ছে স্কোপিং এ।</p>\n<ul>\n<li><code>var</code> কীওয়ার্ড ফাংশন স্কোপ মেইন্টেইন করে</li>\n<li><code>let</code> ও <code>const</code> ব্লক(Block) স্কোপ মেইন্টেইন করে</li>\n</ul>\n<p><code>var</code> কীওয়ার্ড দিয়ে যদি আমরা কোনো ফাংশনের ভিতরে ভ্যারিয়েবল ডিক্লেয়ার করি তাহলে সেটার স্কোপ সেই ফাংশনের ভিতরে সবজায়গায় থাকবে। যেমন নিচে আমরা এই উদাহরনটায় দেখতে পারিঃ</p>\n<pre><code>function es5var() {\n   if(true) {\n      var a = 5;\n   }\n   console.log('Value: ' + a);\n}\n\nes5var();\n</code></pre>\n<p>এটা ঠিকঠাক আউটপুট দেখাবে। যারা অন্য লো লেভেলে কোনো প্রোগ্রামিং ল্যাংগুয়েজ জানেন তাদের কাছে এটা একটু আশ্চর্যই লাগতে পারে। এটা ঠিক এরকম আউটপুট দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Cb5A4eUfLDxk0FsIgEGvSA.png\" alt=\"\" /></p>\n<p>এখানে ভ্যারিয়েবল <code>a</code> <code>if</code> ব্লকের ভিতরে ডিক্লেয়ার করা হলেও এটার ভ্যালু এই ব্লকের বাইরে থেকেও অ্যাক্সেস করা যাচ্ছে। কারন হচ্ছে <code>var</code> ফাংশন স্কোপে কাজ করে।</p>\n<p>কিন্তু এবার সেইম কাজটাই যদি আমরা <code>let</code> বা <code>const</code> দিয়ে করিঃ</p>\n<pre><code>function es6var() {\n   if(true) {\n      const a = 6;\n   }\n   console.log('Value: ' + a);\n}\n\nes6var();\n</code></pre>\n<p>এটার আউটপুটে এরর আসবে, বা ব্লক স্কোপ বা গ্লোবাল স্কোপের মধ্যে যদি এই নামে ভ্যারিয়েবল ডিক্লেয়ার করা থাকে সেটা প্রিন্ট হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Y7C6VRP8vIgeomAGzhjk3w.png\" alt=\"\" /><strong>সেইম let এর ক্ষেত্রেও</strong></p>\n<p>কারন কি? হ্যাঁ কারন হচ্ছে <code>let</code> বা <code>const</code> হচ্ছে ব্লক স্কোপে কাজ করে। এখানে <code>if</code> এর ভিতরে ডিক্লেয়ার করা ভ্যারিয়েবল <code>a</code> <code>if</code> ব্লকের ভিতরের স্কোপই পাবে একমাত্র, এর বাইরে এটা অ্যাক্সেস করা যাবেনা, যদিও একই ফাংশনের ভিতরে।</p>\n<p>এখন আরো পার্থক্য হোইস্টিং এর মধ্যে, <code>var</code> দিয়ে কোনো ভ্যারিয়েবল ডিক্লেয়ার করার আগে ইউজ করা হলে সেটা <code>undefined</code> দেখায় হোইস্টিং এর কারনেঃ</p>\n<pre><code>console.log(aVar);\nvar aVar = 'I am defined here';\n</code></pre>\n<p>আউটপুট এরকম আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*AJ1krB3iXrhPLrdMGximQg.png\" alt=\"\" /></p>\n<p>কিন্তু <code>let</code> বা <code>const</code> দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করলে, বা ডিক্লেয়ার করার আগে সেই ভ্যারিয়েবল অ্যাক্সেস করতে চাইলে এরর আসবেঃ</p>\n<pre><code>console.log(varWith6);\nconst varWith6 = 'I am defined here';\n</code></pre>\n<p>এটার আউটপুটে এরর আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*VFLQMFKMKgGgJ2tdg7XIig.png\" alt=\"\" /></p>\n<p>এখানে এদেরকেও হোইস্টিং এর সিস্টেমে হোইস্টেড করা হয়। কিন্তু ‘<strong><em>Temporal Dead Zone</em></strong>’ এর কারনে আমরা চাইলেও এদেরকে ডিক্লেয়ার করার আগে অ্যাক্সেস করতে পারি না। একটা ভ্যারিয়েবল ডিক্লেয়ার করা হলে সেটাকে অ্যাক্সেস করা যায়, এখন ভ্যারিয়েবল ডিক্লেয়ারেশন আর সেটার স্কোপ পাওয়ার মধ্যে একটা সময় আছে, ঐ সময়টাকেই ‘<strong><em>Temporal Dead Zone</em></strong>’ বলে।</p>\n<p>নিচে আরেকটা উদাহরন দেখিয়ে আজকের এই লেখা শেষ করবো। আমাদের কেনো এদের মধ্যকার পার্থক্য ঠিকমতো বুঝতে হবে সেটাই ফোকাস করা হবে এই উদাহরনে। সেইম দুইটা কোডের আউটপুট ভিন্ন আসবে শুধুমাত্র ভ্যারিয়েবল ডিক্লেয়ারশনের জন্যে <code>var</code> এর বদলে <code>let</code> বা <code>const</code> ইউজ করায়।</p>\n<p><code>var</code> দিয়ে লেখা একটা ছোটো প্রোগ্রামঃ</p>\n<pre><code>var i = 13;\n\nfor(var i = 0; i &lt; 5; i++) {\n   console.log(i);\n}\n\nconsole.log('Value: ' + i);\n</code></pre>\n<p>এটার আউটপুটঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*IouGd7XpN6VubhdRU5KeFw.png\" alt=\"\" /></p>\n<p>সেইম প্রোগ্রাম ইএস ৬ এর <code>let</code> বা <code>const</code> ইউজ করলেঃ</p>\n<pre><code>let i6 = 13;\n\nfor(let i6 = 0; i6 &lt; 5; i6++) {\n   console.log(i6);\n}\n\nconsole.log('Value: ' + i6);\n</code></pre>\n<p>এটার আউটপুট আসবে এরকমঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7mTaqmXKSOSo5bZbtkWIlg.png\" alt=\"\" /></p>\n<p>এখানে <code>let</code> এর ক্ষেত্রে ভ্যারিয়েবল দুইটা সেইম নামের হলেও এরা আলাদা হয়ে গেছে ব্লক স্কোপিং এর কারনে। <code>for</code> এর ভিতরের টা এই ব্লকের জন্য লোকাল ভ্যারিয়েবল, আর এর বাইরে যেটা আছে সেটা গ্লোবাল ভ্যারিয়েবল। মনে রাখবেন এই উদাহরনের জন্যে কিন্তু আপনি <code>const</code> ইউজ করতে পারবেন না, কারন এখানে গ্লোবাল ভ্যারিয়েবলের প্রভাব <code>for</code> এর ভিতরেও আছে। তাই এটার ভিতরে যদি আবার অ্যাসাইন করতে চান সেইম ভ্যারিয়েবল তাহলে এরর পাবেন <code>const</code> এর ক্ষেত্রে।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-03T12:40:48.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)","thumb_img_path":"/images/es6.jpeg","content":"<p>আমরা ইএস ৫ এ জেনেছি ইফির কথা, ইফি কিভাবে এবং কেনো ইউজ করা হয় সেটা নিয়েও <a href=\"https://with.zonayed.me/bn/%e0%a6%95%e0%a6%ae%e0%a7%8d%e0%a6%aa%e0%a6%bf%e0%a6%89%e0%a6%9f%e0%a6%be%e0%a6%b0-%e0%a6%b8%e0%a6%be%e0%a6%87%e0%a6%a8%e0%a7%8d%e0%a6%b8/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f%e0%a6%83-%e0%a6%87%e0%a6%ab%e0%a6%bf-immediately-invoked-function-expressions-ii/\">সেখানে</a> বিস্তারিত আলোচনা করা হয়েছে। চাইলে আগের <a href=\"https://with.zonayed.me/bn/%e0%a6%95%e0%a6%ae%e0%a7%8d%e0%a6%aa%e0%a6%bf%e0%a6%89%e0%a6%9f%e0%a6%be%e0%a6%b0-%e0%a6%b8%e0%a6%be%e0%a6%87%e0%a6%a8%e0%a7%8d%e0%a6%b8/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f%e0%a6%83-%e0%a6%87%e0%a6%ab%e0%a6%bf-immediately-invoked-function-expressions-ii/\">আর্টিকেলটা</a> পড়ে আসতে পারবেন।</p>\n<p>প্রাইভেসি মেইন্টেইন করতে চাইলে বা আপনি যদি চান কোনো ফাংশনের ভিতরের ডাটা বাইরে এক্সপোজ করতে না চান তাইলে ইফি খুব ভালোভাবে কাজে লাগতে পারে। যেমনঃ</p>\n<pre><code>(function aDemoFunc() {\n   var msg = 'Hello World';  \n   console.log(msg);\n})();\n</code></pre>\n<p>এটা সরাসরিই আউটপুট দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*kgogo9YVWw1JKlRkCjunQQ.png\" alt=\"\" /></p>\n<p>এখন এর বাইরে যদি এই ফাংশনটাকে আবার কল করতে চাই তাহলে এটা এরর দেখাবেঃ</p>\n<pre><code>aDemoFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4qrsHBEt3ivC1Pr1upIOsg.png\" alt=\"\" /></p>\n<p>সেইমভাবে যদি আমরা ভ্যারিয়েবল <code>msg</code> টাকেও অ্যাক্সেস করতে চাই, সেটাও অসম্ভবঃ</p>\n<pre><code>console.log(msg);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*opAP3n44LKifzdovuZOxXw.png\" alt=\"\" /></p>\n<p>ইফি ইউজ করে এরকমভাবেই প্রাইভেট ফাংশন এবং সেই সাথে প্রাইভেট ভ্যারিয়েবল ক্রিয়েট করা যায়।</p>\n<p>কিন্তু ইএস ৬ এ <code>let</code> বা <code>const</code> ব্লক লেভেলের স্কোপিং হওয়াতে ব্যাপারটা আরো অনেক সোজা হয়ে গিয়েছে। আমরা কোনো প্রাইভেট ফাংশন বা ভ্যারিয়েবল ক্রিয়েট করতে চাইলে জাস্ট সেটাকে <code>let</code> বা <code>const</code> দিয়ে ডিক্লেয়ার করে সেটাকে এই ব্র্যাকেটস<code>{}</code> এর ভিতরে রেখে দিলেই এরা প্রাইভেট হয়ে যাবে। এদেরকে বাইরে থেকে অ্যাক্সেস করা যাবে নাঃ</p>\n<pre><code>{\n   let a = 5;\n   let b = 10;\n   const pi = 3.1416;\n   console.log(a + b + pi);\n}\n</code></pre>\n<p>এরা ঠিকঠাক মতো আউটপুট দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aPgHNPsNShuKGuN6asVXEA.png\" alt=\"\" /></p>\n<p>কিন্তু এখন যদি আমরা এই ভ্যারিয়েবলগুলোকে এই <code>{}</code> ব্র্যাকেটসগুলোর বাইরে থেকে অ্যাক্সেস করতে চাই তাহলে এরর আসবেঃ</p>\n<pre><code>{\n   let a = 5;\n   let b = 10;\n   const pi = 3.1416;\n}\nconsole.log(a + b + pi);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Tft4IiDAJVCghgegpyNk-w.png\" alt=\"\" /></p>\n<p>সেইমভাবে ফাংশনের ক্ষেত্রেও। আমরা যদি <code>var</code> দিয়ে ডিক্লেয়ার করে ফাংশন এক্সপ্রেশন নেই তাহলে সেটার স্কোপ <code>var</code> এর স্কোপ মতেই হবে। এই ফাংশনকে এই<code>{}</code> ব্র্যাকেটস এর ভিতরে রাখার পরও দেখবেন বাইরে থেকে অ্যাক্সেস করা যাচ্ছেঃ</p>\n<pre><code>{var myName = function() {\n var a = 'Zonayed Ahmed';\n console.log(a);\n}}\n\nmyName();\n</code></pre>\n<p>এটা ঠিকঠাক আউটপুট দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DdOqDp48eVYs0w3cIKdboA.png\" alt=\"\" /></p>\n<p>কিন্তু সেইম ফাংশনটাকেই যদি আমরা <code>let</code> বা <code>const</code> দিয়ে ডিক্ল্যেয়ার করে নেই, তাহলে সেটা প্রাইভেট ফাংশন হয়ে যাবে ব্লক স্কোপিং এর কারনেঃ</p>\n<pre><code>{const myName6 = function() {\n const a = 'Zonayed Ahmed';\n console.log(a);\n}}\n\nmyName6();\n</code></pre>\n<p>এটা এরর আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Lngw-gCuuL1j4gstNzXWxQ.png\" alt=\"\" /></p>\n<p>এভাবেই আপনি ইএস ৬ এ খুব সহজেই ইফির ফাংশানালিটি পেয়ে যাবেন।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-03T17:40:42.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড","thumb_img_path":"/images/es6.jpeg","content":"<p>আমাদের জাভাস্ক্রিপ্ট এ একটা স্ট্রিং কয়েকটা ভ্যারিয়েবলসহ প্রিন্ট করাতে চাইলে আমাদের সেই ভ্যারিয়েবলগুলোকে কনক্যাট করে নিতে হয় <code>+</code> চিহ্নের সাহায্যে। ব্যাপারটা আসলেই একটু বিরক্তকর ছিলো। অনেক বড় স্ট্রিং এর ক্ষেত্রে খুব সহজেই হারিয়ে যাওয়ার মতো অবস্থা ছিলো। যেমন নিচের এই উদাহরনে আমি আমার কিছু ইনফরমেশন কয়েকটা ভ্যারিয়েবল থেকে নিয়ে প্রিন্ট করাতে চাচ্ছিঃ</p>\n<pre><code>var name = 'Zonayed Ahmed',\n    age = 21,\n    work= 'Student';\n\nconsole.log('My name is ' + name + ' and I\\'m ' + age + 'years old! Currently I\\'m a ' + work);\n</code></pre>\n<p>এটা এক্সিকিউট করলে এভাবে আউটপুট আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*m-VDuZZO0mZMgQvHvHuKhg.png\" alt=\"\" /></p>\n<p>এখানে আমাদের প্লাস <code>+</code> চিহ্ন দিয়ে ভ্যারিয়েবলগুলোকে আমার স্ট্রিংগুলোর সাথে কনক্যাট করতে হয়েছে। এটাও ঠিক আছে, কিন্তু বার বার এভাবে <code>‘</code> দিয়ে স্ট্রিং গুলোকে বেধে দিয়ে <code>+</code> দিয়ে এভাবে ভ্যারিয়েবলগুলোকে অ্যাক্সেস করা ঝামেলাপূর্ণ। অনেকসময় দেখা যায় বড় স্ট্রিং এর ক্ষেত্রে দুই একটা <code>‘</code> মিস হয়ে গেছে। আবার দেখুন এখানে <code>I’m</code> লেখার জন্যে এসকেপ ক্যারেক্টার <code>\\</code> ইউজ করতে হয়েছে। ওভারল এটা একটা মেস হয়ে গেছে।</p>\n<p>আর এইজন্যেই ইএস এ এসেছে টেমপ্লেট লিটারেল। এর প্রধান কাজ হচ্ছে এই স্ট্রিং কনক্যাটিনেশনের কমপ্লেক্সিটি কমানো। টেমপ্লেট লিটারেলে আমরা এই চিহ্ন ``` (ব্যাকটিক, ট্যাব <code>tab</code> কীর উপরে) ইউজ করে পুরো স্ট্রিং টাকে বেঁধে ফেলি, তারপর ভিতরে কোনো ভ্যারিয়েবল বা সিম্পল ক্যাল্কুলেশন করতে চাইলে <code>${}</code> এর ভিতরে রাখি। সেইম জিনিসটাই টেমপ্লেট লিটারেল দিয়ে প্রিন্ট করলেঃ</p>\n<pre><code>const name6 = 'Zonayed Ahmed',\n      age6 = 21,\n      work6 = 'Student';\n\nconsole.log(`My name is ${name6} and I\\'m ${age6}years old! Currently I\\'m a ${work6}`);\n</code></pre>\n<p>এটার আউটপুট আসবে এরকমভাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*HXeGHjMz5dOZDg8dLztD6g.png\" alt=\"\" /></p>\n<p>এখানে আমি <code>const</code> দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করলেও আপনি চাইলে <code>var</code> বা <code>let</code>ও ইউস করতে পারবেন। আমি জাস্ট যেহেতু ইএস ৬ এ কোড লিখছি, তাই পুরোটাই ইএস ৬ এ লিখলাম।</p>\n<p>এই কোডটা অবশ্যই আগেরটার চাইতে ঝামেলা কম এবং দেখতে অনেকটা ক্লিন দেখাচ্ছে। সেই সাথে ভিতরে আপনি যেকোনো ক্যারেক্টারই ইউজ করতে পারবেন এসকেপ না করে। স্মার্ট!</p>\n<p>আরো কিছু উদাহরন টেমপ্লেট লিটারেল নিয়েঃ</p>\n<pre><code>function calculateAge(dob) {\n   return `I'm ${2018 - dob} years old!`;\n}\n\ncalculateAge(1996);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*eNdYHe9i70VrROElEGJylw.png\" alt=\"\" /></p>\n<p>এভাবেই ইএস ৬ এর টেমপ্লেট লিটারেল ইউজ করে আরো ক্লিন এবং সহজভাবে, সুন্দর করে কোড লিখতে পারবেন কোনো ঝামেলা ছাড়াই।</p>\n<h4 id=\"\">নতুন স্ট্রিং মেথডঃ</h4>\n<p>ইএস৬ এর সাথে আরো কিছু নতুন স্ট্রিং মেথড এসেছে। তারমধ্যে এখানে আমি খুবই ইউজফুল কিছু মেথড নিয়ে ডিসকাস করবো।</p>\n<ul>\n<li>একটা স্ট্রিং কোনো স্পেসেফিক ক্যারেক্টার/স্ট্রিং দিয়ে শুরু হয়েছে কিনা সেটার জন্যে <strong>startsWith</strong> মেথড</li>\n<li>একটা স্ট্রিং কোনো স্পেসেফিক ক্যারেক্টার/স্ট্রিং দিয়ে শেষ হয়েছে কিনা সেটার জন্যে <strong>endsWith</strong> মেথড</li>\n<li>একটা স্ট্রিং কোনো স্পেসেফিক ক্যারেক্টার/স্ট্রিং আছে কিনা সেটার জন্যে <strong>includes</strong> মেথড</li>\n<li>একটা স্ট্রিং স্পেসেফিক অ্যামাউন্টে রিপিট করানোর জন্যে <strong>repeat</strong> মেথড</li>\n</ul>\n<p><strong>startsWith মেথডঃ</strong></p>\n<p>আপনার কাঙ্ক্ষিত স্ট্রিং নির্দিষ্ট কোনো ক্যারেক্টার বা ক্যারেক্টার সেট দিয়ে শুরু হয়েছে কিনা সেটা দেখতেই এই মেথড ইউজ হয়। এটা সবসময় Boolean ভ্যালু <code>true</code> অথবা <code>false</code> রিটার্ন করেঃ</p>\n<pre><code>const start = 'My name is Khan';\nstart.startsWith('My');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*fe_OgcRK55p_KDPFhS8e1w.png\" alt=\"\" /></p>\n<p><strong>endsWith মেথডঃ</strong></p>\n<p>আপনার কাঙ্ক্ষিত স্ট্রিং নির্দিষ্ট কোনো ক্যারেক্টার বা ক্যারেক্টার সেট দিয়ে শেষ হয়েছে কিনা সেটা দেখতেই এই মেথড ইউজ হয়। এটাও সবসময় Boolean ভ্যালু <code>true</code> অথবা <code>false</code> রিটার্ন করেঃ</p>\n<pre><code>const end = 'I love programming';\nend.endsWith('My');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DFIoYqksBxiKyABC9AN5wg.png\" alt=\"\" /></p>\n<p><strong>includes মেথডঃ</strong></p>\n<p>আপনার কাঙ্ক্ষিত স্ট্রিং নির্দিষ্ট কোনো ক্যারেক্টার বা ক্যারেক্টার সেট আছে কিনা সেটা দেখতেই এই মেথড ইউজ হয়। এটাও সবসময় Boolean ভ্যালু <code>true</code> অথবা <code>false</code> রিটার্ন করেঃ</p>\n<pre><code>const inc = 'I love programming with JavaScript';\ninc.includes('with');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*BqC-QYZZBs7ndiHrHuXHdQ.png\" alt=\"\" /></p>\n<p><strong>repeat মেথডঃ</strong></p>\n<p>একটা স্ট্রিংকে কয়েকবার রিপিট করতে চাইলে এই মেথড ইউজ করা হয়ঃ</p>\n<pre><code>const rpt = 'Hello World ';\nrpt.repeat(5);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*AXMoXWZ53asdvMWd8sK3rQ.png\" alt=\"\" /></p>\n<p>আরো কিছুঃ</p>\n<pre><code>console.log(`I always want to say ${'Alhamdulillah '.repeat(5)}!`);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*G4sAKSh6AhDOvmlSepOa4Q.png\" alt=\"\" /></p>\n<p>মনে রাখবেন এটা স্ট্রিং এর মেথড, একমাত্র স্ট্রিং এর সাথেও কাজ করবে, নাম্বার বা অন্যকোনোকিছুর সাথে কাজ করবে না।</p>\n<p>এখানে উদাহরনগুলোয় আমি <code>const</code> ইউজ করলেও আপনি <code>var</code> ও ইউজ করতে পারবেন। আমি শুধুমাত্র ইএস৬ এ কোড লেখায় যতটুকু সম্ভব সবগুলোই ইএস৬ এ রাখতে চেয়েছি… এটা ভালো প্র্যাকটিস।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট"],"date":"2018-07-11T16:40:17.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড ","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এর ইএস৬ এ নতুন আরেক সংযোজন হচ্ছে অ্যারো ফাংশন। অনেকের কাছে ফ্যাট অ্যারো(Fat Arrow) ফাংশন বলেও পরিচিত। এটা আসলে নতুন কিছু নয়, জাস্ট সিন্ট্যাক্টিক্যালি দেখতে সুন্দর এবং অনেকটা ক্লিন। প্রোগ্রামিং ল্যাংগুয়েজের ওয়ার্ল্ডে সিন্ট্যাক্টিক শুগ্যার(Syntactic Sugar) বলে একটা কথা আছে। এর মানে হচ্ছে দেখতে সুন্দর লাগে, ক্লিন মনে হয় এরকম সিনট্যাক্স। যদিও অ্যারো ফাংশনের ফাংশানালিটি <a href=\"https://with.zonayed.me/%e0%a6%ac%e0%a7%8d%e0%a6%b2%e0%a6%97/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f%e0%a6%83-%e0%a6%ab%e0%a6%be%e0%a6%82%e0%a6%b6%e0%a6%a8-%e0%a6%a8%e0%a6%bf%e0%a7%9f/\">ইএস৫ এর ফাংশনের</a> মতোই অনেকটা, কিন্তু কিছু পার্থক্য আছে। সেগুলো আমি একটা একটা করে এই পর্বে আলোচনা করবো।</p>\n<p>ইএস৫ এ ফাংশন এক্সপ্রেশন আমরা এভাবে লিখিঃ</p>\n<pre><code>var aFunc = function() {\n   console.log('A Demo ES5 Function Expression');\n}\n</code></pre>\n<p>এবার এই ফাংশনকে কল করলেঃ</p>\n<pre><code>aFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Gur52SEDmEAOJELiS6W63w.png\" alt=\"\" /></p>\n<p>এখন সেই ফাংশনটাকেই অ্যারো ফাংশনে লিখলেঃ</p>\n<pre><code>const aFunc6 = () =&gt; console.log('A Demo ES6 Arrow Function');\n</code></pre>\n<p>এবার এই ফাংশন রান করাতে চাইলেঃ</p>\n<pre><code>aFunc6();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-MWCIOSpC2uC4azsSrzgwQ.png\" alt=\"\" /></p>\n<p>এখানে দেখুন এদের মধ্যে পার্থক্যগুলো। ইএস৬ এর অ্যারো ফাংশনে আমাদের <code>function</code> কীওয়ার্ড লাগতেছে না। আবার অন্যদিকে নতুন একটা সিনট্যাক্স <code>=&gt;</code> লাগতেছে। এজন্যেই এটাকে অ্যারো ফাংশন বলা হয়। আর কোড অনেকটাই ক্লিন মনে হচ্ছে অ্যারো ফাংশনের বেলায়। যে জায়গায় ইএস৫ এর ফাংশনে কয়েকলাইন লিখতে হয়েছে, বা আমাদের <code>{}</code> এই ব্র্যাকেটসগুলো ইউজ করতে হয়েছে, সেখানে অ্যারো ফাংশনের বেলায় লাগতেছে না। অ্যারো ফাংশন অনেকটাই স্মার্ট। নিচে কিছু উদাহরণ দিয়ে অ্যারো ফাংশনের স্মার্টনেস দেখানো হলো।</p>\n<p><strong>অটোম্যাটিক রিটার্নঃ</strong> ধরি আমাদের এরকম একটা অ্যারে আছেঃ</p>\n<pre><code>const dob = [1996, 1986, 2017, 1989];\n</code></pre>\n<p>এখন আমি <a href=\"https://with.zonayed.me/bn/%E0%A6%AC%E0%A7%8D%E0%A6%B2%E0%A6%97/%E0%A6%A8%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%AF%E0%A6%A6%E0%A6%BF%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA-2/\"><code>map()</code> ইউজ করে</a> প্রত্যেকটার জন্যে বর্তমান বয়স বের করতে চাই। মানে এখানে থাকা বছরের সাথে আমাদের বর্তমান বছর(এই লেখার সময় 2018) তুলনা করে কার কতো বয়স সেটার আরেকটা অ্যারে করতে চাই। প্রথমে ইএস৫ এঃ</p>\n<pre><code>const currentAge5 = dob.map(function(oneDob) {  \n   return 2018 - oneDob;\n})\n</code></pre>\n<p>এবার <code>currentAge5</code> এ আমরা সবার বর্তমান বয়সের আরেকটা অ্যারে পাবো। map() কিভাবে কাজ করে না জেনে থাকলে <a href=\"https://with.zonayed.me/bn/%E0%A6%AC%E0%A7%8D%E0%A6%B2%E0%A6%97/%E0%A6%A8%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%AF%E0%A6%A6%E0%A6%BF%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA-2/\">এখান থেকে</a> দেখে নিতে পারেন।</p>\n<pre><code>currentAge5;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*QUOgTgqvykx9APVbt0-L6g.png\" alt=\"\" /></p>\n<p>এখন সেইম কোডটা যদি আমি ইএস ৬ এর আরো ফাংশন দিয়ে লিখিঃ</p>\n<pre><code>const currentAge6 = dob.map(oneDob =&gt; 2018 - oneDob);\n</code></pre>\n<p>এবার এটা প্রিন্ট করলে সেইম রেজাল্টই আসবেঃ</p>\n<pre><code>currentAge6;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*9sSvRMEVGc6Sik9LCM76aQ.png\" alt=\"\" /></p>\n<p>এখন এখানে দেখেন অ্যারো ফাংশন ইউজ করাতে কোড কত ছোটো এবং ক্লিন দেখাচ্ছে। আরো একটা জিনিস খেয়াল করবেন। অ্যারো ফাংশনের ক্ষেত্রে আমাদের <code>return</code> ইউজ করতে হয়নি। কারণ এরকম একলাইনের এক্সপ্রেশন থাকলে, সেখানে রিটার্ণ করার মতো কিছু থাকলে, অ্যারো ফাংশন সেটাকে অটোম্যাটিক্যালি <code>return</code> করে।</p>\n<p><strong>একাধিক আর্গুমেন্টঃ</strong> উপরের উদাহরণে দেখবেন আমাদের শুধুমাত্র একটা আর্গুমেন্টই ছিলো। এখন আমরা জানি <code>map()</code> তিনটা আর্গুমেন্ট নেয়। এখন একাধিক আর্গুমেন্ট থাকলে অ্যারো ফাংশনে আর্গুমেন্ট গুলো অবশ্যই <code>()</code> ব্র্যাকেটস এর ভিতরে থাকতে হবে। এখন একটা থাকলেও সেটাকে ব্র্যাকেটস এ ঢুকাতে পারবেন, কিন্তু কোড যত কম লেখা যায় ততোই তো ভালো! আগের উদাহরণটায় দুইটা আর্গুমেন্ট থাকলেঃ</p>\n<pre><code>const currentAge62 = dob.map((oneDob, index) =&gt; `${index}: ${2018 - oneDob}`);\n</code></pre>\n<p>এবার এটা রান করালেঃ</p>\n<pre><code>currentAge62;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0bmo9rF_AfDKBIRyvALE5Q.png\" alt=\"\" /></p>\n<p><strong>একাধিক লাইনঃ</strong> এখন আমাদের একাধিক লাইনের কোড থাকলে কি হবে? হ্যাঁ তখন আর অটো রিটার্ন হবে না, আমাদের বলে দিতে হবে <code>return</code> কীওয়ার্ড ইউজ করে জাস্ট ইএস৫ এর মতোইঃ</p>\n<pre><code>const currentAge622 = dob.map(oneDob =&gt; {\n   const age = 2018 - oneDob;\n      return age;\n});\n</code></pre>\n<p>এবার এটা রান করালেঃ</p>\n<pre><code>currentAge622;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*mPhviavifEkyQg1HmHJAEQ.png\" alt=\"\" /></p>\n<p>এখন এখানে আরেকটা জিনিস খেয়াল করবেন। অ্যারে ফাংশনের ক্ষেত্রে আমাদের <a href=\"https://with.zonayed.me/%e0%a6%ac%e0%a7%8d%e0%a6%b2%e0%a6%97/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f%e0%a6%83-%e0%a6%b8%e0%a7%8d%e0%a6%9f%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%9f%e0%a6%ae/\">ফাংশন এক্সপ্রেশন</a> ইউজ করতে হচ্ছে। এখন ইএস৫ এর ফাংশন এক্সপ্রেশনের ক্ষেত্রেও আমরা <a href=\"https://js.zonayed.me/js-basic/290\">হোইস্টিং</a> এর কারণে একটা ফাংশন ডিফাইন করার আগে সেটাকে কল করতে পারি না। ইএস৫ এর ফাংশন স্টেটমেন্ট এ সেটা সম্ভব ছিলো হোইস্টিং এর কারণে। আর ইএস৬ এর অ্যারো ফাংশন ইউজ করতে হলে অবশ্যই আমাদের ফাংশন এক্সপ্রেশন ইউজ করতে হবে। সেজন্যে এখানে ফাংশন ডিফাইন করার আগে কল করতে পারবেন না। যেমন ইএস৫ এর ফাংশন স্টেটমেন্ট এঃ</p>\n<pre><code>myName();\n\nfunction myName() {\n   console.log('Zonayed Ahmed');\n}\n</code></pre>\n<p>পুরোটা কোড একসাথে রান করলে দেখবেন কাজ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*z65iKFaz5tl5zHjHmQ0_2w.png\" alt=\"\" /></p>\n<p>এখন সেইমভাবে ফাংশন এক্সপ্রেশনেঃ</p>\n<pre><code>myName();\n\nconst myName = function() {\n   console.log('My name is Zonayed Ahmed');\n}\n</code></pre>\n<p>এটা এরর আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*P1nhzw3XJKl3np-FwNSawA.png\" alt=\"\" /></p>\n<p>এখন ইএস ৬ এর অ্যারো ফাংশন যেহেতু ফাংশন এক্সপ্রেশন, তাই হোইস্টিং এর কারণে সেইমভাবেই আপনি ফাংশন ডিফাইন করার আগে সেটাকে কল করতে পারবেন নাঃ</p>\n<pre><code>myName6();\n\nconst myName6 = () =&gt; console.log('My name is Zonayed');\n</code></pre>\n<p>সেইমভাবে এররঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ettA8dKt-ukQbaxU7t9WuQ.png\" alt=\"\" /></p>\n<blockquote>\n  <p>এখানে আমি <code>const</code> ইউজ করেছি ভ্যারিয়েবল ডিক্লেয়ারেশনের বেলাতে, আপনি চাইলে <code>let</code> বা <code>var</code> যেকোনো কিছু ইউজ করতে পারবেন। এতে ফলাফলে কোনো পার্থক্য হবে না।</p>\n</blockquote>\n<h4 id=\"lexicalthis\">লেক্সিক্যাল(Lexical) ‘<code>this’</code> কীওয়ার্ডঃ</h4>\n<p>এতক্ষন পর্যন্ত যা আলোচনা করলাম, এগুলো সিন্ট্যাক্টিক শ্যুগার ছাড়া তেমন কিছুই না। অ্যারো ফাংশনের সবচেয়ে বড় ডিফারেন্সটা যেখানে সেটা হচ্ছে <code>this</code> কীওয়ার্ডের সাথে। আমরা জানি, ইএস৫ এর বেলায় একটা ফাংশন কিভাবে কল করা হচ্ছে সেটার উপর <code>this</code> কীওয়ার্ডের ভ্যালু অনেকটা নির্ভর করে। ইএস৫ এ প্রত্যেকটা ডিফাউনকৃত ফাংশনের নিজস্ব <code>this</code> এর ভ্যালু থাকে। কিন্তু ইএস৬ এর এই অ্যারো ফাংশনের নিজস্ব কোনো প্রভাব থাকে না <code>this</code> কীওয়ার্ডের উপর। বরং এই অ্যারে ফাংশন এর আশেপাশে যেটা থাকে, ঠিক সেখানকার <code>this</code> এর ভ্যালুই অ্যারো ফাংশনের ভিতরেও থাকে।</p>\n<p>যেমন আমরা এই উদাহরণটা নিলে দেখতে পাবো ভালো করে। প্রথমে ইএস৫ এর ফাংশন ইউজ করেঃ</p>\n<pre><code>const lex5 = {\n   aFunc: function() {\n      console.log(this);\n      return function() {\n         console.log(this);\n      }\n   }\n}\n</code></pre>\n<p>এই কোডে একটা অবজেক্ট এর ভিতরে মাল্টিপল ফাংশন রয়েছে। প্রথম ফাংশনে <code>this</code> ঠিকঠাকা <code>lex5</code> কেই ইন্ডিকেট করবে। কিন্তু দ্বিতীয় ফাংশন গ্লোবাল অবজেক্ট কে ইন্ডিকেট করবে। দুইটা ফাংশন কল করলেঃ</p>\n<pre><code>lex5.aFunc()();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*CD5Od5c7TOzNS0zRD_Bfyw.png\" alt=\"\" /></p>\n<p>দেখুন প্রথমটা ঠিকই এর অবজেক্ট <code>lex5</code> কে ইন্ডিকেট করছে। কিন্তু ভিতরের ফাংশনটা আবার গ্লোবাল অবজেক্টকে ইন্ডিকেট করেছে। এখন ইএস৫ এর ফাংশন কলের উপর <code>this</code> ভ্যালু ডিপেন্ড করায় এটা হয়েছে। কিন্তু সেইম কোড এখন ইএস৬ এর অ্যারো ফাংশন ইউজ করে করলেঃ</p>\n<pre><code>const lex6 = {\n   aFunc: () =&gt; {\n      console.log(this);\n      return () =&gt; console.log(this);\n   }\n}\n</code></pre>\n<p>এখন এটা রান করালে দেখবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NXR08gPCuKgvEJxR4jzbwQ.png\" alt=\"\" /></p>\n<p>এগুলো দুইটাই গ্লোবাল অবজেক্ট দেখাচ্ছে। এদের <code>this</code> কীওয়ার্ডের উপর কোনো প্রভাবই নেই।</p>\n<p><strong>আশেপাশের <code>this</code> অ্যারো ফাংশনের ভিতরেও সেইমঃ</strong> যেমন সেইম এই উদাহরনটাতেই আমরা দুইটা ফাংশন মিক্স করে লিখলে দেখতে পাবোঃ</p>\n<pre><code>const lex56 = {\n   aFunc: function(){\n      console.log(this);\n      return () =&gt; console.log(this);\n   }\n}\n</code></pre>\n<p>এটা রান করালেঃ</p>\n<pre><code>lex56.aFunc()();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*b0X7YHxJG6xIRuPsB-h5lQ.png\" alt=\"\" /></p>\n<p>অ্যারো ফাংশনের বাইরের ইএস৫ এর ফাংশনে <code>this</code> ঠিক যা ছিলো, অ্যারো ফাংশনের ভিতরেও সেইম তাই আছে। একেই অ্যারো ফাংশনের লেক্সিক্যাল <code>this</code> কীওয়ার্ড বলে। আর এটা অনেক কাজের। প্রত্যেকবেলা একটা নতুন ফাংশন নিলে আগে যেখানে আমাদের এই <code>this</code> কীওয়ার্ডের ভ্যালু কি হবে সেটা নিয়ে ভাবতে হতো এখন সেটা করতে হবে না। কারণ আমরা জানি অ্যারো ফাংশনের নিজস্ব কোনো প্রভাব নাই <code>this</code> এর উপর।</p>\n<p>এখন ইএস৫ এ আমরা <code>this</code> কীওয়ার্ডের ভ্যালু স্পষ্টভাবে বলে দিতে পারতাম <code>call()</code>, <code>bind()</code> অথবা <code>apply()</code> মেথড ইউজ করে। কিন্তু আমরা ইএস৬ এর অ্যারো ফাংশনে এর ভিতরের <code>this</code> এর ভ্যালু এভাবে স্পষ্টভাবে বলে দিতে পারবো না। লেক্সিক্যাল স্কোপিং এর মাধ্যমে এটা এর আশেপাশে থাকা <code>this</code> এর ভ্যালুই ইউজ করবে। এটাকে এক দিক থেকে খারাপ মনে হলেও এটা আসলে অনেক ফ্লেক্সিবল, আস্তে আস্তে ইউজ করতে করতেই দেখবেন।</p>\n<p>আমরা চাইলে <a href=\"https://with.zonayed.me/%e0%a6%95%e0%a6%ae%e0%a7%8d%e0%a6%aa%e0%a6%bf%e0%a6%89%e0%a6%9f%e0%a6%be%e0%a6%b0-%e0%a6%b8%e0%a6%be%e0%a6%87%e0%a6%a8%e0%a7%8d%e0%a6%b8/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f%e0%a6%83-%e0%a6%87%e0%a6%ab%e0%a6%bf-immediately-invoked-function-expressions-ii/\">ইফির</a> সাহায্যে অ্যারো ফাংশন এভাবেও লিখতে পারিঃ</p>\n<pre><code>(() =&gt; {\n   console.log('My name is Zonayed Ahmed');\n})();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*caTkKZmKzc8s_1MgqwsJDQ.png\" alt=\"\" /></p>\n<p>আজকে এই পর্যন্তই <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f642.svg\" alt=\"🙂\" /> আশা করি অ্যারো ফাংশন নিয়ে আর কোনো কনফিউশন থাকবে না…</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-18T16:40:11.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এর ইএস৬ বা পরের ভার্শনগুলো মূলত স্মার্ট প্রোগ্রামিং এর জন্যেই আসছে। এখানে আপনি ইএস৬ ইউজ করে আরো স্মার্ট হয়ে উঠবেন, সেই সাথে কম কোড, কম লেখায় বেশী কাজ করতে পারবেন। ডি-স্ট্রাকচারিং এর কাজটাও মূলত তাই। এটা নতুন কোনো ব্যাপার বা ফিচার না। বরং এটা একটা টেকনিক, স্মার্ট প্রোগ্রামিং, সিন্ট্যাক্টিক শ্যুগার।</p>\n<p>এখন এই ডি-স্ট্রাকচারিং এর মূল কাজ হচ্ছে একটা ডাটা স্ট্রাকচার যেমন অ্যারে বা অবজেক্ট এর মতো ডাটা স্ট্রাকচার থেকে ডাটা আলাদা আলাদা করে বের করে আনা। এখন এটা কিভাবে স্মার্ট হলো? হ্যাঁ সেটাই আমরা দেখবো আলাদা আলাদা করে ইএস৫ ও ইএস৬ এর উদাহরণ দিয়ে।</p>\n<p>ধরি আমাদের নিচে এই অ্যারেটা আছেঃ</p>\n<pre><code>const zonayed = ['Zonayed Ahmed', 21, 'Student'];\n</code></pre>\n<p>এখন এই অ্যারে থেকে ডাটাগুলো বের করে পৃথক পৃথক একটা একটা করে ভ্যারিয়েবলে রাখতে চাচ্ছিঃ</p>\n<pre><code>var name = zonayed[0];\nvar age = zonayed[1];\nvar profession = zonayed[2];\n</code></pre>\n<p>ব্যাস এভাবেই আমরা ডাটাগুলো পৃথক পৃথক ভাবে অ্যারে থেকে বের করে আনতে পারি ইএস৫ এ। এখানে <code>name</code> ,<code>age</code> এবং <code>profession</code> পৃথক পৃথক তিনটা ভ্যারিয়েবল যেখানে আমাদের কাঙ্ক্ষিত ডাটাগুলো রয়েছে।</p>\n<pre><code>console.log(name);\nconsole.log(age);\nconsole.log(profession);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*QZ0csWtNwK4nneEHiE0saQ.png\" alt=\"\" /></p>\n<p>খারাপ না যদিও, কিন্তু অনেকগুলো ডাটা হলে বা বারবার একাজ বিরক্তিকর। এখানেই আসে ইএস৬ এর ডি-স্ট্রাকচারিং। ইএস৬ এ সেইম কাজটাই করতে চাইলেঃ</p>\n<pre><code>const [name6, age6, profession6] = zonayed;\n</code></pre>\n<p>ব্যাস! হয়ে গেলো আপনার সব কাজ একলাইনে। এখানেও <code>name6</code> , <code>age6</code> এবং <code>profession6</code> পৃথক পৃথক তিনটা ভ্যারিয়েবল। এবং এরা ঠিক অ্যারেতে থাকা ডাটাগুলোর পজিশন মতো যার যার ভ্যালু নিয়ে নিয়েছে। ইন্ডেক্স জিরো পজিশনে থাকা ভ্যারিয়েবল নেইম অ্যারেতে ইন্ডেক্স জিরো পজিশনে থাকা ভ্যালুটাই নিবে। এখানে সে হিসাবে <code>name6 = ‘Zonayed Ahmed’</code> , <code>age6 = 21</code> এবং <code>profession6 = ‘Student’</code> হবেঃ</p>\n<pre><code>console.log(name6);\nconsole.log(age6);\nconsole.log(profession6);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*42K9yQLevUQ50S7hb_izvQ.png\" alt=\"\" /></p>\n<p>এখানে আমি <code>var</code> বা <code>const</code> ইউজ করলেও আপনি চাইলে যেকোনো একটা ইউজ করতে পারবেন। এজন্যে ফাংশানালিটিতে কোনো পরিবর্তন আসবে না। আমি জাস্ট ইএস৫ এর কোডের বেলায় ইএস৫ এর <code>var</code> আর ইএস৬ এর কোডের বেলায় ইএস৬ এর <code>let</code> বা <code>const</code> লিখতে পছন্দ করি।</p>\n<p>সেইম কাজ আমরা অবজেক্ট এর ক্ষেত্রেও করতে পারি। তবে এখানে আমাদের আরো অনেক ফ্লেক্সিবিলিটি আছে। ধরি নিচে এই একটা অবজেক্ট আছেঃ</p>\n<pre><code>const zonayedObj = {\n   nameObj: 'Zonayed Ahmed',\n   ageObj: 21,\n   professionObj: 'Student'\n};\n</code></pre>\n<p>এখন অবজেক্ট এর যেহেতু ভ্যালুর পাশাপাশি তাদের কী(Key)ও থাকে। তাই এখানে ডিস্ট্রাকচারিং অনেকটাই ফ্লেক্সিবল।</p>\n<p>তবে এখন প্রথমে ইএস৫ এ দেখাই যদি আমরা এখানকার ভ্যালুগুলো পৃথক পৃথকভাবে বের করে আনতে চাইঃ</p>\n<pre><code>var nameObj5 = zonayedObj.nameObj;\nvar ageObj5 = zonayedObj.ageObj;\nvar professionObj5 = zonayedObj.professionObj;\n</code></pre>\n<p>এখন এখানে এগুলো আপনার ভ্যালুগুলো পৃথক পৃথকভাবে <code>nameObj</code> ,<code>ageObj</code> ও <code>professionObj</code> তে স্টোর হবেঃ</p>\n<pre><code>console.log(nameObj5);\nconsole.log(ageObj5);\nconsole.log(professionObj5);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DcUFxWSwkJ-r8D3cICz43g.png\" alt=\"\" /></p>\n<p>এখন সেইম কাজটাই ইএস৬ এ অনেকরকমভাবে করা যায়। এখানে অবজেক্ট টাইপ ডাটা স্ট্রাকচারের যেহেতু কী থাকে, আমরা বাই ডিফল্ট সেই কী এর নামটাই ইউজ করতে পারি ইজিলিঃ</p>\n<pre><code>const { nameObj, ageObj, professionObj } = zonayedObj;\n</code></pre>\n<p>তাইলে এখন <code>nameObj</code> , <code>ageObj</code> ও <code>professionObj</code> কী থেকে সেইম নামেই তিনটা স্বাধীন পৃথক পৃথক ভ্যারিয়েবল হয়ে গেলো। যেগুলো তাদের ভ্যালুগুলোই হোল্ড করবেঃ</p>\n<pre><code>console.log(nameObj);\nconsole.log(ageObj);\nconsole.log(professionObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EOHOaxhvgNOkO3V3WuG0SQ.png\" alt=\"\" /></p>\n<p>এখন এখানে যেহেতু অবজেক্ট এর ভিতরের এই নামেই কীগুলো ছিলো তাই এই নামেই আমরা ডি-স্ট্রাকচারিং টা করতে পারবো। কিন্তু আমরা যদি ভিন্ন নামে ডি-স্ট্রাকচারিং করতে চাই তাহলে এভাবে করা যাবেঃ</p>\n<pre><code>const { nameObj:nameObj6, ageObj:ageObj6, professionObj:professionObj6 } = zonayedObj;\n</code></pre>\n<p>তাহলে এখন আমাদের <code>nameObj6</code> , <code>ageObj6</code> ও <code>professionObj6</code> নামে তিনটা ভ্যারিয়েবল হয়ে গেলো, সাথে তাদের ভ্যালুগুলোই তারা হোল্ড করবেঃ</p>\n<pre><code>console.log(nameObj6);\nconsole.log(ageObj6);\nconsole.log(professionObj6);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ckQeG5RyG5qfmK7HRdoO7A.png\" alt=\"\" /></p>\n<p>এখন এই অবজেক্ট এর ডি-স্ট্রাকচারিং আরো অনেক গভীরে যেতে পারে। ধরি নিচে এরকম অবজেক্ট এর ভিতরে অবজেক্ট রয়েছেঃ</p>\n<pre><code>var comObj = {\n   anotherObj: {\n      anotherNewObj: {\n         title: 'JavaScript ES6'\n      }\n   }\n};\n</code></pre>\n<p>এখন এখান থেকে <code>title</code> টাকে ডি-স্ট্রাকচার করে <code>title</code> নামে কোনো ভ্যারিয়েবলে রাখতে চাইলেঃ</p>\n<pre><code>const { anotherObj: { anotherNewObj: { title } } } = comObj;\n</code></pre>\n<p>ব্যাস এবার <code>title</code> নামে আরেকটা ভ্যারিয়েবল হয়ে গেলোঃ</p>\n<pre><code>console.log(title);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0Y-yaimiJH1Y9Widzr_46g.png\" alt=\"\" /></p>\n<p>এখন <code>title</code> তাই অন্যনামে চাইলে আগের টেকনিকগুলো একসাথে মিক্স করলেই হবেঃ</p>\n<pre><code>const { anotherObj: { anotherNewObj: { title: newTitle } } } = comObj;\n</code></pre>\n<p>এখন এই অবজেক্টগুলোর ভিতরের <code>title</code> <code>newTitle</code> ভ্যারিয়েবলে স্টোর হবে, এবং এটা দিয়েই আপনি অ্যাক্সেস করতে পারবেনঃ</p>\n<pre><code>console.log(newTitle);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0PI9mhkFhn-9zBc8jTAmbQ.png\" alt=\"\" /></p>\n<p>আজ এই পর্যন্তই, আশা করি সবটুকু লেখা বুঝতে পেরেছেন। কোনো সমস্যা হলে অবশ্যই আমাকে যেকোনো জায়গায় (ভার্চুয়াললি)টোকা দিতে ভুলবেন না… <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f642.svg\" alt=\"🙂\" /></p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-20T00:40:06.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)","thumb_img_path":"/images/es6.jpeg","content":"<p>অ্যারে জাভাস্ক্রিপ্ট এ নতুন কিছু নয়। কিন্তু ইএস৬ এ নতুন অ্যারের কিছু মেথড এসেছে। আগেই বলেছিলাম ইএস৬ এর কাজ হচ্ছে ডেভেলপারের লাইফ ইজি করে দেওয়া। আর তাই লাইফ ইজি করতেই নতুন কিছু পাওয়ারফুল মেথড এবং সেই সাথে টেকনিক এসেছে। আজকের পর্বে আমি সেগুলো নিয়েই আলোচনা করবো।</p>\n<p>জাভাস্ক্রিপ্ট এ অ্যারের মতো দেখতে আরেক ধরনের অবজেক্ট আছে নোডলিস্ট(nodeList) নামে। এখন এই নোডলিস্ট টাইপের অবজেক্ট দেখতে পুরো অ্যারের মতোই, এমনকি এটার অ্যারের মতো <code>length</code> প্রপার্টিও আছে। ডম ম্যানিপুলেশনের সময় আমাদের অনেকসময় এই নোডলিস্ট টাইপের অবজেক্ট এর সাথে কাজ করতে হয়। এরা দেখতে হুবহুব অ্যারের মতো হলেও অ্যারে আর নোডলিস্ট সম্পূর্ন দুইটা ভিন্ন জিনিস। আর তাই আপনি অ্যারের মতো ভেবে, বিশেষ করে <code>length</code> প্রপার্টি আছে ভেবে অ্যারের আরো অন্যান্য মেথড ইউজ করতে চাইতে পারেন। কিন্তু নোডলিস্ট আর অ্যারে একই টাইপের না হওয়ায় সেক্ষেত্রে আপনার এরর আসতে পারে। তাই এই অবস্থায় করণীয় হচ্ছে এই নোডলিস্টকে অ্যারেতে কনভার্ট করে নিয়ে তারপর কাজ করা।</p>\n<p>নিচে আমাদের এই একটা ডিমো আছে। এখানে কয়েকটা বক্স আছে। সবগুলো বক্সেরই একটা কমন ক্লাশ আছে <code>box-content</code> নামে।</p>\n<p>See the Pen <a href=\"https://codepen.io/zonayedpca/pen/zLKLJQ/\">Array in ES6 with.zonayed.me</a> by Zonayed Ahmed (<a href=\"https://codepen.io/zonayedpca\">@zonayedpca</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<hr />\n<p>এখন এই <code>box-content</code> কে জাভাস্ক্রিপ্ট এর <code>document.querySelectorAll</code> দিয়ে সিলেক্ট করলে আমরা একটা নোডলিস্ট পাবোঃ</p>\n<pre><code>const nodeList = document.querySelectorAll('.box-content');\n</code></pre>\n<p>এখন এটার টাইপ দেখলে দেখবেন এটা একটা অবজেক্ট(নোডলিস্ট অবজেক্ট)ঃ</p>\n<pre><code>typeof nodeList\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*PZ7y2ooNjqOX6CfhQczdxQ.png\" alt=\"\" /></p>\n<p>কিন্তু এটা ওপেন করলে দেখবেন এটা অনেকটা অ্যারের মতোইঃ</p>\n<pre><code>console.dir(nodeList);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*M-VvSnOKMYDYSQ8u1azxwA.png\" alt=\"\" /></p>\n<p>এটার এমনকি অ্যারের মতো <code>length</code> প্রপার্টিও আছে, তাই নোডলিস্টকে অ্যারে ভেবে আমরা অনেকে কাজ শুরু করি, কিন্তু কাঙ্ক্ষিত ফলাফল পাই না। আরেকটু নিচে তাকালে দেখতে পাবেন এটার ডান্ডার প্রোটো <code>NodeList</code> মানে এটা <code>NodeList</code> থেকে মেথডগুলো ইনহেরিট করেছে, তাই আপনি অ্যারের সব মেথড পাবেন না। এটাকে নিয়ে অ্যারের মতোও কাজ করতে পারবে না। তাই অ্যারেতে কনভার্ট করার প্রয়োজন হতে পারে। ইএস৫ এ এই <code>nodeList</code> কে অ্যারেতে কনভার্ট করতে চাইলেঃ</p>\n<pre><code>const nodeToArr = Array.prototype.slice.call(nodeList);\n</code></pre>\n<p>এখন এবার এই <code>nodeToArr</code> টা খুলে দেখবেন এটার মেথডগুলো Array থেকে ইনহেরিট হয়েছে। মানে এখন আপনি চাইলে অ্যারের সব মেথড ইউজ করতে পারবেন এখানেঃ</p>\n<pre><code>const nodeToArr = Array.prototype.slice.call(nodeList);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xyYRTnY-xhocxeiCSMdXXg.png\" alt=\"\" /></p>\n<p>ব্যাস এভাবেই আপনি নোডলিস্টকে অ্যারেতে কনভার্ট করতে পারবেন। কিন্তু কনভার্ট করার কোডটা বেশ বড় আর কনফিউজিংও। কি হচ্ছে না হচ্ছে কিছুই বুঝা গেলো না…। তাই ইএস৬ এ এতো ঝামেলা না করে সরাসরি অ্যারের নতুন একটা মেথড এসেছে যার কাজ হচ্ছে এরকম অ্যারের মতো দেখতে অবজেক্ট কে অ্যারেতে কনভার্ট করে ফেলাঃ</p>\n<pre><code>const nodeToArr6 = Array.from(nodeList);\n</code></pre>\n<p>ব্যাস! হয়ে গেলো আপনার কাজঃ</p>\n<pre><code>console.dir(nodeToArr6);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*KQp0qvK6ZE-ahuPe78Ji9g.png\" alt=\"\" /></p>\n<p>একটা অ্যারে থেকে প্রত্যেকটা আইটেমে লুপ করে অপারেশন করার জন্যে যদিও আমাদের স্মার্ট <code>forEach</code> ,<code>map</code> বা এরকম আরো অনেক মেথড আছে। কিন্তু স্পেশাল কিছু সিচুয়েশনে হয়তো এগুলো আমাদের কাজে নাও লাগতে পারে। যেমন আমরা চাইলেও <code>break</code> অথবা <code>continue</code> স্টেটমেন্ট ইউজ করতে পারি না <code>forEach</code> , <code>map</code> বা এরকম মেথডগুলোয়। তাই আমাদের এরজন্যে <code>for</code> লুপ ইউজ করা লাগতে পারে।</p>\n<p>ধরি আমাদের নিচে একটা অ্যারে আছেঃ</p>\n<pre><code>var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n</code></pre>\n<p>এখন এখানে নাম্বার <code>5</code> পর্যন্ত একটা অপারেশন করতে চাচ্ছি, তারপর <code>break</code> করে দিতে চাচ্ছি। ইএস৫ এর <code>for</code> লুপঃ</p>\n<pre><code>for(var i = 0; i &lt; numbers.length; i++) {\n   if(numbers[i] === 5) break;\n   console.log('Number printed: ' + numbers[i]);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*swBJw9SXio3kRq-GbgzQKA.png\" alt=\"\" /></p>\n<p>অনেক কাজ করতে হলো সিম্পল একটা জিনিসের জন্যে। তাই ইএস৬ এ এটার একটা সহজ সলুশ্যান চলে এসেছেঃ</p>\n<pre><code>for(const number of numbers) {\n   if(number === 5) break;\n   console.log(`Number printed ${number}`);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*_nHTfwu9ZNIrIM1abaY1oA.png\" alt=\"\" /></p>\n<p>এখন একইরকমভাবে কোনো অ্যারে থেকে কোনো ইলিমেন্ট খুঁজতে চাইলে ইএস৫ এ আমাদের অনেক কোড লিখতে হয়। যেমন ধরি আমি উপরের অ্যারেটাথেকে নাম্বার <code>65</code> খুজতেছি। অ্যারেতে কি আছে সেই নাম্বার, নাকি নাই সেটা জানতে চাচ্ছি। ধরি আমাদের আরেকটা অ্যারে আছেঃ</p>\n<pre><code>var numbers = [19, 23, 14, 56, 32, 65, 10, 45];\n</code></pre>\n<p>ইএস৫ এ যা করতে হতোঃ</p>\n<pre><code>var findNum = numbers.map(function(theNum) {\n   return theNum === 65;\n})\n</code></pre>\n<p>এখন findNum প্রিন্ট করলে দেখবেন এখানে <code>65</code> যেখানে ছিলো সেটা সত্য দেখাচ্ছেঃ</p>\n<pre><code>console.log(findNum)\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*bHDIgRJVmheo8-xkmUJh6Q.png\" alt=\"\" /></p>\n<p>এখন অ্যারের <code>indexOf</code> মেথড ইউজ করে এটার ইন্ডেক্স নাম্বার বের করতে পারবোঃ</p>\n<pre><code>findNum.indexOf(true);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iG9jODx36JIJIpIsanKPgA.png\" alt=\"\" /></p>\n<p>এখন সেইমভাবে ইন্ডেক্স নাম্বার থেকে আবার উক্ত ইলিমেন্টটাকেও খুঁজে বের করতে পারবোঃ</p>\n<pre><code>numbers[findNum.indexOf(true)]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tZm12uhuP6aOjpOBWUb8pg.png\" alt=\"\" /></p>\n<p>এখন এরকমভাবে ইন্ডেক্স নাম্বার বের করা বা আসল ইলিমেন্ট বের করা অনেকটাই হাস্যকর… এখন নতুন নতুন আরো অনেক মেথড যেমন <code>filter</code> , <code>some</code> , <code>every</code> ইত্যাদি ইত্যাদি চলে আসছে। কিন্তু তাও আমি দেখালাম ব্যাপারগুলো গভীরভাবে অনুধাবন করার জন্যে।</p>\n<p>এখন গেলো তো ইএস৫ এর কোড, কিন্তু ইএস৬ এ সেইম কাজের জন্যে, মানে ইন্ডেক্স নাম্বার খোঁজার জন্যে নতুন অ্যারের মেথড এসেছে। যেমন ঠিক উপরের অ্যারে থেকে নাম্বার <code>65</code> এর ইন্ডেক্স নাম্বার খুঁজতে চাইলেঃ</p>\n<pre><code>numbers.findIndex(number =&gt; number === 65);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*legRjb_mj4Y0wuwRCIkZWA.png\" alt=\"\" /></p>\n<p>তো আজকে এই পর্যন্তই, আশা করি অ্যারে নিয়ে কাজ করতে আর বেশী লাইনের কোড লিখতে হবে না। একলাইনেই সব কাজ সেরে ফেলা যাবে এখন থেকে।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-20T04:40:01.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর","thumb_img_path":"/images/es6.jpeg","content":"<p>স্প্রেড অপারেটর জাভাস্ক্রিপ্ট এর ইএস৬ এ আরেক স্মার্ট জিনিস। এটা অনেকেই ইউজ করতে চায় না জটিল জিনিস মনে করে। কিন্তু একটু খেয়াল করলে বা কয়েকবার ইউজ করার পর বুঝতে পারবেন এটা আসলে কতটুকু ইউজফুল। আর সত্যি কথা বললে এটাও একরকম সিন্ট্যাক্টিক শ্যুগার।</p>\n<p>স্প্রেড অপারেটরের আসল কাজ হচ্ছে কোনো পুনরাবৃত্তিমূলক ডাটাকে যেমন অ্যারে বা স্ট্রিং কে তাদের নিজের অবস্থানের মধ্যে ছড়িয়ে দেওয়া। ঠিক স্প্রেড এর বাংলা অর্থটা যেমন দাঁড়ায়। স্প্রেড অপারেটর আসলে এই <code>…</code> তিনটা ডট। এখন এই তিনটা ডট আবার অন্যকিছুর ক্ষেত্রেও হতে পারে যেটা আমরা সামনে আলোচনা করবো। এখন নিচে একটা উদাহরণ দিলে বুঝতে পারবেন স্প্রেড অপারেটর আসলে কি করছে। প্রথমে একটা প্রোগ্রাম ইএস৫ ভার্শনে দেখাইঃ</p>\n<p>ধরি আমাদের একটা অ্যারে আছেঃ</p>\n<pre><code>var numbers = [1, 2, 3, 4];\n</code></pre>\n<p>এখন এগুলোর যোগফল বের করার জন্যে একটা ফাংশন বানালামঃ</p>\n<pre><code>function calculate(a, b, c, d) {\n   console.log('Sum: ' + (a + b + c + d));\n}\n</code></pre>\n<p>এখন ফাংশন কল করতে চাই উপরের নাম্বারগুলো পাস করেঃ</p>\n<pre><code>calculate(numbers)\n</code></pre>\n<p>উহুঃ আমাদের কাঙ্ক্ষিত ফলাফল আসলো নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*covPsBBTK6j5SnsbP1Hbcg.png\" alt=\"\" /></p>\n<p>কেনো? হ্যাঁ কারণ আমরা যে <code>numbers</code> আর্গুমেন্টস হিসাবে পাস করেছি সেটা পুরোটা একটা অ্যারে। কিন্তু আমরা আমাদের ফাংশনে প্যারামিটার নিয়েছি চারটা, <code>a</code> ,<code>b</code> ,<code>c</code> ও <code>d</code> । আর তাই এটা চারটা আর্গুমেন্টই আশা করছে। কিন্তু আমরা পুরো একটা অ্যারে(একটা আর্গুমেন্ট হিসাবে গণ্য হবে) পাস করে দিয়েছি, আর তাই আমরা আমাদের কাঙ্ক্ষিত ফলাফল পাই নাই। এখন এটা এভাবেও সল্ভ করা যেতে পারেঃ</p>\n<pre><code>calculate(1, 2, 3, 4)\n</code></pre>\n<p>এভাবে ম্যানুয়ালী চারটা আর্গুমেন্ট পাস করলে আমরা কাঙ্ক্ষিত ফলাফল পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*BbypYCaw-JmZD4coV10kSQ.png\" alt=\"\" /></p>\n<p>অথবা আমরা যদি <code>numbers</code> অ্যারেটা ইউজ করতে চাই তাহলে এই টেকনিক ইউজ করা যায়ঃ</p>\n<pre><code>calculate.apply(null, numbers)\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1SIyF_6NydnEBZc4RW2tGg.png\" alt=\"\" /></p>\n<p>যাই হউক ওভারল সবগুলো ব্যাপারই কেমন ঝামেলাপূর্ন। এই জন্যেই ইএস৬ এ স্প্রেড অপারেটর আসছে। স্প্রেড অপারেটর ইউজ করে খুব সিম্পলভাবে এই <code>numbers</code> অ্যারেটাকে আর্গুমেন্ট এ স্প্রেড করে পাস করা যাবেঃ</p>\n<pre><code>calculate(...numbers)\n</code></pre>\n<p>ব্যাস! হয়ে গেলো!! শুধুমাত্র তিনটা ফোঁটাতেই কাজ শেষঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3rqOt8mU2HaC9K9K7CJE9A.png\" alt=\"\" /></p>\n<p>সেইমভাবে এই স্প্রেড অপারেটর ইউজ করে আমরা আরো অনেক কাজ করতে পারি। যেমন কোনো অ্যারেতে নতুন ইলিমেন্ট অ্যাড করতে চাইলে আমরা <code>push</code> বা <code>unshift</code> ইউজ করি। ধরি নতুন আরেকটা অ্যারেঃ</p>\n<pre><code>var arrName = ['Rahim', 'Karim', 'Rafiq', 'Jabbar'];\n</code></pre>\n<p>এখন শুরুর দিক হতে কোনো ইলিমেন্ট অ্যাড করতে চাইলে ইএস৫ ইউজ করেঃ</p>\n<pre><code>arrName.unshift('Shafiq')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Kb_Z5PzWG-PspJ4_uAr-og.png\" alt=\"\" /></p>\n<p>এখন সেইমভাবে ইএস৫ এ শেষের দিক হতেও যদি কোনো ইলিমেন্ট অ্যাড করতে চাইঃ</p>\n<pre><code>arrName.push('Salam')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*nRJNEW01mCr_tzlKRs-8Ng.png\" alt=\"\" /></p>\n<p>কিন্তু ইএস৬ এ স্প্রেড অপারেটর থাকায় ব্যাপারটা আরো অনেক ফ্লেক্সিবল হয়ে গেছে এখন। আপনি যে পজিশনে আপনার অ্যারেটা ছড়িয়ে দিতে চান সে পজিশনে রাখলেই হয়ে যাবে। যেমন উপরেই দুইটা কাজই একলাইনে করে ফেলতে চাইলেঃ</p>\n<pre><code>const arrName6 = ['Bangladesh', ...arrName, 'Language']\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Fy2-XUMOqLDadvegza4jfQ.png\" alt=\"\" /></p>\n<p>ধরি আমাদের দুইটা অ্যারে আছে এরকমঃ</p>\n<pre><code>var arrOne = [0, 1, 2, 3, 4];\nvar arrTwo = [5, 6, 7, 8, 9];\n</code></pre>\n<p>এখন ইএস৫ এ আমরা অ্যারে দুইটা একসাথে করতে চাইলেঃ</p>\n<pre><code>arrOne = arrOne.concat(arrTwo)\n</code></pre>\n<p>এখন যেহেতু আমরা <code>arrOne</code> এ নতুনটা স্টোর করেছি, তাই এখানেই আমরা নতুন একসাথে হওয়া অ্যারেটা পাবোঃ</p>\n<pre><code>arrOne\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YE4rAauLgXm1SjV2vv68Pg.png\" alt=\"\" /></p>\n<p>এখন হয়তো বুঝে ফেলছেন সেইম কাজটা ইএস৬ এ কিভাবে করা যাবেঃ</p>\n<pre><code>let arrOne6 = [0, 1, 2, 3, 4];\nlet arrTwo6 = [5, 6, 7, 8, 9];\n</code></pre>\n<p>এখন স্প্রেড অপারেটর ইউজ করে নতুন অ্যারেটা <code>arrOne6</code> এ স্টোর করবোঃ</p>\n<pre><code>arrOne6 = [...arrOne6, ...arrTwo6]\n</code></pre>\n<p>ব্যাস! একসাথে হয়ে গেলো</p>\n<pre><code>arrOne6\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*H0RJqn8EjDFcnFzdtyUyuQ.png\" alt=\"\" /></p>\n<p>এই গেলো স্প্রেড অপারেটর কিভাবে কাজ করে সেটা। এখন আপনি চাইলে নোডলিস্টেও স্প্রেড অপারেটর ইউজ করতে পারবেন। যেকোনো পুনরাবৃত্তিমূলক(iterable) অবজেক্টের ক্ষেত্রেই এই স্প্রেড অপারেটর কাজ করবে।</p>\n<p>আজকে এই পর্যন্তই। আশা করি আজকে থেকে এই নতুন ইএস৬ এর স্প্রেড অপারেটর নিয়ে কাজ করা শুরু করতে পারবেন। সেই পর্যন্ত ভালো থাকবেন।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-22T16:39:55.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এর ইএস৬ এ রেস্ট প্যারামিটার আরেকটা ইউজফুল অ্যাডিশন। এর সাহায্যে আন্ডিফাইন্ড অ্যামাউন্ট প্যারামিটার পাস করা যায় একটা ফাংশনের ভিতর দিয়ে। আমরা যখন একটা ফাংশন প্যারামিটারসহ ডিফাইন করি তখন যদি সেখানে কয়টা আর্গুমেন্ট পাস করা হতে পারে সেটা অজানা থাকে, সে সিচুয়েশনে আমরা এই রেস্ট প্যারামিটার ইউজ করি বা ইএস৫ এর <code>arguments</code> অবজেক্ট ইউজ করি। জাভাস্ক্রিপ্ট ইএস৫ এর এই <code>arguments</code> অবজেক্ট মূলত সেইম কাজই করতো, কিন্তু ইএস৬ এর এই রেস্ট প্যারামিটার একটু বেশীই স্মার্ট। রেস্ট প্যারামিটারে সেইম স্প্রেড অপারেটরের মতোই <code>…</code> এই তিনটা ডট ইউজ করা হয়। আর তাই এই তিনটা ডটের প্লেস দেখে আপনাকে বুঝতে হবে কখন এগুলো রেস্ট প্যারামিটারের জন্যে ইউজ করা হচ্ছে আর কখন স্প্রেড অপারেটর হিসাবে ইউজ করা হচ্ছে।</p>\n<p>আগের <code>arguments</code> অবজেক্ট এর মতো হলেও রেস্ট প্যারামিটার একটু অন্যরকম। জাভাস্ক্রিপ্ট এর ইএস৬ এ নতুন অ্যারো ফাংশন এসেছে, অ্যারো ফাংশনে এই <code>argument</code> অবজেক্ট কাজ করবে না। আর তাই আপনি যখন অ্যারো ফাংশন ইউজ করতে যাবেন তখন আপনাকে এই ক্ষেত্রে রেস্ট প্যারামিটার ইউজ করতে হবে। আর তাছাড়া রেস্ট প্যারামিটার <code>arguments</code> অবজেক্ট থেকে অনেকটাই ফ্লেস্কিবল। নিচে উদাহরণ দিলেই বুঝতে পারবেন।</p>\n<p>ইএস৫ এ <code>arguments</code> অবজেক্ট ইউজ করলে আমাদের পাস করা আর্গুমেন্টগুলো একটা অ্যারের মতো অবজেক্ট এ স্টোর হয়ে থাকে। আমাদের তখন সেই অবজেক্ট থেকে আর্গুমেন্টগুলো এক এক করে বের করে আনতে হয়ঃ</p>\n<pre><code>function arguments5() {\n   for(var i = 0; i &lt; arguments.length; i++) {\n      console.log('Argument passed: ' + arguments[i]);\n   }\n}\n</code></pre>\n<p>এখন যতটাই আর্গুমেন্ট পাস করবেন এগুলো লুপ করে প্রিন্ট করবেঃ</p>\n<pre><code>arguments5('Bangladesh', 'India', 'Sri Lanka');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4o1Lo2GngwmppxtK5iFlqQ.png\" alt=\"\" /></p>\n<pre><code>arguments5('Cricket', 'Football', 'Volleyball', 'Kabadi', 'Kutkut');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Q9tAm1Xb259AD187ckK0pA.png\" alt=\"\" /></p>\n<p>কিন্তু সেইম জিনিস অ্যারো ফাংশনের ক্ষেত্রে কাজ করবে নাঃ</p>\n<pre><code>const argumentsArr = () =&gt; {\n   for(var i = 0; i &lt; arguments.length; i++) {\n      console.log('Argument passed: ' + arguments[i]);\n   }\n}\n</code></pre>\n<p>এখন কল করলে এই অ্যারো ফাংশনটাকেঃ</p>\n<pre><code>argumentsArr('Bangladesh', 'India', 'Sri Lanka')\n</code></pre>\n<p>এরর আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JYV6SXHm0pQH3eRl13ew8Q.png\" alt=\"\" /></p>\n<p>সেইমভাবে এই <code>arguments</code> অবজেক্ট ঠিক অ্যারে না হওয়ায় এখানে আপনি চাইলে <code>forEach</code> , <code>map</code> , <code>filter</code> , <code>reduce</code> বা এরকম বাকী যত মেথড আছে সেগুলো কাজ করাতে পারবেন নাঃ</p>\n<pre><code>function argumentsMeth() {\n   arguments.map(function(oneArgs) {\n      console.log('Argument Passed: ' + oneArgs);\n   })\n}\n</code></pre>\n<p>এখন এই ফাংশনকে কল করলে এরর আসবেঃ</p>\n<pre><code>argumentsMeth('Bangladesh', 'India', 'Sri Lanka')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*8_oheIJHOU4L5X4tpTDF3w.png\" alt=\"\" /></p>\n<p>কারণ এই <code>arguments</code> অবজেক্ট এর এই ধরনের কোনো মেথড নেই। তাই কাজ করছে না। এখন আমরা চাইলে একটু ট্রিক্স করে এই মেথডগুলো <code>Array</code> থেকে ইনহেরিট করে এনে কাজে লাগাতে পারিঃ</p>\n<pre><code>function argumentsMethWork() {\n   var argsArr = Array.prototype.slice.call(arguments);\n\n   argsArr.map(function(oneArgs) {\n      console.log('Argument Passed: ' + oneArgs);\n   })\n}\n</code></pre>\n<p>এখন এই ফাংশনটাকে কল করলে ঠিকঠাক কাজ করবেঃ</p>\n<pre><code>argumentsMethWork('Bangladesh', 'India', 'Sri Lanka')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*2z2v-tybvmcdVXoOJPp50A.png\" alt=\"\" /></p>\n<p>এখন এখানে দেখলাম <code>arguments</code> অবজেক্ট এর সুবিধা-অসুবিধা। এবার আসুন দেখি রেস্ট প্যারামিটার কিভাবে কাজ করে। আগের সেইম একটা প্রোগ্রামই রেস্ট প্যারামিটার দিয়ে করিঃ</p>\n<pre><code>function arguments6(...anyName) {\n   for(var i = 0; i &lt; anyName.length; i++) {\n      console.log('Argument passed: ' + anyName[i]);\n   }\n}\n</code></pre>\n<p>এখন কল করলেঃ</p>\n<pre><code>arguments6('Bangladesh', 'India', 'Sri Lanka')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rgZk4yeQlJ0M5z_wllBq4g.png\" alt=\"\" /></p>\n<pre><code>arguments6('Cricket', 'Football', 'Volleyball', 'Kabadi', 'Kutkut');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*qJv7PG_YbF3GGYNfSdtOqA.png\" alt=\"\" /></p>\n<p>প্রথমেই চোখে যেটা পড়ার কথা, সেই তিনটা ডট। এগুলোই রেস্ট প্যারামিটারে ইউজ করা হয়। আর দ্বিতীয় যে জিনিসটা চোখে পড়বে সেটা হচ্ছে আমরা যেকোনো নাম দিয়ে আমাদের মনমতো আর্গুমেন্ট এর নাম দিতে পারবো। এবং সেই সাথে এটা অ্যারো ফাংশনের সাথেও একদম পার্ফেক্টলি কাজ করবেঃ</p>\n<pre><code>const argumentsArr6 = (...anyName) =&gt; {\n   for(var i = 0; i &lt; anyName.length; i++) {\n      console.log('Argument passed: ' + anyName[i]);\n   }\n}\n</code></pre>\n<p>এখন এটা কল করলেঃ</p>\n<pre><code>argumentsArr6('Bangladesh', 'India', 'Sri Lanka')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*L3dF-9OEaB3BOENg5YP52A.png\" alt=\"\" /></p>\n<pre><code>argumentsArr6('Cricket', 'Football', 'Volleyball', 'Kabadi', 'Kutkut');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-5WZm7xxPerfS7GaG6YH6A.png\" alt=\"\" /></p>\n<p>সেইমভাবে আপনি চাইলে <code>forEach</code> , <code>map</code> , <code>filter</code> , <code>reduce</code> বা এরকম বাকী যত মেথড আছে সেগুলো কাজ করাতে পারবেনঃ</p>\n<pre><code>const argumentsMeth6 = (...anyName) =&gt; {\n   anyName.map(oneArgs =&gt; console.log('Argument Passed: ' + oneArgs))\n}\n</code></pre>\n<p>এখন এই ফাংশনটাকে কল করলেঃ</p>\n<pre><code>argumentsMeth6('Bangladesh', 'India', 'Sri Lanka')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SLvCr2AfjyDp9v1oXZIi8g.png\" alt=\"\" /></p>\n<p>কোনো ধরনের মডিফিকেশন ছাড়াই এটা কাজ করতেছে!</p>\n<p>তাছাড়া এই রেস্ট প্যারামিটারের আরো একটা বড় সুবিধা আছে। সেটা হচ্ছে আপনার যদি কয়েকটা প্যারামিটার আগে থেকেই জানা থাকে তাহলে সেগুলো ডিফাইন করে দিতে পারবেন, তারপর বাকিগুলো না জানা থাকলে বা আন্ডিফাইন্ড অ্যামাউন্টের প্যারামিটার হলে তখন সে জায়গায় রেস্ট প্যারামিটার ইউজ করতে পারবেন। নিচের উদাহরণ দেখলে বুঝতে পারবেনঃ</p>\n<pre><code>const restExtra = (name, age, ...others) =&gt; {\n   console.log(`My name is ${name} and I am ${age} years old!`);\n   others.map(other =&gt; console.log(`Argument Passed: ${other}`));\n}\n</code></pre>\n<p>এবার এটা কল করলেঃ</p>\n<pre><code>restExtra('Zonayed Ahmed', 21, 'JavaScript', 'Chrome', 'Web Developer', 'Front End Engineer')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*gD1TMmoyPPqVmg-Cs4JHLw.png\" alt=\"\" /></p>\n<p>কতোটা ফ্লেক্সিবল এবার বুঝতে পেরেছেন! এটাই হচ্ছে ইএস৬ এর রেস্ট প্যারামিটারের মজা…! আশা করি রেস্ট প্যারামিটার এখন থেকে আপনার মনমতো যেখানে ইচ্ছা সেখানেই ইউজ করতে পারবেন।</p>"},{"language":"বাংলা","tags":["ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-25T16:39:50.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এ ইএস৬ এর পরিচয় করানো হয়েছে মূলত ডেভেলপারদের লাইফ ইজি করার জন্যে। আর সেজন্যেই মূলত এই ডিফল্ট প্যারামিটার অ্যাড করা হয়। আমিও আগে এরকম বিহেভিয়ার আশা করতাম জাভাস্ক্রিপ্ট থেকে বা অনেক ডেভেলপাররাই আশা করতো। আর তাই এই ডিফল্ট প্যারামিটারকে অ্যাড করা হয়েছে।</p>\n<p>আমরা যদি কোনো ফাংশন ডিফাইন করার সময় এর সাথে দেওয়া প্যারামিটারের একটা ডিফল্ট ভ্যালু সেট করে দিতে চাই তাহলে আমরা খুব সহজেই ইএস৬ এর এই ডিফল্ট প্যারামিটার ইউজ করতে পারি। তবে ইএস৫ এ ব্যাপারটা এতো সহজ ছিলো না। নিচের উদাহরণ দুইটা দেখলেই ধরতে পারবেন।</p>\n<p>প্রথমে আমরা একটা প্যারামিটারসহ ফাংশন নিলাম, এখন সেই প্যারামিটারগুলোর ডিফল্ট ভ্যালু সেট করে দিবো। এই ফাংশন কল করার সময় যদি কোনো আর্গুমেন্ট দেওয়া হয় তাহলে সেই আর্গুমেন্ট থেকে ভ্যালুগুলো নিয়ে এই ফাংশন কাজ করবে, আর যদি কোনো আর্গুমেন্ট না দেওয়া হয় তাহলে ডিফল্ট প্যারামিটারের ভ্যালুগুলো ইউজ হবে। তো ইএস৫ এ কোড এরকম হবেঃ</p>\n<pre><code>function defaultParams(name, age) {\n   name ? name = name : name = 'Zonayed Ahmed'\n   age ? age = age : age = 21\n   console.log('My name is ' + name + ' and I am ' + age + ' years old!');\n}\n</code></pre>\n<p>এখন এই ফাংশনটাকে কোনোরকম আর্গুমেন্ট ছাড়া কল করলেঃ</p>\n<pre><code>defaultParams();\n</code></pre>\n<p>ডিফল্ট প্যারামিটারের ভ্যালুগুলো প্রিন্ট হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ULhj3PPQDtuha8EYrW4rrg.png\" alt=\"\" /></p>\n<p>আর আর্গুমেন্ট দিলে আর্গুমেন্ট এর ভ্যালুগুলো প্রিন্ট হবেঃ</p>\n<pre><code>defaultParams('Zawad Ahmed', 1);\n</code></pre>\n<p>এখন আর্গুমেন্টস এর ভ্যালুগুলোই প্রিন্ট হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*slr8HKJTxogNe7L5VdzLnA.png\" alt=\"\" /></p>\n<p>বেশ ভালোই কাজ করতেছে। আমরা ঠিক যেমটা আশা করেছিলাম তাই হচ্ছে। কিন্তু তারপরেও অনেক ঝামেলার মনে হচ্ছে তাই না? হ্যাঁ সেজন্যেই ইএস৬ এ ডিফল্ট প্যারামিটারের পরিচয় করানো হয়েছে। সেইম কোড ইএস৬ এ লিখলেঃ</p>\n<pre><code>function defaultParams6(name = 'Zonayed Ahmed', age = 21) {\n   console.log('My name is ' + name + ' and I am ' + age + ' years old!');\n}\n</code></pre>\n<p>এখন আর্গুমেন্ট ছাড়া এই ফাংশনটাকে কল করলেঃ</p>\n<pre><code>defaultParams6();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*p4btqTIdknoihDUKSede4g.png\" alt=\"\" /></p>\n<p>আর আর্গুমেন্ট দিলেঃ</p>\n<pre><code>defaultParams6('Zawad Ahmed', 1);\n</code></pre>\n<p>আমাদের আর্গুমেন্টসগুলোই প্রিন্ট হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LmnqEqwmHEDseAWD3prAaw.png\" alt=\"\" /></p>\n<p>ব্যাস! এতোইটাই সহজ করে দিলো আমাদের লাইফ এই ডিফল্ট প্যারামিটার। মজার না অনেক? হ্যাঁ সেজন্যেই ইএস৬ শিখার দরকার আছে <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f609.svg\" alt=\"😉\" /></p>\n<h4 id=\"\">ফাংশন কন্সট্রাকটরের সাথে ডিফল্ট প্যারামিটারঃ</h4>\n<p>সেইমভাবে আমরা ফাংশন কন্সট্রাকটরের সাথেও ডিফল্ট প্যারামিটার ইউজ করতে পারবো। তবে আগে ইএস৫ এর কোডের ভার্শন দেখে নিই। ইএস৫ এ আমাদের যা করতে হতোঃ</p>\n<pre><code>function FunctionConst(name, age) {\n   name ? name = name : name = 'Zonayed Ahmed';\n   age ? age = age : age = 21;\n   this.name = name;\n   this.age = age;\n}\n</code></pre>\n<p>এখন এই ফাংশন কন্সট্রাক্টর থেকে নতুন অবজেক্ট তৈরী করবোঃ</p>\n<pre><code>var zonayed = new FunctionConst();\n</code></pre>\n<p>এখন এই <code>zonayed</code> এর <code>name</code> আর <code>age</code> দেখলেঃ</p>\n<pre><code>console.log(zonayed.name);\nconsole.log(zonayed.age);\n</code></pre>\n<p>ডিফল্ট প্যারামিটারগুলো শো করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1jmen_l76FpM9dj0qfdSpA.png\" alt=\"\" /></p>\n<p>কিন্তু আমরা যদি নতুন অবজেক্ট আর্গুমেন্টসহ ডিফাইন করিঃ</p>\n<pre><code>var zawad = new FunctionConst('Zawad Ahmed', 1);\n</code></pre>\n<p>এখন এই <code>zawad</code> এর <code>name</code> আর <code>age</code> দেখলেঃ</p>\n<pre><code>console.log(zawad.name);\nconsole.log(zawad.age);\n</code></pre>\n<p>আমাদের পাসকৃত আর্গুমেন্টসগুলোর ভ্যালুই দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iddNdMsH-UDkhI59i7vqtQ.png\" alt=\"\" /></p>\n<p>সেইমভাবে এখন এই ফাংশন কন্সট্রাকটরটাকে ইএস৬ এ লিখলেঃ</p>\n<pre><code>function FunctionConst6(name = 'Zonayed Ahmed', age = 21) {\n   this.name = name;\n   this.age = age;\n}\n</code></pre>\n<p>এখন এটা থেকে দুইটা অবজেক্ট তৈরী করবোঃ</p>\n<pre><code>var zonayed6 = new FunctionConst6();\n</code></pre>\n<p>এখন এই <code>zonayed6</code> এর <code>name</code> আর <code>age</code> দেখলেঃ</p>\n<pre><code>console.log(zonayed6.name);\nconsole.log(zonayed6.age);\n</code></pre>\n<p>ডিফল্ট প্যারামিটারগুলো শো করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*t6o9j7dBcGmzhjrk_SodCg.png\" alt=\"\" /></p>\n<p>কিন্তু আমরা যদি নতুন অবজেক্ট আর্গুমেন্টসহ ডিফাইন করিঃ</p>\n<pre><code>var zawad6 = new FunctionConst6('Zawad Ahmed', 1);\n</code></pre>\n<p>এখন এই <code>zawad6</code> এর <code>name</code> আর <code>age</code> দেখলেঃ</p>\n<pre><code>console.log(zawad6.name);\nconsole.log(zawad6.age);\n</code></pre>\n<p>আমাদের পাসকৃত আর্গুমেন্টসগুলোর ভ্যালুই দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YIEfTgp83_vhhmByHRsiBA.png\" alt=\"\" /></p>\n<p>ব্যাস! এভাবেই ডিফল্ট প্যারামিটার আমাদের লাইফ সহজ করে দিবে। আশা করি এখন থেকে ডিফল্ট প্যারামিটার নিশ্চিন্তে ব্যবহার করতে পারবেন।</p>\n<blockquote>\n  <p>এখানে আমি <code>var</code> দিয়ে ভ্যারিয়েবল নিলেও আপনি চাইলে <code>let</code> বা <code>const</code> যেকোনো কিছু ইউজ করতে পারবেন। এতে রেসাল্টের কোনো পরিবর্তন হবে না। সেই সাথে আমি এখানে টেমপ্লেট লিটারেল ইউজ না করলেও আপনি চাইল সেটাও ইউজ করতে পারবেন নিশ্চিন্তে। এতে ফলাফল একই আসবে।</p>\n</blockquote>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-07-30T16:39:45.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট এর ইএস৬ এ মূলত সিনট্যাক্স ডিফারেন্স ছাড়া, বা সিন্ট্যাক্টিক শুগ্যার ছাড়া তেমন নতুন কিছু আমাদের চোখে এখনো পড়ে নি। কিন্তু এবার আমরা সম্পূর্ণ নতুন একটা জিনিস নিয়ে আলোচনা করবো। হ্যাঁ এই জিনিসটা ইএস৬ একদম সম্পূর্ণ নতুন অ্যাড করা হয়েছে। জাভাস্ক্রিপ্ট এর আগের কোন ভার্শনে এটার কোনো অস্তিত্বই ছিলো না। সেটা হচ্ছে ম্যাপ <code>Map</code> ।</p>\n<p>এই ম্যাপ <code>Map</code> <a href=\"https://with.zonayed.me/bn/%E0%A6%AC%E0%A7%8D%E0%A6%B2%E0%A6%97/%E0%A6%A8%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%AF%E0%A6%A6%E0%A6%BF%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D/\">সেই ম্যাপ</a> <code>map</code> ভেবে ভুল করবেন না। কারণ <code>map</code> হচ্ছে একটা মেথড। কিন্তু এখানে আজকে আমরা যে ম্যাপ <code>Map</code> নিয়ে কথা বলবো সেটা একটা ডাটা স্ট্রাকচার। নতুন পরিচয় করিয়ে দেওয়া হয়েছে ডেভেলপারদের সাথে জাভাস্ক্রিপ্ট এর ইএস৬ ভার্শনে। কিন্তু এটা অবজেক্ট টাইপ ডাটা স্ট্রাকচার থেকে একটু অন্যরকম। এটারো নিজস্ব মেথড আছে, নিজস্ব কিছু বৈশিষ্ট্য আছে। ম্যাপ একই সাথে ফাংশন, বুলিয়ান, ইন্টিজার, ক্যারেক্টার, স্ট্রিং সবরকমের ডাটাই অ্যাক্সেপ্ট করতে পারে। তাই আমরা আজকে এটা নিয়েই বিস্তারিত আলোচনা করবো।</p>\n<h4 id=\"map\">ম্যাপ (<code>Map)</code> তৈরী করাঃ</h4>\n<p><strong>নতুন ম্যাপ নেওয়াঃ</strong> আমরা নতুন কোনো ম্যাপ ডাটা স্ট্রাকচার নিতে চাইলে এভাবে নিতে পারবোঃ</p>\n<pre><code>const zawad = new Map();\n</code></pre>\n<p>ব্যাস! হয়ে গেলো <code>zawad</code> নামে একটা ম্যাপ। এখন ম্যাপের ভিতরেও কী এবং ভ্যালু থাকে। আমরা যদি এরকম নতুন কোনো ভ্যালু এই ম্যাপের ভিতরে রাখতে চাইঃ</p>\n<pre><code>zawad.set('fullName', 'Zawad Ahmed');\n</code></pre>\n<p>এখন ম্যাপ এ থাকা ডাটা থেকে কোনো ডাটা অ্যাক্সেস করতে চাইলেও আরেকটা মেথড আছে। যেমন আমার উপরে নেওয়া <code>zawad</code> এর <code>fullName</code> জানতে চাচ্ছিঃ</p>\n<pre><code>zawad.get('fullName');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*nC-ZbcmLgBYk0E3ODHWADg.png\" alt=\"\" /></p>\n<p>আবার আমরা চাইলে আমাদের ম্যাপ এ কোনো স্পেসেফিক ভ্যালু আছে কিনা সেটাও চেক করতে পারিঃ</p>\n<pre><code>zawad.has('fullName');\n</code></pre>\n<p>যেহেতু আমাদের ম্যাপ এ <code>fullName</code> নামে কী আছে তাই এটা সত্য হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*d0bkyHmZUSuaOKBAPWLvzQ.png\" alt=\"\" /></p>\n<p>এখন যদি এরকম কী না থাকে তাহলে সেটা মিথ্যা হবেঃ</p>\n<pre><code>zawad.has('something');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Dl6gpKl5kAntt0j3rxss_w.png\" alt=\"\" /></p>\n<p>এখন আমরা চাইলে ম্যাপ থেকে এরকম কোন জোড়া ডিলেটও করে ফেলতে পারি। প্রথমে আমরা নতুন আরেকটা জোড়া অ্যাড করে নেইঃ</p>\n<pre><code>zawad.set('toberemoved', 'willberemoved');\n</code></pre>\n<p>এখন আবার চেক করতে চাইলে নতুন জোড়াটা ম্যাপ এ অ্যাড হয়েছে কিনাঃ</p>\n<pre><code>zawad.has('toberemoved');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*zj_zlBuaFiMcl-FX_NpgRg.png\" alt=\"\" /></p>\n<p>এখন আমরা এই <code>toberemoved</code> রিমুভ ডিলেট করতে চাইঃ</p>\n<pre><code>zawad.delete('toberemoved');\n</code></pre>\n<p>ব্যাস! ডিলেট হয়ে গেলো। এখন যদি চেক করি এই <code>toberemoved</code> আছে কিনাঃ</p>\n<pre><code>zawad.has('toberemoved');\n</code></pre>\n<p>এটা মিথ্যা হবে, কারণ আমরা একটু আগেই এটা ডিলেট করে ফেলেছি আমাদের ম্যাপ থেকেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*PW904gobrc4WTv8nsvJPew.png\" alt=\"\" /></p>\n<p>এখন আমরা চাইলে পুরো <code>zawad</code> ম্যাপটাকেই ক্লিয়ার করে ফেলতে পারিঃ</p>\n<pre><code>zawad.clear();\n</code></pre>\n<p>এখন যদি চেক করই <code>zawad</code> এর ভিতর কোনোকিছু পাওয়া যাবে নাঃ</p>\n<pre><code>console.log(zawad);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*p0K34aIHcLitgQo2si-nQw.png\" alt=\"\" /></p>\n<p>ধরি আমাদের নিচের মতো একটা ম্যাপ আছে কয়েকটা ইলিমেন্টসহঃ</p>\n<pre><code>const favorite = new Map();\n</code></pre>\n<p>এখন এটার ভিতরে কিছু ইলিমেন্ট রাখবোঃ</p>\n<pre><code>favorite.set('name', 'Zonayed Ahmed');\nfavorite.set('job', 'student');\nfavorite.set('color', 'blue');\nfavorite.set('os', 'ubuntu');\nfavorite.set('mobileos', 'android');\n</code></pre>\n<p>এবার এই <code>favorite</code> ম্যাপ এর ভিতর সব ডাটা পাবেনঃ</p>\n<pre><code>console.log(favorite);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*h7foNjF9wklLaKXxbkVv5A.png\" alt=\"\" /></p>\n<p>আমরা চাইলে ম্যাপের ভিতরে কয়টা ইলিমেন্ট আছে সেটাও জানতে পারবো ম্যাপ এর <code>size</code> প্রপ্রার্টি দিয়েঃ</p>\n<pre><code>console.log(favorite.size);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*9-Mc5HE4rtaZSc-x0yGK1Q.png\" alt=\"\" /></p>\n<p>এখন আমরা চাইলে ম্যাপ এর মধ্যে লুপও চালাতে পারিঃ</p>\n<pre><code>favorite.forEach((value, key) =&gt; console.log(`Key is: ${key} and the value is: ${value}`));\n</code></pre>\n<p><code>forEach</code> মেথড এ দ্বিতীয় আর্গুমেন্ট এ আমরা সাধারণত ইনডেক্স পাইলেও এখানে ম্যাপ এর ক্ষেত্রে ম্যাপ এর কী টা পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*feoGldo2_Tr8P7BirEReFg.png\" alt=\"\" /></p>\n<p>সেইমভাবে আমরা <code>for…of</code> দিয়েও লুপ চালাতে পারবোঃ</p>\n<pre><code>for(let [key, value] of favorite.entries()) {\n   console.log(`Key is: ${key} and the value is: ${value}`);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*u8V9OSjHFIj2e5MOGnvq3A.png\" alt=\"\" /></p>\n<p>এভাবেই আমরা জাভাস্ক্রিপ্ট এর ইএস৬ এ নতুন পরিচয় করিয়ে দেওয়া ম্যাপকে ইউজ করতে পারি। এখন এটাতে অন্যান্য ডাটা স্ট্রাকচার থেকে বেশী কি আছে? হ্যাঁ এই</p>\n<p>ম্যাপ ডাটা স্ট্রাকচারেঃ</p>\n<p>১। আমরা সহজেই লুপ চালাতে পারি।</p>\n<p>২। আমরা ম্যাপ এর সাইজ জানতে পারি</p>\n<p>৩। আর সবশেষে ম্যাপ থেকে ডাটা ঢুকানো বা ডিলেট করাও অনেক সহজ।</p>\n<blockquote>\n  <p>তবে মনে রাখবেন একদম নতুন কিছু হওয়ায় এই ডাটা স্ট্রাকচারের সাপোর্ট খুব কম। তাই কোথাও ইউজ করা আগে শিউর হয়ে নিবেন এটা সাপোর্টেড কিনা…</p>\n</blockquote>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-09T16:39:04.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)","thumb_img_path":"/images/es6.jpeg","content":"<p>জাভাস্ক্রিপ্ট অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাঙ্গুয়েজ হওয়া সত্বেও জাভাস্ক্রিপ্ট এ ইএস৫ পর্যন্ত এই ক্লাস(Class) এর কোনো ধারনাই ছিলো না। যারা অন্যান্য প্রোগ্রামিং ল্যাঙ্গুয়েজ থেকে জাভাস্ক্রিপ্ট এ আসে, তারা এই জিনিসটা মিসিং থাকায় অনেক সময় কনফিউজড হয়ে যায় জাভাস্ক্রিপ্ট কি আসলেই অবজেক্ট ওরিয়েন্টের প্রোগ্রামিং ল্যাঙ্গুয়েজের মধ্যে পড়ে কিনা এ নিয়ে।</p>\n<p>কিন্তু আসল ব্যাপার হলো জাভাস্কিপ্টও অবজেক্ট ওরিয়েন্টেড ল্যাঙ্গুয়েজ, কিন্তু অন্যান্য মেজর ল্যাঙ্গুয়েজগুলোর মতো ক্লাস বেসড না, বরং প্রোটোটাইপ বেসড ল্যাঙ্গুয়েজ। আর তাই জাভাস্ক্রিপ্ট এ ইএস৫ পর্যন্ত এই ক্লাসের ধারণাই ছিলো না। কিন্তু ইএস৬ এ অবশেষে সিন্ট্যাক্টিক শুগ্যার হিসেবে ক্লাস লাগানো হয়েছে। তার মানে হচ্ছে এই ক্লাস আসলে কিছুই না, ফাংশন কন্সট্রাকটরেরই অন্যরকম সিনট্যাক্স মাত্র।</p>\n<p>ইএস৫ এ আমরা ফাংশন কন্সট্রাক্টর এভাবে ইউজ করতে পারতামঃ</p>\n<pre><code>var Child5 = function(name, dob) {\n   this.name = name;\n   this.dob = dob;\n}\n</code></pre>\n<p>এখন এটার টাইপের নতুন একটা অবজেক্ট তৈরী করবো এভাবেঃ</p>\n<pre><code>var zawad = new Child5('Zawad Ahmed', 2017);\n</code></pre>\n<p>এখন এখান থেকে ডাটা প্রিন্ট করতে চাইলেঃ</p>\n<pre><code>console.log(zawad.name);\nconsole.log(zawad.dob);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*F7JtzcT7Kdwrg941bHnwrQ.png\" alt=\"\" /></p>\n<p>এখন আমরা যদি আমাদের এই ফাংশন কন্সট্রাকটর এ নতুন কোনো মেথড ঢুকাতে চাই তাহলে এভাবে সহজেই করতে পারবোঃ</p>\n<pre><code>Child5.prototype.currentAge = function() {\n   console.log(this.name + ' is ' + (2018 - this.dob) + ' years old!');\n}\n</code></pre>\n<p>এখন এই মেথডটাকে এই ফাংশন কন্সট্রাকটর দিয়ে যত অবজেক্ট তৈরী করা হবে সবাই অ্যাক্সেস করতে পারবেঃ</p>\n<pre><code>zawad.currentAge();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aIdwerKh78Yc7N4yVEMdLA.png\" alt=\"\" /></p>\n<p>এখন আমরা উপরের এই সেইম জিনিসটাই ইএস৬ এর সিন্ট্যাক্স ইউজ করে অর্থাৎ ক্লাস (Class) ইউজ করে করবো।</p>\n<pre><code>class Child6 {\n   constructor(name, dob) {\n      this.name = name;\n      this.dob = dob;\n   }\n\n   currentAge() {\n      console.log(`${this.name} is ${2018 - this.dob} years old!`);\n   }\n}\n</code></pre>\n<p>কি? এখানকার সিন্ট্যাক্সগুলো পরিচিত লাগছে না? আগে অন্য কোনো অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাঙ্গুয়েজ শিখে থাকলে এগুলো অবশ্যই পরিচিত লাগার কথা। যদিও বিহ্যাইন্ড দ্যা সীনে এটাও ফাংশন কন্সট্রাকটরই।</p>\n<p>এখানে <code>constructor</code> মেথডটা অবশ্যই লাগবে। এটা আপনার অবজেক্ট এর ইনিশিয়াল ভ্যালুগুলো সেট করার জন্যে ইউজ হবে। আর ক্লাসে এটা একটা স্পেশাল মেথড। যাই হউক এবার আমরা নতুন একটা অবজেক্ট তৈরী করবো এই ক্লাস থেকেঃ</p>\n<pre><code>const zawad6 = new Child6('Zawad Ahmed', 2017);\n</code></pre>\n<p>এখন আমরা সেইমভাবে এই নতুন অবজেক্ট থেকেও ডাটাগুলো অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>console.log(zawad6.name);\nconsole.log(zawad6.dob);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Of2DcPW0s60pkMjIQAM8Qg.png\" alt=\"\" /></p>\n<p>সেইমভাবে আমরা ক্লাসের ভিতরের মেথডটাকেও অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>zawad6.currentAge();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-QoEcIGLI0yWPOamrjG93g.png\" alt=\"\" /></p>\n<p>এখন জাভাস্ক্রিপ্ট এ ক্লাস ঠিক ফাংশনের মতো করেই দুইভাবে নেওয়া যায়ঃ</p>\n<p>১। ক্লাস স্টেটমেন্ট;</p>\n<p>২। ক্লাস এক্সপ্রেশন;</p>\n<p><strong>ক্লাস স্টেটমেন্টঃ</strong> ক্লাস স্টেটমেন্ট ঠিক <code>class</code> কীওয়ার্ড দিয়েই ডিক্লেয়ার করতে হয়। আর অবশ্যই একটা নাম দিতে হবে এই টাইপের ক্লাসের জন্যে। উপরের দেখানো উদাহরণে ব্যবহৃত ক্লাস ক্লাস স্টেটমেন্ট এ পড়েঃ</p>\n<pre><code>class ClassStatement { \n...\n}\n</code></pre>\n<p><strong>ক্লাস এক্সপ্রেশনঃ</strong> এটাও সেইম ফাংশন এক্সপ্রেশনসের মতো। আমরা নাম পরিচয়বিহীন একটা ক্লাস নিবো, আর সেটাকে একটা ভ্যারিয়েবলে অ্যাসাইন করবো। ব্যাস হয়ে গেলো ক্লাস এক্সপ্রেশন! এখানে ক্লাসের নাম থাকাটা জরুরী না, যেহেতু আলটেমেটলি আমরা এটাকে আরেকটা ভ্যারিয়েবলেই অ্যাসাইন করতেছি। ভ্যারিয়েবলটাই ক্লাসে পরিচয় বহন করবে। আর কোনো পার্থক্য নেই এই দুই টাইপের ক্লাসের মধ্যেঃ</p>\n<pre><code>const ClassExpression = class {\n   ...\n}\n</code></pre>\n<p>এখন ক্লাসের ক্ষেত্রে হোইস্টিং একটু অন্যরকমভাবে কাজ করে। ক্লাস হোইস্টেড হয় না ফাংশনের মতো। <strong>এমনকি ক্লাস স্টেটমেন্টও না</strong>। অনেকে এটা ভেবে ভুল করতে পারে যে ক্লাস এক্সপ্রেশন হোইস্টেড হয় না সেটার যুক্তি আছে, আমরা ফাংশন এক্সপ্রেশনের ক্ষেত্রেও দেখেছি সেটা। কিন্তু ক্লাস স্টেটমেন্টে হয়তো হতেও পারে, যেহেতু ফাংশন স্টেটমেন্ট এ হয় বা ক্লাস স্টেটমেন্ট দেখতেও অনেকটা ঐরকমভাবেই কাজ করে বলে মনে হয়। কিন্তু না! ক্লাস কখনই হোইস্টেড হয় না। আর তাই আপনি একটা ক্লাস ডিফাইন করার আগে কখনই ইউজ করতে পারবেন না। এরর আসবে সোজা।</p>\n<h4 id=\"\">ক্লাসে প্রোটোটাইপ বেসড ইনহেরিট্যান্সঃ</h4>\n<p>ক্লাস যেহেতু সিন্ট্যাক্টিক শুগ্যার, তাই ইনহেরিট্যান্সেও একটু ভিন্নতা আছে সিন্ট্যাক্সে। আর তাই আমরা দেখবো কিভাবে সেটা কাজ করে ক্লাসের ক্ষেত্রে।</p>\n<p>প্রথমে প্রোটোটাইপ বেসড ইনহেরিট্যান্সটাই দেখি। ইএস৫ এ আমরা একটা ফাংশন কন্সট্রাকটর ডিক্লেয়ার করার পরে সেটাতে নতুন আরেকটা মেথড অ্যাসাইন করিয়েছিলাম <code>prototype</code> ইউজ করে। আমাদের সেই ফাংশন কন্সট্রাকটর প্রথমে দেখতে এমন ছিলোঃ</p>\n<pre><code>var Person5 = function(name, age, job) {\n   this.name = name;\n   this.age = age;\n   this.job = job;\n}\n</code></pre>\n<p>এখন এটাতে নতুন একটা মেথড অ্যাসাইন করতে চাইঃ</p>\n<pre><code>Person5.prototype.dateOfBirth = function() {\n   console.log(this.name + ' born in ' + (2018 - this.age));\n}\n</code></pre>\n<p>আমরা এখন এটা থেকে অবজেক্ট বানিয়ে এই মেথডটাকে অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>var zawad5 = new Person5('Zawad Ahmed', 1, 'Child');\n</code></pre>\n<p>অবজেক্ট তৈরী হয়ে গেলো। এখন আমরা এই অবজেক্ট থেকেও আমাদের পরে অ্যাসাইন করা মেথডটাকে অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>zawad5.dateOfBirth();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*gBVfGTHGvzicFssQKrDF_Q.png\" alt=\"\" /></p>\n<p>আমরা জানি ইএস৬ এর ক্লাসে কন্সট্রাকটর <code>constructor</code> মেথডের ভিতরে আমাদের ভ্যালুগুলো সেট করতে হয়, চাইলে সেখানেও আমরা আমাদের মেথড অ্যাসাইন করতে পারি ঠিক আগের মতোই। কিন্তু আমরা এই <code>constructor</code> মেথডের বাইরেও চাইলে মেথড নিতে পারবো এভাবেঃ</p>\n<pre><code>class Person6 {\n   constructor(name, age, job) {\n      this.name = name;\n      this.age = age; \n      this.job = job\n   }\n   dateOfBirth() {\n      console.log(`${this.name} is born in ${2018 - this.age}`);\n   }\n}\n</code></pre>\n<p>এখন এটা থেকে ইচ্ছামতো অবজেক্ট তৈরী করতে পারবো আর সবাই এই মেথডটাকেও অ্যাক্সেস করতে পারবেঃ</p>\n<pre><code>const zawad6 = new Person6('Zawad Ahmed', 1, 'Child');\n</code></pre>\n<p>এখন আমরা এই <code>zawad6</code> থেকে আমাদের উক্ত মেথডটাকে অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>zawad6.dateOfBirth();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7XjV-Aoskut7TzIp4krPoA.png\" alt=\"\" /></p>\n<p>এখন আমরা চাইলে খাতা-কললে ইএস৫ এর টেকনিক ইউজ করেও মেথড অ্যাসাইন করতে পারতাম <code>prototype</code> এর সাহায্যেঃ</p>\n<pre><code>class Person56 {\n   constructor(name, age, job) {\n      this.name = name;\n      this.age = age; \n      this.job = job\n   }\n}\n</code></pre>\n<p>এটা যেহেতু আমরা দাবী করতেছি সিন্ট্যাক্টিক শুগ্যার হিসেবে, সেই হিসাবে আমাদের আগের ইএস৫ এর টেকনিকও কাজ করার কথাঃ</p>\n<pre><code>Person56.prototype.dateOfBirth = function() {\n   console.log(this.name + ' born in ' + (2018 - this.age));\n}\n</code></pre>\n<p>রান করানোর পর কোনো এরর আসে নাই। তাহলে এবার একটা অবজেক্ট তৈরী করে দেখি তাহলেঃ</p>\n<pre><code>const zawad56 = new Person56('Zawad Ahmed', 1, 'Child');\n</code></pre>\n<p>এবার দেখি তাহলে মেথডটাকে অ্যাক্সেস করা যায় কিনাঃ</p>\n<pre><code>zawad56.dateOfBirth();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*hfzP4updjOzv5nPmwBzV0Q.png\" alt=\"\" /></p>\n<p>এখান থেকে ক্লিয়ার যে ক্লাস আসলে জাভাস্ক্রিপ্ট এ নতুন কোনো অবজেক্ট ওরিয়েন্টেডের মডেল তৈরী করে নাই, বরং সব আগেরগুলোই আছে। কিন্তু এভাবে ইএস৫ আর ইএস৬ মিক্স করে কোড লেখা ব্যাড প্র্যাক্টিস। তাই অ্যাভয়েড করাই ভালো।</p>\n<p>পরের পর্বে পৃথক করে ক্লাসের ইনহেরিট্যান্স নিয়ে বিস্তারিত কথা বলবো। আজকে এই পর্যন্তই।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-18T16:38:48.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)","thumb_img_path":"/images/es6.jpeg","content":"<p>গত পর্বে আমরা জাভাস্ক্রিপ্ট এ নতুন সিন্ট্যাক্টিক শ্যুগার ক্লাস (Class) সম্পর্কে জেনেছি। এটা যেহেতু আসলে নতুন সিনট্যাক্স ছাড়া কিছুই না, তাই ফাংশন কন্সট্রাকটরের মতো করেও অনেক কিছু করা যাবে এটাতে। এগুলো সম্পর্কে আমরা অলরেডি জেনেছি। কিন্তু আজকের এই পর্বে ক্লাস দিয়ে আরো কি কি করা যায় সেগুলো দেখবো।</p>\n<p>কিন্তু এখন আমাদের যদি এরকম সিচুয়েশান আসে যেখানে আমাদের দুইটা অনেকটা একইরকম ক্লাস থাকতে পারে। যেটা আমি ইএস৫ এ <a href=\"https://js.zonayed.me/#/js-advance/458\">উদাহরণ</a> দিয়েছিলাম কন্সট্রাকটর ফাংশনের ক্ষেত্রে। ধরি আমাদের একটা ক্লাস আছে <code>PersonClassDemo</code> নামেঃ</p>\n<pre><code>class PersonClassDemo {\n   constructor(name, age, job) {\n      this.name = name;\n      this.age = age;\n      this.job = job;\n      this.dateOfBirth = () =&gt; {\n         console.log(`${this.name} is born in ${2018 - this.age}`);\n      }\n   }\n}\n</code></pre>\n<p>আরেকটা আছে <code>TeacherClassDemo</code> নামে, যেখানে টিচারের পার্সনের মতোই সব বৈশিষ্ট্য আছে, কিন্তু একটা বেশী আছেঃ</p>\n<pre><code>class TeacherClassDemo {\n   constructor(name, age, job, dateOfBirth, subject) {\n      this.name = name;\n      this.age = age;\n      this.job = job;\n      this.subject = subject;  \n      this.dateOfBirth = dateOfBirth;\n   }\n}\n</code></pre>\n<p>তো এক্ষেত্রে আমাদের দুইটা আলাদা আলাদা ক্লাস বানানোর কোনো দরকার নাই। আমরা প্রথমটা থেকে প্রথমটার বৈশিষ্ট্যগুলো ইনহেরিট করতে পারবো। ধরি আমাদের প্রথম ক্লাস এটা আছেঃ</p>\n<pre><code>class PersonClass {\n   constructor(name, age, job) {\n      this.name = name;\n      this.age = age;\n      this.job = job;\n   }\n}\n</code></pre>\n<p>এখন আমরা টিচারের জন্যে আরেকটা বানাবো যেটাতে পার্সনের সব বৈশিষ্ট্য তো আছেই, সাথে অতিরিক্ত একটা আছে। আমরা ইনহেরিট করবো সবগুলো, আর অতিরিক্ত টা ডিফাইন করে দিবো এভাবেঃ</p>\n<pre><code>class TeacherClass extends PersonClass {\n   constructor(name, age, job, subject) {\n      super(name, age, job);\n      this.subject = subject;\n   }\n}\n</code></pre>\n<p>ব্যাস হয়ে গেলো আমাদের ইনহেরিট্যান্স। আমরা এখানে একটা স্পেশাল কীওয়ার্ড ইউজ করেছি <code>super</code> নামে। বাকি সব সেইম। <code>constructor</code> মেথডে ঠিক কি কি থাকবে সবগুলোই ডিফাইন করেছি, তারপর <code>super</code> কীওয়ার্ড দিয়ে আমরা এর মধ্যে যেগুলো <code>PersonClass</code> থেকে ( এখানে <code>name</code>, <code>age</code>, <code>job</code>) ইনহেরিট হবে সেগুলো বলে দিয়েছি। ব্যাস এভাবেই ইনহেরিট হয়ে গেলো। এখন এখানে আমরা নতুন অবজেক্ট তৈরী করে সেটা ইউজ করতে পারবোঃ</p>\n<pre><code>const ourSir = new TeacherClass('Shafiq Sir', 46, 'Assistant Teacher', 'Physics');\n</code></pre>\n<p>এখন এই নতুন অবজেক্ট তৈরী হয়ে গেলো। পরীক্ষা করে দেখি সব ঠিক আছে কিনাঃ</p>\n<pre><code>console.log(ourSir.name);\nconsole.log(ourSir.age);\nconsole.log(ourSir.job);\nconsole.log(ourSir.subject);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*7uYNu5Xu54wi2aHhIO5P8A.png\" alt=\"\" /></p>\n<p>এখন সেইমভাবে আমাদের ক্লাসে যদি কোনো মেথডও থাকে তাহলে সেটাও ইনহেরিট করা যাবে সহজেই। ধরি আমাদের একটা ক্লাস আছে মেথডসহঃ</p>\n<pre><code>class PersonClassMeth {\n   constructor(name, age, job) {\n      this.name = name;\n      this.age = age;\n      this.job = job;\n   }\n   dateOfBirth() {\n      console.log(`${this.name} born in ${2018 - this.age}`);\n   }\n}\n</code></pre>\n<p>এখন আরেকটা ক্লাস তৈরী করি যেটাতে আমরা উপরের সবকিছু ইনহেরিট করবোঃ</p>\n<pre><code>class TeacherClassMeth extends PersonClassMeth {\n   constructor(name, age, job, subject) {\n      super(name, age, job);\n      this.subject = subject;\n   }\n}\n</code></pre>\n<p>আসলে প্যারেন্ট ক্লাস থেকে মেথড আনতে অতিরিক্ত কিছু করা লাগবে না, <code>super</code> কীওয়ার্ডটাই সব করে দিবে আমাদের হয়ে। এখন এই ক্লাস থেকে নতুন অবজেক্ট তৈরী করিঃ</p>\n<pre><code>const ourSirMeth = new TeacherClassMeth('Shafiq Sir', 46, 'Assistant Teacher', 'Physics');\n</code></pre>\n<p>এখন আমরা বাকি সবগুলো প্রপার্টির অ্যাক্সেস তো পাবোই, সে সাথে আমাদের সেই মেথডটাও অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>console.log(ourSirMeth.dateOfBirth());\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*AlxcPRfcu_5LUK292fTARQ.png\" alt=\"\" /></p>\n<p>এখন আমরা এরকম কিছু মেথডও চাইতে পারি যেগুলো শুধুমাত্র আমাদের ক্লাসে থাকবে। কিন্তু ক্লাস থেকে যে অবজেক্ট তৈরী করবো, সেগুলো সেই মেথডের অ্যাক্সেস পাবে না। হ্যাঁ একটা স্পেশাল কীওয়ার্ড <code>static</code> দিয়ে আমরা এই ধরনের মেথড নিতে পারিঃ</p>\n<pre><code>class StaticMethod {\n   constructor(name) {\n      this.name = name;\n   }\n   static aSpecMeth() {\n      console.log('I am A Special Method!');\n   }\n}\n</code></pre>\n<p>এখন এইখানে এই মেথডটাকে আমরা ক্লাস দিয়ে সরাসরি অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>console.log(StaticMethod.aSpecMeth());\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*HSFvHIJJoI1sW2YU281Qxg.png\" alt=\"\" /></p>\n<p>কিন্তু, এখন যদি আমরা একটা অবজেক্ট তৈরী করি এই ক্লাস থেকেঃ</p>\n<pre><code>const aMeth = new StaticMethod('Zonayed Ahmed');\n</code></pre>\n<p>এবার অন্যান্য সবগুলোর মতো যদি আমরা এই <code>static</code> মেথডটাকে অ্যাক্সেস করতে চাইঃ</p>\n<pre><code>console.log(aMeth.aSpecMeth());\n</code></pre>\n<p>এরর আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ieDYX5ybptYKrQoCoDlDJw.png\" alt=\"\" /></p>\n<p>কারণ এটা <code>static</code> মেথড। এটা শুধুমাত্র উক্ত ক্লাস দিয়েই অ্যাক্সেস করা যাবে, কিন্তু সেই ক্লাস দিয়ে তৈরী কোনো অবজেক্ট দিয়ে অ্যাক্সেস করা যাবে না।</p>\n<p>তবে ডেভেলপার হিসেবে আমরা হয়তো <code>private</code> মেথডও চাইতে পারি(যদি আপনি অন্য কোনো ল্যাঙ্গুয়েজে অভ্যস্ত হয়ে থাকেন, এই পর্যায়ে এসে এই কীওয়ার্ডটা মিস করতেও পারেন)। চিন্তা কারণ নাই সামনে এটাও পাবেন হয়তো। আপাতত <a href=\"https://github.com/tc39/proposal-class-fields\">প্রপোজালে</a> আছে, আমিও চাই এটা অ্যাড হউক।</p>\n<p>আরেকটা জিনিস মনে রাখবেন, ক্লাসের ভিতরে সব কোড কিন্তু স্ট্রিক্ট মোডে চলবে। আর ক্লাস নিয়ে যথেষ্ট প্র্যাক্টিস করতে হবে কিভাবে কাজ করে সেটা বুঝতে চাইলে। সব কিছুই প্র্যাক্টিস করতে হবে, তবে এই একটা জিনিস আমারও বুঝতে একটু প্রব্লেম হইছিলো প্রথম দিকে।</p>"},{"language":"বাংলা","tags":["coding","ECMAScript6","ES6","JavaScript","JavaScript-Bangla","programming","ইএস৬","ইকমাস্ক্রিপ্ট৬","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-22T16:38:41.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ ","thumb_img_path":"/images/es6.jpeg","content":"<p>আমরা জাভাস্ক্রিপ্ট এর নতুন ভার্শন ইএস৬ এ আরো সহজভাবে, আরো পাওয়ারফুল ওয়েতে কোড লিখতে পারি। ইএস৫ থেকে তুলনামূলকভাবে ইএস৬ এ কোড কম লিখতে হয় অনেক ক্ষেত্রে, আর সেই সাথে অনেক সমস্যা এখন কম কোডেও সমাধান করা যাচ্ছে। দেখতে সুন্দর, কম লেখালেখি, স্মার্ট কোনকিছুই বাদ নাই এই ভার্শনে। তাইলে আমরা কি এখনও ইএস৫ ইউজ করবো? নাকি ইএস৬ ইউজ করবো? একদিকে থেকে ইএস৬ এর নতুন নতুন সিনট্যাক্সসহ আরো অনেক সুবিধার কারণে হয়তো আমরা ইএস৬ ইউজ করাটাই বুদ্ধিমানের কাজ হবে। তাছাড়া আমরা ডেভেলপাররা তো ব্যাকডেটেড থাকতে পছন্দ করি না। তাই আমাদের আপডেটেড থাকতে চাইলে এখনি ইএস৬ ইউজ করা শুরু করা উচিত।</p>\n<p>কিন্তু কথা আছে! কথা হলো এই ইএস৬ যেহেতু অপেক্ষাকৃত নতুন ভার্শন, আর তাই আপনি আপনার অ্যাপ্লিকেশনে এটা ইউজ করার আগে ভেবে নিতে হবে যে এই কোড সবার ডিভাইসে সাপোর্ট করবে কিনা। এখন এটা আলাদা আলাদাভাবেও দেখা সম্ভব না যে আপনার অ্যাপ্লিকেশন যারা ইউজ করবে তাদের ডিভাইস কি সাপোর্ট করে নাকি করে না। তবে একটা জিনিস আপনি যেটা করতে পারেনঃ আপনি যদি শিউর হয়ে থাকেন এখানে এখানে, অমুক অমুক ডিভাইসে, ইনভারোমেন্টে আমার এই অ্যাপ্লিকেশন চলবে। তাহলে ঐসব ইনভারোমেন্টে ইএস৬ সাপোর্ট করলে আপনি নিশ্চিন্তে সরাসরিই ইউজ করতে পারবেন। কিন্তু বেশীরভাগ ক্ষেত্রে যেটা হয় আমরা ইনভারোমেন্ট সম্পর্কে ধারণা পাই না। সেক্ষেত্রে যেই কোডগুলো সেইফ বেশী, যেমন ইএস৫ অলমোস্ট সব জায়গাতেই(মেজর ইনভারোমেন্টগুলোতে) পুরোপুরি সাপোর্ট করে, সেই ভার্শনেই কোড লেখা উচিত। কিন্তু কিভাবে বুঝবো যে কোন কোড কোথায় কোথায় সাপোর্ট করবে আর কোথায় কোথায় করবে না? হ্যাঁ, সেজন্যে নিচের এই ওয়েবসাইটটায় দেখতে পারবেনঃ</p>\n<ul>\n<li><a href=\"https://kangax.github.io/compat-table/es6/\" title=\"https://kangax.github.io/compat-table/es6/\"><strong>ECMAScript 6 compatibility table</strong></a></li>\n</ul>\n<p>যদিও ইএস৬ এর বেশীরভাগ ফিউচারই আমাদের এখনকার মেজর ইনভারোমেন্ট(ব্রাউজার, নোড জেএস) এ সাপোর্ট করে। কিন্তু এখনো অনেক মানুষ এরকম কিছু ইনভারোমেন্ট ইউজ করে যেগুলোতে পুরোপুরি সাপোর্ট করে না। তারমানে ইএস৬ ইউজ করা এখনো সেইফ না, অথবা প্রোডাকশনে বেশীরভাগ ক্ষেত্রেই ইউজ করা হয় না বলতে গেলে। কিন্তু তাই বলে কি আমরা ইএস৬ ইউজ করবো না? অবশ্যই করবো! এখনকার বেশীরভাগ ফ্রেমওয়ার্কেই বলতে গেলে ইএস৬ ইউজ করা হয়। আপনি অন্যান্য ডেভেলপারদের বা কাজের সময়েও দেখবেন ইএস৬ সিনট্যাক্স ইউজ করেই কোড লেখা হয়। ইএস৬ যেহেতু অপেক্ষাকৃত ক্লিন, সহজভাবে লেখা যায়, আর তাই ডেভেলপার কমিউনিটিতে এটা বেশ পপুলার। কিন্তু ডেভেলপ করার সময় ইএস৬ সিনট্যাক্স ইউজ করা হলেও প্রোডাকশনে বা আসল অ্যাপ্লিকেশনের সাথে সাধারণত ইএস৫ এর কোডই ডেলিভার করা হয়। যেহেতু এখনো পুরোপুরি সাপোর্টেড না ইএস৬, তাই ইএস৫ ইউজ করেই আসল প্রোডাক্ট ডেলিভার করা হয়। কিন্তু ডেভেলপাররা ইএস৬ ক্লিন আর সহজ হওয়ায় ডেভেলপমেন্ট এর সময় ইএস৬ এর সিনট্যাক্সই ইউজ করে। পরে অনেক টুলস আছে, ঐগুলো দিয়ে ইএস৫ এ কনভার্ট করে নিয়ে গিয়ে আসল প্রোডাকশন ভার্শনে ডেলিভার করা হয়। আমরাও তাই এই পর্বে দেখবো কিভাবে ইএস৬ এ কোড লিখে সহজেই ইএস৫ এ কনভার্ট করে নেওয়া যায়।</p>\n<p><a href=\"https://babeljs.io/en/repl\">এই ওয়েবসাইটে</a> গেলে লাইভ একটা REPLপাবেন। এখানে বাম দিকে ইএস৬ এর কোড দিলে ডানদিকে ইএস৫ এর কোড পাবেন। এখান থেকে সহজেই আপনি কোড কনভার্ট করে নিতে পারবেন। আমরা কিছু ডিমো দেখে নিচ্ছি…</p>\n<p>প্রথমে আমরা <code>let</code> আর <code>const</code> এর সাথে পরিচিত হয়েছিলাম। আর তাই আমরা যদি নিচের কোডটা এই ব্যাবেল এর REPL এ দেইঃ</p>\n<pre><code>let name = 'Zonayed Ahmed';\nconst anoName = 'Zawad Ahmed';\n</code></pre>\n<p>এটা দেখবেন বাম দিকে কনভার্ট হয়ে এরকম কোড আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*x33577LBJ4ZPPQV0VaSE-g.png\" alt=\"\" /></p>\n<p>তারপর আমরা টেমপ্লেট লিটারেল(Template Literal)এর সিনট্যাক্স দিয়ে দেখতে পারিঃ</p>\n<pre><code>const name = 'Zonayed Ahmed',\n      age = 21,\n      work = 'Student';\n\nconsole.log(`My name is ${name} and I\\'m ${age}years old! Currently I\\'m a ${work}`);\n</code></pre>\n<p>এটাও কনভার্ট হয়ে দেখবেন ইএস৫ এর সিনট্যাক্স এ চলে আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Z5W9_qZiGmC46iPoairM5w.png\" alt=\"\" /></p>\n<p>সেইম অ্যারো ফাংশনের ক্ষেত্রেওঃ</p>\n<pre><code>const aArrowFunc = () =&gt; {\n const sum = 10 + 20;\n   console.log(sum);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*YHOCm_UWjTBsrFccOzrJaQ.png\" alt=\"\" /></p>\n<p>আমরা কন্সট্রাকটর ফাংশনের নতুন সিনট্যাক্স দেখেছিলাম <code>class</code> ক্লাস দিয়ে লেখা কোড লিখলেঃ</p>\n<pre><code>class Child6 {\n   constructor(name, dob) {\n      this.name = name;\n      this.dob = dob;\n   }\n\n   currentAge() {\n      console.log(`${this.name} is ${2018 - this.dob} years old!`);\n   }\n}\n</code></pre>\n<p>এখানে দেখবেন ইএস৫ এ বিশাল কোড চলে আসছে। বিহ্যাইন্ড দ্যা সীনে কতোকিছু করতে হচ্ছে এই কোড দেখলেই বুঝে আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*_iUbbieYhrW_0q18mcmU5w.png\" alt=\"\" /></p>\n<p>এই পর্যন্ত নতুন ইএস৬ এর মোটামোটি সবগুলো সিনট্যাক্সকেই কনভার্ট করতে পারবেন এখানে। কিন্তু কিছু আছে যেগুলো একটু কঠিন। যেমন আমরা ম্যাপ(Map) নামে নতুন একটা ডাটা স্ট্রাকচারের পরিচয় করিয়ে দিয়েছিলাম ইএস৬ এ। ম্যাপকে কনভার্ট করতে পারবেন না সহজেঃ</p>\n<pre><code>const zawad = new Map();\nzawad.set('fullName', 'Zawad Ahmed');\nzawad.get('fullName');\n</code></pre>\n<p>এবার ডানদিকেও দেখবেন সেইম জিনিসই আছে, এটা কনভার্ট হয়নিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Z2iNuEaC8jyFvQFQAdZ4gQ.png\" alt=\"\" /></p>\n<p>এখন এটাকেও কনভার্ট করার জন্যে আমাদের ব্যাবেলের একটা প্লাগিন ইউজ করতে হবে। আপনি যদি একদম বাম দিকে দেখে থাকেন ব্যাবেল REPL এর, তাহলে দেখবেন এখানে কিছু অপশন আছে। তারমধ্যে আপনি Plugins নামেও একটা অপশন পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*vkTxtD3s-Mrwku2aJhxMkg.png\" alt=\"\" /></p>\n<p>এটা খুলে Add Plugins এ ক্লিক করে <code>babel-plugin-transform-runtime</code> নামে একটা প্লাগিন অ্যাড করে নিতে হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*XXUn-WD4t53FdJxL1UzxCA.png\" alt=\"\" /></p>\n<p>অ্যাড করে নিলে এবার দেখবেন এই নতুন ম্যাপ এর সিনট্যাক্সও কনভার্ট হয়ে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*5lW1x32etQnxtkcgKQDs5Q.png\" alt=\"\" /></p>\n<p>এখান এভাবে ম্যানুয়ালি কনভার্ট করতে পারবেন ইএস৬ বা আরো হায়ার ভার্শনের কোডকে ইএস৫ কোডে। অল্প কোডের জন্যে ঠিক আছে। কিন্তু বেশী কোড হলে বা প্রোজেক্ট হলে কি হবে? হ্যাঁ সেক্ষেত্রে অবশ্যই এই মেথডটা অনেক সময়ের ব্যাপার, আর একই সাথে বিরক্তিকর। তবে ভাবার কোনো কারণ নাই, আপনি হয়তো কোনো ফ্রেমওয়ার্ক ইউজ করবেন কাজ করার জন্যে। এখনকার মডার্ণ ফ্রেমওয়ার্ক বা লাইব্রেরীগুলো বেশীরভাগই এমনভাবে সেটাপ করা থাকে যে আপনি ইএস৬ এই কোড লিখবেন, আর এগুলো অটো সেই কোড ইএস৫ বা প্রয়োজনমত কনভার্ট করে নিবে। আপনাকে এগুলো নিয়ে ভাবতেও হবে না একদম। আপনি জাস্ট কোড লিখে যাবেন ইএস৬ সিনট্যাক্স ইউজ করে। তাই এটা খুব বেশী একটা সমস্যার মধ্যেও পড়েনা। কিন্তু তারপরেও আমরা দেখবো কিভাবে আমরা নিজেরাও একটা এরকম একটা ইনভারোমেন্ট সেটাপ করতে পারি, যেটা আমাদের ইএস৬ এর কোডকে ইএস৫ এ নিয়ে যাবে।</p>\n<p>এখানে আমি যে কাজগুলো করবো সেগুলো আপনি আগে থেকে পরিচিতি না থাকলে কিছু নাও বুঝতে পারেন। তবে আমি সাজেস্ট করবো জাস্ট আমার মতো করে যান। আর জাভাস্ক্রিপ্ট কতটুকু পাওয়ারফুল এবং ব্রাউজারের বাইরেও যে সেটা কাজ করতে পারবেন এখান থেকে কিছুটা হলেও ধারণা পাবেন।</p>\n<p>আমাদের এরজন্যে প্রথমেই নোড জেএস ইন্সটল থাকতে হবে। আপনার ইন্সটল করা না থাকলে <a href=\"https://nodejs.org/\">এখান থেকে</a> LTS ভার্শন ডাউনলোড করে ইন্সটল করে নিবেন। তারপর আপনার পছন্দের কমান্ড লাইন, বা সিস্টেমের সাথে থাকা কমান্ড লাইন ওপেন করে নিচের কমান্ডগুলো দিয়ে চেক করুন নোড জেএস ঠিকমতো সেটাপ করা হয়েছে কিনা। আমি <a href=\"http://cmder.net/\">cmder</a> ইউজ করি আমার কমান্ড লাইন হিসেবেঃ</p>\n<pre><code>node -v\n</code></pre>\n<p>সব ঠিকঠাক থাকলে এরকম আউটপুট পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*oP3-E9CSw3YhA250BmJnTg.png\" alt=\"\" /><strong>আপনার ভার্শন নাম্বার বেশীও হতে পারে</strong></p>\n<p>আবার আরেকটা কমান্ড দিবেনঃ</p>\n<pre><code>npm -v\n</code></pre>\n<p>সেইম এরকম আউটপুট পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Jy1d3k_4SxsyJob0CfBvDA.png\" alt=\"\" /><strong>ভার্শন নাম্বার ভিন্ন হতে পারে, তবে এখানকার চাইতে বেশী বা সমানই হবে</strong></p>\n<p>এগুলো ছাড়া অন্যকোনো আউটপুট আসলে নোড জেএস ঠিকমতো সেটাপ হয়েছে কিনা আবার দেখে ট্রাই করবেন। আশা করি সমস্যা হবে না।</p>\n<p>এখন আমাদের একটা প্রোজেক্ট সেটাপ করতে হবে। যেখানে আমরা মূলত ইএস৬ এর কোডকে ইএস৫ এ কনভার্ট করবো। আর তাই যেখানে এই প্রোজেক্টটা রাখতে চান সেখানে একটা ফোল্ডার/ডিরেক্টরি বানিয়ে সেখান থেকে আপনার কমান্ড লাইনে এই কমান্ড দিয়ে প্রোজেক্ট সেটাপ করুন। যেমন আমি আমার <code>Desktop</code> এ একটা ফোল্ডার/ডিরেক্টরি করেছি <code>es5toes6</code> নামে এবং পরে কমান্ড লাইন দিয়ে সে ফোল্ডার/ডিরেক্টরিতে গিয়েছিঃ</p>\n<pre><code>cd es5toes6\n</code></pre>\n<p>এখন এখানে আমরা আমাদের প্রোজেক্ট সেটাপ করবোঃ</p>\n<pre><code>npm init -y\n</code></pre>\n<p>ব্যাস, প্রোজেক্ট সেটাপ হয়ে গেলো। এখন আমাদের ব্যাবেলের CLI নামাতে হবে এভাবেঃ</p>\n<pre><code>npm install -g babel-cli\n</code></pre>\n<p><em>***আপনি লিনাক্স বা অন্য কোনো অপারেটিং সিস্টেম ইউজ করে থাকলে এই কমান্ডের আগে <code>sudo</code> ও ইউজ করতে হতে পারে।</em></p>\n<p>এটা নেমে গেলে এবার আমরা আমাদের প্রোজেক্ট ডিরেক্টরিতে <code>.babelrc</code> নামে একটা ফাইল তৈরী করবো। ফাইলের নামের আগের ডটটা খেয়াল রাখবেন। এটা হিডেন ফাইল, তাই সরাসরি নাও দেখতে পারেন। তবে আপনার কোডে এডিটর দিয়ে পাবেন, এবং এটা খুলে নিচে এই কোডটা লিখুন। এটা জাস্ট কনফিগারেশনঃ</p>\n<pre><code>{\n  \"presets\": [\"env\"]\n}\n</code></pre>\n<p>ব্যাস, আপাতত আমাদের সব কনফিগারেশন শেষ। এখন এখানে একটা <code>.js</code> ফাইল নিয়ে আমরা ইএস৬ এর কিছু কোড লিখবো। আমি একটা ফাইল নিয়েছি <code>script.js</code> নামে, আর ভিতরে কিছু ইএস৬ এর কোড লিখলামঃ</p>\n<pre><code>const name = 'Zonayed Ahmed',\n      age = 21,\n      work = 'Student';\n\nconsole.log(`My name is ${name} and I\\'m ${age}years old! Currently I\\'m a ${work}`);\n\nconst aArrowFunc = () =&gt; {\n const sum = 10 + 20;\n   console.log(sum);\n}\n\nclass Child6 {\n   constructor(name, dob) {\n      this.name = name;\n      this.dob = dob;\n   }\n\n   currentAge() {\n      console.log(`${this.name} is ${2018 - this.dob} years old!`);\n   }\n}\n</code></pre>\n<p>এখন এটাকে আমরা কনভার্ট করে <code>script-es5.js</code> নামক একটা ফাইলে রাখবো। এজন্যে কমান্ড লাইনে এই কমান্ডটা দিতে হবেঃ</p>\n<pre><code>babel script.js -o script-es5.js\n</code></pre>\n<p>এখানে আমরা প্রথমে <code>babel</code> কমান্ড দিয়েছি, তারপর কোন ফাইলটা কনভার্ট করবে আর পরে কি নামে করবে সেটা দিয়েছি। এই কমান্ড দিয়ে এন্টার দিলেই দেখবেন আপনার নতুন <code>script-es5.js</code> নামে একটা ফাইল হয়েছে যেখানে আপনার কোড ইএস৫ এ কনভার্ট হয়ে গেছে।</p>\n<p>এখন আমরা এমনও চাইতে পারি যে আমরা কোড লিখবো আর অটোমেটিক্যালি আমাদের ইএস৫ ভার্শনের ফাইলটা কনভার্ট হয়ে আপডেট হতে থাকবে। সেজন্যে আমাদের ব্যাবেলেরই আরেকটা অপশন বাড়িয়ে দিতে হবে এরকমভাবেঃ</p>\n<pre><code>babel --watch script.js -o script-es5.js\n</code></pre>\n<p>এই কমান্ড দেওয়ার পর দেখবেন কমান্ড লাইন অপেক্ষা করছে। এবার আপনি ইএস৬ এর কোড লিখে সেইভ দেওয়া মাত্রই আপনার পরিবর্তনগুলো ইএস৫ ভার্শনের ফাইলটায় সেইভ হয়ে যাবে। আপনাকে কনভার্ট করার জন্যে বারবার ম্যানুয়ালি কমান্ড দিতে হবে না। <code>--watch</code> ইউস করে কমান্ড দিয়ে কোড লিখবেন, সেইভ দিবেন, আর অটো সেটা সাথে সাথে কনভার্ট হয়ে যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*D0Q0jeG88XFPY0wrx9PgEw.png\" alt=\"\" /></p>\n<p>ব্যাস এভাবেই আপনার ডেভেলপমেন্ট প্রসেসটা অনেকটাই অটোম্যাটেড করে ফেলতে পারবেন। নোড জেএস শিখলে এরকম বা এরচাইতেও বেশী পাওয়ারফুল আরো অনেক কাজই করতে পারবেন। তাই জাভাস্ক্রিপ্ট জানা হয়ে গেলে আপনি নোড জেএস এ জাম্প করতে পারেন।</p>"}],"dom":[{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","javascript-dom","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-ডম","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-21T16:37:00.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম","thumb_img_path":"/images/1_eZLEkd3SlKGcIQu3jWcLkQ.jpeg","content":"<p>ডম(DOM) বা অন্যকথায় ডকুমেন্ট অবজেক্ট মডেল(Document Object Model) হচ্ছে XML বা HTML ডকুমেন্ট এর জন্যে একটা প্রোগ্রামিং ইন্টারফেস। এখান এটা কি? এটা হচ্ছে আমাদের পেজ(HTML বা XML পেজ) কে এমনভাবে রিপ্রেজেন্ট করে যাতে এটাকে সহজেই প্রোগ্রামিং ল্যাংগুয়েজ দিয়ে মডিফাই করা যায়। আমরা আমাদের এই লেখায় বিশেষ করে HTML পেজের সাথে ডমে ইন্টার‍্যাকশন দেখবো।</p>\n<p>আমরা যখন একটা ওয়েবপেজ HTML এ লিখি তখন এটা আমরা ব্রাউজার দিয়ে দেখতে পারি। আবার চাইলে পেজ সোর্স থেকে সরাসরি HTML কোডগুলোও দেখতে পারি। মূলত আমরা ব্রাউজারে যেটা দেখি আর পেজ সোর্সে যা দেখা যায় দুইটাই এক। কিন্তু এখানে ডম ঠিক এই ডকুমেন্টটাকেই অবজেক্ট ওরিয়েন্টেডভাবে রিপ্রেজেন্ট করে যাতে আমরা ডমের সাহায্যে এই পেজের সাথে ইন্ট্যার‍্যাক্ট করতে পারি। এখন এই ইন্টার‍্যাকশানটা একটা প্রোগ্রামিং ল্যাংগুয়েজ বা জাভাস্ক্রিপ্ট দিয়েই করা হয়। এখন ডম যেহেতু অবজেক্ট রিপ্রেজেন্টশন, তো সেখানেও আমাদের জাভাস্ক্রিপ্ট এর অন্যান্য অবজেক্ট এর মতোই প্রপার্টি, মেথড থাকে। যেগুলোর সাহায্যে আমরা আমাদের পেজের সবকিছু অ্যাক্সেস করতে পারি, প্রয়োজনে মডিফাই করতে পারি সহজেই।</p>\n<p>এখন এই ডম একেক ব্রাউজারে একেকরকমভাবে ইমপ্লিমেন্ট করা থাকতে পারে। কিন্তু তারপরেও স্ট্যান্ডার্ড মেইন্টেইন করার জন্যে বেশীরভাগ মেজর ব্রাউজারগুলোই <a href=\"http://www.w3.org/DOM/\">The W3C DOM</a> এবং <a href=\"https://dom.spec.whatwg.org/\">WHATWG DOM</a> এর স্ট্যান্ডার্ড মেইন্টেইন করে। তাই যেকোনো ব্রাউজারেই একটা মেথড কাজ করলে সেটা বাকী সব ব্রাউজারে করবে কিনা সেটা যাচাই করে নেওয়া ভালো। তবে আমি আমার এই লেখায় স্ট্যান্ডার্ড মেইন্টেইন করেই।</p>\n<p>আপনি হয়তো শুনে থাকবেন জাভাস্ক্রিপ্ট দিয়ে একটা HTML পেজকে ডায়নামিক করা যায়। এখানে ডম যেহেতু আমাদের পেজের সাথে কাজ করার জন্যে মেথড অ্যাড করে দেয়, তাই আমরা সহজেই চাইলে একটা HTML পেজের উপর কিছু কাজ করতে পারিঃ</p>\n<ul>\n<li>নতুন ইলিমেন্ট তৈরী করা</li>\n<li>আগের কোনো ইলিমেন্ট রিমুভ করা</li>\n<li>আগের কোনো ইলিমেন্ট মডিফাই করা</li>\n<li>অ্যাট্রিবিউটস মডিফাই করা, অ্যাড করা, রিমুভ করা</li>\n<li>স্টাইলিং অ্যাড করা, রিমুভ করা, মডিফাই করা</li>\n<li>পেজে ইভেন্ট তৈরী করা, যে এরকম কোনো কিছু ঘটলে পেজের উপর একটা নির্দিষ্ট অ্যাকশন পারফর্ম করা</li>\n<li>নির্দিষ্ট কোনো ইলিমেন্ট এর উপর ইভেন্ট তৈরী করা, যে এই ইলিমেন্ট এর উপর এমন কিছু ঘটলে আমরা অমুক অ্যাকশন নিতে চাই।</li>\n</ul>\n<p>জাভস্ক্রিপ্ট এ ডম ম্যানিপুলেশনের জন্যে <a href=\"https://jquery.com/\">জেকোয়েরী লাইব্রেরী</a> অনেক ব্যবহৃত হয়ে থাকে। জেকোয়েরীর কাজ হচ্ছে জাভাস্ক্রিপ্ট এর বিল্ট-ইন ডম ম্যানিপুলেশনের মেথড আর প্রপার্টিগুলো যাতে আরো সহজে, ছোটো করে মনে রাখা যায় এমন কিছু মেথড অ্যাড করা।</p>\n<p><strong>আপনাকে জেকোয়েরী ব্যবহার করতে হবে নাঃ</strong> জেকোয়েরী দিয়ে যে কাজটা আপনি করবেন, সেইম কাজটাই আপনি পিউর জাভাস্ক্রিপ্ট দিয়েও করতে পারবেন। আর আমাদের বেশীরভাগ ক্ষেত্রেই তত বেশী কাজ করতে হয় না ডম ম্যানিপুলেশনে, সেক্ষেত্রে জেকোয়ীর মতো হিউজ একটা লাইব্রেরী মাত্র দুই একটা মেথড আর সুবিধার জন্যে অ্যাড না করাই ভালো। কারণ ক্লাইন্ট-সাইডে এক-দুই কেবি বেশী ফাইল সাইজও আপনার টোটাল সাইটের পারফর্মেন্সের উপর প্রভাব ফেলতে পারে। সেখানে জেকোয়েরী মোটামোটি অনেক বড় একটা লাইব্রেরী। তাই জেকোয়েরী অ্যাড না করে আপনি পিউর জাভাস্ক্রিপ্ট দিয়েই কাজ সেরে ফেলতে পারবেন। যেমন <a href=\"http://youmightnotneedjquery.com/\">এই ওয়েবসাইটে</a> জেকোয়েরীর বিভিন্ন মেথডের বিপরীতে পিউর জাভাস্ক্রিপ্ট দিয়ে কিভাবে সেইম কাজটা করবেন সেগুলোর একটা লিস্ট দেওয়া আছে।</p>\n<p><strong>বিশেষ নোটঃ</strong> নোড জেএস এ যেহেতু এরকম পেজ বা ডকুমেন্ট এর কোনো ব্যাপার নাই, তাই নোড জেএস ডম পাবেন না। এটা শুধুমাত্র আপনার ব্রাউজারেই অ্যাক্সেস পাবেন। তাই এই সিরিজের সব লেখা শুধুমাত্র ব্রাউজার স্পেসেফিক।</p>"},{"language":"বাংলা","tags":["JavaScript","JavaScript-Bangla","javascript-dom","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-29T16:36:48.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা","thumb_img_path":"/images/1_eZLEkd3SlKGcIQu3jWcLkQ.jpeg","content":"<p>ডমে কোনো কাজ করতে হলে প্রথমেই আপনাকে আপনার ডমে থাকা ইলিমেন্টগুলোকে সিলেক্ট করতে হবে। তারপরে সিলেক্ট করা ইলিমেন্ট এর উপর বিভিন্নরকমের অপারেশন চালাতে পারবেন। আর তাই প্রথমেই আমরা দেখে নিবো কিভাবে আমরা বিভিন্নভাবে ডমের ইলিমেন্টগুলো সিলেক্ট করতে পারি। আর সেজন্যে আমাদের প্র্যাক্টিস করার জন্যে কিছু ইলিমেন্টসহ একটা HTML ডকুমেন্ট লাগবে। আর আমি তাই এমন একটা ডকুমেন্ট তৈরী করেছি। <a href=\"https://github.com/practicalJavaScript/javascript-dom/archive/select-create-dom.zip\">এখান থেকে</a> এই ডকুমেন্টটা ডাউনলোড করে আনজিপ করে ওপেন করলে এরকম কিছু দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*VRYNFUhYbKASa0RC52cbTQ.png\" alt=\"\" /></p>\n<p>এটাতে কিছু ব্যাসিক ডম ইলিমেন্টসহ স্টাইল করা আছে। আপনাকে স্টাইলিং নিয়ে ভাবতে হবে না। জাস্ট <code>index.html</code> টা দেখুন ভালো করে। এখানে কয়েকটা ইলিমেন্ট আছে। আমরা এগুলোকেই আজকে বিভিন্নভাবে সিলেক্ট করবো এখানে।</p>\n<p><code>index.html</code> ফাইলটা ক্রোমে ওপেন করুন, এবং সেই সাথে ডেভেলপার কন্সোল (<code>ctrl</code> + <code>shift</code> + <code>i</code>) ওপেন করুন। আমরা এই কন্সোল থেকেই সবকিছু দেখবো। প্রথমেই কন্সোলে নিচের এটা লিখে এন্টার দিনঃ</p>\n<pre><code>document\n</code></pre>\n<p>এখন এটার উপর হোভার করলে দেখবেন আপনার পুরো ডকুমেন্টটাই হাইলাইট করা হচ্ছে। হ্যা, এটাই আপনার পুরো ডকুমেন্ট। পাশের ত্রিভুজাকৃতির বাটনে ক্লিক করলে দেখবেন এখানে ভিতরে আপনার ডকুমেন্ট এ থাকা ইলিমেন্টগুলো দেখাচ্ছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*gegkypzPtTIfWWfof2fbgQ.png\" alt=\"\" /></p>\n<p>এখন এখানেও আবার আরো কয়েকটা ইলিমেন্ট আছে, যাদের চাইল্ড আছে। সেগুলোও ওপেন করে চাইল্ড ইলিমেন্টগুলো দেখতে পাবেন। যাই হউক এখন আমরা এখানে আমাদের ইলিমেন্টগুলো বিভিন্নভাবে সিলেক্ট করার টেকনিক শিখবো। তবে প্রথমেই মনে রাখবেন আমাদের ডকুমেন্ট থেকে কিছু সিলেক্ট করতে চাইলে সেই <code>document</code> অবজেক্ট থেকেই মেথডগুলো নিতে হবে। কারণ সিলেক্ট করার মেথডগুলো সব এটার মধ্যেই আছে।</p>\n<p><strong>১। আইডি(ID) দিয়ে সিলেক্টঃ</strong> আমাদের ডকুমেন্ট এর বক্সগুলো প্রত্যেকটা আলাদা আলাদা করে আইডি আছে খেয়াল করে দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Y4BameSgaz78IKpXvoNKKQ.png\" alt=\"\" /></p>\n<p>এখন আমরা এই আইডিগুলো ব্যবহার করে প্রত্যেকটা বক্সকে আলাদা আলাদা করে সিলেক্ট করতে পারবো দুইভাবে।</p>\n<ul>\n<li><p><strong><code>document.querySelector()</code></strong>: এই সিলেক্টর দিয়ে আমরা ঠিক সিএসএস এ যেভাবে ইলিমেন্ট সিলেক্ট করি, সেইমভাবে জাভাস্ক্রিপ্টেও করতে পারবো। যদি আমরা আমাদের <code>box1</code> সিলেক্ট করতে চাইঃ</p>\n<p>document.querySelector('#box1');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ij8cIBKWkvZnsmGj_DLjcQ.png\" alt=\"\" /></p>\n<p>ব্যাস আপনার <code>box1</code> সিলেক্ট হয়ে গেলো। এখন চাইলে এটাকেও ভ্যারিয়েবলে স্টোর করে রাখতে পারবেন, যেটা সবসময়েই ভালো আইডিয়া। তাইলে পরে আপনাকে আবার নতুন করে সিলেক্ট করতে হবে না। আপনি জাস্ট ঐ ভ্যারিয়েবলের উপর অপারেশন চালাতে পারবেনঃ</p>\n<pre><code>var box1 = document.querySelector('#box1');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*LcA22-mSt7rM3Hc_VzbRHA.png\" alt=\"\" /></p>\n<p>এখন আমার লেখার উদ্দেশ্য থাকে আপনি আমার কাছ থেকে শিখবেন, কিন্তু চাইলে আমার চাইতেও বেশী কাজ করতে পারবেন। আর তাই আপনি আপনার সিলেক্ট করা ইলিমেন্ট এর কি কি প্রপার্টি, মেথড আছে জানতে চাইলে এভাবে দেখতে পারবেন আপনার ব্রাউজারের কন্সোলেঃ</p>\n<pre><code>console.dir(box1);\n</code></pre>\n<p>এবার এখানে আপনি সব দেখতে পাবেন, আর বাকীটা আশা করি বুঝতে পারবেন কিভাবে এগুলোর সাথে কাজ করতে হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*7oZBT6rvr-uqPV-5NnHpzw.png\" alt=\"\" /></p>\n<p>আর অবশ্যই আমি কমন অপারেশনগুলো আস্তে আস্তে পরের পর্বগুলো আলোচনা করবো। এখানে দেখানো টেকনিকগুলো সব সিলেক্টরের ক্ষেত্রেই প্রযোজ্য। আমি জাস্ট প্রথমটায় দেখালাম, কিন্তু আপনি সবগুলোর ক্ষেত্রেই করতে পারবেন।</p>\n<ul>\n<li><p><strong><code>document.getElementById()</code></strong>: এটা স্পেশালি আইডি সিলেক্ট করার জন্যে ব্যবহার করা হয়। যেহেতু এখানে লিখাই আছে আইডি। ধরি আমরা <code>box2</code> সিলেক্ট করতে চাচ্ছিঃ</p>\n<p>document.getElementById('box2');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_5gonYNHX23LzGlQGikd5w.png\" alt=\"\" /></p>\n<p>এখানে খেয়াল করবেন, এটা যেহেতু আইডি সিলেক্টর তাই আমাদের <code>#</code> দেওয়া লাগছে না।</p>\n<p><strong>২। ক্লাস(Class) দিয়ে সিলেক্টঃ</strong> ক্লাস সিলেক্ট করার জন্যেই যেমন <code>document.querySelector()</code> ব্যবহার করা যাবে, তাছাড়াও আরো কিছু সিলেক্টর আছে।</p>\n<ul>\n<li><p><code>document.querySelector()</code>: এখানে দেখবেন আমাদের সবগুলো বক্সেরই কমন একটা ক্লাস আছে <code>box</code> নামে। এখন এই সিলেক্টরের কাজ হচ্ছে সবগুলো ম্যাচের মধ্যে একদম প্রথম ইলিমেন্টটা বা এখানে <code>box</code> ক্লাসের একদম প্রথম ইলিমেন্টটাকে সিলেক্ট করাঃ</p>\n<p>document.querySelector('.box');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*CkDgJy52CsDh8VtCEOjoQA.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>document.querySelectorAll()</code>: এটাও ঠিক আগেরটার মতোই সিএসএস স্টাইলে সিলেক্ট করতে ব্যবহার করা যায়। তবে এটা দিয়ে মাল্টিপল ইলিমেন্ট সিলেক্ট করতে পারবেন। আমাদের বক্স যেহেতু অনেকগুলো, তাই এটা দিয়ে সবগুলো সিলেক্ট করা যাবে। আর এটা নোডলিস্ট(NodeList) আকারে রিটার্ণ করবেঃ</p>\n<p>document.querySelectorAll('.box');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*2AXQaJ8EW257k8dsqo0QVA.png\" alt=\"\" /></p>\n<p>নোডলিস্ট অনেকটা অনেকটা অ্যারের মতোই, তবে ঠিক অ্যারে না। তাই অনেকে কনফিউজ হয়ে অ্যারের মতোই ব্যবহার করতে গিয়ে এরর পায়। কারণ এটা যেহেতু অ্যারে না, আর তাই অ্যারের সব প্রপার্টি বা মেথডও এখানে পাবেন না। একটা সহজ উপায় হচ্ছে নোডলিস্টকে অ্যারেতে নিয়ে যাওয়া। ধরি আমরা এই নোডলিস্টটাকে একটা ভ্যারিয়েবলে স্টোর করলামঃ</p>\n<pre><code>var boxNodeList = document.querySelectorAll('.box');\n</code></pre>\n<p>এবার নিচে এই ভ্যারিয়েবলটার উপর এই টেকনিকটা ব্যবহার করতে হবেঃ</p>\n<pre><code>var boxArray = Array.prototype.slice.call(boxNodeList);\n</code></pre>\n<p>এখন এই <code>boxArray</code> টা হচ্ছে আমাদের কাঙ্খিত অ্যারে আমাদের ইলিমেন্টগুলোসহঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*95nSSuRaVJC7eoi_8FcKYg.png\" alt=\"\" /></p>\n<p>এখন এখানে আমরা চাইলে ইন্ডেক্স নাম্বার দিয়ে বা লুপ চালিয়ে আমাদের ইলিমেন্ট এর উপর অপারেশন চালাতে পারবো।</p>\n<ul>\n<li><p><code>document.getElementsByClassName()</code>: এটাও আরেকটা সিলেক্টর, তবে স্পেশালি ক্লাস সিলেক্ট করার জন্যেঃ</p>\n<p>var boxHTML = document.getElementsByClassName('box');</p></li>\n</ul>\n<p>এটা যেহেতু স্পেশালি ক্লাস সিলেক্ট করার জন্যে, আর তাই আমাদের আগের <code>.</code> টা দিতে হবে না। এটাও খেয়াল করলে দেখবেন অ্যারের মতো, কিন্তু অ্যারে না। এটাকে <code>HTMLCollection</code> বলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*S0TsvJ8a-w-dg8H6PxVdnQ.png\" alt=\"\" /></p>\n<p>অ্যারে না হওয়াতে অ্যারের সুবিধাগুলো পাওয়া যাবে না। আর তাই আমরা চাইলে ঠিক আগের মতোই এটাকেও অ্যারেতে নিয়ে যেতে পারবোঃ</p>\n<pre><code>var boxArray2 = Array.prototype.slice.call(boxHTML);\n</code></pre>\n<p>এখন এই <code>boxArray2</code> হচ্ছে একটা অ্যারে আমাদের কাঙ্খিত ইলিমেন্টগুলোসহঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*stnBimvfi19qPqAiuJAWtg.png\" alt=\"\" /></p>\n<p>এখন চাইলে এখানেও আমরা ইন্ডেক্স নাম্বার দিয়ে, লুপ চালিয়ে বিভিন্নরকমের অপারেশন চালাতে পারবো।</p>\n<p><strong>৩। ট্যাগ(Tag) নেইম দিয়ে সিলেক্টঃ</strong> আমাদের ডকুমেন্ট এ এরকম <code>div</code> <code>h4</code> <code>p</code> <code>ul</code> ট্যাগ আছে। আমরা চাইলে এগুলোও সিলেক্ট করতে পারি।</p>\n<ul>\n<li><p><code>document.querySelector()</code>: আমরা জানি, এটা দিয়ে সবই সিলেক্ট করা যায়। তবে সবগুলো ম্যাচের মধ্যে একদম প্রথমটা সিলেক্ট করবেঃ</p>\n<p>document.querySelector('div');</p></li>\n</ul>\n<p>আমাদের ডকুমেন্ট এ থাকা একদম প্রথম <code>div</code> টাকেই এটা সিলেক্ট করেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*abSGWPkowkj_sYkl-QltQA.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>document.querySelectorAll()</code>: একটু আগে আমরা এটার একটা ব্যবহার দেখেছি। কিন্তু এটা একই সাথে কয়েকটা ইলিমেন্ট সিলেক্ট করতে পারে। কয়েকটা মানে এরকমঃ</p>\n<p>document.querySelectorAll('h4, p, ul');</p></li>\n</ul>\n<p>এভাবে কমা দিয়ে দিয়ে আমরা একাধিক টাইপের ইলিমেন্ট সিলেক্ট করতে পারবো। সবগুলো সিলেক্ট করে নোডলিস্ট আকারে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*TgbRFMYx_SxVTzOY_cp2pQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>documnent.getElementsByTagName()</code>: এটাও ঠিক স্পেশালি ট্যাগ সিলেক্ট করার জন্যে। এটাও <code>HTMLCollection</code> রিটার্ণ করবেঃ</p>\n<p>document.getElementsByTagName('h4');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*b1v6LEZ0AqR90m_5SM20_Q.png\" alt=\"\" /></p>\n<p><strong>৪। অ্যাট্রিবিউটস(Attribute) দিয়ে সিলেক্টঃ</strong> আগেই যেহেতু বলেছি <code>querySelector</code> আর <code>querySelectorAll</code> সিএসএস সিলেক্টরের মতোই কাজ করে, আর তাই আমরা চাইলে অ্যাট্রিবিউটও সিলেক্ট করতে পারবোঃ</p>\n<ul>\n<li><code>document.querySelector()</code>: আমাদের এই ডকুমেন্ট এ প্রথম বক্সের কিছু অ্যাট্রিবিউট আছে <code>data-atr</code> আর <code>data-extra</code> নামেঃ</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ELed96J0Xf1Tch45ggT30g.png\" alt=\"\" /></p>\n<p>আমরা এগুলো দিয়ে আমাদের প্রথম বক্স সিলেক্ট করবোঃ</p>\n<pre><code>document.querySelector('[data-atr=\"box1\"]');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*oDHRxEeWbLSG5lsOItewdg.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>document.querySelectorAll()</code>: এটা দিয়ে আমরা একাধিক ইলিমেন্ট সিলেক্ট করতে পারবো সেইম আগের মতোই কমা দিয়ে দিয়ে একটা একটা করে সিলেক্ট করেঃ</p>\n<p>document.querySelectorAll('[data-atr=\"box1\"], [id=\"box2\"]');</p></li>\n</ul>\n<p>এটা প্রথম আর দ্বিতীয় বক্স সিলেক্ট করে নোডলিস্ট আকারে রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*uSmLLUYeXdsLrp6n2an9WQ.png\" alt=\"\" /></p>\n<p><strong>৫। সুডো-ক্লাস(Pseudo-classe) দিয়ে সিলেক্টঃ</strong> সিএসএস এর মতোই সুডো ক্লাস দিয়েও আমরা ঠিক <code>querySelector</code> আর <code>querySelectorAll</code> দিয়ে ইলিমেন্ট সিলেক্ট করতে পারবো। যেমন আমাদের এই ডকুমেন্ট এ একটা লিস্ট আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EQgdh0z-cC_-E_wzvx_tsA.png\" alt=\"\" /></p>\n<p>এখন আমি যদি চাই লিস্টের প্রথম চাইল্ডটাকে বা প্রথম এবং শেষ চাইল্ডটাকে সিলেক্ট করতে তাহলে সেটা খুব সহজেই করতে পারবো।</p>\n<ul>\n<li><p><code>document.querySelector()</code>: এটা দিয়ে একটা ইলিমেন্ট সিলেক্ট করতে পারবো। আমরা আমাদের লিস্টের প্রথম ইলিমেন্টটাই সিলেক্ট করতে চাচ্ছিঃ</p>\n<p>document.querySelector('li:first-child');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Gr0y3AbRpRcCD5RoMEbjFQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>document.querySelectorAll()</code>: এরকম একাধিক ইলিমেন্ট সিলেক্ট করতে চাইলে এটা ব্যবহার করা যাবে। আমরা ধরি এখানে লিস্টের ফার্স্ট চাইল্ড আর লাস্ট চাইল্ড সিলেক্ট করতে চাচ্ছিঃ</p>\n<p>document.querySelectorAll('li:first-child, li:last-child');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ek5BGmnAR9WBy_AD2MffRA.png\" alt=\"\" /></p>\n<p><strong>৬। চিলড্রেন(Children) সিলেক্টঃ</strong> এখন আমরা চাইলে একটা প্যারেন্ট ইলিমেন্ট দিয়েও তার চাইল্ড ইলিমেন্টগুলো সিলেক্ট করতে পারি। ধরি এখানে তিন নাম্বার বক্সের <code>h4</code> আর <code>p</code> চাইল্ড ইলিমেন্ট আছে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*B9_xIC97N0cxJ2M-prRipA.png\" alt=\"\" /></p>\n<p>আমরা এগুলোকে সিলেক্ট করতে পারবো। সেজন্যে আমাদের প্রথমে প্যারেন্টটাকে সিলেক্ট করে নিতে হবেঃ</p>\n<pre><code>var parentElement = document.getElementById('box3');\n</code></pre>\n<p>এখন এই প্যারেন্ট এর কিছু মেথড আছে চাইল্ড সিলেক্ট করার জন্যে। সেগুলো আমরা এভাবে আমাদের কন্সোলে দেখতেও পারবো চাইলেঃ</p>\n<pre><code>console.dir(parentElement);\n</code></pre>\n<p>এখন এখানে দেখবেন অনেকগুলো প্রপার্টি আর মেথড আছে, তারমধ্যে চাইল্ড নিয়ে কয়েকটা আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*BAKzVwJd-WRUUSSZUeZt_Q.png\" alt=\"\" /></p>\n<p>তাইলে আমরা এগুলো সহজেই ব্যবহার করতে পারবো এখনঃ</p>\n<ul>\n<li><p><code>children</code>: এটা একটা প্রপার্টি। একদম সরাসরি চাইল্ড যারা তাদেরকেই সিলেক্ট করবেঃ</p>\n<p>parentElement.children;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Seyr4nRoEK6mpCeXPNmiKQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>childNodes</code>: এটাও চাইল্ড ইলিমেন্ট সিলেক্ট করবে। তবে খেয়াল করবেন আমাদের চাইল্ড ট্যাগ ছাড়াও বাইরেও কিছু টেক্সট আছে। এটা দিয়ে ঐগুলাসহ সিলেক্ট করতে পারবেনঃ</p>\n<p>parentElement.childNodes;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*hJOoOQ3klSz82fuoYsRtCg.png\" alt=\"\" /></p>\n<ul>\n<li><p>চাইল্ড থেকে চাইল্ড সিলেক্টঃ আরো মজার ব্যাপার হলো, এভাবে প্যারেন্ট থেকে চাইল্ড, আবার সেই চাইল্ড থেকে তার চাইল্ড এভাবে যতক্ষন ইচ্ছা সিলেক্ট করতে পারবেন। আপনি প্যারেন্ট থেকে চাইল্ড সিলেক্ট করার পর ঐ অবজেক্টটাও যদি দেখেন, দেখবেন ঐটারো চাইল্ড সিলেক্ট করার প্রপার্টিসহ বাকী সবকিছুই আছে। তারমানে আপনি যতক্ষন ইচ্ছা প্যারেন্ট থেকে চাইল্ড, সেই চাইল্ড থেকে আরেকটা চাইল্ড এভাবে সিলেক্ট করে যেতে পারবেন। যেমন আমাদের উপরে সিলেক্ট করা বক্সের ভিতরে <code>p</code> ট্যাগেরও আবার চাইল্ড ট্যাগ <code>em</code> ও <code>strong</code> ট্যাগ আছে। আমরা চাইলে সেগুলোও সিলেক্ট করতে পারবো। প্রথমেই দেখুন উপরে <code>parentElement.children</code> এ আমাদের কাঙ্খিত <code>p</code> ট্যাগ এর ইন্ডেক্স নাম্বার <code>2</code> , তো আমরা এটা সিলেক্ট করে এটার চাইল্ড ইলিমেন্টগুলোও অ্যাক্সেস করতে পারবো এভাবেঃ</p>\n<p>parentElement.children[2].children;</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*9ZCAtBckEDY6M7LSwSzV_g.png\" alt=\"\" /></p>\n<p><strong>৭। প্যারেন্ট(Parent) সিলেক্টঃ</strong> একইভাবে আমরা চাইল্ড থেকেও প্যারেন্ট ইলিমেন্ট সিলেক্ট করতে পারবো। বক্স ৩ এর ভিতরের প্যারাগ্রাফের একটা ক্লাস ক্লাস আছে <code>box3-paragraph</code> নামে। এখন আমরা চাইলে এটা থেকে প্যারেন্ট ইলিমেন্টগুলো সিলেক্ট করতে পারি।</p>\n<ul>\n<li><p><strong>সরাসরি প্যারেন্ট সিলেক্টঃ</strong> প্রথমেই আমরা আমাদের কাঙ্খিত প্যারাগ্রাফটা সিলেক্ট করে নিইঃ</p>\n<p>var box3p = document.querySelector('.box3-paragraph');</p></li>\n</ul>\n<p>এখন আমরা যদি <code>box3p</code> এর কি কি প্রপার্টি বা মেথড আছেঃ</p>\n<pre><code>console.dir(box3p);\n</code></pre>\n<p>নিচের দিকে প্যারেন্ট সিলেক্ট করার জন্যে এগুলো পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iWJMeNKOpfSB2HztpN-szw.png\" alt=\"\" /></p>\n<p>তাহলে এখন খুব সহজেই আমাদের এই প্যারাগ্রাফের প্যারেন্ট ইলিমেন্ট যেটা এখানে বক্স ৩ স্বয়ং নিজে, সেটাকে সিলেক্ট করতে পারবোঃ</p>\n<pre><code>box3p.parentNode;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*OwutdR0gdnEPqYD_KA2F4A.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>প্যারেন্টের প্যারেন্ট সিলেক্ট করাঃ</strong> একইভাবে আমরা এভাবে এক প্যারেন্ট থেকে আরেক প্যারেন্ট, আবার তারও প্যারেন্ট যতক্ষন পর্যন্ত ইলিমেন্ট আছে সিলেক্ট করতে পারবোঃ</p>\n<p>box3p.parentNode.parenNode;</p></li>\n</ul>\n<p>আমাদের ডকুমেন্টে বক্স ৩ এর প্যারেন্টের প্যারেন্ট হচ্ছে <code>.boxes</code> , আর তাই সেটাই সিলেক্ট হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*GylEwgvwK8EzePLA3T6eBQ.png\" alt=\"\" /></p>\n<p>এভাবে প্যারেন্ট থেকে প্যারেন্ট সিলেক্ট করতে করতে যখন আর কাউকে পাওয়া যাবে না তখন <code>null</code> রিটার্ণ করবে, সেইমটা চাইল্ড নোড সিলেক্টের ক্ষেত্রেও যাবেঃ</p>\n<pre><code>box3p.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n</code></pre>\n<p>বক্স ৩ এর প্যারেন্ট নোড <code>.boxes</code> , এটার প্যারেন্ট নোড <code>.wrapper</code> , এটার প্যারেন্ট নোড <code>body</code> , এটার আবার প্যারেন্ট নোড <code>html</code> , আর সবশেষে <code>html</code> এর প্যারেন্ট নোড <code>document</code> , ডকুমেন্ট এর প্যারেন্ট নোড সিলেক্ট করতে গেলে <code>null</code> আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4hSYhPpJRnNoz9gb7_RBrw.png\" alt=\"\" /></p>\n<p><strong>৮। প্যরেন্ট থেকে চাইল্ড(Descendants) সিলেক্টঃ</strong> এখন উপরের সিলেক্টরের টেকনিকগুলো বড় বড় ডকুমেন্ট এ একটু ঝামেলাও লেগে যেতে পারে। আমাদের তখন এমন সিলেক্টরের প্রয়োজন হতে পারে যেখানে আমরা নির্দিষ্ট একটা চাইল্ড সিলেক্ট করতে চাইতে পারি। আমরা যদি চাই আমরা নির্দিষ্ট একটা চাইল্ড ইলিমেন্ট বা এখানে তিন নাম্বার বক্সের <code>h4</code> ট্যাগটাকেই সিলেক্ট করবোঃ</p>\n<ul>\n<li><p><code>document.querySelector()</code>: একটা মাত্র ইলিমেন্ট সিলেক্ট করার জন্যেঃ</p>\n<p>document.querySelector('#box3 h4');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*eb6gK5zWGTgWdt8PvVk_ag.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>document.querySelectorAll()</code>: একাধিক ইলিমেন্ট সিলেক্ট করতে চাইলেঃ</p>\n<p>document.querySelector('#box3 h4, #box4 li');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*NFncraoy7xApvXsqmBfNOA.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>সবগুলো চাইল্ড, নাকি সরাসরি চাইল্ডঃ</strong> এখানে আরেকটা সমস্যা যেটা হতে পারে, বা আমরা চাইতে পারি যে আমরা সরাসরি চাইল্ড ইলিমেন্টটাকেই সিলেক্ট করবো। সেক্ষেত্রে উপরে দেখানো টেকনিকগুলো কিন্তু কাজ করছে না। খেয়াল করে দেখবেন আমাদের ডকুমেন্ট এ তিন নাম্বার বক্সের ভিতরে সরাসরি একটা <code>strong</code> ট্যাগের চাইল্ড আছে, আবার আরেকটা <code>strong</code> ট্যাগ আছে যেটা হচ্ছে <code>p</code> ট্যাগের চাইল্ড। তো আমরা যদি তিন নাম্বার বক্সের সব <code>strong</code> ট্যাগের চাইল্ড সিলেক্ট করি, তাহলে এটা সবগুলোকেই সিলেক্ট করে ফেলবেঃ</p>\n<p>document.querySelectorAll('#box3 strong');</p></li>\n</ul>\n<p>এটা দুইটা <code>strong</code> ট্যাগই সিলেক্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*60IYL94ik631c-t9_xRxVQ.png\" alt=\"\" /></p>\n<p>কিন্তু আমরা হয়তো এটা নাও চাইতে পারি। আমরা হয়তো চাইলে পারি যে শুধুমাত্র যারা বক্স ৩ এর সরাসরি <code>strong</code> ট্যাগ চাইল্ড, তাদেরকেই সিলেক্ট করবো, তাহলে ঠিক সিএসএস এর মতোই টেকনিক ব্যবহার করতে হবেঃ</p>\n<pre><code>document.querySelectorAll('#box3&gt;strong');\n</code></pre>\n<p>এটা এখন শুধুমাত্র তিন নাম্বার বক্সের সরাসরি চাইল্ড <code>strong</code> ট্যাগটাকেই সিলেক্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*6v-Pm82HGd4PVCUu-a4-OQ.png\" alt=\"\" /></p>\n<p>সেইমটা <code>querySelector()</code> ক্ষেত্রেও প্রযোজ্য হবে।</p>\n<p><strong>৮। বাদ দিয়ে সিলেক্টঃ</strong> আমাদের আবার এমনও করতে হতে পারে যে আমরা অনেকগুলো ইলিমেন্ট সিলেক্ট করবো,তবে তাদের মধ্যে কিছু ইলিমেন্ট বাদ দিয়ে করতে চাই। সেটাও সহজেই এই <code>querySelector</code> আর <code>querySelectorAll</code> দিয়ে করতে পারবোঃ</p>\n<ul>\n<li><p><code>document.querySelectorAll()</code>: আমরা আমাদের সবগুলো বক্স সিলেক্ট করবো, তবে ৩ নাম্বার বক্স বাদ দিয়েঃ</p>\n<p>document.querySelectorAll('.box:not(#box3)');</p></li>\n</ul>\n<p>ব্যাস! সিলেক্ট হয়ে গেলো সবগুলো, বেচারা ৩ নাম্বারটা বাদ দিয়ে যেহেতু আমরা বলেই দিয়েছিএটা সিলেক্ট করবো নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iZHgM5sNB1CTBcHo5dkXIg.png\" alt=\"\" /></p>\n<p>সেইম <code>querySelector()</code> এর ক্ষেত্রেও কাজ করবে।</p>\n<p><strong>৯। একাধিক ইলিমেন্ট সিলেক্টঃ</strong> যদিও আমরা আগেও আলোচনা করেছি, তবে আমরা চাইলেই <code>querySelectorAll()</code> দিয়ে নিজের ইচ্ছামতো একাধিক ইলিমেন্ট সিলেক্ট করতে পারবো। প্রত্যেকটা সিলেক্টরই বাকী সবগুলোর মতোই রুলস মেইন্টেইন করে চলবে। জাস্ট আমাদের একটার পর আরেকটা কমা দিয়ে দিয়ে উল্লেখ করে দিতে হবেঃ</p>\n<pre><code>document.querySelector('.box, #box3, #box3 strong, #box3 strong, #box3 li:last-child');\n</code></pre>\n<p>যেই যেই ইলিমেন্ট সিলেক্ট করেছি সেগুলোই ক্রমানুসারে সিলেক্ট করে নোডলিস্ট আকারে রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*fPCmVi6A94pjWSrtKW1QVg.png\" alt=\"\" /></p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","javascript-dom","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-ডম","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-29T17:36:00.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা","thumb_img_path":"/images/1_eZLEkd3SlKGcIQu3jWcLkQ.jpeg","content":"<p>আগের পর্বে আমরা দেখেছি কিভাবে ডমের ইলিমেন্ট বিভিন্নভাবে সিলেক্ট করতে হবে। এখন সিলেক্ট করার পর এখন আমাদের সেগুলো নিয়ে কাজ করতে পারবো। এই পর্বে আমি তাই ইলিমেন্ট বানানো থেকে শুরু করে, এগুলোকে কিভাবে বিভিন্নভাবে মডিফাই করবেন, সেই সাথে ইলিমেন্টগুলো নিয়ে ডমে কিভাবে বিভিন্ন জায়গায় প্লেস করাবেন, এসব নিয়ে আলোচনা করবো।</p>\n<p>আমরা ডম সম্পর্কে জেনেছি আগেই। ডমের কারনের আমরা আমাদের ইলিমেন্টগুলোতে অবজেক্ট এর মতোই ফ্লেক্সিবিলিটি পাই। অবজেক্ট এর মতোই প্রপার্টি আর মেথড পাই, যেগুলো আমাদেরকে সহজে ডমের সাথে কাজ করতে সাহায্য করে। তবে ডমের এতো মেথড আর প্রপার্টি আছে যে এগুলো নিয়ে লিখলে আলাদা সিরিজ হয়ে যাবে। কিন্তু আমার লেখার টার্গেট থাকেই আপনাকে লাইনে নিয়ে যাওয়া, বাকীটা আপনি আমার চাইতেও বেশী করতে পারবেন।</p>\n<p>আমরা এই লেখায় <a href=\"https://github.com/practicalJavaScript/javascript-dom/archive/select-create-dom.zip\">আগের ডকুমেন্টটাই</a> ইউজ করবো। এটা ডাউনলোড করে আনজিপ করে নিন। তারপর <code>index.html</code> ফাইলটা ক্রোমে ওপেন করে, ক্রোমের ডেভেলপার কন্সোল ওপেন করুন। এখানেই আমরা মূলত সব কাজ করবো। আর পুরো লেখাটা একটা সিকোয়েন্সে লেখা, তাই আপনারও সেভাবে কাজ করতে হবে। পেজ রিলোড দিলে স্টোর করা ভ্যারিয়েবল বা অন্যান্য ডাটা মুছে যাবে, সেজন্য আপনাকে আবার প্রথম থেকে কাজ করতে হতে পারে।</p>\n<p>আমাদের প্রোজেক্ট ফাইলটা ওপেন করলে অনেকটা এরকম দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*VRYNFUhYbKASa0RC52cbTQ.png\" alt=\"\" /></p>\n<p>প্রথমেই আমরা আমাদের ইলিমেন্ট থেকে কিভাবে প্রপার্টি আর মেথডগুলো বের করবো সেটা জেনে নেই। আমরা এখানে বক্সগুলো থেকে একটা বক্স সিলেক্ট করিঃ</p>\n<pre><code>var selectABox = document.getElementById('box1');\n</code></pre>\n<p>এখন আমাদের ইলিমেন্টটা <code>selectABox</code> স্টোর করা আছে। এখন আমরা এটা খুলে দেখবো। ডমের কল্যাণে <code>selectABox</code> এখানে একটা অবজেক্ট। তো আমরা এখন এখান থেকে অবজেক্ট টা খুলে কি কি মেথড বা প্রপার্টি আছে সেগুলো সব দেখতে পারবোঃ</p>\n<pre><code>console.dir(selectABox);\n</code></pre>\n<p>এবার পাশের ত্রিভুজাকৃতির বাটনে ক্লিক করলে অবজেক্টটা খুলে যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*mFq1NAv4KIpdxeXRVaYLLw.png\" alt=\"\" /></p>\n<p>এখানে অনেক অনেক মেথড আর প্রপার্টি আছে, ডান্ডার প্রোটোর ভিতরে, প্রপার্টির ভিতরে প্রপার্টি, মেথড পাবেন। তো আপনি যদি নিজে থেকে ট্রাই করতে চান তাহলে এভাবে অবজেক্ট খুলে খুলে নিজে নিজেই মেথড আর প্রপার্টি বের করে নাড়াচাড়া করতে পারবেন। আমরা আজকের এই লেখার এখান থেকেই কিছু মেথড আর প্রপার্টির ব্যবহার দেখবো।</p>\n<p><strong>১। একদম নতুন ইলিমেন্ট তৈরী করাঃ</strong> ইলিমেন্ট নিয়ে কাজ করতে চাইলে প্রথমেই আমাদের নতুন ইলিমেন্ট তৈরী করতে হবে। অথবা আগের কোনো ইলিমেন্ট সিলেক্ট করেও সেটা দিয়েও কাজ করা যায়। কিন্তু আমরা এখানে দেখবো কিভাবে একদম নতুন একটা ইলিমেন্ট তৈরী করা যায়ঃ</p>\n<ul>\n<li><p><strong><code>document.createElement()</code></strong>: এই মেথডটাই নতুন একটা ইলিমেন্ট তৈরী করতে সাহায্য করবে। এটা আর্গুমেন্ট হিসেবে HTML ট্যাগ নেইম নিবে। আর সে ট্যাগ নেইমের উপর ভিত্তি করে একটা ইলিমেন্ট তৈরী করে দিবে। যেমন ধরি আমরা একটা প্যারাগ্রাফ ইলিমেন্ট তৈরী করতে চাচ্ছিঃ</p>\n<p>var newParagraph = document.createElement('p');</p></li>\n</ul>\n<p>বা, <code>div</code> তৈরী করতে চাইলেঃ</p>\n<pre><code>var newDiv = document.createElement('div');\n</code></pre>\n<p>এখন এদের কন্সোলে দেখলে দেখবেন খালি ইলিমেন্ট তৈরী হয়েছেঃ</p>\n<pre><code>newParagraph;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*UDlHXkwjLgQaY2TBjYa4rQ.png\" alt=\"\" /></p>\n<p>আর নতুন <code>div</code></p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*L3v_TQhjy8-LSx1kVephSQ.png\" alt=\"\" /></p>\n<p><strong>২। ইলিমেন্ট এর ভিতরের কন্টেন্ট নিয়ে খেলা করাঃ</strong> এখন তো খালি ইলিমেন্ট তৈরী করলাম। কিন্তু ভিতরে তো কিছু দিতে হবে ঠিক না? হ্যা সেজন্যে আমরা দুইভাবে সেই কাজ করতে পারিঃ</p>\n<ul>\n<li><p><strong>শুধু টেক্সটঃ</strong> আমরা যদি আমাদের ইলিমেন্ট এর ভিতরে শুধু টেক্সট ঢুকাতে চাই তাহলে ইলিমেন্ট এর <code>textContent</code> নামে একটা প্রপার্টি আছে, যেটা দিয়ে আমরা প্লেইন টেক্সট ঢুকাতে পারবো আমাদের ইলিমেন্ট এ। ধরি আমাদের আগের তৈরী করা <code>newParagraph</code> ইলিমেন্ট এ কিছু টেক্সট ঢুকাতে চাচ্ছিঃ</p>\n<p>var chacchu = 'Zawad Ahmed';\nnewParagraph.textContent = 'His name is: ' + chacchu + '!';</p></li>\n</ul>\n<p>আপনি এভাবে চাইলেও আপনার নিজের ডাটা ঢুকাতে পারবেন, সব ধরনের ফ্লেক্সিবিলিটি আছে এখানে। এখন যদি আমরা আমাদের <code>newParagraph</code> ইলিমেন্ট টা দেখিঃ</p>\n<pre><code>newParagraph;\n</code></pre>\n<p>আমাদের ইলিমেন্ট এ টেক্সট ঢুকে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*eyrM_8ts8cGGsRQdYOwvaQ.png\" alt=\"\" /></p>\n<p>এখন এই <code>textContent</code> প্রপার্টি দিয়ে আমরা চাইলে কোনো ইলিমেন্ট এর টেক্সটও দেখতে পারি। যদি আমরা আবার আমাদের <code>newParagraph</code> এর কন্টেন্ট দেখতে চাইঃ</p>\n<pre><code>newParagraph.textContent;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*dI4_BxtEfrsdJzPJMf9Isw.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>HTML ঢুকানোঃ</strong> এখন আমরা আগের টেকনিকে প্লেইন টেক্সট ঢুকাতে পারলেও আমরা চাইলে নতুন কোনো HTML ট্যাগ ঢুকাতে পারবো না ঐ টেকনিক দিয়ে। কিন্তু সেটার জন্যে এই ইলিমেন্টরই নতুন আরেকটা প্রপার্টি আছে <code>innerHTML</code> নামে। এখন যদি আমরা আমাদের <code>newDiv</code> এর ভিতরে পুরো HTML ট্যাগই আরেকটা ঢুকাতে চাইঃ</p>\n<p>newDiv.innerHTML = '<p>DOM Manipulation is Fun!</p>';</p></li>\n</ul>\n<p>অবশ্যই খেয়াল রাখবেন আপনার HTML যাতে স্ট্রিং আকারে থাকে। এবার যদি আমরা আমাদের <code>newDiv</code> ইলিমেন্টটা দেখিঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p>পাশের ত্রিভাজিকৃতির বাটনে ক্লিক করলে পুরো ইলিমেন্ট টা দেখতে পারবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*6hPEHTgp_W4-v5dCsMQEAQ.png\" alt=\"\" /></p>\n<p>এখন এখানে এই <code>innerHTML</code> ও যেহেতু ইলিমেন্ট এর একটা প্রপার্টি, এটা দিয়ে নরমালি আমরা চাইলে যেকোনো ইলিমেন্ট এর ভিতরের HTML টাও দেখতে পারবোঃ</p>\n<pre><code>newDiv.innerHTML;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*sgHvmzGaVdIjJPse8h-mhg.png\" alt=\"\" /></p>\n<p><strong>৩। ইলিমেন্টে ক্লাস অ্যাড বা রিমুভ করাঃ</strong> এখন আমরা চাইলে আমাদের ইলিমেন্ট এ ক্লাস(Class) অ্যাড বা রিমুভও করতে পারবো সহজেই।</p>\n<ul>\n<li><p><strong>ক্লাস অ্যাড করাঃ</strong> ধরি আমরা আমাদের নতুন তৈরীকৃত <code>newDiv</code> এ নতুন একটা ক্লাস অ্যাড করতে চাচ্ছিঃ</p>\n<p>newDiv.classList.add('new-div');</p></li>\n</ul>\n<p>এখানে আমরা আমাদের ইলিমেন্ট এর <code>classList</code> নামে একটা প্রপার্টি আছে, আবার সেটার <code>add()</code> নামে একটা মেথড আছে। এই মেথডের কাজই হচ্ছে ক্লাস অ্যাড করা। এখন আমাদের সেই <code>newDiv</code> ইলিমেন্টটা দেখলেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*hDoEInScotzWN7eu8E5zxw.png\" alt=\"\" /></p>\n<p>এখন কিছু পুরোনো ব্রাউজারে এই <code>classList</code> নাও সাপোর্ট করতে পারে। সেক্ষেত্রে আমরা এই টেকনিক ব্যবহার করতে পারিঃ</p>\n<pre><code>newDiv.className += ' old-new-div';\n</code></pre>\n<p>আমরা এখানে যেটা করেছি সেটা আসলে আগের কোনো ক্লাস থাকলে সেটার সাথে নতুন আরেকটা ক্লাস নেইম লাগাবে। আর এজন্যে একটু সতর্ক হতে হবে। যার জন্যে আমরা আগেরটা যাতে মুছে না যায় সেজন্যে <code>+=</code> দিয়েছি এবং ভালো করে খেয়াল করলে দেখবেন আমাদের ক্লাস নেইম <code>old-new-div</code> এর আগে একটা স্পেসও আছে, যাতে আগেরটার সাথে না লাগে। পৃথক পৃথক দুইটা ক্লাস নেইম তৈরী হবে এভাবেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*3Vgs9Ay3_u_Nn85NouV2qw.png\" alt=\"\" /></p>\n<p>এখানে আমাদের ব্যবহার করা <code>classList</code> প্রপার্টি দিয়ে কিন্তু আমাদের ইলিমেন্ট এ কয়টা ক্লাস আছে সেটা সহজেই দেখতে পারবোঃ</p>\n<pre><code>newDiv.classList;\n</code></pre>\n<p>এটা অ্যারে আকারে ক্লাসের নেইমগুলো স্টোর করেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iydr7G7mmGVJ6ENe5SER1w.png\" alt=\"\" /></p>\n<p>আর এটার মেথডও আছে ক্লাস অ্যাড করার জন্যে যেটা আমরা দেখেছি। তেমনি এটার ক্লাস রিমুভ করার জন্যেও মেথড আছে।</p>\n<ul>\n<li><p><strong>ক্লাস রিমুভ করাঃ</strong> এখন আমরা চাইলে ক্লাস রিমুভও করে ফেলতে পারবো সহজেই। সেজন্যে আমাদের <code>classList</code> এরই <code>remove()</code> নামে মেথড আছেঃ</p>\n<p>newDiv.classList.remove('new-div');</p></li>\n</ul>\n<p>এখন আমরা আমাদের ইলিমেন্টটা দেখলেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p>আমাদের ইলিমেন্ট থেকে <code>new-div</code> নামের ক্লাসটা চলে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*OL8rErZXuLZ20-RPtEsZLw.png\" alt=\"\" /></p>\n<p>এখন সেইমভাবে পুরোনো কিছু ব্রাউজারে আমাদের <code>classList</code> কাজ না করায় আমাদের একটু টেকনিক খাটিয়ে কাজ করতে হবে। ধরি আমরা আমাদের ইলিমেন্ট এর আরেকটা ক্লাস যেটা আছে সেটা রিমুভ করতে চাচ্ছিঃ</p>\n<pre><code>newDiv.className = newDiv.className.replace(/old-new-div$/, ' ');\n</code></pre>\n<p>এখানে আমরা <code>newDiv</code> এর <code>className</code> টা মডিফাই করেছি একটু। আমাদের কাঙ্খিত ক্লাস নেইমকে রেগুলার এক্সপ্রেশনের সাহায্যে খালি ব্ল্যাঙ্ক স্পেস দিয়ে রিপ্লেস করে সেটাকে আবার <code>newDiv</code> এর <code>className</code> এ অ্যাসাইন করে দিয়েছি। এবার <code>newDiv</code> কে আবার দেখলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*DooI2F1n4tn7YzO_2kKKeg.png\" alt=\"\" /></p>\n<p><strong>৪। ইলিমেন্টে অ্যাট্রিবিউট নিয়ে খেলা করাঃ</strong> এখন আমরা জানি কিভাবে ক্লাস অ্যাড বা রিমুভ করতে হয়। কিন্তু আমরা যদি চাই, যে আমরা যেকোনো ধরনের অ্যাট্রিবিউটস অ্যাড, রিমুভ বা মডিফাই করবো? হ্যা সেটাও জাভাস্ক্রিপ্ট এ সম্ভবঃ</p>\n<ul>\n<li><p><strong>অ্যাট্রিবিউট অ্যাড করাঃ</strong> আমর চাইলে আমাদের ইলিমেন্ট এ নতুন অ্যাট্রিবিউটস অ্যাড করতে পারি আমাদের ইলিমেন্টরই আরেকটা মেথড <code>setAttribute()</code> দিয়ে। এই মেথড দুইটা আর্গুমেন্ট নিবে। প্রথমটা অ্যাট্রিবিউটের নাম, আর দ্বিতীয়টা সেটার ভ্যালু কি হবে সেটাঃ</p>\n<p>newDiv.setAttribute('data-attr', 'something');</p></li>\n</ul>\n<p>এখন আমরা যদি আমাদের <code>newDiv</code> ইলিমেন্টটা দেখিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*kY6KVY8eQTiPM_n3OuDlRg.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>অ্যাট্রিবিউট মডিফাই করাঃ</strong> মডিফাই করা বলতে কি আসলে? আমরা একটা অলরেডি আছে এমন একটা একটা অ্যাট্রিবিউটের ভ্যালু চেঞ্জ করবো। এটা আগের সেই মেথডেই হয়ে যাবেঃ</p>\n<p>newDiv.setAttribute('data-attr', 'someOtherThing');</p></li>\n</ul>\n<p>এখন আমাদের <code>newDiv</code> ইলিমেন্টটা দেখলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*BSVfqcBH7fDWB8ARh0sOiQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>অ্যাট্রিবিউট রিমুভ করাঃ</strong> আমরা চাইলে আমাদের ইলিমেন্টরই আরেকটা মেথড <code>removeAttribute()</code> দিয়ে খুব সহজেই ইলিমেন্ট এ থাকা অ্যাট্রিবিউট রিমুভ করে ফেলতে পারি। সেজন্যে এই মেথডে আর্গুমেন্ট হিসেবে জাস্ট অ্যাট্রিবিউটের নামটা দিলেই চলবেঃ</p>\n<p>newDiv.removeAttribute('data-attr');</p></li>\n</ul>\n<p>এখন আবার আমাদের ইলিমেন্টটা দেখলেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*N3nUMfJq_ySkfsGCtmaopQ.png\" alt=\"\" /></p>\n<p>ক্লাসও কিন্তু একটা অ্যাট্রিবিউট। এখন এটা একটু স্পেশাল হওয়াতে এটার জন্যেও পৃথক পৃথক মেথড পাওয়া যায়। তবে আমরা আমাদের ব্ল্যাঙ্ক ক্লাস অ্যাট্রিবিউটটাও মুছে ফেলতে পারি এই মেথডের সাহায্যেঃ</p>\n<pre><code>newDiv.removeAttribute('class');\n</code></pre>\n<p>এখন আমাদের ইলিমেন্টটা দেখলেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*d_88M1_ujqXC48IQHAkTvg.png\" alt=\"\" /></p>\n<p><strong>৫। ইলিমেন্ট এর স্টাইল নিয়ে খেলা করাঃ</strong> আমরা চাইলে ইলিমেন্ট এর স্টাইল নিয়েও খেলতে পারি সহজেই। সেজন্যে আমাদের ইলিমেন্ট এর স্পেশাল একটা প্রপার্টি <code>style</code> আছে যেটার আবার নিজস্ব CSS এর মতো দেখতে প্রপার্টি আছে। সাধারণত ঐ প্রপার্টিগুলো অনেকটা রেগুলার CSS এর মতোই। তবে যদি রেগুলার CSS এ কোনো প্রপার্টি যদি দুই ওয়ার্ডের হয়, যেমনঃ <code>text-align</code> তাহলে জাভাস্ক্রিপ্ট এ সেটার অনেকটা হুবুহুব মেথড পাবেন ক্যামেলকেস ফরম্যাটে( <code>textAlign</code>)। মোটামোটি কমন সব রেগুলার CSS প্রপার্টির ক্ষেত্রেও এরকমটা দেখতে পাবেন জাভাস্ক্রিপ্ট এ। আমরা চাইলে আমাদের ব্রাউজারের কন্সোলে সবগুলো প্রপার্টি দেখতেও পারিঃ</p>\n<pre><code>console.dir(newDiv.style);\n</code></pre>\n<p>এখন এখানে আপনি জাভাস্ক্রিপ্ট এ থাকা সবগুলো CSS প্রপার্টি দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*BVgBVQtq38BGql6idVc3Ng.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>স্টাইল অ্যাড করাঃ</strong> এখন আমরা আমাদের ইলিমেন্ট এর ব্যাকগ্রাউন্ড কালো করতে চাচ্ছি। সেজন্যে আমরা সহজেও রেগুলার CSS দিয়ে <code>background-color: #000</code> দিয়ে করে ফেলতে পারবো। তবে আমি এখানে জাভাস্ক্রিপ্ট দিয়ে করবোঃ</p>\n<p>newDiv.style.backgroundColor = '#000';</p></li>\n</ul>\n<p>ভালো করে খেয়াল করবেন CSS এর ভ্যালু স্ট্রিং আকারে গিয়েছে এখানে। এখন আমাদের এই ইলিমেন্ট যেহেতু আমাদের আসল ডকুমেন্ট এ এখনো কোথাও প্লেস করি নাই, তাই সরাসরি এটা দেখতে পারবেন না। একটু পরে আমরা আমাদের আসল ডকুমেন্ট এ প্লেস করবো। তবে যদি ইলিমেন্ট টা কন্সোলে দেখেন, তাহলে সহজেই ধরতে পারবেন যে কালো ব্যাকগ্রাউন্ড অ্যাড হয়েছেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*AZo3LTwYKRqPI31zd6lB-w.png\" alt=\"\" /></p>\n<p>কালো ব্যাকগ্রাউন্ডে কালো লেখা তো আসলে হয় না, তাই লেখাটা সাদা করতে চাচ্ছিঃ</p>\n<pre><code>newDiv.style.color = '#fff';\n</code></pre>\n<p>এখন আমাদের ইলিমেন্টটা দেখলেঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*G9zscah6d11zkjx9dWjMrw.png\" alt=\"\" /></p>\n<p>এখানে আরো মজার ব্যাপার হলো, আমরা চাইলে সেইমভাবে একটা ইলিমেন্ট এর CSS অ্যাক্সেসও করতে পারিঃ</p>\n<pre><code>newDiv.style.color;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*jz1pnshek856w3-0zkfRSA.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>স্টাইল মডিফাই করাঃ</strong> স্টাইল মডিফাই করাও খুব সহজ। জাস্ট আমাদের কাঙ্খিত স্টাইলটা অ্যাক্সেস করে এটার ভ্যালুটা চেঞ্জ করে দিলেই হবে। যেমন এখানে আমরা আমাদের <code>newDiv</code> এর ব্যাকগ্রাউন্ড ঠিক কালো না, বরং একটু হালকা কালো (<code>#333</code>) করতে চাচ্ছিঃ</p>\n<p>newDiv.style.backgroundColor = '#333';</p></li>\n</ul>\n<p>ব্যাস, হয়ে গেলোঃ</p>\n<pre><code>newDiv;\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Pq6UK4FOWbjGoLiWM8N_LA.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>স্টাইল রিমুভ করাঃ</strong> রিমুভ করাটাও বলতে গেলে একটা চিটিং। আমরা আমাদের ইলিমেন্ট এর কাঙ্খিত স্টাইলটা অ্যাক্সেস করে ভ্যালুটা খালি করে দিলেই ব্যাস হয়ে গেলো। তবে আমাদের আগের স্টাইলগুলো রাখতে চাচ্ছি। আর তাই নতুন আরেকটা স্টাইল অ্যাড করে নিইঃ</p>\n<p>newDiv.style.textAlign = 'center';</p></li>\n</ul>\n<p>এখন আমাদের ইলিমেন্টটার তিনটা স্টাইল আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4HcxQ4OkjzZG3JA30_LV7w.png\" alt=\"\" /></p>\n<p>এখন আমরা <code>text-align: center</code> এটা রিমুভ করতে চাচ্ছিঃ</p>\n<pre><code>newDiv.style.textAlign = '';\n</code></pre>\n<p>ব্যাস! কাজ শেষঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*W3UzC3veHe6jq8lGjXHL3A.png\" alt=\"\" /></p>\n<p><strong>৬। আগে-পরে বিভিন্নভাবে ইলিমেন্ট ঢুকানোঃ</strong> এতক্ষন আমরা নতুন ইলিমেন্ট দিয়ে খেলা করলাম। উপরের সবগুলো টেকনিকই আপনার বর্তমানে ডমে থাকা ইলিমেন্ট এর সাথেও করতে পারবেন। কারণ সেই ইলিমেন্ট আর আমাদের তৈরী করা ইলিমেন্ট এর মধ্যে কোনো তফাৎ নাই। সবারই সেইম প্রপার্টি আর মেথড সবই আছে। তো আপনি সহজেই আগে থেকে ডমে থাকা ইলিমেন্টগুলোর সাথেও এভাবে খেলা করতে পারবেন। কিন্তু এখন আমরা আমাদের নতুন তৈরী করা <code>newParagraph</code> আর <code>newDiv</code> দুইটা ইলিমেন্ট আমাদের অলরেডি থাকা ডমে ঢুকাতে চাচ্ছি। সেজন্যে আমাদের ইলিমেন্ট এর খুবই হ্যান্ডি একটা মেথড <code>insertAdjacentElement()</code> আছে। এটা এতটাই হ্যান্ডি যে এটা দিয়েই আপনি বিভিন্ন পজিশনে আপনার ইলিমেন্ট আপনার ডমের বিভিন্ন জায়গায় ঢুকাতে পারবেন। এই মেথডটা আপনি আপনার ডমে যে ইলিমেন্ট এর সাপেক্ষে নতুন ইলিমেন্টটা অ্যাড করতে চাচ্ছেন সেটার উপর অ্যাপ্লাই করবেন। যেমন আমাদের যদি একটা ইলিমেন্ট থাকে ডমে <code>box1</code> নামে, তাহলে এই মেথডটা এরকমভাবে <code>box1.insertAdjacentElement(...)</code> দিয়ে সেই ইলিমেন্ট এর উপর অ্যাপ্লাই করতে হবে। এখন এই <code>insertAdjacentElement()</code> দুইটা আর্গুমেন্ট নেয়। প্রথমটা আপনার সিলেক্ট করা ইলিমেন্ট এর সাপেক্ষে কোন পজিশনে ইলিমেন্ট ঢুকাতে চাচ্ছেন সেটা স্ট্রিং আকারে, আর দ্বিতীয়টা হচ্ছে যে ইলিমেন্টটা ঢুকাবেন সেটা এভাবেঃ <code>box1.insertAdjacentElement('আপনার পজিশন', 'যেটা ঢুকাতে চাচ্ছেন')</code></p>\n<p>এখন প্রথম আর্গুমেন্ট মানে পজিশনটা আপনি চার রকমভাবে দিতে পারবেন। চারটা আর্গুমেন্ট হচ্ছে <code>‘beforebegin’</code>, <code>‘afterbegin’</code>, <code>‘beforeend’</code> এবং <code>‘afterend’</code>। সেটা দেখার জন্যে আমাদের একটা ডায়াগ্রাম লাগবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*2Yygjw-H0RI5PczTuvNo_w.png\" alt=\"\" /></p>\n<p>এখানে লাল কালারের ইলিমেন্টটা হচ্ছে আপনার ডমে থাকা ইলিমেন্টটা। এটার সাপেক্ষেই আপনি আপনার নতুন ইলিমেন্টটাকে বিভিন্ন জায়গায় স্থান দিতে পারবেন। কতটা ফ্লেক্সিবল দেখলেই বুঝা যায়।</p>\n<ul>\n<li><p><strong>চাইল্ড হিসেবে অ্যাড করাঃ</strong> আমরা চাচ্ছি আমাদের <code>newDiv</code> কে বক্স ১ এর চাইল্ড হিসেবে অ্যাড করতে। এখন চাইল্ড হিসেবেও দুইভাবে অ্যাড করা যায়, একদম প্রথমে অথবা শেষে। যেটা আমাদের ডায়াগ্রামে খুব সুন্দর করে দেওয়া আছে। এখন আমরা প্রথমে আমাদের বক্স ১ সিলেক্ট করে নিবো। বক্স ১ এর আইডি হচ্ছে <code>#box1</code> এটা দিয়ে খুব সহজেই সিলেক্ট করতে পারিঃ</p>\n<p>var box1 = document.getElementById('box1');</p></li>\n</ul>\n<p>ব্যাস এখন <code>box1</code> এ আমরা বক্স ১ সিলেক্ট করে রেখে দিলাম। এটার উপরেই <code>insertAdjacentElement()</code> মেথড দিয়ে প্রথমে শুরুর দিকে(<code>‘afterbegin’</code>) আমাদের <code>newDiv</code> ঢুকাবোঃ</p>\n<pre><code>box1.insertAdjacentElement('afterbegin', newDiv);\n</code></pre>\n<p>এবার দেখুন ডমে বক্স ১ এর ভিতরে শুরুর দিক থেকে আমাদের <code>newDiv</code> প্লেস হয়েছে। আগের যে লেখাটা ছিলো <strong>BOX 1,</strong> সেটার আগেই স্থান পেয়েছে, ডায়াগ্রামটা দেখুন, ঠিক ওরকমভাবেইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ZNvI8Ktc0WWifVemLKAVgw.png\" alt=\"\" /></p>\n<p>এখন আবার আমরা চাচ্ছি আমাদের আরেকটা তৈরী করা ইলিমেন্ট <code>newParagraph</code> কেও এই বক্স ১ এ চাইল্ড হিসেবে ঢুকাতে। কিন্তু আমরা এটা চাইল্ড শেষের দিক হতে ঢুকাবোঃ</p>\n<pre><code>box1.insertAdjacentElement('beforeend', newParagraph);\n</code></pre>\n<p>ব্যাস! হয়ে গেলোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Je9fvOSZfHOgQlN38qWH2w.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>আগে বা পরে অ্যাড করাঃ</strong> এখন আমরা যদি আমাদের ইলিমেন্ট আমাদের বক্সের ঠিক আগে বা পরে অ্যাড করতে চাই, তাহলে খুব সহজেই <code>insertAdjacentElement()</code> এর প্রথম আর্গুমেন্ট এর বাকী দুইটা আর্গুমেন্ট ব্যবহার করে সেটা করতে পারব সহজেই। সেজন্যে আমরা বক্স ২ এর সাপেক্ষেই কাজ করবো। আর তাই প্রথমে বক্স ২ সিলেক্ট করে নিইঃ</p>\n<p>var box2 = document.getElementById('box2');</p></li>\n</ul>\n<p>এখন এই বক্সের আগের আমাদের <code>newDiv</code> ইলিমেন্টটা ঢুকাতে চাচ্ছিঃ</p>\n<pre><code>box2.insertAdjacentElement('beforebegin', newDiv);\n</code></pre>\n<p>ঠিক যেখানে বলেছি সেখানেই প্লেস হয়ে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*NR8lkSY9V3EkpIgLnKSBrg.png\" alt=\"\" /></p>\n<p>এখন আমাদের বক্স ২ এর পরে <code>newParagraph</code> ইলিমেন্টটাকে প্লেস করতে চাচ্ছিঃ</p>\n<pre><code>box2.insertAdjacentElement('afterend', newParagraph);\n</code></pre>\n<p>ব্যাস যে কথা সে কাজঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ZzVxoAWA61gHFGUuIgxzdA.png\" alt=\"\" /></p>\n<p><strong>৭। ইলিমেন্ট এক জায়গা থেকে আরেক জায়গায়ঃ</strong> এখন আমরা আরেকটু গভীরে চলে যাবো। আমাদের ডমে থাকা ইলিমেন্টগুলোর পজিশন পরিবর্তন করবো। সেজন্যে স্পেশাল কিছু মেথড আছে। <code>insertAdjacentElement()</code> দিয়েও যেমন করা যাবে, ঠিক তেমনি কিছু স্পেশাল মেথডও আছে। আমরা সে স্পেশাল মেথডগুলো দেখো।</p>\n<ul>\n<li><p><strong>একটা ইলিমেন্টকে আরেকটা ইলিমেন্ট এর শেষের দিক থেকে চাইল্ড বানাতেঃ</strong> আমরা বক্স ২ কে নিয়ে বক্স ১ এর শেষের দিক থেকে চাইল্ড বানাবো। সেজন্যে প্রথমে বক্স ২ সিলেক্ট করতে হবে। যেটা আমাদের <code>box2</code> নামে অলরেডি করা আছে। এখন বক্স ১ ও সিলেক্ট করতে হবে, এটাও আমরা <code>box1</code> নামে করে রেখেছি। তাই পুনরায় সিলেক্ট করতে হবে না। এখন বক্স ১ এ <code>appendChild()</code> নামে একটা মেথড আছে যেটা ব্যবহার করবোঃ</p>\n<p>box1.appendChild(box2);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*lzl0Y1fbG0Me4yoQVlqC1Q.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>শুরুর দিকের চাইল্ড বানাতেঃ</strong> উপরে আমাদের বক্স ২, বক্স ১ এর চাইল্ড হিসেবে অ্যাড হয়েছে ঠিকই, তবে সেটা বক্স ১ এর শেষের দিকে অ্যাড হয়েছে। এখন আমরা যদি চাই শুরুর দিকে থেকে চাইল্ড হিসেবে অ্যাড করতে তাহলে আমরা <code>insertBefore</code> নামের একটা মেথড ব্যবহার করতে পারি। এই মেথডটা একটু অন্যরকম। এটা ২ টা আর্গুমেন্ট নিবে, প্রথমটা অবশ্যই যে ইলিমেন্ট অ্যাড করবেন বা এখানে আমাদের বক্স ২ যাবে। আর দ্বিতীয়টা যে ইলিমেন্ট এর চাইল্ড হিসেবে অ্যাড করতে চাচ্ছেন সে ইলিমেন্ট এর কোন চাইল্ডের আগে প্লেস করতে চাচ্ছেন সেটা যাবে। তো এখানে আসলে আমাদের আরেকটা সিলেক্টর লাগবে। তো আমরা বক্স ১ এর <code>h4</code> হেডিং ট্যাগের আগে প্লেস করতে চাচ্ছি তো সেটাও সিলেক্ট করে নিইঃ</p>\n<p>var box1h4 = document.querySelector('#box1&gt;h4');</p></li>\n</ul>\n<p>এখন আমরা আমাদের বক্স ২ বক্স ১ এর <code>h4</code> চাইল্ডের আগে প্লেস করবোঃ</p>\n<pre><code>box1.insertBefore(box2, box1h4);\n</code></pre>\n<p>ব্যাস! হয়ে গেলোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*YgTMGISemVAnz_NnKsQhvA.png\" alt=\"\" /></p>\n<p><strong>৮। ইলিমেন্ট রিমুভ করাঃ</strong> এবার ইলিমেন্ট রিমুভ করার পালা। আমরা অনেকভাবে ইলিমেন্ট রিমুভ করতে পারবো চাইলে। তবে আমি এখানে কাজে লাগবে এমন কিছু টেকনিক শিখাবো। আমরা এখানে <code>newDiv</code> , <code>newParagraph</code> এবং বক্স ২ রিমুভ করে ফেলবো। তবে একেকটা একেক টেকনিকে।</p>\n<ul>\n<li><p><strong>একটা ইলিমেন্ট এর আগের ইলিমেন্ট রিমুভ করাঃ</strong> এখানে আমরা আমাদের <code>newParagraph</code> ইলিমেন্টটা সিলেক্ট করে এটার আগের ইলিমেন্ট <code>newDiv</code> রিমুভ করবো। সেটার জন্যে আমাদের <code>previousSibling</code> নামের একটা প্রপার্টি আছে। সেটা দিয়ে <code>newParagraph</code> থেকে <code>newDiv</code> সিলেক্ট করে সেটা রিমুভ করবোঃ</p>\n<p>newParagraph.previousSibling.remove();</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*9Y-qzFxa7IQGrWtr7pL7Jw.png\" alt=\"\" /></p>\n<p>ঠিক সেইম আরেকটা প্রপার্টি <code>nextSibling</code> আছে, যেটা দিয়ে একটা ইলিমেন্ট এর পরের কোনো ইলিমেন্ট রিমুভ করতে বা অ্যাক্সেস করতে পারবেন।</p>\n<ul>\n<li><p><strong>প্যারেন্ট ইলিমেন্ট দিয়ে চাইল্ড ইলিমেন্ট রিমুভ করাঃ</strong> আমরা কোনো প্যারেন্ট ইলিমেন্ট থেকে তাদের চাইল্ড ইলিমেন্টগুলো পেতে পারি সহজেই। যেমন আমরা যদি এখানে বক্স ১ এর সব চাইল্ড ইলিমেন্ট দেখতে চাইঃ</p>\n<p>box1.childNodes;</p></li>\n</ul>\n<p>এটা আমাদের এই বক্স ১ এর সব চাইল্ড ইলিমেন্টসহ একটা নোডলিস্ট রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*0qP2ayq3Z-LLTxAMJ1K2cQ.png\" alt=\"\" /></p>\n<p>এখন এখান থেকে আমরা অনেকটা অ্যারের মতো করেই চাইল্ড নোড গুলো সিলেক্ট করতে পারবো। এখানে দেখা যাচ্ছে আমাদের বক্স ২ এর ইন্ডেক্স নাম্বার হচ্ছে ১। তো আমরা এখান থেকে আমাদের বক্স ২ সিলেক্ট করতে পারিঃ</p>\n<pre><code>box1.childNodes[1];\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*K4oUhb5kmVxsBOm30n1-4g.png\" alt=\"\" /></p>\n<p>এখন এটার উপর <code>remove()</code> মেথড চালালেই বক্স ২ রিমুভ হয়ে যাবেঃ</p>\n<pre><code>box1.childNodes[1].remove();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*yuN4fEuyOPbEK1_hTPB4qw.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>প্যারেন্টের চাইল্ড সিলেক্ট করে রিমুভ করাঃ</strong> এখন আমরা যদি চাই আমাদের একটা প্যারেন্ট ইলিমেন্ট এর একটা চাইল্ড সিলেক্ট রিমুভ করে ফেলতে, তাহলে সেটাও সহজেই করতে পারবো। প্রথমে আমাদের প্যারেন্ট চাইল্ডটাকে সিলেক্ট করতে হবে, আমাদের এখানে আমরা বক্স ১ <code>box1</code> নামে অলরেডি সিলেক্ট করে রেখেছি। এখন বক্স ১ এর চাইল্ড <code>h4</code> কে সিলেক্ট করে রিমুভ করবো। এটাও আমাদের সিলেক্ট করাই আছে <code>box1h4</code> তে। এখন আমরা সহজেই রিমুব করে ফেলতে পারবোঃ</p>\n<p>box1.removeChild(box1h4);</p></li>\n</ul>\n<p>ব্যাস! কাজ শেষঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*I9_CghuevNibQSIrVHbIOA.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>ইলিমেন্ট সরাসরি সিলেক্ট করে রিমুভ করাঃ</strong> আমরা চাইলে একটা ইলিমেন্ট সরাসরি সিলেক্ট করে সেটার উপরেই <code>remove()</code> মেথড অ্যাপ্লাই করতে পারি। সেজন্যে আমাদের আর কারো সাহায্যের দরকার নাই। যেমন আমরা বক্স ৩ রিমুভ করতে চাইলেঃ</p>\n<p>document.getElementById('box3').remove();</p></li>\n</ul>\n<p>ব্যাস! এভাবেই রিমুভ করে ফেলতে পারবেন। এখানে আরেকটা জিনিস খেলায় করবেন যে আমরা সরাসরি সিলেক্ট করে রিমুভ মেথড অ্যাপ্লাই করেছি। এভাবেও পারবেন, কোনো সমস্যা নাই। আমাদের দেখানো সবগুলো উদাহরণেই এভাবে সরাসরিও সিলেক্ট করে কাজ করতে পারবেন। কিন্তু বার বার একটা ইলিমেন্ট সিলেক্ট করে কাজ করা থেকে একবার সিলেক্ট করে সেটাকে একটা ভ্যারিয়েবলে স্টোর করে সেটা নিয়ে কাজ করা অনেকটাই ফার্স্ট। তাই এভাবেই চেষ্টা করবেন।</p>"},{"language":"বাংলা","tags":[" coding","JavaScript","JavaScript-Bangla","javascript-dom","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-ডম","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-10-03T16:36:33.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)","thumb_img_path":"/images/1_eZLEkd3SlKGcIQu3jWcLkQ.jpeg","content":"<p>ইভেন্ট হচ্ছে সোজা কথায় কোনো ঘটনা। আমি আমার একটা HTML ডকুমেন্ট এর কোথাও ক্লিক করলাম, এটা একটা ইভেন্ট। অথবা আমি একটা ইলিমেন্ট এর উপর মাউস পয়েন্টার নিলাম, অথবা আমি কী-বোর্ডের কোনো কী-তে চাপলাম, এগুলো সবই ইভেন্টের অন্তর্ভুক্ত। এমনিতে একটা পেজ লোড করা, পেজকে রিসাইজ করা এগুলোও ইভেন্টের মধ্যে পড়ে। এরকম আরো অনেক রকমের ইভেন্ট আছে যেগুলো আমাদের HTML ডকুমেন্ট এ, ডকুমেন্ট এর বিভিন্ন ইলিমেন্টে বিভিন্নভাবে ঘটতে পারে।</p>\n<p>এখন এরকম কোনো ইভেন্ট এ আমরা হয়তো কোনো অ্যাকশন নিতে চাইতে পারি। যেমন আমরা হয়তো চাইতে পারি কেউ অমুক বাটনে ক্লিক করলে একটা ম্যাসেজ শো করাবো। অথবা আমাদের পেজটা পুরোপুরি লোড না হওয়া পর্যন্ত আমরা একটা লোডার শো করাবো। অথবা আমরা ফর্ম সাবমিট করার সময় ইনপুট ফিল্ডগুলো ভ্যালিড কিনা দেখবো। এগুলো সবই ইভেন্ট এর সাহায্যে করা হয়।</p>\n<p>জাভাস্ক্রিপ্ট এর ইভেন্ট এর সাহায্যে একটা পেজ অনেকটা ডায়নামিক পেজের মতো করা ফেলা যায়। আমরা পেজ রিলোড না করেও অনেকসময় ইনস্ট্যান্ট ফলাফল, অ্যাকশন দেখতে পারি জাভাস্ক্রিপ্ট এর ইভেন্ট ব্যবহার করার মাধ্যমে। এর ফলে আমাদের একটা ওয়েবসাইটের ওভারল ইউজার এক্সপেরিয়েন্স ভালো লেভেলে নেওয়া যায়।</p>\n<p>আমরা এই লেখায় প্র্যাক্টিসের সুবিধার্থে একটা প্রোজেক্টটা ব্যবহার করবো। তো এটা <a href=\"https://github.com/practicalJavaScript/javascript-dom/archive/event-handling.zip\">এখান থেকে</a> ডাউনলোড করে আনজিপ করে আপনার পছন্দের কোড এডিটরে ওপেন করুন। আমরা আমাদের স্ক্রিপ্ট/কোডগুলো <code>script.js</code> ফাইলের ভিতরে লিখবো যেটা আমাদের <code>index.html</code> এর সাথে লিঙ্ক করা আছে।আর <code>index.html</code> টা ক্রোমে ওপেন করে ডেভেলপার কন্সোল ওপেন করে প্র্যাক্টিস করা শুরু করুন। প্রত্যেকবার স্ক্রিপ্ট ফাইলে নতুন কোনো কোড অ্যাড করলে সেটা ইফেক্ট দেখতে আমাদের ব্রাউজারে খুলে রাখা ডকুমেন্টটা অবশ্যই রিলোড করতে হবে। আমাদের প্র্যাক্টিস ডকুমেন্টটাতে কয়েকটা বক্স আছে। সেই সাথে কয়েকটা বাটন, একটা ফর্ম, কয়েকটা ইনপুট ফিল্ডসহ আরো কিছু ইলিমেন্ট আছে যেগুলো আমরা বিভিন্ন পর্যায়ে ব্যবহার করবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Ia7a8VOGsga4E-VFl-Dnvg.png\" alt=\"\" /></p>\n<p><strong>অ্যালার্ট বক্সঃ</strong> শুরু করার আগে আমরা একটা স্পেশাল ফাংশন দেখে নেই। এই ফাংশনের কাজ হচ্ছে আমাদের ব্রাউজারে অ্যালার্ট দেখানো। যেমন কন্সোলে সরাসরি যদি এরকম কোড লিখিঃ</p>\n<pre><code>alert('Hello World!');\n</code></pre>\n<p>এটা রান করার সাথে সাথেই আপনার ব্রাউজারে এরকম অ্যালার্ট বক্স দেখবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Ar3qeR8u-ESs6jF2zvqeXA.png\" alt=\"\" /></p>\n<p><strong>১। কমন ডম ইভেন্টঃ</strong> আমাদের ডমে কমন কিছু ইভেন্ট আছে। আমরা সেই ইভেন্ট দুইরকমভাবে হ্যান্ডেল করতে পারি। প্রথমত ইনলাইন স্টাইলে, আমাদের কাঙ্খিত ইলিমেন্টের সাথেই অ্যাট্রিবিউটস হিসেবে। আর দ্বিতীয়ত আমাদের HTML ডমের সাহায্যে পুরোপুরি জাভাস্ক্রিপ্ট দিয়ে, ইলিমেন্টকে টাচ না করেই।</p>\n<p>— <strong>HTML ইভেন্ট অ্যাট্রিবিউটঃ</strong> আমরা চাইলে আমাদের ইলিমেন্ট এ অ্যাট্রিবিউট হিসেবেও সরাসরি ইভেন্ট হ্যান্ডেল করতে পারি। যেমন আমাদের ডকুমেন্টটায় বক্স ৪ এর প্রথম লিস্ট আইটেমে এরকম সরাসরি অ্যাট্রিবিউটের মাধ্যমে ক্লিক ইভেন্ট লাগাতে চাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*lniPwm-bLuNAwjzQ_i7j1w.png\" alt=\"\" /></p>\n<pre><code>&lt;li onclick=\"alert('This Document is Created for https://js.zonayed.me')\"&gt;About this document&lt;/li&gt;\n</code></pre>\n<p>এটা লিখে ফাইল সেইভ করে, ব্রাউজারে আমাদের ডকুমেন্টটা রিলোড দিয়ে এই ইলিমেন্ট এর উপরে ক্লিক করলে একটা অ্যালার্ট বক্সে কিছু দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*bNpGMrtt3AErlzUuLhf-4A.png\" alt=\"\" /></p>\n<p>এখন আমরা এখানেই সব লিখে দিয়েছি, কিন্তু চাইলে একটা ফাংশন আলাদা করে তৈরী করে সেটা ক্লিকে কল হবে এরকমটাও বলে দিতে পারি। যেমন আমাদের ডকুমেন্টটার <code>script.js</code> ফাইলটা ওপেন করে এরকম একটা ফাংশন লিখুনঃ</p>\n<pre><code>function showAlert() {\n   alert('Alert by Function Call');\n}\n</code></pre>\n<p>এখন আবার আমাদের সেই লিস্ট আইটেমে গিয়ে <code>onclick</code> এর ভিতরের সব মুছে শুধুমাত্র এই ফাংশনটা কল করুনঃ</p>\n<pre><code>&lt;li onclick=\"showAlert()\"&gt;About this document&lt;/li&gt;\n</code></pre>\n<p>এখন ক্রোমে ওপেন করা ডকুমেন্টটা রিলোড দিয়ে যদি আবার সেই ইলিমেন্ট উপর ক্লিক করেন তাহলে দেখবেন এরকম কিছু আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*wEmgjeJfh-DLKxh64aiMgQ.png\" alt=\"\" /></p>\n<p>তারমানে আমরা সফলভাবে অন্য একটা ফাইলে ফাংশন তৈরী করে সেটা অ্যাট্রিবিউটের মাধ্যমে কল করতে পেরেছি। এরকম বড় কোনো ফাংশানালিটি থাকলে এক লাইনে তো আর হয় না, এভাবেই আলাদা ফাইল নিয়ে সেখানে সেটা হ্যান্ডেল করতে হয়। এরকম অ্যাট্রিবিউটের মাধ্যমে আরো কিছু টাইপের ইভেন্ট নিয়ে কাজ করতে পারবেনঃ</p>\n<ul>\n<li><strong><code>onchange</code>:</strong> আপনার ইলিমেন্ট এ কোনো ধরনের পরিবর্তন আসলে এই ইভেন্ট ঘটবে। সাধারণত আমরা যখন ফর্মের ইনপুট ফিল্ডে ডাটা দেই, তখন সেই ইনপুট ফিল্ডের ভ্যালু চেঞ্জ হয়। আর সেই চেঞ্জের সময়ের ইভেন্টটা এটা দিয়ে হ্যান্ডেল করতে পারবেন।</li>\n<li><strong><code>onclick</code>:</strong> ইলিমেন্ট এর উপর ক্লিক করলে এই ইভেন্ট ঘটবে।</li>\n<li><strong><code>onmouseover</code>:</strong> খালি পয়েন্টারটা আপনার কাঙ্খিত ইলিমেন্ট এর উপরে নিলেই এই ইভেন্ট ঘটবে।</li>\n<li><strong><code>onmouseout</code>:</strong> কোনো ইলিমেন্ট থেকে আপনার মাউসের পয়েন্টার সরালে এই ইভেন্ট ঘটবে।</li>\n<li><strong><code>onkeydown</code>:</strong> কী-বোর্ডের কোনো কী চাপলে এই ইভেন্ট ঘটবে।</li>\n<li><strong><code>onload</code>:</strong> ব্রাউজার আপনার ইলিমেন্ট লোড শেষ করলে এই ইভেন্ট ঘটে।</li>\n</ul>\n<p>এখানে আমি প্রত্যেকটা নিয়ে পৃথক পৃথকভাবে আলোচনা করলাম না, কারণ পরে এদেরকেই আবার বিভিন্ন জায়গায় দেখাবো। তাছাড়া এভাবে ইনলাইন, অ্যাট্রিবিউটের মাধ্যমে ইভেন্ট হ্যান্ডেল করাটাও খুব ভালো প্র্যাক্টিস না। আমরা সম্পূর্ণ জাভাস্ক্রিপ্ট দিয়েই সব করবো, আমাদের HTML ইলিমেন্ট টাচ না করেই।</p>\n<p><strong>— HTML ডমের সাহায্যেঃ</strong> উপরে আমরা HTML এ অ্যাট্রিবিউট হিসেবে যে ইভেন্টগুলো দেখলাম, সেগুলোসহ আরো বেশ কিছু ইভেন্ট আছে আমাদের যেগুলো পুরোপুরি জাভাস্ক্রিপ্ট দিয়েও হ্যান্ডেল করতে পারবো HTML ইলিমেন্ট টাচ না করেই।</p>\n<p>আমরা আমাদের বক্স ১ এ একটা বাটন আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*mSome3y3rH1QEnBaEzGJCw.png\" alt=\"\" /></p>\n<p>বাটনে একটা ইভেন্ট লাগাবো। প্রথমে বাটনটা সিলেক্ট করে নিইঃ</p>\n<pre><code>const clickMeBtn = document.getElementById('btn-click-me');\n</code></pre>\n<p>এখন এভাবে প্রথমে ইলিমেন্ট সিলেক্ট করে ভ্যারিয়েবলে নিয়ে তারপর কাজ করা ভালো প্র্যাক্টিস। এখন এখানে <code>clickMeBtn</code> টাই হচ্ছে আমাদের বাটন। ব্রাউজারের কন্সোল থেকে এটা সরাসরি খুলে দেখলেও ভিতরে আপনি অনেকগুলো মেথড, প্রপার্টিসহ ইভেন্টগুলোও দেখতে পাবেনঃ</p>\n<pre><code>console.dir(clickMeBtn);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*VMdCllMofzofO3BVzu2YcA.png\" alt=\"\" /></p>\n<p>এখানে আরো অনেকরকমের ইভেন্ট আছে। কিন্তু আমরা তারমধ্যে ক্লিকের ইভেন্ট দেখবো। এখানে এই ইভেন্টগুলোতে আমরা ফাংশন অ্যাসাইন করে দিলে প্রত্যেকবার এই ইভেন্ট ঘটলেই সেই ফাংশন রান করবেঃ</p>\n<pre><code>clickMeBtn.onclick = function() {\n   console.log('Button Clicked');\n}\n</code></pre>\n<p>আমরা এখানে ক্লিকে একটা ফাংশন অ্যাসাইন করেছি যেটার কাজ হচ্ছে একটা লেখা প্রিন্ট করা কন্সোলে। এখন প্রত্যেকবার আমাদের সেই বাটনে ক্লিক করলেই দেখবেন কন্সোলে উক্ত লেখা প্রিন্ট হচ্ছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*NWVE1J6QHXwdxTeJGnCbdw.png\" alt=\"\" /></p>\n<p>এরকম সেইম টাইপের আরো অনেক ইভেন্ট আছে। যেমনঃ <code>onmouseover</code>, <code>onchange</code>, <code>onblur</code> , <code>onload</code> , <code>onresize</code> সহ আরো অনেক। সবগুলো একইভাবে কাজ করবে। যেমন আমরা চাইলে আরো একটা দেখতে পারি। আমরা যদি চাই আমাদের ইলিমেন্ট এর উপ মাউস নিলেই কিছু একটা অ্যাকশন নিবোঃ</p>\n<pre><code>clickMeBtn.onmouseover = function() {\n   console.log('Mouse Over');\n}\n</code></pre>\n<p>এখন সেই বাটনের উপরে মাউস বা পয়েন্টারটা নিলেই দেখবেন আমাদের ফাংশন রান করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*OHqPGfYZget9EWnDV1OAlw.png\" alt=\"\" /></p>\n<p><strong>২। ইভেন্টের লিসেনারঃ</strong> উপরে আমরা যেভাবে ইভেন্ট হ্যান্ডেলিং দেখলাম সেটা খুব বেশী ব্যবহার করা হয় না। বরং আমাদের আরেকটা মেথড আছে, একটা মেথড দিয়েই আমরা বিভিন্নরকমের ইভেন্ট হ্যান্ডেল করতে পারবো। তাছাড়া এই মেথডের বিশেষ কিছু সুবিধাও আছে যেমন আমরা এটার মাধ্যমে আনলিমিটেড ইভেন্ট অ্যাড করতে পারবো একটা ইলিমেন্ট এ। যেখানে একটু আগে উল্লেখ করা পদ্ধতিতে আমরা এক সাথে দুইটা ক্লিক ইভেন্ট অ্যাড করতে পারবো না, পরেরটা আগের ইভেন্টকে রিপ্লেস করে ফেলবে। এছাড়াও বাকী পার্থ্যক্যগুলো পরে আস্তে আস্তে আলোচনা করবো। সেই মেথডটা হচ্ছে <code>addEventListener()</code> । এটাও আমরা আমাদের ইলিমেন্ট এর সাথে ব্যবহার করতে পারবো।</p>\n<p>এই <code>addEventListener</code> প্রধানত দুইটা প্যারামিটার নেয়। প্রথমটা হচ্ছে কোন টাইপের ইভেন্ট হবে সেটা, আর দ্বিতীয়টা একটা ফাংশন(হ্যান্ডেলার) যেটা ইভেন্ট ঘটলে রান হবেঃ</p>\n<pre><code>yourElement.addEventListener(typeofEvent, handler);\n</code></pre>\n<p>এখন আমরা আমাদের বক্স ১ সিলেক্ট করবোঃ</p>\n<pre><code>const box1 = document.getElementById('box1');\n</code></pre>\n<p>এখন আমরা এই বক্স ১ এ আমাদের ইভেন্ট লিসেনারটা লাগাবো। আর একই সাথে আমরা ক্লিক টাইপের ইভেন্ট চাচ্ছিঃ</p>\n<pre><code>box1.addEventListener('click', function() {\n   console.log('Clicked on Box 1');\n})\n</code></pre>\n<p>ব্যাস, এখন বক্স ১ এর উপরে গিয়ে ক্লিক করলেই দেখবেন আপনার ফাংশন রান হচ্ছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*aU3rMzMJkEbmjFKP_voB1A.png\" alt=\"\" /></p>\n<p>এরকম আপনি চাইলে এখানে ইভেন্ট টাইপে প্যারামিটার হিসেবে <code>load</code>, <code>focus</code>, <code>blur</code>, <code>submit</code>, <code>resize</code>, <code>cut</code>, <code>copy</code>, <code>keydown</code>, <code>keypress</code>, <code>keyup</code> সহ আরো অনেক টাইপের ইভেন্ট দিতে পারবেন।</p>\n<p><strong>৩। ইভেন্ট মডিফাইঃ</strong> আমাদের বক্স ১ এ এখন পুরো বক্সের উপর একটা ক্লিক ইভেন্ট লাগানো আছে, আবার সেই সাথে বক্সের ভিতরের বাটনেও দুইটা ইভেন্ট লাগানো আছে। এখন আপনি যদি জাস্ট সেই বাটনে ক্লিক করেন, তাহলে দেখবেন সবগুল ইভেন্টই একসাথে কাজ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*-DikIJoF3nwxVaCcxRFHQg.png\" alt=\"\" /></p>\n<p>এটা বাই ডিফল্ট আচরণ, কিন্তু আমরা চাইলে এটা মডিফাই করতে পারবো।</p>\n<p>— <strong>বাবল আপ(Bubble Up):</strong> বাটনে ক্লিক করাতে আমাদের বক্সের ইভেন্টও রান করছে, এটাই মূলত বাবল আপ। আমাদের ক্লিক ইভেন্টটা বাটন থেকে বাবল আপ করে এর প্যারেন্ট ইলিমেন্ট বক্স ১ এও চলে গেছে। আর তাই সেই ইভেন্টও রান করেছে। এখন আমরা চাইলে এই আচরণটা অফ করে দিতে পারি, যদিও এই বাবল আপেরও বিশেষ সুবিধা আছে যেটা আমরা একটু পরেই আলোচনা করবো। সেজন্যে আমাদের বাটনের ইভেন্টটা মডিফাই করতে হবে এরকমভাবেঃ</p>\n<pre><code>clickMeBtn.onclick = function(event) {\n   event.stopPropagation();\n   console.log('Button Clicked');\n}\n</code></pre>\n<p>এখানে আমাদের হ্যান্ডেলার ফাংশনটা <code>event</code> নামে একটা প্যারামিটার নিয়েছে, আপনি চাইলে যেকোনো নামেই নিতে পারবেন এই প্যারামিটার। এটার ভিতরে আপনার ইভেন্ট সম্পর্কে আরো অনেক মেথড, প্রপার্টি পাবেন। ঐখান থেকেই আমরা একটা মেথড <strong><code>stopPropagation()</code></strong> ব্যবহার করেছি এখানে। এটার কাজই হচ্ছে এরকম বাবল-আপ বন্ধ করা। ব্যাস, এখন ডকুমেন্টটা রিলোড দিয়ে বাটনে ক্লিক করলে দেখবেন শুধুমাত্র বাটনের ক্লিক ইভেন্ট হ্যান্ডেলারটাই চলছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*niRyomEcgy1hcsoaA0hbHQ.png\" alt=\"\" /></p>\n<p>— <strong>সেইম ইলিমেন্ট এ একই রকম আরেকটা ইভেন্টঃ</strong> ধরি আমাদের বক্স ১ এর বাটনে আরেকটা ক্লিক ইভেন্ট আছেঃ</p>\n<pre><code>clickMeBtn.addEventListener('click', function() {\n   console.log('Another Click Event');\n});\n</code></pre>\n<p>এটা লিখে সেইভ করে ব্রাউজার রিলোড দিয়ে আমাদের বাটনে ক্লিক করলে দেখবেন ক্লিক ইভেন্ট দুইটাই কাজ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*7j6P4-MFHQata7glT-pXpA.png\" alt=\"\" /></p>\n<p>এখন যদি আমরা চাই যে না আমরা শুধুমাত্র একটা ইভেন্ট রান করবে। তাহলে যে ইভেন্টটা রাখবেন সেখানে হ্যান্ডেলারে <code>event</code> প্যারামিটার পাস করে দিয়ে এটারই স্পেশাল আরেকটা মেথড আছে, সেটা কল করে দিতে হবেঃ</p>\n<pre><code>clickMeBtn.onclick = function(event) {\n   event.stopPropagation();\n   event.stopImmediatePropagation();\n   console.log('Button Clicked');\n}\n</code></pre>\n<p>তবে মনে রাখবেন যে ইভেন্ট থেকে এটা বন্ধ করতে চাচ্ছেন সেটা বাকী ইভেন্টগুলো থেকে আপনার স্ক্রিপ্ট ফাইলে আগে থাকতে হবে। নতুবা সে ইভেন্টগুলো রান করার পর আপনার ব্রাউজার দেখতে পাবে যে আপনি ইভেন্ট রান করাতে না করেছেন। কিন্তু ততক্ষনে কোড উপরে থাকার কারণে আগেই রান হয়ে গেছে। তাই এটা দিয়েও কোনো লাভ হবে না।</p>\n<p>ব্যাস, এখন সেইভ করে রিলোড দিয়ে আবার বাটনে ক্লিক করলে দেখবেন আগের ক্লিক ইভেন্টটা আর কাজ করছে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*qX-4ZZOgbmh6OJHLKBTPTw.png\" alt=\"\" /></p>\n<p>— <strong>ডিফল্ট আচরনঃ</strong> আমাদের বক্স ৪ এ কিছু লিঙ্ক আছে। এগুলোতে ক্লিক করলে আপনাকে কাঙ্ক্ষিত ওয়েবসাইটে নিয়ে যাবে। এরা লিঙ্ক, তাই ক্লিক করলে আপনাকে লিঙ্কের রেফারেন্স অনুযায়ী সে জায়গায় নিয়ে যাবে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ktap67aCpnf0A6_00YQ7zQ.png\" alt=\"\" /></p>\n<p>এটাই ব্রাউজারের ডিফল্ট আচরণ। এখন আমরা চাইলে এই আচরণটাকেও মডিফাই করে দিতে পারবো। আমাদের এখানে প্রথম লিঙ্কটা <strong>JavaScript DOM Manipulation</strong> নামে ইলিমেন্টটার লিস্ট ট্যাগের একটা আইডি আছেঃ</p>\n<pre><code>&lt;li id=\"link\"&gt;&lt;a href=\"https://with.zonayed.me\"&gt;JavaScript DOM Manipulation&lt;/a&gt;&lt;/li&gt;\n</code></pre>\n<p>আমরা এই আইডি দিয়ে এটা সিলেক্ট করবো। তারপর ক্লিক ইভেন্টটাকে মডিফাই করবো। ক্লিক করলে যাতে বাই ডিফল্ট আচরণ না করে ব্রাউজার সেটা বলে দিবো। প্রথমে লিঙ্ক ট্যাগটা সিলেক্ট করে নেইঃ</p>\n<pre><code>const link = document.getElementById('link');\n</code></pre>\n<p>ব্যাস এখন সেই আগের মতো করে <code>event</code> প্যারামিটারেরই এরকম ডিফল্ট আচরণ অফ করার জন্যে একটা স্পেশাল মেথড আছে, সেটা আমরা ব্যবহার করতে পারবোঃ</p>\n<pre><code>link.addEventListener('click', function(event) {\n   event.preventDefault();\n});\n</code></pre>\n<p>ব্যাস, এখন ডকুমেন্টটা সেইভ করে ব্রাউজারে রিলোড দিয়ে সেই কাঙ্ক্ষিত লিঙ্কে ক্লিক করে দেখবেন সেটা আর বাই ডিফল্ট আচরণ করছে না। এখানে একটা জিনিস খেয়াল করবেন যে আমরা ঠিক <code>a</code> ট্যাগটাকে সিলেক্ট করি নাই, বরং আমরা এর প্যারেন্ট <code>li</code> কে সিলেক্ট করেছি। আমরা এটা নিয়ে একটু পরেই বিস্তারিত আলোচনা করবো।</p>\n<p><strong>৪। নেটিভ(Native) ডম ইভেন্টঃ</strong> আমরা তো এতক্ষন নিজেরা নিজেরা ইভেন্ট ঘটালাম। নিজেরাই গিয়ে বাটনে ক্লিক করেছি, ক্লিক ইভেন্ট ঘটেছে। কিন্তু আমরা চাইলে কোড দিয়েও এরকম ইভেন্ট ঘটাতে পারি। ধরি আমরা আমাদের বক্স ১ এর বাটনে একটা ক্লিক ইভেন্ট ঘটাতে চাচ্ছি। আর তাই ব্রাউজারের কন্সোল ওপেন করে নিচের এই কোডটা লিখবো[এটা স্ক্রিপ্ট ফাইলের ভিতরে লেখার দরকার নাই]:</p>\n<pre><code>clickMeBtn.click();\n</code></pre>\n<p>এই কোডটা দেওয়ার সাথে সাথে দেখবেন বাটনের উপর একটা ক্লিক ইভেন্ট ঘটেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*zJObeKEgKIcddDtk7gUM9A.png\" alt=\"\" /></p>\n<p>আমাদের বাটনে ক্লিক ইভেন্ট হ্যান্ডেলার যেহেতু লাগানো আছে, তাই ঐটাই রান হয়েছে।</p>\n<p>এরকম আরো ইভেন্ট যেমন <code>focus</code> , <code>blur</code> অথবা ফর্মের <code>submit</code> ইভেন্টও এভাবে ঘটানো যাবে।</p>\n<p><strong>৫। ইভেন্ট ডেলিগেশন(Delegation):</strong> একটু আগে আমরা ইভেন্ট বাবল-আপ নিয়ে কথা বলেছি। আমরা বাবল-আপ কিভাবে বন্ধ করবো সেটা দেখেছি। আর তাই মানে বাবল-আপ যে খারাপ জিনিস তা কিন্তু নয়। বাবল-আপের সুবিধাটাও আমাদের অনেক কাজে লাগতে পারে। যেমন আমরা একটা প্যারেন্ট ইলিমেন্ট থেকেও একটা চাইল্ড ইলিমেন্ট এর উপর ঘটে যাওয়া ইভেন্ট ধরে সেটাকে হ্যান্ডেল করতে পারি। এখানে সুবিধাটা কি? হ্যা, সুবিধা হচ্ছে একটা প্যারেন্ট ইলিমেন্ট এর অনেকগুলো চাইল্ড ইলিমেন্ট থাকতে পারে। এখন সবার জন্যে আলাদা আলাদা করে ইভেন্ট হ্যান্ডেল করা আসলে একটু ঝামেলার কাজই। সেক্ষেত্রে আমরা তাদের প্যারেন্ট এ ইভেন্টটা হ্যান্ডেল করতে পারি, যেহেতু দিন শেষে সেই চাইল্ড ইলিমেন্ট এর উপরে ঘটে যাওয়া ইভেন্ট বাবল-আপ করে প্যারেন্ট ইলিমেন্টেই আসবে।</p>\n<p>তাছাড়া এমনও হতে পারে, আমাদের একটা ইলিমেন্ট ডমে নাই। আমরা কোনোভাবে পরে অ্যাড করবো। এখন ঐরকম একটা ইলিমেন্ট এর উপর কিভাবে ইভেন্ট নিয়ে কাজ করবো? হ্যা, সেখানেও আমরা প্যারেন্ট ইলিমেন্ট এর উপর ইভেন্ট হ্যান্ডেলিং এর কাজটা করতে পারবো। আর তাই কোনো ইলিমেন্ট না থাকলেও, পরে তৈরী করা হলেও সেটার উপর ঘটে যাওয়া ইভেন্ট যেই বাবল-আপ করে প্যারেন্টে আসবে, আমাদের হ্যান্ডেলার কাজ করতে পারবে।</p>\n<p>যেমন আমাদের বক্স ৪ তে তিনটা লিস্ট আইটেম আছে। এখন সবার জন্যে পৃথক পৃথক করে ইভেন্ট না লাগিয়ে একেবারে লিস্ট তিনটার প্যারেন্ট বা একদম বক্স থেকেই এদের উপরের ঘটে যাওয়া ইভেন্ট অনুযায়ী অ্যাকশন নিতে পারবো। আর তাই প্রথমেই বক্স ৪ সিলেক্ট করে নিইঃ</p>\n<pre><code>var box4 = document.getElementById('box4');\n</code></pre>\n<p>এখন লিস্ট আইটেমগুলোয় ক্লিক করলে সেই ক্লিক ইভেন্ট বাবল-আপ করে প্যারেন্ট বক্স ৪ তে আসবে এখানে আমরা টার্গেট যাচাই করে অ্যাকশন নিবোঃ</p>\n<pre><code>box4.addEventListener('click', function(event) {\n   if(event.target.tagName === 'LI') {\n      console.log('Clicked on a List Item');\n   }\n});\n</code></pre>\n<p>একটা জিনিস এখানে খেয়াল করবেন, আমরা লিস্ট আইটেমগুলো ডিটেক্ট করেছি <code>tagName</code> দিয়ে, আপনি চাইলে আপনার মতো আরো অন্যকিছু(ক্লাস, অ্যাট্রিবিউট) দিয়েও ডিটেক্ট করতে পারবেন। আর ট্যাগ নেইমটাও বড় হাতের হবে এখানে। এখন যেকোনো একটা লিস্ট আইটেমে ক্লিক করলেই দেখবেন হ্যান্ডেলার রান করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*G0fQg7t-fl0VEG5DVtiMOw.png\" alt=\"\" /></p>\n<p>এভাবে বাবল-আপ হওয়া ইভেন্টকে ক্যাপচার করে হ্যান্ডেল করার প্যাটার্নটাকেই মূলত ইভেন্ট ডেলিগেশন বলা হয়।</p>\n<p><strong>৬। ফর্ম ইভেন্টঃ</strong> কিছু ইভেন্ট আছে যেগুলো ফর্মে বেশ কাজে লাগে। আর তাই আলাদা করে সেগুলো এখানে আলোচনা করবো। ফর্মের ইনপুট ফিল্ডে ডাটা চেঞ্জ থেকে শুরু করে ফর্ম সাবমিট করার ইভেন্ট আমরা বিভিন্নভাবে হ্যান্ডেল করতে পারি। আমাদের ডকুমেন্ট এ একটা ফর্ম আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*CYJgiMmtE2RUVbxx4jKtsA.png\" alt=\"\" /></p>\n<p>আমরা এটাতেই বিভিন্নভাবে ইভেন্টগুলো কিভাবে কাজ করে দেখবো। সেজন্যে আমরা প্রথমে ইনপুট ফিল্ডগুলো সিলেক্ট করে নিবোঃ</p>\n<pre><code>const inputs = document.querySelectorAll('input');\n</code></pre>\n<p>এখানে <code>inputs</code> হচ্ছে নোডলিস্ট, আর এখানে দুইটা ইনপুট ফিল্ড থাকায় নোডলিস্টে ইন্ডেক্স ০ আর ১ এ ক্রমানুসারে আমাদের ইনপুট ইলিমেন্টগুলো সিলেক্ট হয়েছে। আমরা এখন ইনডেক্স নাম্বারের সাহায্যে ইলিমেন্টগুলো একটা একটা করে সিলেক্ট করতে পারবো।</p>\n<p>আমরা আমাদের সাবমিট বাটনটাও সিলেক্ট করে রাখবো এভাবেঃ</p>\n<pre><code>const submitBtn = document.querySelector('button[type=submit]');\n</code></pre>\n<p>— <strong>ইনপুট ফিল্ড চেঞ্জ ইভেন্টঃ</strong> ইনপুট ফিল্ডে কোনোরকম চেঞ্জ হলে সেখানে আমরা চেঞ্জ ইভেন্টের উপর ভিত্তি করে হ্যান্ডেলার লাগাতে পারবো। ধরি আমরা আমাদের প্রথম ইনপুট ফিল্ডে কোনোরকম চেঞ্জ হলে কিছু একটা করতে চাইঃ</p>\n<pre><code>inputs[0].addEventListener('change', function() {\n   console.log('Change Event on Input');\n});\n</code></pre>\n<p>এখন আমাদের প্রথম ইনপুট ফিল্ডে কিছু লিখে অন্যকোথাও ক্লিক করলেই এই চেঞ্জ ইভেন্ট ঘটবে, আর সেই সাথে আমাদের কাঙ্ক্ষিত ফলাফলও কন্সোলে দেখতে পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*GqOuTRD-LilqXsEqmTj7fg.png\" alt=\"\" /></p>\n<p>যদিও এখানে জাস্ট একটা কিছু রান করে দেখলাম, কিন্তু এই ইভেন্ট অনেক কাজের হতে পারে। আমরা চাইলে এখান থেকে ইনপুট ফিল্ডের ভ্যালুটাও নিতে পারবো। সেক্ষেত্রে কেউ আমাদের ওয়েব অ্যাপ্লিকেশনে ফর্ম এ কাজ করলে আমরা রিয়েল টাইম ডাটা আপডেট করতে পারবো। আগের ইনপুট ফিল্ডের চেঞ্জ ইভেন্টটা একটু মডিফাই করে দিবোঃ</p>\n<pre><code>inputs[0].addEventListener('change', function(event) {\n   console.log(event.target.value);\n});\n</code></pre>\n<p>এখানে আমরা <code>event</code> প্যারামিটারের সাহায্যে টার্গেটেড ইলিমেন্ট এর ভ্যালু বা এখানে ইনপুট ফিল্ডের ভ্যালুটা বের করে এনে সেটা কন্সোলে লগ করেছি। যেমন আমরা যদি আমাদের ফিল্ডে এরকম কিছু লিখিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*gTPPK5WXbf81c1rlI10xUw.png\" alt=\"\" /></p>\n<p>ব্যাস, এখন যদি অন্যকোথাও ক্লিক করি তাহলে চেঞ্জ ইভেন্ট ঘটবে আর আমাদের কাঙ্ক্ষিত ফলাফল কন্সোলে দেখতে পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*z3GQd0f8igtkZxfWGMNUAw.png\" alt=\"\" /></p>\n<p>— <strong>ফর্ম সাবমিট ইভেন্টঃ</strong> ফর্ম সাবমিটে সাধারণত ব্রাউজারের বাই ডিফল্ট আচরণ থাকে। যেমন কোথায় ফর্মটা সাবিমিট করা হবে, রিকোয়েস্ট টাইপ কি হবে ইত্যাদি ইত্যাদি। যেমন আমাদের ফর্মটায় সাবমিট বাটনে ক্লিক করলে দেখবেন ব্রাউজার আবার লোড হয়েছে, এটা ব্রাউজারের বাই ডিফল্ট আচরণ। আমাদের ফর্মে যেহেতু কিছু(action, method) উল্লেখ নাই, তাই বাই ডিফল্ট এটা বর্তমান পেজেই ফর্মটা সাবমিট করবে এবং একইসাথে GET টাইপের রিকোয়েস্ট ব্যবহার করবে। আর সেজন্যেই আমাদের পেজ রিলোড হতে দেখা যায়। এখন জাভাস্ক্রিপ্ট ব্যবহার করে আমরা ফর্ম ভ্যালিডেশন করতে চাইতে পারি অথবা ফর্মের ডাটাগুলো অ্যাজাক্স রিকোয়েস্টের সাহায্যে আমাদের কাঙ্ক্ষিত জায়গায় পাঠাতে পারি। সেক্ষেত্রে ব্রাউজারের বাই ডিফল্ট আচরণ আমাদের রেগুলার কাজের জন্যে বাঁধা হয়ে দাড়াতে পারে। আমরা খুব সহজেই একটু আগে দেখানো উপায়ে সে বাই ডিফল্ট আচরণ আটকাতে পারিঃ</p>\n<pre><code>submitBtn.addEventListener('click', function(event) {\n   event.preventDefault();\n});\n</code></pre>\n<p>এটা লিখে সেইভ করে ব্রাউজার রিলোড করে এখন সাবমিট বাটনে ক্লিক করলে দেখবেন আর বাই ডিফল্ট আচরণ হচ্ছে না। এখন আমরা ফর্ম ভ্যালিডেশন বা অ্যাজাক্স রিকোয়েস্ট টাইপের যেকোনোকিছু করতে পারবো ফর্মের উপর।</p>\n<p>যেমন আমি যদি চাই, ইউজার কোনো ফর্মের ইনপুট ফিল্ড খালি রেখেই ফর্ম সাবমিট করতে চায়, তাহলে একটা অ্যালার্ট দেখাবো। তাহলে সাবিমিট বাটনের ক্লিক ইভেন্টটাতেই কিছু কোড অ্যাড করতে হবেঃ</p>\n<pre><code>submitBtn.addEventListener('click', function(event) {\n   event.preventDefault();\n   if(inputs[0].value === '' || inputs[1].value === '') {\n      alert('Input Field cannot be Empty!');\n   }\n});\n</code></pre>\n<p>এখন যদি আমরা ফর্মের কোনো একটা ইনপুট ফিল্ড খালি রেখে ফর্মটা সাবমিট করতে চাই তাহলে অ্যালার্ট পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*z_lLEYY8hxgBQew5TeALNQ.png\" alt=\"\" /></p>\n<p>এখন যদি ইনপুট ফিল্ডগুলো দুইটাই ফীল করে বাটনে সাবমিট করি তাহলে আর অ্যালার্ট বক্স আসবে না। এখন আমরা যদি আরো মজার কিছু করতে চাই, যেমন ফীল্ড দুইটাই ফীল থাকলে আমরা ভিতরের ডাটাগুলো দেখাতে চাই। তাহলে সেই সাবমিটের ক্লিক ইভেন্টেই আবার আরো কিছু কোড অ্যাড করতে হবেঃ</p>\n<pre><code>submitBtn.addEventListener('click', function(event) {\n   event.preventDefault();\n   if(inputs[0].value === '' || inputs[1].value === '') {\n      alert('Input Field cannot be Empty!');\n   } else {\n      var input0Data = inputs[0].value;\n      var input1Data = inputs[1].value;\n      console.log('Your Name:', input0Data, 'And Your Email:', input1Data);\n   }\n});\n</code></pre>\n<p>এখন ইনপুট ফীল্ড দুইটাই ফীল করে যদি সাবমিট করি তাহলে আমরা আমাদের ফীল্ডের ডাটাগুলোই দেখতে পাবো কন্সোলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*e1qPt6tSiblm2NxLK2jJzg.png\" alt=\"\" /></p>\n<p>সাবমিট বাটনে ক্লিক করলে কন্সোলে আউটপুট পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ug9zTkUfcFesr7OnYp1ohw.png\" alt=\"\" /></p>\n<p>আর কোনো একটা ইনপুট ফীল্ডও যদি খালি থাকে, তাহলে অ্যালার্ট বক্স আসবে।</p>\n<p><strong>৭। কী-বোর্ড ইভেন্টঃ</strong> কী-বোর্ডের কী চাপলেও কোনো ইভেন্ট ঘটতে পারে, আর সেগুলোও আমরা আগেরমতো করেই হ্যান্ডেল করতে পারবো। এখানে তেমন বিশেষ কিছু নাই। তারপরেও কী-বোর্ডের ইভেন্ট নিয়ে একটু গভীরভাবে আলোচনা করার মতো কিছু ব্যাপার আছে। যেমন আমরা একটা কী তে চাপলে তিনরকমের ইভেন্ট ঘটতে পারে। প্রথমত একটা কী চাপলাম, এখনো কী টা ছাড়ি নাই, সিস্টেম কোনো কী স্ট্রোক রেজিস্টার করে নাই, এইসময়ে একটা ইভেন্ট হতে পারে। তারপর কী চেপে রাখা অবস্থাতেই সিস্টেম কী স্ট্রোক রেজিস্টার করেছে, ঐসময়ে একটা ইভেন্ট হতে পারে। আর একদম শেষে কী চেপে ছেড়ে দিলে তখন আরেকটা ইভেন্ট হতে পারে। এগুলোর উপর ভিত্তি করেই কী-বোর্ডের তিনরকমের ইভেন্ট ঘটতে পারেঃ</p>\n<ul>\n<li><p><code>keydown</code>: প্রথম যে পরিস্থিতির কথা বললাম, কী চাপা হয়েছে কিন্তু সিস্টেম এখনো রেজিস্টার করে নাই। এটা হ্যান্ডেল করার জন্যে <code>keydown</code> ইউজ করা হয়। এখন কী-বোর্ড ইভেন্টগুলো আমরা আমাদের <code>document</code> এর উপর অ্যাপ্লাই করতে হবে যেহেতু এটা পুরো ডকুমেন্ট এর উপরেই থাকবে। বাকী সব আগের মতোইঃ</p>\n<p>document.addEventListener('keydown', function() {\n   console.log('Key Down Event');\n});</p></li>\n</ul>\n<p>এখন স্ক্রিপ্ট সেইভ করে ব্রাউজার রিলোড করে আমাদের ডকুমেন্ট সিলেক্ট থাকা অবস্থায় কী-বোর্ডের কোনো কী তে চাপ দিলেই দেখবেন কাঙ্ক্ষিত ফাংশন রান করেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*GeS7DWGci19lE49EtNyd0A.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>keypress</code>: এই ইভেন্ট ঠিক সিস্টেমে কী-স্ট্রোক রেজিস্টার করা হওয়া মাত্রই ঘটে। বাকী সব আগের মতোইঃ</p>\n<p>document.addEventListener('keypress', function() {\nconsole.log('Key Press Event');\n});</p></li>\n</ul>\n<p>স্ক্রিপ্ট সেইভ করে ব্রাউজার রিলোড দিয়ে আমাদের ডকুমেন্ট এ কোনো কী চাপা মাত্রই দেখবেন এটা রান করেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*iGUGD52wrUrN-zDLMf1k2A.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>keyup</code>: কী চাপ দিয়ে ছেড়ে দিলে এই ইভেন্ট ঘটেঃ</p>\n<p>document.addEventListener('keyup', function() {\nconsole.log('Key Up Event');\n});</p></li>\n</ul>\n<p>স্ক্রিপ্ট সেইভ করে ব্রাউজার রিলোড দিয়ে কোনো কী চেপে ছেড়ে দেওয়া মাত্রই এই ইভেন্ট রান করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ODVle7tBzL0D9C9jBSQn9Q.png\" alt=\"\" /></p>\n<p>এদের একটার পর আরেকটার ফলাফল দেখলেই বুঝা যায় কে কখন রান করেছে।</p>\n<p>এখন আমরা এখানেও মজার কিছু করতে পারি। যেমন আমরা যদি চাই ঠিক কোন কী-টা চাপা হয়েছে তাহলে সেটাও আমাদের সেই <code>event</code> প্যারামিটারের সাহায্যে অ্যাক্সেস করে শো করাতে পারিঃ</p>\n<pre><code>document.addEventListener('keydown', function(event) {\n   console.log('Key Down Event');\n   console.log('Pressed Key: ' + event.key);\n});\n</code></pre>\n<p>এখন স্ক্রিপ্ট সেইভ করে ব্রাউজার রিলোড দিয়ে ডকুমেন্ট এ যে কী চাপবেন সেটাই কন্সোলে দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*bVm4lJdjw5Pfcp8D7DB-_Q.png\" alt=\"\" /></p>\n<p>সেইমভাবে বাকী দুইটার ক্ষেত্রেও কাজ করবে। এভাবে কী ডিটেক্ট করে পরে আরো মজার মজার অনেক কাজ করতে পারবেন খুব সহজেই।</p>\n<p>এখানে আমরা হ্যান্ডেলারে প্যারামিটার হিসেবে <code>event</code> ব্যবহার করছি, কিন্তু আমরা চাইলে সেটা খুলেও দেখতে পারি যে এভাবে আমরা কি কি অ্যাক্সেস করতে পারবো সেটা দেখার জন্যে। সেজন্যে কাঙ্ক্ষিত ইলিমেন্ট এর ইভেন্ট হ্যান্ডেলারে এভাবে <code>console.dir()</code> ব্যবহার করে সহজেই দেখতে পারবেন আপনি এভাবে কি কি অ্যাক্সেস করতে পারবেনঃ</p>\n<pre><code>document.addEventListener('keydown', function(event) {\n   console.log('Key Down Event');\n   console.log('Pressed Key: ' + event.key);\n   console.dir(event);\n});\n</code></pre>\n<p>এখন স্ক্রিপ্ট সেইভ করে ব্রাউজার রিলোড দিয়ে কোনো কী চাপলেই আপনি <code>event</code> অবজেক্ট দেখতে পারবেন কন্সোল থেকেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*VeVAF5WTsDSbZ3LLfn3Mcw.png\" alt=\"\" /></p>\n<p><strong>৮। মাউস ইভেন্টঃ</strong> ঠিক কী-বোর্ডের মতো মাউসেরও সেইম টাইপের স্পেশাল ইভেন্ট আছে। যেমন আমরা কোনো ইলিমেন্ট এর উপর মাউস বা পয়েন্টার নিলে একটা ইভেন্ট ঘটতে পারে। আবার সেই ইলিমেন্ট থেকে মাউস সরিয়ে ফেললে আরেকটা ইভেন্ট ঘটতে পারে।</p>\n<ul>\n<li><p><code>mouseover</code> : কোনো ইলিমেন্ট এর উপর মাউস বা পয়েন্টার নিলে এই ইভেন্ট ঘটবে। এরকম ইভেন্ট আমরা প্রথমেই একটা দেখেছিলামঃ</p>\n<p>clickMeBtn.onmouseover = function(event) {\n   console.log('Mouse Over');\n}</p></li>\n</ul>\n<p>সেইমটা <code>addEventListener()</code> দিয়েও করা যাবেঃ</p>\n<pre><code>clickMeBtn.addEventListener('mouseover', function() {\n   console.log('On Mouse Over using addEventListener');\n});\n</code></pre>\n<p>ব্যাস, এবার স্ক্রিপ্ট ফাইল সেইভ করে ব্রাউজার রিলোড দিয়ে আমাদের বক্স ১ এর বাটনের উপরে মাউস বা পয়েন্টারটা নিলেই এই ইভেন্ট ঘটবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*RzINUTZqhcCpxwl8tSPNKQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>mouseout</code> : এটাই অনেকটা সেইমই, যখন আমরা ইলিমেন্ট থেকে মাউস বা পয়েন্টার সরিয়ে নিবো, তখনি এই ইভেন্ট ঘটবে। ঠিক আগের বাটনেই আমরা এই ইভেন্ট অ্যাড করবোঃ</p>\n<p>clickMeBtn.addEventListener('mouseout', function() {\n   console.log('On Mouse Out');\n});</p></li>\n</ul>\n<p>এখন স্ক্রিপ্ট সেইভ করে ব্রাউজার রিলোড দিয়ে আমাদের কাঙ্ক্ষিত বাটনের উপর মাউস নেওয়া মাত্র আগের ইভেন্ট রান করবে, আবার সরিয়ে নিলে এটা রান করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*5gJTrxcVfgxzuch-BCRylA.png\" alt=\"\" /></p>\n<p><strong>৯। ব্রাউজার ইভেন্টঃ</strong> আরো কিছু ইভেন্ট আছে যেগুলোকে আমি ব্রাউজারের ইভেন্টই বলবো। যেমন আমাদের পেজ পুরোপুরি লোড হওয়া শেষ হওয়ার পর একটা ইভেন্ট, আবার পেজে মার্কাপ লোড হওয়ার পর একটা ইভেন্ট অথবা একটা ইলিমেন্ট লোড শেষ হওয়ার পর আরেকটা ইভেন্ট, লোড ফেইল হলে সেটার আবার একটা ইভেন্ট। আমরা এ ধরনের ইভেন্টগুলোও সহজেই হ্যান্ডেল করতে পারবো।</p>\n<p>— <strong>পুরোপুরি লোড হওয়ার পর ইভেন্টঃ</strong> আমরা হয়তো এরকম চাইতে পারি যে আমাদের পেজের কন্টেন্টগুলো পুরোপুরী লোড হলে পরেই ইউজারকে দেখানো হবে, আর লোডের সময় একটা লোডার দেখাবো। এরকম পরিস্থিতিতে এই <code>load</code> ইভেন্টটা বেশ কাজের। আমাদের ডকুমেন্ট সবকিছু লোড হলে পরেই এই ইভেন্ট ঘটবে। আর আমরা এই ইভেন্টটা <code>window</code> এর উপর অ্যাপ্লাই করবোঃ</p>\n<pre><code>window.addEventListener('load', function() {\n    console.log('Your Page Fully Loaded!');\n});\n</code></pre>\n<p>এটা স্ক্রিপ্ট ফাইলে লিখে সেইভ দিয়ে ব্রাউজার রিলোড করলেই দেখবেন এটা রান করছে, যেহেতু আমাদের পেজ লোড হয়ে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*2LUZBOdewW8SWAk524MmvQ.png\" alt=\"\" /></p>\n<p>— <strong>শুধুমাত্র মার্কাপ লোড হওয়ার পরের ইভেন্টঃ</strong> অনেকসময় হয়তো আমাদের শুধুমাত্র মার্কাপ লোড হওয়ার পরপরই কোনো অ্যাকশন নিতে হতে পারে। একটু আগে দেখানো <code>load</code> সাধারণত আমাদের পেজে থাকা মার্কাপ, স্টাইলশীট, স্ক্রিপ্টসহ আরো বাকী সব জিনিস লোড হওয়ার পরে ঘটে, যেখানে এই <code>DOMContentLoaded</code> টা সাধারণত মার্কাপ(এইচটিএমএল) লোড হওয়ার পরপরই ঘটবে। আমরা আমাদের স্ক্রিপ্ট ফাইলে সাধারণত আমাদের ডকুমেন্ট এর কিছু ইলিমেন্ট সিলেক্ট করেই সেগুলোর উপর কাজ করি। এখন যদি কোনো কারণে মার্কাপ লোড হওয়ার আগেই আমাদের সেই স্ক্রিপ্ট রান হয়ে যায়, তাহলে কিন্তু আমাদের ইলিমেন্টগুলো পাবে না। সেক্ষেত্রে সমস্যা বা এরর আসতে পারে। তো এরকম পরিস্থিতিতে এই <code>DOMContentLoaded</code>ইভেন্ট বেশ কাজে লাগতে পারে। এটা যেহেতু আমাদের ডকুমেন্ট এর ব্যাপার, তাই ইভেন্টটা <code>document</code> এর উপর অ্যাপ্লাই করবোঃ</p>\n<pre><code>document.addEventListener('DOMContentLoaded', function() {\n    console.log('Your Markup is Ready!');\n});\n</code></pre>\n<p>স্ক্রিপ্ট লিখে সেইভ করে ব্রাউজার রিলোড দিলে দেখতে পাবেন আগে এটা রান করেছে, আর পরে <code>load</code> এরটা রান করেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*alUS3UZK_8KFft_i-420Xg.png\" alt=\"\" /></p>\n<p>— <strong>নির্দিষ্ট কোনো ইলিমেন্ট লোড হওয়ার পরের ইভেন্টঃ</strong> আমাদের বক্স ২ এ দুইটা ইমেজ আছে। তারমধ্যে একটার ভ্যালিড সোর্স আছে, আর সেটা শো করছে। আর দ্বিতীয়টায় ইন-ভ্যালিড সোর্স হওয়ায় ভেঙ্গে গেছে। আমরা কন্সোলে হয়তো এতক্ষন এরকম একটা এররও দেখেছি। আমি আমার স্ক্রিনশটে এটা এতোক্ষন অ্যাভয়েড করে গেছি দেখতে খারাপ দেখা যায় বলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*-GwkvfymZ00ea24MLurxdw.png\" alt=\"\" /></p>\n<p>এখন এই ইলিমেন্টগুলোর লোড হওয়া না হওয়ার উপরও দুইরকম ইভেন্ট হতে পারে। আর সেগুলোও আমরা সেইমভাবেই হ্যান্ডেল করতে পারবো। আর তাই প্রথমেই আমরা ইমেজ দুইটা আলাদা আলাদা করে সিলেক্ট করে নেই। প্রথম ইমেজঃ</p>\n<pre><code>var img1 = document.querySelector('img[alt=valid-img]');\n</code></pre>\n<p>দ্বিতীয় ইমেজঃ</p>\n<pre><code>var img2 = document.querySelector('img[alt=invalid-img]');\n</code></pre>\n<ul>\n<li><p><strong>ইলিমেন্ট লোড হওয়ার পরঃ</strong> আমরা আমাদের উপরের <code>img1</code> সফলভাবে লোড হওয়ার পর কোনো অ্যাকশন নিতে চাইলেঃ</p>\n<p>img1.addEventListener('load', function() {\n    console.log('Image 1 Has Successfully Loaded!');\n});</p></li>\n</ul>\n<p>এখানে ইভেন্ট গুলোর একটা সিকোয়েন্সও দেখতে পাবেন, সেই সাথে আমাদের ইমেজ লোড হওয়ার পরের অ্যাকশনও পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*QVda6bIQZxgZbAh4EuF3uQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>ইলিমেন্ট লোড না হতে পারলেঃ</strong> আমাদের দ্বিতীয় ইমেজে ভুল সোর্স দেওয়াতে ইমেজটা লোড হয়নি। এখন এরকম পরিস্থিতিতেও আরেকটা এরর টাইপের ইভেন্ট ঘটতে পারে, আর আমরা সেটার উপরও অ্যাকশন নিতে পারবোঃ</p>\n<p>img2.addEventListener('error', function() {\n    console.log('Image Cannot be loaded!');\n});</p></li>\n</ul>\n<p>এখন স্ক্রিপ্ট সেইভ করে ব্রাউজার লোড দিলে অ্যাকশনটা দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*6-8TCZmbk-t7PDiUs4Wbmw.png\" alt=\"\" /></p>\n<h4 id=\"\">পুরোনো ব্রাউজারের সমস্যা</h4>\n<p>আপনার ওয়েব অ্যাপ্লিকেশনের যদি ইন্টারনেট এক্সপ্লোরার ৮, ৭ অথবা এমন পুরোনো কোনো ব্রাউজারের সাপোর্টও লাগে, তাহলে একটু আলাদাকরেই সবকিছু ভাবতে হবে। কারণ ঐ ভার্শনের ব্রাউজারে অনেককিছুই সাপোর্ট করে না। তারমধ্যে আমাদের এখানে ব্যবহার করা <code>addEventListener()</code> ও অন্যতম। তাই এটা একটু পরিবর্তন করে দিতে হবে আপনাকে যদি ঐরকম পুরোনো ব্রাউজারের জন্যে সাপোর্ট অ্যাড করাই লাগেঃ</p>\n<pre><code>yourElement.attachEvent('onclick', function() {\n    // যা করতে চাচ্ছেন এখানে যাবে\n});\n</code></pre>\n<p>প্রধান যে যে পার্থক্যগুলো আমরা এখানে পাবোঃ</p>\n<ol>\n<li>আমাদের <code>attachEvent</code> ব্যবহার করতে হবে<code>addEventListener</code> এর পরবর্তিতে।</li>\n<li>বেশীরভাগ ক্ষেত্রেও ইভেন্ট এর নামগুলো <code>on</code> প্রি-ফিক্স দিয়ে শুরু হবে।</li>\n</ol>\n<p>এছাড়াও আরো অনেককিছুতেই একটু পরিবর্তন আনা লাগবে, আশা করি এখানে আমরা ডমের সাথে কিভাবে কাজ করছি সেগুলো বুঝতে পারলেই বাকীগুলোও নিজে নিজে করে ফেলতে পারবেন। যেমন এই ওয়েবসাইট[<a href=\"https://caniuse.com\" title=\"https://caniuse.com\">https://caniuse.com</a>] থেকে দেখতে পারবেন আপনি কোন মেথড কোন কোন ব্রাউজারের জন্যে ব্যবহার করতে পারবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","javascript-dom","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-ডম","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-10-08T16:36:26.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)","thumb_img_path":"/images/1_eZLEkd3SlKGcIQu3jWcLkQ.jpeg","content":"<p>ধরুন আমি ফেসবুক চালাচ্ছি, এখন একটা পোস্ট দেখে আমার ভালো লাগলো। এখন আমি এটাতে রিঅ্যাকশন দিতে চাচ্ছি। রিঅ্যাকশন বাটনে ক্লিক করার পর পুরো ফেসবুক আবার রিলোড হলো। কারণ আমি যে পোস্টে রিঅ্যাকশন দিয়েছি সে ডাটাকে ফেসবুকের সার্ভারে পাঠাতে হবে, আর তাই ব্রাউজার সে কাজ করতে গিয়ে পুরোপুরি রিলোড হলো। এখন প্রত্যেকবার যদি এমন রিঅ্যাকশন দিতে গিয়ে বারবার ফেসবুক পুরোপুরি রিলোড হয়, তাহলে ব্যাপারটা কেমন হলো? একে তো বারবার রিলোড হওয়ার কারণে ডাটাও বেশী খরচ হবে। একই সাথে ব্যাপারটা বিরক্তিকরও। আর এই সমস্যা সমাধানের জন্যেই এই অ্যাজাক্স টেকনিক এসেছে।</p>\n<p>AJAX মানে হচ্ছে <strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML। অন্য কোনো ওয়েব সার্ভার অ্যাক্সেস করার জন্যে এটা একটা বিশেষ টেকনিক। অ্যাজাক্স এর এই টেকনিক মূলত কিছু জিনিসের সাহায্যে করা হয়ঃ</p>\n<p>১। ব্রাউজারের স্পেশাল অবজেক্ট বা অ্যাপিআই, যেগুলোর সাহায্যে আমরা অন্য কোনো ওয়েব সার্ভারে রিকোয়েস্ট পাঠাতে পারি।</p>\n<p>২। আর জাভাস্ক্রিপ্ট দিয়ে এইচটিএমএল ডমের সাহায্যে সেটার ফলাফল আমাদের ওয়েবপেজে দেখাতে পারি।</p>\n<p>এখন বুঝলাম অ্যাজাক্স এর সাহায্যে এই কাজ করা যায়। কিন্তু এর সুবিধাটা কি? হ্যাঁ অ্যাজাক্সের কারণে আমরাঃ</p>\n<ul>\n<li>অন্য সার্ভারের রিকোয়েস্ট পাঠিয়ে ডাটা আনতে পারি।</li>\n<li>একইভাবে চাইলে আমরা আমাদের ডাটাও অন্য কোনো সার্ভারে পাঠাতে পারি</li>\n<li>পুরো ব্যাপারটা অ্যাসিনক্রোনাসভাবে হয়, আমাদের ওয়েবপেজ রিলোড করা লাগে না।</li>\n</ul>\n<p>আর এজন্যেই এখন আমরা ফেসবুকে রিঅ্যাকশন দিলেও সেই ডাটা ব্যাকগ্রাউন্ডেই ফেসবুক সার্ভারে চলে যায়, আবার আমাদের এখানেও সেটা আপডেট হয়। কোনোরকম রিলোড হওয়া ছাড়াই সব কাজ ব্যাকগ্রাউন্ডে চলে। এতে আমাদের ইউজার এক্সপেরিয়েন্সও যেমন ভালো হয়, তেমনি ডাটাও খরচ কম হয়। আর সবচেয়ে বড় কথা পুরো ব্যাপারটাই বাস্তব মনে হয়।</p>\n<p>এখন এই টেকনিকের জন্যে আমাদের আরো ছোটো ছোটো কিছু ব্যাপারও জানতে হবে। আজকে আমরা সেই টেকনিকগুলোই দেখবো এবং একই সাথে এই অ্যাজাক্সের সাহায্যে আমাদের পেজে অন্য কোনো ওয়েব সার্ভারে রিকোয়েস্ট পাঠিয়ে ডাটা এনে এইচটিএমএল ডমের সাহায্যে শো করাবো।</p>\n<p>আমরা আজকে এই লেখায় প্র্যাক্টিসের জন্যে একটা প্রোজেক্ট ব্যবহার করবো। এটা <a href=\"https://github.com/practicalJavaScript/javascript-dom/archive/ajax.zip\">এখান থেকে</a> ডাউনলোড করে আনজিপ করে নিবেন। তারপর আপনার পছন্দের কোড এডিটরে প্রোজেক্টটা ওপেন করে <code>index.html</code> ফাইলটা ক্রোমে ওপেন করুন। একই সাথে ক্রোমের ডেভেলপার কন্সোলটাও ওপেন করে রাখবেন। আমরা আমাদের প্রোজেক্টের <code>script.js</code> ফাইলের ভিতরে সব কোড লিখবো। আর কোড লিখে সেটার পরিবর্তন দেখতে হলে অবশ্যই <code>script.js</code> ফাইলটা সেইভ করে ব্রাউজারে ওপেন করে রাখা ডকুমেন্টটা রিলোড করতে হবে।</p>\n<p><strong>অ্যাজাক্স রিকোয়েস্ট তৈরীঃ</strong> শুরু করার আগে প্রথমেই আমরা কিভাবে অ্যাজাক্স রিকোয়েস্ট তৈরী করবো সেটা দেখে নিবো। একটু আগেই বলেছিলাম ব্রাউজারের স্পেশাল অবজেক্ট আর অ্যাপিআই এর কথা যেগুলোর সাহায্যে আমরা অ্যাজাক্স রিকোয়েস্ট করতে পারি। সে স্পেশাল অবজেক্ট হচ্ছে <code>XMLHttpRequest</code> । আমরা আজকে এটা ব্যবহার করেই সবকিছু দেখবো। আর ব্রাউজারে নতুন আরেকটা অ্যাপিআই, <code>fetch</code> অ্যাপিআইও যুক্ত হয়েছে যেটার সাহায্যেই অনেকটা একইরকম কাজ করা যায়(নিত্যদিনের জাভাস্ক্রিপ্ট সিরিজে এই অ্যাপিআই নিয়ে <a href=\"https://js.zonayed.me/daily/612\">আলোচনা করা হয়েছে</a>)। তবে আমরা এখানে বিশেষ সুবিধার কারণে <code>XMLHttpRequest</code> ই ব্যবহার করবো। এখন একটা রিকোয়েস্ট তৈরী করার আগেঃ</p>\n<p>১। <code>XMLHttpRequest</code> এর একটা ইন্সট্যান্স অবজেক্ট তৈরী করা,</p>\n<p>২। রিকোয়েস্ট ওপেন করা,</p>\n<p>৩। রিকোয়েস্ট পাঠানো এবং</p>\n<p>৪। রিকোয়েস্টটা হ্যান্ডেল করা।</p>\n<p>একটা সিম্পল রিকোয়েস্টঃ</p>\n<pre><code>var request = new XMLHttpRequest(); // ইন্সট্যান্স অবজেক্ট তৈরী\nrequest.open('GET', 'url', true); // রিকোয়েস্ট ওপেন করা\nrequest.send(); // রিকোয়েস্ট পাঠানো\n// রিকোয়েস্ট হ্যান্ডেল\nrequest.onreadystatechange = function handleRequest(){\n  console.log(request);\n}\n</code></pre>\n<p>এখানে প্রথম লাইনে আমরা <code>XMLHttpRequest</code> থেকে একটা অবজেক্ট তৈরী করলাম। তারপর দ্বিতীয় লাইনে রিকোয়েস্ট ওপেন করলাম সেই অবজেক্ট এর <code>open()</code> মেথড দিয়ে। এখন এই মেথড কয়েকটা আর্গুমেন্ট নিবে। এগুলো খুবই গুরুত্বপূর্ণ। প্রথম আর্গুমেন্ট টা রিকোয়েস্ট অ্যাকশন টাইপ, রিকোয়েস্ট অ্যাকশন টাইপ <code>GET</code> থেকে শুরু করে আরো কয়েক টাইপের হতে পারে। এই রিকোয়েস্ট অ্যাকশন টাইপও বিভিন্ন অর্থ প্রকাশ করার জন্যে ব্যবহার করা হয়। যেমন এই <code>GET</code> রিকোয়েস্ট সহ আরো কয়েক টাইপের রিকোয়েস্ট আছেঃ</p>\n<ul>\n<li><strong><code>GET</code></strong>: এই টাইপের রিকোয়েস্ট পাঠানো হয় কোনো সার্ভার থেকে ডাটা আনার জন্যে</li>\n<li><strong><code>POST</code></strong>: এই টাইপটা পাঠানো হয় যদি আমরা সার্ভারে কোনো ডাটা ঢুকাতে চাই</li>\n<li><strong><code>UPDATE</code></strong>: এই টাইপ দিয়ে বুঝানো হয় আমরা সার্ভারে কোনো ডাটা আপডেট করতে চাচ্ছি।</li>\n<li><strong><code>DELETE</code></strong>: সার্ভারের কোনো ডাটা ডিলেট করার রিকোয়েস্ট</li>\n</ul>\n<p>এই রিকোয়েস্টগুলো অর্থপূর্ণ রিকোয়েস্ট এর জন্যে ব্যবহার করা হয়। এদের মধ্যে ফাংশানালিটির তেমন কোনো পার্থক্য নাই। তবে আমরা সার্ভারের সাথে কিসের জন্যে রিকোয়েস্ট পাঠাচ্ছি সেটা বুঝার জন্যে এই টাইপগুলো ব্যবহার করা হয়, আর সার্ভারও এই টাইপগুলো বুঝতে পারে।</p>\n<p>তারপর দ্বিতীয় আর্গুমেন্টটা হচ্ছে ইউআরএল, মানে আমরা যে সার্ভারে রিকোয়েস্ট পাঠাতে চাচ্ছি সেটার ঠিকানা। আর সবশেষ আর্গুমেন্টটা হচ্ছে আমরা এই রিকোয়েস্টটা অ্যাসিনক্রোনাস ভাবে করতে চাচ্ছি <code>true</code> নাকি চাচ্ছি না <code>false</code> সেটা বুঝাতে।</p>\n<p>তারপরের লাইনে আমাদের রিকোয়েস্টটা পাঠানো হলো <code>send()</code> দিয়ে। আর একদম শেষে আমরা যদি এই <code>request</code> এর অবস্থার কোনো পরিবর্তন হয় তাহলে একটা ফাংশন রান করতে বলেছি। এই ফাংশনের ভিতরে আমরা <code>request</code> টা লগ করেছি।</p>\n<p>অ্যাজাক্স রিকোয়েস্ট দিয়ে ডাটা আনাঃ আমরা এখন এভাবে রিকোয়েস্ট তৈরী করে কিছু ডাটা আনবো। প্রথমে আমরা <a href=\"https://jsonplaceholder.typicode.com/\">এই ওয়েবসাইটটা</a> ব্যবহার করে এদের সার্ভার থেকে ডাটা আনবো। এই ওয়েবসাইটে গেলে কিছু ডিমো ডাটার জন্যে লিঙ্ক পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*LSzYeFo_Gv4OlorZ6q2f0Q.png\" alt=\"\" /></p>\n<p>এখান থেকে আমরা পোস্ট <strong><code>/posts</code></strong> এর ডাটাগুলো অ্যাজাক্স রিকোয়েস্ট এর সাহায্যে আনবো। <a href=\"https://jsonplaceholder.typicode.com/posts\">এই লিঙ্কে</a> গেলে ডাটাগুলো সরাসরি ব্রাউজারেই দেখতে পাবেন। স্ক্রিপ্ট ফাইলটা ওপেন করে আমরা ডাটাগুলো আনবো এবং আপাতত কন্সোলে লগ করে দেখবোঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n  console.log(request.responseText);\n}\n</code></pre>\n<p>এখানে দেখবেন আমরা <code>request</code> এর কোনোরকম পরিবর্তনে যে ফাংশনটা লাগিয়েছে সেটাতে আমরা <code>request.responseText</code> লগ করেছি, কারণ সার্ভার থেকে আসা ডাটা ঠিক এখানেই পাওয়া যাবে তাই।</p>\n<p>এটা লিখে স্ক্রিপ্ট ফাইল সেইভ করে ব্রাউজার রিলোড দিলে কন্সোলে দেখতে পাবেন ডাটাগুলো চলে আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*dpS1_545MFBPwi0ceLTm3w.png\" alt=\"\" /></p>\n<p><strong>জেসন(JSON):</strong> জেসন বা পুরোনাম জাভাস্ক্রিপ্ট অবজেক্ট নোটেশন(JavaScript Object Notation) হচ্ছে সিম্পলি স্ট্রিং। কিন্তু স্ট্রিং এমনভাবে সাজানো যেটা জাভাস্ক্রিপ্ট এর অবজেক্ট এর মতো দেখা যায়, কিন্তু ঠিক জাভাস্ক্রিপ্ট এর অবজেক্ট না। আমরা যদি এটার টাইপ দেখতে চাই তাহলে আমরা <code>typeof</code> দিয়ে আমাদের অন্য সার্ভার থেকে আনা ডাটাগুলোর টাইপ দেখতে পারি, জাস্ট স্ক্রিপ্ট ফাইএল <code>typeof</code> কিওয়ার্ডটা লাগিয়ে দিন ডাটা কন্সোল লগ করার সময়ঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n  console.log(typeof request.responseText);\n}\n</code></pre>\n<p>এবার স্ক্রিপ্ট ফাইলটা সেইভ করে ব্রাউজার রিলোড দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*XeaKnttRY5ESXJ5ue3Xi-g.png\" alt=\"\" /></p>\n<p>এটা স্ট্রিং কিন্তু জাভাস্ক্রিপ্ট এর বিল্ট-ইন কিছু ফাংশন আছে এই স্ট্রিংকে অবজেক্ট এ নেওয়ার জন্যে। অবজেক্ট এ নিলে আমরা একটা সুন্দর স্ট্রাকচার পাবো যেটা থেকে পরে বিভিন্নভাবে ডাটা বের করে এনে আমরা আমাদের পেজে দেখাতে পারবো। এরকম জেসন স্ট্রিং ডাটাকে অবজেক্ট এ নিতে চাইলে <strong><code>JSON.parse()</code></strong> ব্যবহার করা হয়। এখন আমরা আমাদের উপরের কোডটা একটু মডিফাই করে একেবারে অবজেক্টই কন্সোলে লগ করতে চাইঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n  console.log(JSON.parse(request.responseText));\n}\n</code></pre>\n<p>এটা সেইভ করে ব্রাউজার রিলোড দিলে এরকম অবজেক্ট আকারে ডাটাগুলো পাবেন যেখানে ১০০টার মতো অ্যারে আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*nOoTp24IucB79gznoMS-8g.png\" alt=\"\" /></p>\n<p><strong>রিকোয়েস্ট এর স্টেটঃ</strong> তবে আগে পরে একটু আশ্চর্যের কিছু জিনিস দেখতে পাবেন। সেগুলো হচ্ছে একদম প্রথম লাইনে একটা এরর। পরে ডাটাগুলো দুইবার লগ হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*k9F3ufAbeadomuNJ0VQ7Zg.png\" alt=\"\" /></p>\n<p>এটার কারণ কি? হ্যাঁ, কারণ জানতে হলে আমাদের আরেকটু গভীরে যেতে হবে। আমরা যে অ্যাজাক্স রিকোয়েস্ট করলাম সেটার কয়েকটা স্টেট আছে। আমরা <code>request.onreadystatechange</code> ব্যবহার করেছি যাতে <code>request</code> এ কোনো পরিবর্তন হলেই ফাংশনটা রান করে। এখন এই স্টেটেরও কয়েকটা লেভেল আছে যেগুলো <code>request</code> এর ভিতরে <code>readyState</code> নামে পাওয়া যায়ঃ</p>\n<pre><code>var request = new XMLHttpRequest();\nconsole.log(request.readyState);\nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true);\nconsole.log(request.readyState);\nrequest.send();\n\nrequest.onreadystatechange = function handleRequest(){\n   console.log(request.readyState);\n}\n</code></pre>\n<p>আমরা কয়েকটা জায়গায় এই <code>readyState</code> এর অবস্থা দেখবো, এটা কিভাবে পরিবর্তন হয় সেটা দেখবো। এটা সেইভ করে ব্রাউজার রিলোড দিলে এরকম আউপুট পাবেন কন্সোলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*mqPbq6dzEyeKU9XCUBXfTw.png\" alt=\"\" /></p>\n<p>এখানে <code>readyState</code> নাম্বার দিয়ে প্রকাশ করা হলেও এই নাম্বারগুলোর বিভিন্নরকমের মিনিং আছেঃ</p>\n<p><strong><code>0</code></strong> — মানে রিকোয়েস্ট এখনো আরম্ভ করা হয়নি</p>\n<p><strong><code>1</code></strong> — সার্ভারের সাথে কানেকশন তৈরী করা হয়েছে</p>\n<p><strong><code>2</code></strong> — রিকোয়েস্ট পাঠানো হয়েছে</p>\n<p><strong><code>3</code></strong> — রিকোয়েস্ট প্রসেস করা হয়েছে</p>\n<p><strong><code>4</code></strong> — রিকোয়েস্ট সফলভাবে শেষ হয়েছে, রেসপন্স তৈরী</p>\n<p>এখান আমাদের ডাটাগুলো পাওয়ার সবচেয়ে ভালো সময় হচ্ছে রিকোয়েস্ট <code>readyState</code> <code>4</code> এ থাকলে। আর আমরা এটা চেক না করেই ডাটা লগ করায় একবার এরর, আর দুইবার একই ডাটা দেখাচ্ছে। তাই আমরা এখন চেক বসিয়ে দিতে পারি ডাটা দেখানোর আগে যাতে এরকম সমস্যা তৈরী না হয়ঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n   if(request.readyState === 4) {\n      console.log(JSON.parse(request.responseText));\n   }\n}\n</code></pre>\n<p>এবার কন্সোলে দেখবেন সুন্দর করেই একবারই ডাটাগুলো দেখাচ্ছে কোনো এরর ছাড়াঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*wokBulJ-nGhSSnP4Wcn-TQ.png\" alt=\"\" /></p>\n<p><strong>রিকোয়েস্ট রেসপন্সঃ</strong> এখন আমরা যদি ভুল কোনো ইউআরএল দিয়ে রিকোয়েস্ট করি তাহলেঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jeiwebsitenai.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n   if(request.readyState === 4) {\n      console.log(JSON.parse(request.responseText));\n   }\n}\n</code></pre>\n<p>এখন কন্সোলে এরকম এরর দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Wy_H4339Z-iDxSpWy53f3Q.png\" alt=\"\" /></p>\n<p>এর কারণ হচ্ছে আমাদের ইউআরএলই ভুল, তাই প্রথম এররটা ইউআরএল পাওয়া যায়নি সেটার উপর। আর দ্বিতীয়টা পাওয়া না যাওয়া ডাটার উপর অপারেশন চালানোর এরর। এটা হ্যান্ডেল করার জন্যেও <code>request</code> অবজেক্ট এর আরেকটা প্রপার্টি আছে <code>status</code> নামে। এটার মূলত আপনার রিকোয়েস্ট এর স্ট্যাটাস কোড স্টোর করে। একটা সফল রিকোয়েস্ট এর স্ট্যাটাস কোড হচ্ছে <code>200</code>,তার মানে আমরা এটাও চেক হিসেবে বসাতে পারি ডাটা দেখানোর আগেঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jeiwebsitenai.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n   if(request.readyState === 4 &amp;&amp; request.status === 200) {\n      console.log(JSON.parse(request.responseText));\n   }\n}\n</code></pre>\n<p>এখন ইউআরএল ভুল হলে বা কোনো কারণে সার্ভারে কোনো সমস্যা হলেও আমাদের আর এরর দেখতে হবে না। এরই সাথে আমরা স্ট্যাটাস কোড ব্যবহার করে ডাটা না পাওয়া গেলে সেটার উপর কন্ডিশন দিয়ে আমাদের ইউজারকে অন্যকোনো ম্যাসেজ শো করাতে পারবো। এরকম কমন কিছু স্ট্যাটাস কোড আছেঃ</p>\n<p>— <code>200</code> : সফল রিকোয়েস্ট</p>\n<p>— <code>403</code> : আপনার পারমিশন নেই</p>\n<p>— <code>404</code> : পাওয়া যায় নি</p>\n<p>এই রিকোয়েস্টগুলোর প্রথম নাম্বারগুলোও একটা প্যাটার্ন মেইন্টেইন করেঃ</p>\n<p>— <code>1xx</code> : ইনফরমেশন</p>\n<p>— <code>2xx</code> : সাক্সেস</p>\n<p>— <code>3xx</code> : রিডাইরেকশন</p>\n<p>— <code>4xx</code> : ক্লাইন্ট এরর</p>\n<p>— <code>5xx</code> : সার্ভার এরর</p>\n<p><strong>পেজে এ ডাটা দেখানোঃ</strong> আমরা এতক্ষন ডাটা উদ্ধার করলাম। এখন সেই ডাটা আমাদের ডকুমেন্ট এ দেখাবো। তার আগে রিকোয়েস্টটাকে কমপ্লিট করে নেইঃ</p>\n<pre><code>var request = new XMLHttpRequest(); \nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \nrequest.send(); \n\nrequest.onreadystatechange = function handleRequest(){\n   if(request.readyState === 4 &amp;&amp; request.status === 200) {\n      console.log(JSON.parse(request.responseText));\n   }\n}\n</code></pre>\n<p>এখন কন্সোলে যদি দেখেন তাহলে দেখবেন ১০০টা অ্যারেরই কিছু প্রপার্টি আছে, তারমধ্যে <code>title</code> টা আমরা লিস্ট আকারে আমাদের ডকুমেন্ট এ থাকা বক্সে দেখাবো। আমরা এটা এমনভাবে করবো, যদি কেউ এখানে থাকা <strong>LOAD POSTS</strong> বাটনে ক্লিক করে তাহলে আমরা অ্যাজাক্স রিকোয়েস্ট পাঠিয়ে সার্ভার থেকে ডাটা এনে এটার নিচেই লিস্ট আকারে দেখাবো।</p>\n<p>তাই প্রথমে আমাদের বাটনটা সিলেক্ট করে নিতে হবেঃ</p>\n<pre><code>var loadPosts = document.getElementById('btn-click-me');\n</code></pre>\n<p>তারপর বক্সটাকেও সিলেক্ট করবো। এই বক্সেই চাইল্ড হিসেবে আমরা আমাদের লিস্টটা ঢুকাবোঃ</p>\n<pre><code>var box = document.getElementById('box');\n</code></pre>\n<p>এখন আমরা আমাদের বাটনে একটা ইভেন্ট লিসেনার লাগাবো আর সেই ইভেন্টে আমরা পোস্টগুলো অ্যাজাক্স রিকোয়েস্ট হিসেবে সার্ভার থেকে আনবোঃ</p>\n<pre><code>loadPosts.addEventListener('click', function() {\n   var request = new XMLHttpRequest();\n   request.open('GET', 'https://jsonplaceholder.typicode.com/posts', true);\n   request.send();\n\n   request.onreadystatechange = function handleRequest(){\n      if(request.readyState === 4 &amp;&amp; request.status === 200) {\n         console.log(JSON.parse(request.responseText));\n      }\n   }\n});\n</code></pre>\n<p>আমরা আগের রিকোয়েস্টাকেই বাটনের ক্লিকে যাতে ঘটে ঐরকম করে দিয়েছি। এখন স্ক্রিপ্ট ফাইল সেইভ করে ব্রাউজার রিলোড দিলে দেখবেন আর এটা সরাসরি রান করছে না। বাটনে ক্লিক করলেই কন্সোলে ফলাফল দেখতে পাবেন।</p>\n<p>এখন আমরা কন্সোলে না, বরং বাটনের নিচে লিস্ট আকারে ফলাফল দেখতে চাচ্ছি। তাই আমরা সহজভাবেই আমাদের ডম ম্যানিপুলেশনের নলেজ দিয়ে সে কাজ করতে পারবোঃ</p>\n<pre><code>var loadPosts = document.getElementById('btn-click-me');\nvar box = document.getElementById('box');\nvar uList = document.createElement('ul');\n\nloadPosts.addEventListener('click', function() {\n   var request = new XMLHttpRequest();\n   request.open('GET', 'https://jsonplaceholder.typicode.com/posts', true);\n   request.send();\n   request.onreadystatechange = function handleRequest(){\n      if(request.readyState === 4 &amp;&amp; request.status === 200) {\n         var data = JSON.parse(request.responseText);\n         data.forEach(function(singleData) {\n           var list = document.createElement('li');\n           list.textContent = singleData.title;\n           uList.appendChild(list)\n         })\n         box.insertAdjacentElement('beforeend', uList);\n      }\n   }\n});\n</code></pre>\n<p>কোডগুলো ভালো করে লক্ষ্য করুন, বেশী কিছু করা হয়নি এখানে। একদম সিম্পলভাবেই করা হয়েছে। এটা লিখে স্ক্রিপ্ট ফাইলটা সেইভ করে ব্রাউজার রিলোড দিয়ে যদি <strong>LOAD POSTS</strong> বাটনে ক্লিক করি, তাহলে দেখবেন এরকম লিস্ট আকারে আমাদের ডাটাগুলো চলে আসছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*x4bLM18hJl8qsog5DhhhlA.png\" alt=\"\" /></p>\n<p>ব্যাস, হয়ে গেলো আমাদের অ্যাজাক্স রিকোয়েস্টের সাহায্যে পেজ রিলোড না করেই অন্য কোনো সার্ভার থেকে ডাটা নিয়ে আসার কাজ।</p>"}],"daily":[{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-04-01T06:31:31.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন","thumb_img_path":"/images/dailyjs.gif","content":"<p>আজকে আমি জাভাস্ক্রিপ্ট এর ফার্স্ট ক্লাস ফাংশন এবং হায়ার অর্ডার ফাংশন নিয়ে কথা বলবো এবং সাথে উদাহরণসহ কিছু ফাংশন তুলে ধরবো যেগুলো থেকে ক্লিয়ার ধারণা পাওয়া যাবে। সবশেষে হায়ার অর্ডার ফাংশন map() এর ব্যবহার দেখাবো।</p>\n<p>জাভাস্ক্রিপ্ট এ ফাংশন কে ফার্স্ট ক্লাস ফাংশন বলা হয়। এখন কথা হলো ফার্স্ট ক্লাস ফাংশন কি?</p>\n<p>ফার্স্ট ক্লাস ফাংশনকে আপনি অন্য কোনো ফাংশনের আর্গুমেন্ট হিসেবে পাস করতে পারবেন, এক ফাংশন থেকে আরেকটা ফাংশন রিটার্ন করতে পারবেন। আর সবচেয়ে মজার ব্যাপার হলো ফাংশনকে ভ্যারিয়েবল হিসাবেও স্টোর করতে পারবেন।</p>\n<p>ফাংশনকে আর্গুমেন্ট হিসেবে পাস করাঃ</p>\n<pre><code>function callMyName(name, callback) {\n    var myAge = 20;\n    callback(myAge);\n    console.log('Is it interesting? Yes it is Mr.' + name);\n}\n\nfunction hello(age) {\n    console.log('I am passed through argument and my age is: ' + age);\n}\n\ncallMyName('Zonayed Ahmed', hello);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LWcOaGMKITB9Fsl35n_B5g.png\" alt=\"\" /><strong>দেখলেন তো!</strong></p>\n<p>ফাংশন থেকে ফাংশন রিটার্ন করাঃ</p>\n<pre><code>function welcomeMsg(name) {\n    console.log('Welcome Mr. ' + name);\n    return function options(menu) {\n        console.log('Do you like ' + menu + ' Mr. ' + name);\n    }\n}\n\nwelcomeMsg('Zonayed Ahmed')('Coffee');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vRELsxYmPL812L9splLpUw.png\" alt=\"\" /></p>\n<p>ফাংশনকে ভ্যারিয়েবল হিসাবে স্টোর করাঃ</p>\n<pre><code>var aFunc = function(name) {\n    console.log('I am Simply a function and my name is ' + name);\n}\n\nvar anothervar = aFunc;\nanothervar('Zonayed Ahmed');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*CWQPydIhFKxs1Iu9vhu6-A.png\" alt=\"\" /></p>\n<p>এখন কথা হলো ফাংশন ফার্স্ট ক্লাস হওয়াতে সুবিধা কি? হ্যা এগুলা অনেক কাজে এমনিতে আসবে যেহেতু আমরা ফাংশনগুলো অনেকরকম ভাবে ব্যবহার করতে পারতেছি। কিন্তু তাছাড়াও আমরা ফাংশনাল প্রোগ্রামিং এর কথা জানি। ফাংশনাল প্রোগ্রামিং হলো প্রোগ্রামিং ল্যাঙ্গুয়েজের ভবিষ্যৎ।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*6zPMmrcnbXcitRGM.\" alt=\"\" /></p>\n<p>ফাংশনাল প্রোগ্রামিং এ হায়ার অর্ডার ফাংশন ইউজ করা হয় যেখানে ফার্স্ট ক্লাস এর কন্সেপ্ট খুবই ইম্পরট্যান্ট। হায়ার অর্ডার ফাংশনে আমরা একটা ফাংশনে আরেকটা ফাংশন আর্গুমেন্ট হিসেবে পাস করতে পারি, ফাংশন থেকে ফাংশন রিটার্ন করতে পারি। তো এগুলা সবই আসলে ফার্স্ট ক্লাস ফাংশনের আইডিয়া। তাই আমরা বলতে পারি ফাংশানাল প্রোগ্রামিং এর জন্যে ফার্স্ট ক্লাস ফাংশন খুবি গুরুত্বপূর্ন। আর এই আইডিয়া থেকেই কিছু হায়ার অর্ডার ফাংশন যেমনঃ map(), filter(), reduce() ছাড়াও আরো অনেক হায়ার অর্ডার ফাংশনগুলো এসেছে। এগুলো আসলে আলাদা করে ডিসকাস করতে হবে। তারপরেও আমি map() এর খুবই সিম্পল একটা ইউসেজ দিলাম নিচে।</p>\n<p><strong>map() এর ইউসেজঃ</strong></p>\n<p>map একটা হায়ার অর্ডার ফাংশন আর আমার মতে সবচেয়ে বেশী ইউসড একটা ফাংশন। এর কাজ হচ্ছে একটা অ্যারের সবগুলা আইটেম নিয়ে সেগুলার উপরে স্পেসেফিক কোনো ফাংশন অ্যাপ্লাই করে। ধরি আমার কাছে একটা অ্যারে আছে এখন আমি অ্যারের সবগুলো আইটেমের সাথে ২ গুণ করতে চাই। map() ছাড়া আমাদের যা করতে হতোঃ</p>\n<pre><code>var items = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar anotherItems = [];\n\nfor(var i = 0; i &lt; items.length; i++) {\n    anotherItems.push(items[i] * 2);\n}\n\nconsole.log(anotherItems);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*PdQGdEquZNqRQ6RT8h2G-Q.png\" alt=\"\" /></p>\n<p>এবার ম্যাপ ইউজ করেঃ</p>\n<pre><code>var items = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nvar anotherItems = items.map(function(item) {\n    return item * 2;\n});\n\nconsole.log(anotherItems);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RzSCAiuf-6fuDG_oAdLUrw.png\" alt=\"\" /><strong>Same Output</strong></p>\n<p>আর ES6 সিনট্যাক্স ইউজ করলে এটার অবস্থা কি হয় দেখেনঃ</p>\n<pre><code>const items = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst anotherItems = items.map(item =&gt; item * 2);\n\nconsole.log(anotherItems);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LWZ5HlMHBL-63bL-RRCY7Q.png\" alt=\"\" /><strong>সেইম আইটপুট</strong></p>\n<p>এবার দেখুন কতটা ফ্লেস্কিবল এই ধরনের ফাংশন ইউজ করা আর কতো শর্টকাটে আপনার কাজ সেরে ফেলতে পারতেছেন।</p>\n<p>এরকম বাকি আরো যেমন filter(), reduce() আছে যেগুলা নিয়ে পরে আমি আরো বিস্তারিত করে লিখবো। তবে এখানে যে মেইন আইডিয়াটা হচ্ছে আগে আমরা এরকম ফর লুপ ইউজ করে কোনো কারণ ছাড়াই কিছু জিনিস নিয়ে আসতাম। i=0, তারপর আবার আরেকটা অ্যারে নেওয়া, আগের অ্যারের সাইজ বের করা তারপরে আরো কতো কি। কিন্তু ফাংশনাল প্রোগ্রামিং এ কোড ও হবে মিনিংফুল। map() ইউজ করে অনেকটা অর্থপূর্নভাবেই সেইম টাস্ক করা যাচ্ছে। কিন্তু map() আগের চেয়ে বেশী ফ্লেক্সিবল। map() এর আরো ইউসেজ বা আরো ডিটেইলস আমি পরে অন্যকোনো পোস্টে লিখবো। ধন্যবাদ এতোক্ষন সাথে থাকার জন্যে।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা","জাভাস্ক্রিপ্ট-ব্যাসিক"],"date":"2018-04-02T06:31:05.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()","thumb_img_path":"/images/dailyjs.gif","content":"<p>আমি আজকে নিত্যদিনের জাভাস্ক্রিপ্ট হিসেবে তিনটা মেথডের কথা আলোচনা করবো। এখনকার সময়ে আমার মনে হয় এই তিনটা মেথড সবচেয়ে বেশী ব্যবহৃত হয়। তাই ভাবলাম আমি এই তিনটা নিয়ে আলোচনা করি সবার সাথে।</p>\n<p>এখানে তিনটা মেথডের কাজই প্রায় একই টাইপের। এরা অ্যারের, <code>Array</code>র মেথড, এদের মেইন কাজ হলো অ্যাপ্লাইকৃত অ্যারের প্রত্যেকটা আইটেমের উপর একটা ফাংশন অ্যাপ্লাই করা। অনেকটা লুপের মতো কাজ করে, কিন্তু লুপের মতো অর্থহীন বা জটিল টাইপের না। প্রথমে বুঝতে হয়তো একটু সমস্যা হতে পারে। তবে একবার বুঝে গেলে তখন মনে হবে এগুলাই সবচেয়ে বেস্ট।এরা ফাংশনাল প্রোগ্রামিং এর অন্যতম উদাহরণ। আমি ফাংশনাল প্রোগ্রামিং নিয়ে আগে লিখেছি। চাইল সেটা পড়তে পারেন।</p>\n<p>আপনি যদি ক্রোমের কন্সোলে লিখেনঃ</p>\n<pre><code>Array()\n</code></pre>\n<p>এখন <code>__proto__</code> এর ভিতরে দেখলে এই তিনটা মেথড খুঁজে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*g0kcDmZrfD2vjLFoOdU7sQ.jpeg\" alt=\"\" /></p>\n<p>এখানে উল্লেখিত মেথডগুলোর মধ্যে <code>map()</code> আর <code>reduce()</code> প্রথম আর্গুমেন্ট হিসেবে একটা কলব্যাক ফাংশন আর দ্বিতীয় আর্গুমেন্ট হিসেবে এই কলব্যাক ফাংশনের ভিতরে <code>this</code> এর ভ্যালু কি হবে সেটা সেট করা যায়। যেমন <code>map()</code> এর ক্ষেত্রেঃ</p>\n<pre><code>anArray.map(callbackFunction, thisArg);\n</code></pre>\n<p>তবে মনে রাখবেন এখানে <code>this</code> এর ভ্যালু ডিটারমাইন করা আর্গুমেন্টটা অ্যারো ফাংশনে অ্যারো ফাংশনের লেক্সিক্যাল স্কোপিং এর কারণে একটু অন্যরকমভাবে কাজ করবে। এটা খুব বেশী কাজে লাগে না, তবে এরকম কিছু একটা আছে জেনে রাখা ভালো।</p>\n<p><strong>ম্যাপ()ঃ</strong></p>\n<p>The <strong><code>map()</code></strong> method creates a new array with the results of calling a provided function on every element in the calling array.</p>\n<p>আপনি ম্যাপ কোনো অ্যারেতে কল করলে সেটা সেই অ্যারের প্রত্যেকটা আইটেমের উপর আপনারই দেওয়া একটা ফাংশন অ্যাপ্লাই করবে, এবং সবশেষে সবগুলো আবার আরেকটা অ্যারে হিসেবে রিটার্ন করবে।</p>\n<p>ধরুন আপনার কাছে একটা অ্যারে আছেঃ</p>\n<pre><code>var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n</code></pre>\n<p>এখন এই অ্যারের প্রত্যেকটা আইটেমের স্কয়ার বের করতে চান। তাহলে আপনি যে যেটা করতে পারেনঃ</p>\n<pre><code>var anotherArr = []\nfor(var i = 0; i &lt; arr.length; i++) {\n   anotherArr.push(arr[i] * arr[i])\n}\n</code></pre>\n<p>এখন <code>anotherArr</code> তে আপনার কাঙ্খিত রেজাল্ট পাবেন। কিন্তু যদিও এটাও সঠিক, তারপরেও এখানে দেখুন আমাদের নতুন একটা অ্যারে নিতে হয়েছে। আবার আরেকটা মেথড <code>push</code> ইউজ করতে হয়েছে। আর ফর এর ভিতরে আরো কতো কিছু ইউজ করতে হচ্ছে যেগুলো আসলে মিনিংলেস। কোনো অর্থই নেই। সেইম কাজটাই আপনি যদি ম্যাপ এর মাধম্যে করতে চান। প্রথমে যে ফাংশন টা আপনার প্রত্যেকটা আইটেমের উপর অ্যাপ্লাই করতে চান। আপনি চান প্রত্যেকটা আইটেমের স্কয়ারঃ</p>\n<pre><code>function getSquare(item) {\n   return item * item\n}\n</code></pre>\n<p>এখন এই ফাংশনটা আপনার অ্যারের প্রত্যেকটা আইটেমে অ্যাপ্লাই করতে চান। এখানেই আসে <code>map()</code></p>\n<pre><code>arr.map(getSquare)\n</code></pre>\n<p>এখন আমরা জানি এটাও একটা অ্যারে রিটার্ন করে। এখন সেই অ্যারেটা কোথায় স্টর করতে হবেঃ</p>\n<pre><code>var newArr = arr.map(getSquare);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0_RXsAh6AxWwl0OhgxSnGA.png\" alt=\"\" /></p>\n<p>এখন পুরোটাকে এভাবেও লেখা যাবেঃ</p>\n<pre><code>var newArr = arr.map(function(item) {\n   return item * item;\n})\n</code></pre>\n<p>এই পুরোটা সেইম আগের মতোই রেজাল্ট দিবে</p>\n<p>এখন এখানে দেখবেন আমরা আর্গুমেন্ট হিসেবে একটা <code>item</code> ইউজ করেছি। কিন্তু এখানে map() তিনটা আর্গুমেন্ট অ্যাক্সেপ্ট করে। প্রথমটা তো দেখলামি, এটা অ্যারের প্রত্যেকটা আইটেম সিলেক্ট করে, দ্বিতীয় আর্গুমেন্ট হচ্ছে অ্যারের আইটেমের ইন্ডেক্স নাম্বার, আর তৃতীয় নাম্বার টা সবসময়ই পুরো অ্যারে দিবে।</p>\n<pre><code>var newArr = arr.map(function(item, index, fullArr) {\n    console.log('Item: ' + item + ' and index: ' + index + '. Full Array: ' + fullArr)\n})\n</code></pre>\n<p>রেজাল্টঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OdADtk6_AWe_gIzOe_iJBQ.png\" alt=\"\" /></p>\n<p>আর যদি ES6 সিনট্যাক্স ইউজ করেন তাহলে সেটা কিরকম হয় দেখুনঃ</p>\n<pre><code>const newArr = arr.map(item =&gt; item * item);\n</code></pre>\n<p>এটা সেইম রেজাল্টই দেখাবে। কতো টা কম্প্যাক আর সুন্দর দেখুন।</p>\n<p><strong>ফিল্টার()ঃ</strong></p>\n<p>ফিল্টার সেইম ম্যাপের মতোই কিন্তু এখানে অ্যাপ্লাইকৃত ফাংশন যদি <code>true</code> রিটার্ণ করে তাহলেই সেটা নতুন অ্যারেতে স্থান পাবে, নতুবা যদি ফাংশন <code>false</code> রিটার্ণ করে তাহলে সেই আইটেম অ্যারেতে স্থান পাবে না।</p>\n<p>ধরুন আমি নিচের অ্যারে থেকে শুধুমাত্র জোড় নাম্বার গুলো বের করে নতুন অ্যারেতে রাখতে চাচ্ছিঃ</p>\n<pre><code>var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<p>এখন ফিল্টার মেথড অ্যাপ্লাই করে সেটা ইজিলিই করতে পারিঃ</p>\n<pre><code>var newArr = arr.filter(function(item) {\n   return item % 2 == 0\n})\n</code></pre>\n<p>প্রত্যেকটা আইটেমের উপর ফাংশন টা অ্যপ্লাই করা হয়েছে। এবং যেটা এখানে <code>true</code> রিটার্ণ করেছে, সেটাই নতুন অ্যারেতে স্থান পেয়েছে। আর যেটা <code>false</code> রিটার্ণ করেছে সেটা নতুন অ্যারেতে স্থান পায় নি।</p>\n<p>এখানেও আপনি চাইলে অ্যানিনোমাস ফাংশন বা বাইরে ফাংশন নিয়ে এখানে কল করতে পারবেন ম্যাপের মতোই। রেজাল্ট দেখুনঃ</p>\n<pre><code>newArr\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4I90yUfl7em9vV8CcnD4PA.png\" alt=\"\" /></p>\n<p>ফিল্টারও ম্যাপের মতোই তিনটা আর্গুমেন্ট অ্যাক্সেপ্ট করেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*URueAnHvZ2Mgg8AjUtwxwg.png\" alt=\"\" /></p>\n<p>ES6 সিনট্যাক্স ইউজ করলেঃ</p>\n<pre><code>const newArr = arr.filter(item =&gt; item % 2 === 0);\n</code></pre>\n<p><strong>রিডিউস()ঃ</strong></p>\n<p>রিডিউস ও ম্যাপ, ফিল্টার এর মতো হলেও এটা একটা আর্গুমেন্ট বেশী নেয়। আমরা প্রোগ্রামিং ওয়ার্ল্ড এ স্ট্যাট ভ্যারিয়েবলের কথা জানি। এর কাজ হচ্ছে কোনো কিছুর কাউন্ট করা, বা ডিটেক্ট করে রাখা কোনো অপারেশনের চলার সময়। সহজ কথায় বললে আমরা যদি কোনো অ্যারে থেকে অ্যারের সব নাম্বারের টুটাল বের চাই, তাহলে সেক্ষেত্রে রিডিউস ইউজ করে সহজেই করে ফেলতে পারি। রিডিউসে যেহেতু স্ট্যাট ভ্যারিয়েবল আছে, তাই এটাই এধরণের অপারেশনের জন্য পার্ফেক্ট চয়েজ হতে পারে।</p>\n<p>ধরি অ্যারেঃ</p>\n<pre><code>var arr = [1, 2, 3, 4]\n</code></pre>\n<p>সব আইটেমের টুটাল জানতে চাই। রিডিউস অ্যাপ্লাই করলেঃ</p>\n<pre><code>var total = arr.reduce(function(sum, item){\n   return sum += item;\n}, 0);\n</code></pre>\n<p>এখন এটার রেজাল্ট আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JjKxckPhFovaqgBS6zQvqg.png\" alt=\"\" /></p>\n<p>এখানে অনেককিছু নতুন দেখা যাচ্ছে। হ্যা, এটা শুধুমাত্র একটা আর্গুমেন্ট শুরুর দিক হতে বেশী নিচ্ছে। যেটা হচ্ছে স্ট্যাট ভ্যারিয়েবল। আর একদম শেষে সেই স্ট্যাট ভ্যারিয়েবলের ইনিশিয়াল ভ্যালু কতো হবে সেটা সেট করে দিতে পারবেন। আমার ক্ষেত্রে জিরো দিয়েছি। আপনি ১০ দিলে ১০ থেকে শুরু হতো। রেজাল্ট আসতো ২০। আর সবশেষে এই মেথড আপনার টুটাল রিটার্ণ করতেছে, অন্যগুলোর মতো অ্যারে না, বরং টুটালটাই রিটার্ণ করবে।</p>\n<p>আর বাকি সব অন্যান্য দুইটার মতোইঃ</p>\n<pre><code>var total = arr.reduce(function(sum, item, index, fullArr) {\n   console.log('Item: ' + item + ' and index: ' + index + '. Full Array: ' + fullArr + ' and sum: ' + sum);\n   return sum += item\n}, 0)\n</code></pre>\n<p>ES6 সিনট্যাক্স ইউজ করলেঃ</p>\n<pre><code>const t = arr.reduce((sum, item) =&gt; sum += item, 0)\n</code></pre>\n<p><strong>this এর ভ্যালু ডিটারমাইন করাঃ</strong> উপরের তিনটা মেথডের মধ্যে <code>map()</code> আর <code>filter()</code> এ আমরা চাইলে এদের কলব্যাক ফাংশনের ভিতরে <code>this</code> এর ভ্যালু কি হবে সেটা সেট করে দিতে পারি। এটা অপশনাল আর্গুমেন্ট, কিছু না দিলে যেটা আমরা উপরে করেছি, <code>this</code> তার বাই ডিফল্ট বিহ্যেভিয়ারই দেখাবে। দুইটা মেথডেই এটা একইরকমভাবে কাজ করে। আর তাই আমি শুধুমাত্র <code>map()</code> দিয়ে উদাহরণ দেখাবো। ধরি আমাদের একটা অবজেক্ট আছে এরকমঃ</p>\n<pre><code>const anObj = {\n   name: 'Zawad Ahmed',\n   age: 1\n}\n</code></pre>\n<p>এখন ধরি আমরা একটা অ্যারের উপর কিছু অপারেশন করবো। আমি ব্যাসিক একটা অ্যারে নিলামঃ</p>\n<pre><code>const anoArray = [1, 2, 4, 5, 6, 7, 9, 3];\n</code></pre>\n<p>এখন এটার উপর <code>map()</code> চালাবো, তবে জাস্ট <code>this</code> এর ভ্যালু কি আসে সেটা দেখার জন্যেঃ</p>\n<pre><code>anoArray.map(function(single, index, fullArr) {\n   console.log(this)\n})\n</code></pre>\n<p>এটা কন্সোলে রান করলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*eEv2ljCZ8qYhGfdArpN4wg.png\" alt=\"\" /></p>\n<p>পরিষ্কারভাবেই এখানে <code>this</code> গ্লোবাল অবজেক্ট বা <code>window</code> কেই ইন্ডিকেট করছে। এখন আমরা আমাদের <code>this</code> এর ভ্যালু ডিটারমাইন করতে পারে সেই আর্গুমেন্টটা ইউজ করবো আর <code>this</code> এর ভ্যালু হিসেবে আমাদের বানানো <code>anObj</code>অবজেক্টটাকে ইউজ করবোঃ</p>\n<pre><code>anoArray.map(function(single, index, fullArr) {\n   console.log(this)\n}, anObj)\n</code></pre>\n<p>এটা রান করে এবার কন্সোলে দেখুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*mfoubB4__Hn8INOT-k1yjg.png\" alt=\"\" /></p>\n<p>আমরা আমাদের কলব্যাক ফাংশনের ভিতরে <code>this</code> এর ভ্যালুই চেঞ্জ করে ফেলেছি।</p>\n<p>এখন সেইম কাজটাই অ্যারো ফাংশনের ক্ষেত্রে আবার কাজ করবে না। কারণ অ্যারো ফাংশনে লেক্সিক্যাল স্কোপিং রয়েছে। যেটা আমরা অ্যারো ফাংশনের লেখায় বলেছিলাম।</p>\n<p>এখানে উল্লেখিত উদাহরণ ছাড়াও আরো অনেক জায়গায় অনেকভাবে এই তিনটা মেথড ইউজ করা হয়। বিশ্বাস করুন এগুলো জাভাস্ক্রিপ্ট এর মধ্যে সবচেয়ে ইউজফুল মেথড আমার মতে। আমি শুধুমাত্র ব্যাসিকটা দিলাম। কারণ ব্যাসিক ক্লিয়ার থাকলে পরে যেকোন পরিস্থিতিতেই এগুলো ইউজ করতে পারবেন।</p>\n<p>এখানে উল্লেখিত উদাহরণ ছাড়াও আরো অনেক জায়গায় অনেকভাবে এই তিনটা মেথড ইউজ করা হয়। বিশ্বাস করুন এগুলো জাভাস্ক্রিপ্ট এর মধ্যে সবচেয়ে ইউজফুল মেথড আমার মতে। আমি শুধুমাত্র ব্যাসিকটা দিলাম। কারণ ব্যাসিক ক্লিয়ার থাকলে পরে যেকোন পরিস্থিতিতেই এগুলো ইউজ করতে পারবেন।</p>"},{"language":"বাংলা","tags":["JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-23T16:38:34.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড","thumb_img_path":"/images/dailyjs.gif","content":"<p>আমরা <a href=\"https://js.zonayed.me/#/js-daily/255\">আগের পর্বে</a> অ্যারের তিনটা মেথড <code>map()</code>, <code>filter()</code> আর <code>reduce()</code> এর ব্যবহার দেখেছিলাম। অ্যারেতে সাধারণত একাধিক ডাটা থাকে। এখন সেই ডাটাগুলো থেকে বেছে বেছে আমাদের প্রয়োজমতো কিছু ডাটা বের করার জন্যে বা প্রয়োজনমতো এগুলোর উপর কোনো অপারেশন চালানোর জন্যে অ্যারেতে বেশ কিছু হ্যান্ডি মেথড রয়েছে। ঠিক আগের সেই ম্যাপ, ফিল্টার, রিডিউস মেথডের মতোই আরো দুইটা কাজের মেথড রয়েছে। এরা হচ্ছে <code>some()</code> ও <code>every()</code> নামের সাথে এদের কাজেরও বেশ মিল আছে।</p>\n<p>আমাদের এরকম কোনো পরিস্থিতি আসতে পারে যে একটা অ্যারের ভিতর কোনো নির্দিষ্ট ডাটা আছে কিনা সেটা খুঁজতে হতে পারে। ধরুন আমাদের একটা অ্যারে আছে এরকমঃ</p>\n<pre><code>const arr = [1, 2, 4, 5, 6, 7, 8];\n</code></pre>\n<p>এখন আমরা জানতে চাচ্ছি এই অ্যারেতে <code>7</code> আছে কিনা। অথবা অ্যারের ভিতরে থাকা প্রত্যেকটা ডাটা পরীক্ষা করে দেখতে হতে পারে এরা নির্দিষ্ট কিছু মেনে চলছে কিনা। সেক্ষেত্রে আমাদের এই দুইটা মেথড অনেক কাজে আসতে পারে।</p>\n<p>মেথড দুইটাই দুইটা আর্গুমেন্ট অ্যাক্সেপ্ট করে। প্রথমটা একটা কলব্যাক ফাংশন আর দ্বিতীয়টা কলব্যাক ফাংশনের ভিতরে <code>this</code> এর ভ্যালু ডিটারমাইন করা জন্যে। প্রথম আর্গুমেন্ট অর্থাৎ কলব্যাক ফাংশন অবশ্যই থাকা লাগবে। তবে <code>this</code> এর ভ্যালু ডিটারমাইন করা আর্গুমেন্টটা অপশনাল। না দিলে <code>this</code> বাই ডিফল্ট বিহ্যেইভই করবে। আর যদি চান পরিবর্তন করে দিতে তাহলে এখানে আপনি এই আর্গুমেন্টটা দিতে পারেন।</p>\n<pre><code>anArr.some(callback, thisArg);\n\nanArr.some(callback, thisArg)\n</code></pre>\n<p>এখানে দ্বিতীয় আর্গুমেন্ট অর্থাৎ <code>this</code> এর ভ্যালু কিভাবে সেট করতে হয় সেটা জানার জন্যে <a href=\"https://js.zonayed.me/#/js-daily/255\">আগের লেখাটা</a> দেখতে পারেন। তবে আমি এখানে মূলত এই দুইটা মেথড <code>some()</code> আর <code>every()</code> আসলে কি কাজ করে সেগুলোই দেখাবো।</p>\n<p>এই <code>some()</code> আর <code>every()</code> সবসময় হয় সত্য <code>true</code> বা মিথ্যা <code>false</code> রিটার্ণ করবে।</p>\n<h4 id=\"some\"><strong>some() মেথডঃ</strong></h4>\n<p>এই মেথডটা ঠিক নামের মতোই। আমাদের একটা অ্যারে আছে, এখন এই অ্যারেতে কি কিছু ভ্যালু(এক বা একের অধিক) এরকম বা ওরকমভাবে আছে? এই প্রশ্নের উত্তরই দিবে এই <code>some()</code></p>\n<p>ধরুন আমাদের একটা অ্যারে আছেঃ</p>\n<pre><code>const anArrSome = ['hello', 1, 2, 3, 'Bangla', 5, 'world', 7, 8, 9];\n</code></pre>\n<p>এখন এই অ্যারেতে কি নাম্বার <code>9</code> আছে? দেখি তাহলে <code>some()</code> দিয়েঃ</p>\n<pre><code>anArrSome.some(function(anElement) {\n   return anElement === 9\n})\n</code></pre>\n<p>এটা রান করলে সত্য <code>true</code> আসবে, কারণ আসলেই আমাদের এই অ্যারেতে নাম্বার <code>9</code> আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Kbuvqp0jV924gGz3UjkKrQ.png\" alt=\"\" /></p>\n<p>এখন যদি নাম্বার <code>10</code> আছে কিনা দেখিঃ</p>\n<pre><code>anArrSome.some(function(anElement) {\n   return anElement === 10\n})\n</code></pre>\n<p>এটা মিথ্যা আসবে কারণ আমাদের এই অ্যারেতে <code>10</code> নাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*mdGvdRUlxFArFTIUHGC3ww.png\" alt=\"\" /></p>\n<p>এখন এটাকে যদি আরো ব্যাখ্যা করে বলি, ভিতরের কলব্যাক ফাংশনটা অ্যারের প্রত্যেকটা আইটেমের উপর একবার একবার করে চলবে। কলব্যাক ফাংশন আবার তিনটা আর্গুমেন্ট অ্যাক্সেপ্ট করে। যথাক্রমেঃ প্রথম আর্গুমেন্ট অ্যারের বর্তমান আইটেম যেটার উপর কলব্যাক ফাংশনটা চলছে, তারপরের আর্গুমেন্ট সেটার ইন্ডেক্স নাম্বার, তারপরের আর্গুমেন্টটায় পুরো অ্যারেটাই অ্যাক্সেস পাবেন।</p>\n<pre><code>anArr.some(function(currentElement, index, theArray) {\n   //some codes\n   // return true or false\n});\n</code></pre>\n<p>ইএস৬ সিনট্যাক্স ইউজ করলেঃ</p>\n<pre><code>anArr.some((currentElement, index, theArray) =&gt; {\n   //some codes\n   // return true or false\n});\n</code></pre>\n<p>আমরা নিচের এই একটা উদাহরণ দিয়ে দেখতে পারি এখানে কোন আর্গুমেন্ট কোন কাজ করেঃ</p>\n<pre><code>anArrSome.some((currentElement, index, theArray) =&gt; {\n   console.log(currentElement);\n   console.log(index);\n   console.log(theArray);\n});\n</code></pre>\n<p>প্রথমটা বর্তমান ইলিমেন্ট, দ্বিতীয়টায় ইন্ডেক্স নাম্বার আর শেষেরটায় পুরো অ্যারেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*2-SDCRHNo4i1tX4NVW8C8w.png\" alt=\"\" /></p>\n<p>এখন <code>some()</code> এর আরেকটা ব্যাপার হলো, এটার যেহেতু জানার দরকার অন্তত একটা ইলিমেন্ট আমাদের শর্ত মানে কিনা, <code>true</code> রিটার্ণ করতেছে কিনা, সেহেতু একবার কোনো শর্ত সত্য <code>true</code> হয়ে গেলে এটা কাজ করা বন্ধ করে দেয়। পরের ইলিমেন্ট এ আর হাত দেয় না। নিচের উদাহরনটা দেখুনঃ</p>\n<pre><code>anArrSome.some(anElement =&gt; {\n   console.log(`Current Element: ${anElement}`);\n   return anElement === 1;\n})\n</code></pre>\n<p>এটা রান করলে আউটপুট পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*gqIrFshCmJvG4q6sWiQMTQ.png\" alt=\"\" /></p>\n<p>দেখেন প্রথমটা দেখলো, সেটা মিথ্যা <code>false</code> রিটার্ণ করেছে। তাই আবার পরেরটায় গেলো যেটা আসলে আমাদের কন্ডিশন/শর্ত মেনেছে, আর তাই এটা সত্য রিটার্ণ করেছে। ব্যাস এই মেথড এখন <code>true</code> রিটার্ণ করে দিবে, আর চলবে না। আমরা আউটপুটেও ঠিক তেমনটাই দেখতে পাচ্ছি।</p>\n<p>এখন আমরা একটা স্পেশাল স্টেটমেন্ট এর কথা জানি, সেটা হচ্ছে <code>break</code> এর কাজ হচ্ছে কোনো লুপ চলতে থাকলে সেটাকে নির্দিষ্ট একটা কন্ডিশনে বন্ধ করে দেওয়া। যদি আপনি পরিচিত না থেকে থাকেন তাহলে নিচের এই উদাহরণটা দেখুনঃ</p>\n<pre><code>var anArr = [1, 2, 4, 5, 6, 7, 8, 9];\n\nfor(var i = 0; i &lt; anArr.length; i++) {\n   console.log('Current Value: ' + anArr[i]);\n   if(anArr[i] === 5) {\n      break;\n   }\n}\n</code></pre>\n<p>এখানে আমরা একটা অ্যারের উপর লুপ চালাচ্ছি। এখন যদি আমাদের অ্যারের ইলিমেন্ট <code>5</code> হয় তাহলে লুপ থেকে বেড়িয়ে যাবো। যার জন্যে আমরা কন্ডিশন ইউজ করে <code>break</code> স্টেটমেন্ট দিয়েছি যে ঠিক <code>5</code> আসলেই লুপ থেকে বের হয়ে যাবা। ব্যাস এভাবেই প্রোগ্রাম কাজ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*jRAWtXXGxxmaqLhhOgm0QQ.png\" alt=\"\" /></p>\n<p>এখন এই <code>break</code> স্টেটমেন্ট আপনি <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, <code>some()</code> বা এরকম কোথাও ব্যবহার করতে পারবেন না। কিন্তু আপনার এরকম সময় আসতে পারে যখন এরকম লুপ বা এক্ষেত্রে ইটারেশন বন্ধ করা লাগতে পারে। তো এটা <code>some()</code> মেথড দিয়েও আমরা একটু অন্যরকমভাবে করতে পারবোঃ</p>\n<pre><code>anArr.some(anElement =&gt; {\n   console.log(`Current value: ${anElement}`);\n   return anElement === 5;\n})\n</code></pre>\n<p>দেখুন এটাও ঠিক আমাদের উপরের লুপের মতোই যখনি <code>5</code> পেয়েছে, ইটারেশন ব্রেক করে দিয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*leD88pNbgrdlYzDj8_8HTA.png\" alt=\"\" /></p>\n<p>তো এরকম বিশেষ কেসের ক্ষেত্রে এধরনের মেথড খুবই কাজের হতে পারে। আমরা এই মেথড অ্যারে অব অবজেক্ট এও কাজে লাগাতে পারি। ধরি আমাদের এরকম অবজেক্ট এর একটা অ্যারে আছেঃ</p>\n<pre><code>const objSome = [\n   {\n      name: 'Zawad Ahmed',\n      age: 1,\n      job: 'Child'\n   },{\n      name: 'Zobayer Ahmed',\n      age: 31,\n      job: 'Pharmacists'\n   },{\n      name: 'Zonayed Ahmed',\n      age: 21,\n      job: 'Student'\n   }\n]\n</code></pre>\n<p>এখন ধরি আমরা পরীক্ষা করতে চাচ্ছি যে এখানে কিছু আইটেমের <code>age</code> নামে কোনো প্রপার্টি আছে কিনাঃ</p>\n<pre><code>objSome.some(anObj =&gt; anObj.age)\n</code></pre>\n<p>এটা সত্য রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*S4urWeAkXimAv385eVDzHw.png\" alt=\"\" /></p>\n<p>এখন আবার চাচ্ছি এখানে থাকা সবার ডাটার মধ্যে ১ বছরের কেউ আছে কিনাঃ</p>\n<pre><code>objSome.some(anObj =&gt; anObj.age === 1)\n</code></pre>\n<p>এটাও সত্য রিটার্ন করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*jpQgnnNthxCLaMjQLwjAJA.png\" alt=\"\" /></p>\n<p>এখন ধরি আবার চাচ্ছি এখানে টিচার আছে কিনা কেউঃ</p>\n<pre><code>objSome.some(anObj =&gt; anObj.job === 'Teacher')\n</code></pre>\n<p>কিন্তু এখানে কোনো টিচার নাই, তাই মিথ্যা রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*WWHWlHNBot6OFkN6qJVPKg.png\" alt=\"\" /></p>\n<p>এভাবেই বিভিন্নরকমভাবে আপনি এই মেথড ইউজ করে আপনার ডেভেলপমেন্ট লাইফ আরো অনেক সহজ করে ফেলতে পারবেন।</p>\n<h4 id=\"every\">every() মেথডঃ</h4>\n<p>এটাও ঠিক আগের মেথডগুলোর মতোই, তবে এক্ষেত্রে এটা পরীক্ষা করবে আপনার অ্যারের প্রত্যেকটা আইটেম আপনার দেওয়া শর্ত মেনে চলছে কিনা। যদি প্রত্যেকটা আইটেমই শর্ত মেনে চলে, তাহলেই একমাত্র এটা <code>true</code> রিটার্ণ করবে। আর যদি একটা আইটেমও সেই শর্ত পূরণ না করে তাহলে এটা <code>false</code> রিটার্ণ করবে।</p>\n<p>খুব বোকা টাইপের একটা উদাহরণ দিয়েই শুরু করি। ধরি আমাদের এমন একটা অ্যারে আছেঃ</p>\n<pre><code>const arrEvery = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n</code></pre>\n<p>এখন এখানকার প্রত্যেকটা আইটেমই কি <code>1</code></p>\n<pre><code>arrEvery.every(function(anItem) {\n   return anItem === 1;\n})\n</code></pre>\n<p>এটা <code>true</code> রিটার্ণ করবে, যেহেতু এখানে প্রত্যেকটা আইটেমই <code>1</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*L7MciicfBJTFnuxDRlLbYw.png\" alt=\"\" /></p>\n<p>ইএস৬ সিনট্যাক্স এ লিখলেঃ</p>\n<pre><code>arrEvery.every(anItem =&gt; anItem === 1);\n</code></pre>\n<p>এখন এখানে যদি একটা আইটেমও <code>1</code> ছাড়া অন্যকিছু হতো তাহলে এটা <code>false</code> রিটার্ণ করতো। ধরি আমাদের দেখতে সেইম আরেকটা অ্যারে আছে, কিন্তু একটা আইটেম ভিন্নঃ</p>\n<pre><code>const arrDiffEvery = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2];\n</code></pre>\n<p>এখন যদি দেখি এখানকার সবগুলো আইটেমই <code>1</code> কিনাঃ</p>\n<pre><code>arrDiffEvery.every(anItem =&gt; anItem === 1);\n</code></pre>\n<p>এটা সোজা <code>false</code> রিটার্ণ করবে যেহেতু এখানে সব আইটেম এক হলেও একটা আইটেম, শেষেরটা ভিন্নঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ejemzA0ljfmoqIBDiGyngg.png\" alt=\"\" /></p>\n<p>এখন এই মেথডও ঠিক আগেরগুলোর মতোই তিনটা আর্গুমেন্ট নেয়।</p>\n<pre><code>anArr.every((currentElement, index, theArray) {\n   // codes\n   // should return true or false\n})\n</code></pre>\n<p>প্রথমটা অ্যারের যে ইলিমেন্ট এর উপর কলব্যাক চলছে সেটা, দ্বিতীয়টা অ্যারেতে তার ইন্ডেক্স নাম্বার এবং শেষেরটা পুরো অ্যারেঃ</p>\n<pre><code>arrDiffEvery.every((currentElement, index, theArray) =&gt; {\n   console.log(`Current Element: ${currentElement}`);\n   console.log(`Index: ${index}`);\n   console.log(`The Array: ${theArray}`);\n   return true;\n});\n</code></pre>\n<p>দেখুন এটা কোন আর্গুমেন্ট এ কি প্রিন্ট করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*949P1UXd_1RezZvD5OMmiw.png\" alt=\"\" /></p>\n<p>এখন এই <code>every()</code> ও ঠিক <code>some()</code> এর মতোই, যেহেতু এখানে কোনো একটা শর্ত<code>false</code> হলেই পুরোটা <code>false</code> রিটার্ণ করবে। তাই যখনি এমন কোনো শর্ত আসে যেটা <code>false</code> , তখনি এই ইটারেশন বন্ধ হয়ে যায়। ধরি নিচে আমাদের আরেকটা অ্যারে আছেঃ</p>\n<pre><code>const anNumberArrEvery = [1, 1, 1, 3, 4, 5, 6, 7, 8, 9];\n</code></pre>\n<p>এখন দেখবো এখানে সব ইলিমেন্ট <code>1</code> কিনাঃ</p>\n<pre><code>anNumberArrEvery.every(anElement =&gt; {\n   console.log(`${anElement} is printed`);\n   return anElement === 1;\n})\n</code></pre>\n<p>এখন এটা রান করলে দেখবেন ঠিক যখনি এটা <code>false</code> রিটার্ণ করছে, তখনি এটা বন্ধ হয়ে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*vqu0H3PDzecwOOrqi0btng.png\" alt=\"\" /></p>\n<p>তো সেইমভাবে আমরা এখানে ব্রেক স্টেমটমেন্টও ব্যবহার করতে পারবো। আবার এই মেথড আরো নানান কাজে লাগাতে পারবো। যেমন আমরা এখন দেখতে চাচ্ছি আমাদের উপরের অ্যারের সব আইটেম নাম্বার কিনাঃ</p>\n<pre><code>anNumberArrEvery.every(anElement =&gt; typeof anElement === 'number');\n</code></pre>\n<p>এটা <code>true</code> রিটার্ণ করবে যেহেতু এই অ্যারের সবগুলো আইটেমই নাম্বারঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*opTum1nxB9n-dERCSZmOYw.png\" alt=\"\" /></p>\n<p>এভাবে আরো অনেকরকমভাবে এই মেথড ইউজ করা যাবে। যেমন আমরা অবজেক্টেও ইউজ করতে পারি। ধরি আমাদের নিচে এরকম একটা অবজেক্ট এর অ্যারে আছেঃ</p>\n<pre><code>const objEvery = [\n   {\n      name: 'Zawad Ahmed',\n      job: 'Child'\n   },{\n      name: 'Zobayer Ahmed',\n      age: 31,\n      job: 'Pharmacists'\n   },{\n      name: 'Zonayed Ahmed',\n      age: 21,\n      job: 'Student'\n   }\n]\n</code></pre>\n<p>এখন আমরা জানতে চাচ্ছি এখানে থাকে প্রত্যেকটা অবজেক্ট এর <code>name</code> প্রপার্টি আছে কিনাঃ</p>\n<pre><code>objEvery.every(anObj =&gt; anObj.name);\n</code></pre>\n<p>এটা সত্য রিটার্ন করবে, যেহেতু এখানকার সবগুলো অবজেক্ট এর এই name নামের প্রপার্টি আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*A1-Em3JeBmyYhSAw6Sr8Eg.png\" alt=\"\" /></p>\n<p>এখন আবার যদি এখানে দেখতে চাই সব অবজেক্ট এর <code>age</code> প্রপার্টি আছে কিনাঃ</p>\n<pre><code>objEvery.every(anObj =&gt; anObj.age);\n</code></pre>\n<p>এটা দেখবেন <code>false</code> রিটার্ণ করবে, যেহেতু এখানে একটা অবজেক্ট এর <code>age</code> প্রপার্টি নাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*rvHGdhqFbXRFkvWPf4rSbw.png\" alt=\"\" /></p>\n<p>একইভাবে এই দুইটা মেথড আরো অনেক কাজে ব্যবহার করা যেতে পারে। সোজা কথায় এরা আপনাকে অনেক বড় হেল্প করতে পারবে যদি আপনি ঠিকমতো এদেরকে ব্যবহার করতে পারেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-26T16:38:29.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো","thumb_img_path":"/images/dailyjs.gif","content":"<p>আমি আমার নিত্যদিনের জাভাস্ক্রিপ্ট সিরিজে জাভাস্ক্রিপ্ট এর দৈনন্দিন যেসব টেকনিক ইউজ করা হয় সেগুলো নিয়ে আলোচনা করি। আজকেও তাই শুরু করছি কিভাবে আমরা অবজেক্ট এ লুপ চালাবো। অবজেক্ট এর লুপ চালানো একটু টেকনিক্যাল, তবে খুব দরকারি। তার আগে অবজেক্ট লুপ চালানোর প্রয়োজনীয়তা কি সেটা আলোচনা করবো।</p>\n<p>আমরা অ্যারের উপর বিভিন্নভাবে লুপ চালাতে পারি। ট্র্যাডিশনাল <code>for</code> দিয়ে বা <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%A8%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%AF%E0%A6%A6%E0%A6%BF%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%AE%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%AA-%E0%A6%AB%E0%A6%BF%E0%A6%B2%E0%A7%8D%E0%A6%9F%E0%A6%BE%E0%A6%B0-%E0%A6%B0%E0%A6%BF%E0%A6%A1%E0%A6%BF%E0%A6%89%E0%A6%B8-89e3526444ed?source=user_profile---------5----------------\">এগুলো</a> ইউজ করেও লুপ চালাতে পারি। কিন্তু আমাদের এমন সিচুয়েশান আসতে পারে যেখানে কোনো অবজেক্ট এর উপর অ্যারের মতোই লুপ চালানো লাগতে পারে। ধরি নিচের অবজেক্টটিঃ</p>\n<pre><code>var obj = {\n   Bangladesh: ‘Dhaka’, \n   India: ‘Delhi’, \n   Nepal: ‘Kathmandu’, \n   Afganistan: ‘Kabul’, \n   Thailand: ‘Bangkok’\n}\n</code></pre>\n<p>এখন এরকম সিচুয়েশনে আপনাকে হয়তো সবগুলা জায়গার নাম দেশসহ বা শুধু ক্যাপিটালগুলোর নামগুলো একসাথে করতে হতে পারে। এটা সিম্পলভাবে অ্যারে হলে বা অ্যারে অফ অবজেক্ট হলে <code>for</code> বা ফাংশনাল প্রোগ্রামিং এ <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%A8%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%AF%E0%A6%A6%E0%A6%BF%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%AE%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%AA-%E0%A6%AB%E0%A6%BF%E0%A6%B2%E0%A7%8D%E0%A6%9F%E0%A6%BE%E0%A6%B0-%E0%A6%B0%E0%A6%BF%E0%A6%A1%E0%A6%BF%E0%A6%89%E0%A6%B8-89e3526444ed?source=user_profile---------5----------------\">যেকোনভাবে</a>ই সহজেই করা যেতো। এখানেও আপনি <code>for</code> ইউজ করে লুপ চালিয়ে কাজ করতে পারবেন। যেমন কীগুলো পেতেঃ</p>\n<pre><code>for(name in obj) {\n   console.log(name);\n}\n</code></pre>\n<p>এটা শুধুমাত্র কীগুলো প্রিন্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*vFSenz9HC58v_qSax699WA.png\" alt=\"\" /></p>\n<p>এখন এই কীগুলো ইউজ করে আমরা এদের ভ্যালুগুলো সহজেই পেতে পারিঃ</p>\n<pre><code>for(name in obj) {\n   console.log(obj[name]);\n}\n</code></pre>\n<p>এটা ভ্যালুগুলো প্রিন্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*odhVEf9aUISfGqId_kKLvg.png\" alt=\"\" /></p>\n<p>যদিও এভাবেও সব কাজ করা যায়, তবে জাভাস্ক্রিপ্ট ডেভেলপাররা ফাংশনাল প্রোগ্রামিংকে বেশী পছন্দ করে। আর <code>for</code> ইউজ করাটাও সেকেলে দেখায়। তাছাড়া এখানে ভ্যলু সবগুলো আবার অ্যারেতে নিয়ে যেতে হলেও একটু ঝামেলা পোহাতে হবে। আর তাই এর চেয়ে বেশী ইউজফুল সিস্টেমে কিভাবে করা যায় সেটা আমি আজকে আলোচনা করবো।</p>\n<p>আমি এখন সব দেশের ক্যাপিটাল গুলো প্রিন্ট করতে চাচ্ছি। এখন এর জন্যে আমরা <code>Object</code> কন্সট্রাকটরের মেথডগুলো দেখতে পারি। এখানে প্রত্যেকটা বানানো অবজেক্ট এরই <code>Object</code> কন্সট্রাকটর থাকে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*2h2Sd-ItxtmzmPDzy_V-Ow.png\" alt=\"\" /></p>\n<p>আমরা চাইলে <code>obj.constructor</code> ও ইউজ করতে পারি আবার ডিরেক্ট <code>Object</code> কন্সট্রাকটর ও ইউজ করতে পারি। এখন এই কন্সট্রাকটরের ভিতরে কিছু মেথড আছে যেগুলো আমরা দেখতে পারিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*efxBJyPUun164jqmn9k7wQ.png\" alt=\"\" /></p>\n<p>এখানে দুইটা মেথড খুঁজে পাবেন <code>keys</code> আর <code>values</code> নামে। এগুলাই আমরা ইউজ করবো ব্যাসিকালি আজকে।</p>\n<p>এখন আমাদের অবজেক্ট এর ভ্যালুগুলো পেতে চাইলে এখানে <code>values</code> নামে যে মেথড আছে সেটা ইউজ করতে হবে। ভ্যালু আর্গুমেন্ট হিসেবে আমাদের অবজেক্ট অ্যাক্সেপ্ট করবে এবং সবশেষে ভ্যালুগুলো অ্যারে হিসাবে রিটার্ণ করবে।</p>\n<pre><code>Object.values(obj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Sta1Hl5Iq0A3257xTv3gcQ.png\" alt=\"\" /></p>\n<p>এখন রিটার্ণ করা অ্যারেটাকে ভ্যারিয়েবলে স্টোর করে রাখতে পারি পরবর্তিতে ব্যবহার করার জন্যে</p>\n<pre><code>var capitals = Object.values(obj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*XHvLAj0lHjDkNBC9fabvdQ.png\" alt=\"\" /></p>\n<p>এবার যেহেতু এখানে <code>capitals</code> আসলে একটা অ্যারে, তাই এখানে যেকোনোভাবেই লুপ চালাতে পারবেন।</p>\n<pre><code>capitals.map(function(capital) {\n    console.log('Capital is: ' + capital);\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*KEs41n2ZCTUMcmwBS_UhkA.png\" alt=\"\" /></p>\n<p>এখন পুরোটা কাজ একেবারে এভাবেও করা যাবেঃ</p>\n<pre><code>Object.values(obj).map(function(capital) {\n    console.log('Capital is: ' + capital);\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*skl7g0o9dZlYg044i978lQ.png\" alt=\"\" /></p>\n<p>আর <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%A8%E0%A6%BE%E0%A6%95%E0%A6%BF-%E0%A6%87%E0%A6%95%E0%A6%AE%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-b6d2b72cf562?source=user_profile---------3----------------\">ES6</a> সিনট্যাক্স ইউজ করলেঃ</p>\n<pre><code>Object.values(obj).map(capital =&gt; console.log(`Capital is ${capital}`));\n</code></pre>\n<p>আউটপুট সেইম আগের মতোই আসবে।</p>\n<p>এ তো গেলো শুধুমাত্র ভ্যালু নিয়ে খেলা। এবার যদি আমাদের কী গুলোও দরকার লাগে তাহলে কি করা যেতে পারে? হ্যা, সেক্ষেত্রেই দ্বিতীয় মেথড <code>keys</code> কাজে লাগবে। আমাদের উদাহরণ নেওয়া অবজেক্ট টাতে দেশের নামসহ ক্যাপিটাল প্রিন্ট করতে চাইলে আগের <code>values</code> মেথডের মতোই <code>keys</code> মেথডও কাজ করবে। কিন্তু এক্ষেত্রে <code>keys</code> কী গুলো রিটার্ণ করবে। এবং পরবর্তিতে আমরা এই কী গুলো ব্যবহার করে ভ্যালুগুলোও বের করতে পারবো। মানে কী আর ভ্যালু দুইটা নিয়েই কাজ করা যাবে।</p>\n<pre><code>Object.keys(obj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*QujuLRukHSnHaBuQnGh7RQ.png\" alt=\"\" /></p>\n<p>এবার এই নতুন অ্যারেকে কোথাও স্টোর করে রাখতে পারি পরবর্তিতে ইউজ করার জন্যে।</p>\n<pre><code>var countries = Object.keys(obj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*kmwa6JqcCMqnAIDN1IdOiA.png\" alt=\"\" /></p>\n<p>এবার আসলে আইডিয়াটা বুঝে ফেলেছেন। এখান থেকেও <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%A8%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%AF%E0%A6%A6%E0%A6%BF%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%AE%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%AA-%E0%A6%AB%E0%A6%BF%E0%A6%B2%E0%A7%8D%E0%A6%9F%E0%A6%BE%E0%A6%B0-%E0%A6%B0%E0%A6%BF%E0%A6%A1%E0%A6%BF%E0%A6%89%E0%A6%B8-89e3526444ed?source=user_profile---------5----------------\">map()</a> দিয়ে আমরা কাজ করতে পারবোঃ</p>\n<pre><code>countries.map(function(country) {\n    console.log('Country Name: ' + country);\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ndE3CWv8XDBwW2gJSCIyXw.png\" alt=\"\" /></p>\n<p>এখন এখানে যেটা একটু ব্যাতিক্রম, সেটা হচ্ছে আমরা যেহেতু কীগুলো পাচ্ছি তাহলে সেখান থেকে আমরা কিন্তু ভ্যালুও পেতে পারি। অবজেক্ট নিয়ে কাজ করে থাকলে কিভাবে কী দিয়ে ভ্যালু বের করা যায় সেটা হয়তো জেনে থাকবেন। এখানেও সেইম ভাবে কাজ করবে</p>\n<pre><code>countries.map(function(country) {\n    console.log('Capital of ' + country + ' is: ' + obj[country]);\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Mtwmezv_D6FlMQ0WWopW2Q.png\" alt=\"\" /></p>\n<p>তবে এখানে আমাদের অবশ্যই <strong>ব্রাকেট নোটেশান</strong> ইউজ করতে হবে।(<em>কেন ব্র্যাকেট নোটেশান, কেন ডট নোটেশান কাজ করবেনা সেটা নিচে নোট করে দিয়েছি)</em> এখন এটাকেও পুরো একেবারে করতে চাইলেঃ</p>\n<pre><code>Object.keys(obj).map(function(country) {\n    console.log('Capital of ' + country + ' is: ' + obj[country]);\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*hijSN9j_JK3nwVDsnLtyOg.png\" alt=\"\" /></p>\n<p>আর অবশ্যই <a href=\"https://medium.com/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%AA%E0%A6%BE%E0%A6%A4%E0%A6%BE/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F%E0%A6%83-%E0%A6%A8%E0%A6%BE%E0%A6%95%E0%A6%BF-%E0%A6%87%E0%A6%95%E0%A6%AE%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-b6d2b72cf562?source=user_profile---------3----------------\">ES6</a> সিনট্যাক্স ইউজ করে আরো সুন্দর করে ফেলতে পারবেনঃ</p>\n<pre><code>Object.keys(obj).map(country =&gt; console.log(`Capital of ${country} is: ${obj[country]}`));\n</code></pre>\n<p>আউটপুট সেইমই আসবে। কিন্তু দেখতে আরো ছোটো, সুন্দর এবং মিনিংফুল মনে হচ্ছে।</p>\n<p><strong>স্পেশাল নোটঃ</strong> আপনি যদি ডট নোটেশান ইউজ করেন এভাবে <code>obj.country</code> তাহলে আপনার প্রোগ্রাম <code>obj</code> এর ভিতরে <code>country</code> নামে প্রপার্টি খুঁজবে। কিন্তু আপনার <code>obj</code> এর ভিতরে কিন্তু <code>country</code> নামে কোনো প্রপার্টি নাই বা আপনি <code>country</code> নামেও কিছু চাচ্ছেন না। আপনি আসলে আর্গুমেন্ট এ প্রত্যেকটা কী <code>country</code> থেকে পাচ্ছেন। ঠিক <code>country</code> না, বরং প্রথম লুপে Bangladesh, দ্বিতীয় লুপে India এভাবে <code>country</code> এর ভ্যালু চ্যাঞ্জ হচ্ছে। এই জন্যে ডট নোটেশান কাজ করবে না। আপনাকে অবশ্যই ব্র্যাকেট নোটেশানই কাজ করতে হবে।</p>\n<p>আজকে এইটুকুই। আশা করি অন্যদিন আরো অন্যকোনো টপিক নিয়ে লিখবো। সেমিস্টার ফাইনালের কারণে লেখা একটু আস্তে আস্তে আগাচ্ছে। তবে আরো অনেক কিছু নিয়ে লিখার প্ল্যান আছে। আমি যা জানি সবই শেয়ার করবো আস্তে আস্তে। সে পর্যন্ত আমার জন্য দোয়া করবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-27T16:38:23.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন","thumb_img_path":"/images/dailyjs.gif","content":"<p>আমরা জাভাস্ক্রিপ্ট এ কখনো কোনো অবজেক্ট থেকে কোনো প্রপার্টি অ্যাক্সেস করতে গেলে দুই উপারে সেটা করতে পারিঃ</p>\n<ul>\n<li>ডট নোটেশান (Dot Notation)</li>\n<li>ব্র্যাকেটস নোটেশান (Brackets Notation)</li>\n</ul>\n<p>প্রথমেই আমরা একটা উদাহরণ দেখে নেই, তাহলে আসলে এদেরকে আমরা ঠিক কোথায় ইউজ করি সেটা বুঝে আসবে। ধরি আমাদের একটা অবজেক্ট আছেঃ</p>\n<pre><code>const obj = {\n   property: 'value'\n}\n</code></pre>\n<p>এখন এই অবজেক্ট থেকে যদি আমরা <code>property</code> টা অ্যাক্সেস করতে চাই, ডট নোটেশন ইউজ করলেঃ</p>\n<pre><code>obj.property\n</code></pre>\n<p>আর যদি ব্র্যাকেটস নোটেশন ইউজ করিঃ</p>\n<pre><code>obj['property']\n</code></pre>\n<p>তাহলে এদেরকে এখন দুইভাবেই অ্যাক্সেস করে প্রিন্ট করলেঃ</p>\n<pre><code>console.log(obj.property);\nconsole.log(obj['property']);\n</code></pre>\n<p>দুইটা সেইমভাবেই আউটপুট দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_kkgeIwjofsJ6GeI74ZsNg.png\" alt=\"\" /></p>\n<p>তো এখন দুইটা যদি একই আউটপুট দেয়, তাহলে এই দুইটার দরকারটা কি? যেকোনো একটা রাখলেই তো হয়, নাকি?</p>\n<p>কিন্তু না! কারণ এখানে ডট নোটেশন বেশীরভাগ সময়েই ব্যবহার করা হলেও কোনো কোনো পরিস্থিতিতে ব্র্যাকেটস নোটেশনও কাজে লাগে। আজকে আমি আমার লেখায় ঠিক সেটাই দেখাবো। কখন ডট নোটেশন আর কখন ব্র্যাকেটস নোটেশন ইউজ করবো আমরা। তবে একটা কথা, যেখানে ব্র্যাকেটস নোটেশনে কাজ হয়ে যায় সেখানে ব্যাকেটস নোটেশনই ইউজ করা কনভেনশন(ডেভেলপারদের মধ্যে প্রিয়)।</p>\n<h4 id=\"dotnotation\">ডট নোটেশন(Dot Notation):</h4>\n<p>ধরি আমাদের একটা অবজেক্ট আছেঃ</p>\n<pre><code>const person = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student'\n}\n</code></pre>\n<p>এখন যদি আমরা এই <code>person</code> অবজেক্ট থেকে <code>name</code> প্রপার্টিটা চাই তাহলে আমাদের ডট নোটশন ইউজ করে এভাবে এটাকে বের করতে হবেঃ</p>\n<pre><code>person.name\n</code></pre>\n<p>এখন এখানে <code>person</code> হচ্ছে আমাদের অবজেক্টটা, তারপর একটা ডট <code>.</code> মানে এর ভিতরে , তারপরে <code>name</code> হচ্ছে প্রপার্টির নাম। মোট কথা আমরা <code>person</code> অবজেক্ট এর ভিতরে <code>name</code> নামে একটা প্রপার্টি অ্যাক্সেস করতে চাচ্ছি। আর তাই এটা প্রিন্ট করলেঃ</p>\n<pre><code>console.log(person.name);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*UiL8DEvhaIKNTqPlxpd-Gg.png\" alt=\"\" /></p>\n<p>দেখবেন আপনার <code>person</code> অবজেক্ট এর <code>name</code> প্রপার্টির ভ্যালুটা বের হয়ে আসবে। এখানে ভ্যালুটা হচ্ছে <code>Zonayed Ahmed</code> । এখন ধরুন আপনাকে আপনার কোডের সরাসরি প্রপার্টির নাম দেওয়ার সুযোগ দেওয়া হলো না। বরং আপনার প্রপার্টির নাম একটা ভ্যারিয়েবলের ভিতরে আছে এরকমঃ</p>\n<pre><code>const personName = 'name';\n</code></pre>\n<p>এখন আপনি এই ভ্যারিয়েবল ইউজ করে আপনার <code>person</code> অবজেক্ট থেকে <code>name</code> প্রপার্টিটা বের করতে হবে। সোজাই তো ঠিক না? এরকম করলেই তো হবেঃ</p>\n<pre><code>person.personName\n</code></pre>\n<p>আচ্ছা দেখি তাহলে প্রিন্ট করেঃ</p>\n<pre><code>console.log(person.personName);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*MpfcoxVjDENl5EjTmXxzmg.png\" alt=\"\" /></p>\n<p>রেজাল্ট <code>undefined</code> দেখাচ্ছে! কিন্তু কেনো? হ্যাঁ এখানেই বুঝার ব্যাপার। আমরা যখন বলেছি আমরা <code>person</code> অবজেক্ট থেকে একটা প্রপার্টি অ্যাক্সেস করতে চাচ্ছি, তখন সেই প্রপার্টির নাম দিয়েছি <code>personName</code> । যদিও আমাদের এই সেইম নামেই একটা ভ্যারিয়েবল আছে। কিন্তু এখানে ডট দেওয়ার জাভাস্ক্রিপ্ট আপনার <code>person</code> অবজেক্ট এর ভিতর থেকে <code>personName</code> নামেই একটা প্রপার্টি খুঁজবে। কিন্তু আপনার অবজেক্ট এর ভিতরে তো এই নামে কোনো প্রপার্টিই নাই। আর তাই এটা <code>undefined</code> দেখাচ্ছে।</p>\n<p>কিন্তু তাইলে আমরা যে <code>personName</code> নামে একটা ভ্যারিয়েবল নিলাম, আর সেই ভ্যারিয়েবলে প্রপার্টির নাম <code>name</code> স্টোর করলাম, এখন <code>personName</code> দিয়ে <code>person</code> থেকে <code>name</code> প্রপার্টি কিভাবে অ্যাক্সেস করবো? হ্যাঁ সেজন্যেই আমাদের এখন ব্র্যাকেটস নোটেশনের কাজ লাগবে।</p>\n<h4 id=\"bracketsnotation\">ব্র্যাকেটস নোটেশন(Brackets Notation):</h4>\n<p>উপরের এরকম সিচুয়েশনে এখন আমরা একটা ভ্যারিয়েবল থেকে প্রপার্টির নাম নিয়ে যদি কোনো অবজেক্ট থেকে কোনো প্রপার্টি অ্যাক্সেস করতে চাই, তাহলে আমাদের এই ব্র্যাকেটস নোটেশনের সাহায্য নিতে হবেঃ</p>\n<pre><code>person[personName]\n</code></pre>\n<p>এখন এটাকে প্রিন্ট করলেঃ</p>\n<pre><code>console.log(person[personName]);\n</code></pre>\n<p>এটা একদম ঠিক আমরা যেভাবে চেয়েছি সেভাবেই প্রিন্ট করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*bA1BAsLAoEhtzSXofZrrnA.png\" alt=\"\" /></p>\n<p>এখানেই আমাদের এই ব্র্যাকেটস নোটেশনের খেলা। ব্র্যাকেটস নোটেশনে এভাবে আপনি ভ্যারিয়েবল পাস করতে পারবেন। মূলত এখানে আপনি স্ট্রিং পাস করতে পারবেন। উপরের কাজটা এভাবেও করা যেতো ডট নোটেশনের বদলেঃ</p>\n<pre><code>console.log(person['name']);\n</code></pre>\n<p>এটাও একইরকম আউটপুট দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*MyCq5N_CZBjKin9glgiU2w.png\" alt=\"\" /></p>\n<p>যদিও এই সিচুয়েশনে ডট নোটেশনেই কাজ করে, তাই ডট নোটেশনই ইউজ করা উচিত। কারণ ডট নোটেশন দেখতেও সুন্দর, আর কোডও অনেকটা পরিষ্কার দেখা যায়।</p>\n<p>এখন ব্র্যাকেটস নোটেশনের আরো কিছু কাজ দেখি। ধরি আমাদের আরেকটা অবজেক্ট আছেঃ</p>\n<pre><code>const anyObj = {\n   Student: 'A property name to match with previous one'\n}\n</code></pre>\n<p>এখানে <code>anyObj</code> এর প্রপার্টির নামটা ঠিক এভাবে দিয়েছি কারণ আগের আমাদের <code>person</code> অবজেক্ট এ একটা প্রপার্টির ভ্যালু <code>Student</code> আমরা ঐ ভ্যালুটা ইউজ করে এখানের এই <code>Student</code> প্রপার্টিটাকে অ্যাক্সেস করতে পারি কিনা দেখিঃ</p>\n<pre><code>anyObj[person.job]\n</code></pre>\n<p>এখানে আমরা <code>anyObj</code> থেকে ব্র্যাকেটস নোটেশন ইউজ করে একটা প্রপার্টি অ্যাক্সেস করতে চাচ্ছি। এখন সেই প্রপার্টিটা কি? সেটা হচ্ছে <code>person.job</code> । এখন তাহলে দেখতে হবে <code>person.job</code> এর ভ্যালু কি। <code>person.job</code> এর ভ্যালু হচ্ছে <code>Student</code> । তার মানে আমরা আসলে <code>anyObj</code> এর <code>Student</code> নামে কোনো প্রপার্টির ভ্যালু খুঁজছিঃ</p>\n<pre><code>console.log(anyObj[person.job]);\n</code></pre>\n<p>এবং ঠিক যেভাবে বলা সেভাবেই কাজঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*lS3W0Fh6p0oyFSsH87hzdA.png\" alt=\"\" /></p>\n<p>এখন ডট নোটেশনের কাজ তো জানলামই। বরং আমরা বেশীরভাবে ক্ষেত্রেই ডট নোটেশন নিয়েই কাজ করবো। কিন্তু ব্র্যাকেটস নোটেশন কখন ইউজ করবো? হ্যাঁ এখন <code>for</code> লুপ ইউজ করে অবজেক্ট থেকে যদি সব প্রপার্টির ভ্যালু অ্যাক্সেস করতে চাই তাহলে এই ব্র্যাকেটস নোটেশন কাজে লাগে। ধরি আমরা উপরের <code>person</code> অবজেক্ট এর সবগুলো প্রপার্টির ভ্যালুগুলো প্রিন্ট করতে চাচ্ছিঃ</p>\n<pre><code>for(aVal in person) {\n   console.log(`aVal is here: ${aVal}`);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*m2y3C_oCR3a_PMCzasgq_g.png\" alt=\"\" /></p>\n<p>দেখেন এই লুপ ইউজ করে আমরা প্রপার্টি কী গুলোর নাম পাচ্ছি। কিন্তু তাহলে ভ্যালুগুলো কিভাবে পেতে পারি? হ্যাঁ এই কীগুলোর নামই ব্র্যাকেটস নোটেশন ইউজ করে ভ্যালুগুলোও পেতে পারি এভাবেঃ</p>\n<pre><code>for(aVal in person) {\n   console.log(`Value: ${person[aVal]}`);\n}\n</code></pre>\n<p>একদম পার্ফেক্টঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Uwbj00YX9CL3apYMdLdV-Q.png\" alt=\"\" /></p>\n<p>এটা যদি আমরা ডট নোটেশন দিয়ে ট্রাই করি তাহলে কাজ করবে নাঃ</p>\n<pre><code>for(aVal in person) {\n   console.log(`Value: ${person.aVal}`);\n}\n</code></pre>\n<p>এখানে দেখবেন সেই <code>undefined</code> ই।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*IOMFndN60e4ZwZJpNFVx2w.png\" alt=\"\" /></p>\n<p>কেনো এরকম প্রিন্ট করলো সেটা হয়তো বুঝে ফেলেছেন এতোক্ষনে। আর তাই এক্ষেত্রে ডট নোটেশনের পরবর্তিতে ব্র্যাকেটস নোটেশন কাজ করবে।</p>\n<p>শুধুমাত্র <code>for</code> লুপের ক্ষেত্রেই না, আরো অনেক কাজেও এটা লাগতে পারে। তাই জেনে রাখা ভালো। আশা করি এরকম পরিস্থিতিতে পড়লে এটা আপনার কাজে আসবে।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-28T04:38:16.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট","thumb_img_path":"/images/dailyjs.gif","content":"<p>জাভাস্ক্রিপ্ট এ সম্পূর্ণ বিল্ট-ইন একটা অবজেক্ট আছে ম্যাথমেটিকস এর নিত্যদিনের যাবতীয় সমস্যাগুলো হ্যান্ডল করার জন্যে। সে অবজেক্টটি হচ্ছে <code>Math</code> অবজেক্ট। এই অবজেক্ট এর ভিতরে আমাদের নিত্যদিনের অনেক ম্যাথম্যাটিকস প্রব্লেম সল্ভ করার মতো প্রয়োজনীয় ফাংশন বা অন্য কথায় মেথড রয়েছে। এখন ম্যাথ এর কথা শুনে ভয় পাওয়ার কিছু নাই, এই মেথডগুলো খুবই কাজের এবং আমাদের নিত্যই কাজে লাগে।</p>\n<p>প্রথমে আমরা আমাদের ক্রোমের কন্সোলের মাধ্যমে দেখে নেই কি কি মেথড আছে এই <code>Math</code> অবজেক্ট এরঃ</p>\n<pre><code>console.dir(Math);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*I69rn2BPnzSRqJo45zoqvQ.png\" alt=\"\" /></p>\n<p>এখন <code>Math</code> এর বাম পাশের ত্রিভূজাকৃতির বাটনে ক্লিক করলে পুরো ম্যাথ অবজেক্টটা খুলে যাবে। এবার দেখুন এটার ভিতরে কিছু ব্যাসিক কন্সট্যান্ট আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*s_fmuiWMLuL0jKZPcykOoA.png\" alt=\"\" /></p>\n<p>এখানকার ভ্যালুগুলো একদম কন্সট্যান্ট, এগুলো তাই জাভাস্ক্রিপ্ট এর এই অবজেক্ট এ বিল্ট-ইন ভাবেই সেট করা। যেমন পাই <code>π</code> এর কথা আমরা সবাই কমবেশি জানি। এটার ভ্যালুও দেখেন এখানে আছে এবং আপনি অ্যাক্সেস করতে পারবেনঃ</p>\n<pre><code>console.log(Math.PI);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*3hjY0VEwTTpMXUZnpbBpeg.png\" alt=\"\" /></p>\n<p>বেশীরভাগ ক্ষেত্রেই এগুলো এতো কাজে লাগবে না যদিও, কিন্তু জেনে রাখা ভালো। হয়তো এমন কাজও করতে হতে পারে যেখানে এগুলো লাগতে পারে। আরো যে যে কন্সট্যান্টগুলো আছেঃ</p>\n<pre><code>+--------------+---------------------------------------+\n| প্রপার্টি        | কাজ                                  |\n+--------------+---------------------------------------+\n| Math.E       | Euler কন্সট্যান্ট এর জন্যে, ভ্যালু ২.৭১৮(প্রায়) ।\n| Math.LN2     | ২ এর ন্যাচারাল লগারিদম, ভ্যালু ০.৬৯৩(প্রায়)  |\n| Math.LN10    | ১০ এর ন্যাচারাল লগারিদম, ভ্যালু ২.৩০৩(প্রায়) |\n| Math.LOG2E   | E বেস ২ এর লগারিদম, ভ্যালু ১.৪৪৩(প্রায়)    |\n| Math.LOG10E  | E বেস ১০ এর লগারিদম, ভ্যালু ০.৪৩৪(প্রায়)   |\n| Math.PI      | পাই, ভ্যালু ৩.১৪১৫৯(প্রায়)                 |\n| Math.SQRT1_2 | ১/২ এর স্কয়ার রুট, ভ্যালু ০.৭০৭(প্রায়) |\n| Math.SQRT2   | ২ এর স্কয়ার রুট, ভ্যালু ১.৪১৪(প্রায়) | \n+-----------+------------------------------------------+\n</code></pre>\n<p>তারপর আরেকটু নিচে দেখবেন অনেকগুলো মেথডও আছে। এখানেই আসল খেলা। এই মেথডগুলো দিয়ে আপনি অনেক কাজ করতে পারবেন।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*p8EZHDw8J1RZmFAqr01LNg.png\" alt=\"\" /></p>\n<p>মেথডগুলোর ক্ষেত্রেও সেইম কথা, সবগুলোই ঠিক প্রতিদিন কাজে লাগবে এমন না। তবে কিছু আছে যেগুলো খুব বেশীই কাজে লাগে। আমি সেগুলো নিয়েই লিখবো আর বাকীগুলো কোনটা কি করে সেটা বলে দিবো।</p>\n<p>যেমন এখানে একটা মেথড আছে <code>pow()</code> নামে। এটার কাজ হচ্ছে কোনো সংখ্যার পাওয়ার বের করা। এখন এই মেথডটা দুইটা আর্গুমেন্ট নেয়। প্রথমটা হচ্ছে কোন সংখ্যাটার পাওয়ার বের করতে চাচ্ছেন সেটা, আর দ্বিতীয়টায় কত পাওয়ার দিতে চাচ্ছেন সেটা। যেমন আমি ১০ স্কয়ার বের করতে চাইঃ</p>\n<pre><code>Math.pow(10, 2);\n</code></pre>\n<p>এখানে ১০ হচ্ছে সংখ্যাটা আর ২ হচ্ছে আমরা ১০ এর স্কয়ার চাচ্ছি তাই। এখন এটা প্রিন্ট করলে পাবেনঃ</p>\n<pre><code>console.log(Math.pow(10, 2));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*nARuH2pDekFAhmPRBF3Flw.png\" alt=\"\" /></p>\n<p>এরকমভাবে বাকী সবগুলো মেথডই কাজ করে। তবে কিছু মেথড আছে যেগুলো অনেক বেশী কাজে লাগে। আমি নিচে সেগুলো নিয়ে লিখবো।</p>\n<p><strong><code>Math.floor()</code>:</strong> এই মেথডের কাজ হচ্ছে দশমিক সংখ্যাকে ইন্টিজার সংখ্যায় নিয়ে যাওয়া। যেমন ধরি আমাদের একটা সংখ্যা আছে <code>১০.১০</code> এরকম। এখন এই মেথড সেই সংখ্যাকে দশমিক বাদ দিয়ে ইন্টিজার নাম্বারে নিয়ে যাবে। এক্ষেত্রে <code>১০.১০</code> হবে <code>১০</code></p>\n<pre><code>console.log(Math.floor(10.10));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*6TqREzHOh0vJgMB7RNnacw.png\" alt=\"\" /></p>\n<p>যদি এই সংখ্যাটা <code>১০.১০</code> না হয়ে <code>১০.৯৯</code>হতো তাহলে <code>Math.floor()</code> ইউজ করলে সেটার রেজাল্ট কি হতো? হ্যাঁ এটা পুরো <code>.৯৯</code> ই বাদ দিয়ে দিবে। আর ফলাফল হবে শুধুমাত্র <code>১০</code></p>\n<pre><code>console.log(Math.floor(10.99));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*q5IM3XFaRuJPJP-PqXENeg.png\" alt=\"\" /></p>\n<p><strong><code>Math.max()</code> এবং <code>Math.min()</code>:</strong> নামটা দেখেই হয়তো ভেবে ফেলেছেন এগুলোর কাজ কি হতে পারে। কিন্তু তাও আমি দেখাবো, কারণ এরা আসলে একটু অন্যরকমভাবেই কাজ করে। দুইটা মেথডই আর্গুমেন্ট হিসেবে নাম্বার নেয়, যতগুলো ইচ্ছা ততগুলো নাম্বারই দিতে পারবেন। এরা সবগুলোর মধ্যে ম্যাক্সিমাম <code>Math.max()</code> বা মিনিমাম <code>Math.min()</code> বের করে দিবে।</p>\n<pre><code>console.log(Math.max(1, 2, 3, 4, 5, 6, 7, 8, 9, 0));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*QHALLbID9_vLEUMOw8RGcA.png\" alt=\"\" /></p>\n<pre><code>console.log(Math.min(1, 2, 3, 4, 5, 6, 7, 8, 9, 0));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Lveta_Dj-SUxR4kkYOuN3A.png\" alt=\"\" /></p>\n<p>এখন হয়তো ভাবছেন একটা অ্যারে পাস করে দিলেই মনে হয় এগুলো মিনিমান আর ম্যাস্কিমাম বের করে দিবে। ধরি আমাদের একটা অ্যারে আছেঃ</p>\n<pre><code>const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n</code></pre>\n<p>এখন এই অ্যারেটা দুইটাতেই পাস করে দেখবো আর্গুমেন্ট হিসেবেঃ</p>\n<pre><code>console.log(Math.max(numbers));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*RTv1iaTQccfJ_i-VbJIdgQ.png\" alt=\"\" /></p>\n<pre><code>console.log(Math.min(numbers));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*U6zWvLbcbQ7416XdbcgEJw.png\" alt=\"\" /></p>\n<p>কিন্তু দেখুন এখানে <code>NaN</code> আসতেছে। এর মানে হচ্ছে <strong>N</strong>ot <strong>a</strong> <strong>N</strong>umber. কিন্তু কেনো? হ্যাঁ, ভালো করে খেয়াল করুন এই দুইটা মেথড কিন্তু নাম্বারগুলো একটার পর আরেকটা আর্গুমেন্ট হিসেবে নেয়, আমরা দিয়েছি অ্যারে। আর তাই এটা বলছে নাম্বার না। এখন এটা খুব সহজেই ফিক্স করা যায় ইএস৬ এর স্প্রেড অপারেটর ইউজ করেঃ</p>\n<pre><code>console.log(Math.max(...numbers));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*lBHpWvaz1HgxFpKI2Ryixg.png\" alt=\"\" /></p>\n<pre><code>console.log(Math.min(...numbers));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*CIT7Z0_CPJ2zLWhMe4X-Qw.png\" alt=\"\" /></p>\n<p>এবার একদম যেভাবে চাচ্ছেন সেভাবেই কাজ করতেছে।</p>\n<p><strong><code>Math.random()</code>:</strong> রেন্ডম নাম্বার জেনারেট করার জন্যে। এই মেথড মূলত কোনো আর্গুমেন্ট নেয় না। তবে এটা শুধুমাত্র <code>০</code> থেকে <code>১</code> এর ভিতরে যেকোনো নাম্বার আউটপুট দেয়। মানে জাস্ট রেন্ডম নাম্বার জেনারেট করে। কিন্তু সেই নাম্বার হবে <code>০</code> থেকে শুরু করে <code>১</code> এর ভিতরেঃ</p>\n<pre><code>console.log(Math.random());\n</code></pre>\n<p>একবার রান করলেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*hxl_Cz8sOmDtiSxNlqQgmg.png\" alt=\"\" /></p>\n<p>আবার রান করালে আরেকটা পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*bYptHfVR6Bi1TQpaDyV91g.png\" alt=\"\" /></p>\n<p>এভাবেই এটা আপনাকে একেকসময় একেকটা নাম্বার দিবে <code>০</code> থেকে শুরু করে <code>১</code> ভিতরে। কিন্তু এখন যদি আমরা আরো বড় নাম্বার চাই, তাহলে একটু ট্রিক্স খাঁটাতে হবে। আপনি যত নাম্বার পর্যন্ত চাচ্ছেন তত দিয়ে পুরোটাকে গুণ করে দিলেই হবে। ধরি আমরা ১০০ এর ভিতরে রেন্ডম নাম্বার চাচ্ছিঃ</p>\n<pre><code>console.log(Math.random() * 100);\n</code></pre>\n<p>এখন ০ থেকে ১০০ এর ভিতরে রেন্ডম নাম্বার পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*r__DRlSmCGM8jQN4AGmnWQ.png\" alt=\"\" /></p>\n<p>এখন এই মেথডটা খেলার জন্যে মনে হলেও এটা ঠিক যেমন গেইমস বানাতে কাজে লাগে, তেমনি আপনার অ্যাপ্লিকেশনে এমন কোনো ফিচার থাকলে যেটা আপনার ইউজারের জন্যে অটোমেটিক কিছু একটা সাজেস্ট করে দিবে কোনো তথ্য ছাড়াই, তাহলে এই মেথডটা অনেক কাজে লাগে। এটার সাথে আরো কিছু মেথড ইউজ করে ইন্টিজার নাম্বারও আউপুট পেতে পারেন। যেমন আমরা একটু আগে <code>Math.floor()</code> এর কথা বলেছিলাম। এটা এই রেন্ডমের মেথডের সাথে ইউজ করে আমরা রেন্ডম ইন্টিজার নাম্বার পেতে পারিঃ</p>\n<pre><code>console.log(Math.floor(Math.random() * 100));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*XzkfShEI7iPtJ3SE2gld_A.png\" alt=\"\" /></p>\n<p><strong><code>Math.round()</code>:</strong> এটার কাজও অনেকটা <code>Math.floor()</code> এর মতোই। তবে এটা একটু অন্যরকমভাবে কাজ করে। এটা যদিও ইন্টিজার নাম্বারেই নিয়ে যায়। কিন্তু এটা দশমিক নাম্বারটাকে ফেলে দেয় না, বরং কাছের ইন্টিজার নাম্বারে নিয়ে যায়। ম্যাথের মতোই যদি দশমিকের ভ্যালু ৫ এর কম হয় তাহলে আগের ইন্টিজার নাম্বারে নিয়ে যায়, আর যদি দশমিকের নাম্বার ৫ বা ৫ এর বেশি হয় তাহলে সেটা পরের ইন্টিজার নাম্বারে নিয়ে যায়। যেমন আমরা ঠিক আগেরটার মতোই ১০.১০ কে ইন্টিজার নাম্বারে যদি নিয়ে যেতে চাই এই মেথড ইউজ করেঃ</p>\n<pre><code>console.log(Math.round(10.10));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*HsqZBJ8DzqUXpmoc6YQhEw.png\" alt=\"\" /></p>\n<p>১০.৪৯ হলেঃ</p>\n<pre><code>console.log(Math.round(10.49));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*8Iu6jAri_1HiZsVm6XiMQQ.png\" alt=\"\" /></p>\n<p>কিন্তু ১০.৫০ হলেঃ</p>\n<pre><code>console.log(Math.round(10.50));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*K6pwgWwCYP-GFiaG1MgTnQ.png\" alt=\"\" /></p>\n<p>৫ বা এর বেশি হলেই পরের নাম্বারেঃ</p>\n<pre><code>console.log(Math.round(10.99));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Dcm_i_wVhPcseBb-czDsaQ.png\" alt=\"\" /></p>\n<p>এখন এই মেথড নাকি ঐটা ব্যবহার করবেন সেটা আপনি যে সমস্যা সমাধান করবেন সেটার উপর ডিপেন্ড করবে। আপনার যেটায় কাজ হবে সেটাই ইউজ করবেন। এই মেথডটাও সেইমভাবে রেন্ডম মেথডের সাথে ইউজ করা যাবেঃ</p>\n<pre><code>console.log(Math.round(Math.random() * 100));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*t939qKzuTIyaGFS_mFurdw.png\" alt=\"\" /></p>\n<p>এভাবেই একটা মেথডের ভিতরে আরেকটা ঢুকিয়ে অনেক মজার মজার কাজ করা যায় যেগুলো সত্যি বললে আমার লেখাত খেলার মতো মনে হলেও বাস্তবে অনেক কাজে লাগে।</p>\n<p>আর বাকী যে মেথডগুলো আছে সেগুলোও আপনার কাজে আসতে পারে।</p>\n<pre><code>+----------------+-------------------------------------------------+\n| মেথড          | কাজ                                            |\n+----------------+-------------------------------------------------+\n| Math.abs(x)    | একটা সংখ্যার absolute ভ্যালু রিটার্ণ করে               ।\n| Math.acos(x)   | একটা সংখ্যার arccosine ভ্যালু রিটার্ণ করে              |\n| Math.acosh(x)  | একটা সংখ্যার hyperbolic arccosine ভ্যালু রিটার্ণ করে   |\n| Math.asin(x)   | একটা সংখ্যার arcsine ভ্যালু রিটার্ণ করে                |\n| Math.asinh(x)  | একটা সংখ্যার hyperbolic arcsine ভ্যালু রিটার্ণ করে     |\n| Math.atan(x)   | একটা সংখ্যার arctangent ভ্যালু রিটার্ণ করে             |\n| Math.atan2(y,x)| ... |\n| Math.atanh(x)  | একটা সংখ্যার hyperbolic arctangent রিটার্ণ করে | \n| Math.cbrt(x) | একটা সংখ্যার কিউব রুট রিটার্ণ করে | | Math.ceil(x) | ইন্টিজার নাম্বার রিটার্ন করে(আর্গুমেন্ট এর সমান বা বড় সংখ্যা)। | Math.clz32(x) | ৩২-বিট বাইনারী সংখ্যা রিটার্ণ করে | | Math.cos(x) | একটা সংখ্যার cosine রিটার্ণ করে | | Math.cosh(x) | একটা সংখ্যার hyperbolic cosine রিটার্ণ করে | | Math.exp(x) | Euler's E^x রিটার্ণ করে, যেখানে x হচ্ছে আর্গুমেন্ট | | Math.expm1(x) | exp(x) থেকে ১ বাদ দিয়ে রিটার্ণ করে | | Math.floor(x) | দশমিক বাদ দিয়ে ইন্টিজার নাম্বার রিটার্ণ করে | | Math.fround(x) | ফ্লোটিং সংখ্যা রিটার্ণ করে | | Math.hypot(...)| ... | | Math.imul(x,y) | দুই আর্গুমেন্ট গুণ করে সেটা রিটার্ণ করে | | Math.log(x) | একটা সংখ্যার ন্যাচারাল লগারিদম রিটার্ণ করে | | Math.log1p(x) | একটা সংখ্যার 1 + x(ln) ন্যাচারাল লগারিদম রিটার্ণ করে | | Math.log2(x) | একটা সংখ্যার বেস ২ এর লগারিদম রিটার্ণ করে | | Math.log10(x) | একটা সংখ্যার বেস ১০ এর লগারিদম রিটার্ণ করে | | Math.max(...) | সবগুলো আর্গুমেন্ট থেকে বড় সংখ্যাটা রিটার্ণ করে | | Math.min(...) | সবগুলো আর্গুমেন্ট থেকে ছোটো সংখ্যাটা রিটার্ণ করে | | Math.pow(x,y) | x টু দি পাওয়ার y এর ভ্যালু রিটার্ণ করে | | Math.random() | ০ থেকে ১ এর ভিতরে রেন্ডম নাম্বার রিটার্ণ করে | | Math.round(x) | একটা দশমিক নাম্বারের কাছের ভ্যালু রিটার্ণ করে | | Math.sign(x) | একটা সংখ্যার sign রিটার্ণ করে | | Math.sin(x) | একটা সংখ্যার sine ভ্যালু রিটার্ণ করে | | Math.sinh(x) | একটা সংখ্যার hyperbolic sine ভ্যালু রিটার্ণ করে | | Math.sqrt(x) | একটা সংখ্যার (পজিটিভ) স্কয়ার রুট রিটার্ণ করে | | Math.tan(x) | একটা সংখ্যার tangent ভ্যালু রিটার্ণ করে | | Math.tanh(x) | একটা সংখ্যার hyperbolic tangent ভ্যালু রিটার্ণ করে | | Math.trunc(x) | দশমিক অংশ বাদ দিয়ে ইন্টিজার সংখ্যা রিটার্ণ করে | +----------------+-------------------------------------------------+\n</code></pre>\n<p>এই মেথডগুলো নিয়ে নিজে প্র্যাক্টিস করলে এদের সম্পর্কে আরো জানতে পারবেন।</p>\n<p>তবে আমি শেষ করার আগে মজার একটা জিনিস দেখাই, আপনি চাইলে জাভাস্ক্রিপ্ট এ সিম্পল এক লাইনের কোডের মিডিয়ামের মতো একটা লেখা পড়তে কতো মিনিট লাগতে পারে সেটা ক্যালকুলেট করতে পারবেন। ধরি আমাদের এরকম একটা লেখা আছেঃ</p>\n<pre><code>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet comes from a line in section 1.10.32Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet comes from a line in section 1.10.32Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet comes from a line in section 1.10.32Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC.\n</code></pre>\n<p>এখন এই লেখার উপর কাজ করতে হলে এটাকে আগে একটা ভ্যারিয়েবলে নিয়ে যেতে হবেঃ</p>\n<pre><code>const text = 'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet comes from a line in section 1.10.32Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet comes from a line in section 1.10.32Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, Lorem ipsum dolor sit amet comes from a line in section 1.10.32Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC.'\n</code></pre>\n<p>এখন আমরা আমাদের সেই কোড লিখবো যেটা একলাইনেই ম্যাজিক্যালি এই লেখা পড়তে কতক্ষন লাগতে পারে সেটা বলে দিতে পারেঃ</p>\n<pre><code>const readingTime = Math.ceil(text.split(/\\s/g).length / 200);\n</code></pre>\n<p>ব্যাস এইটুকুই কোড রিডিং টাইম বের করার জন্যে। এখন আরেকটু সাজিয়ে লিখিঃ</p>\n<pre><code>console.log(`${readingTime} Min Read`);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*W2QzkfBkFm1061GAxLkHFg.png\" alt=\"\" /></p>\n<p>ব্যাস হয়ে গেলো… এখানে <code>Math</code> এর একটা মেথড ইউজ করা হলেও আরো অনেককিছু আছে যেগুলো হয়তো বুঝতে পারবেন না। তবে জাস্ট দেখানোর জন্যে এরকম এই মেথডগুলো কতটুকু পাওয়ারফুল হতে পারে। আজকে এই পর্যন্তই।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-28T16:38:09.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট","thumb_img_path":"/images/dailyjs.gif","content":"<p>আমাদের ওয়েব অ্যাপ্লিকেশনে, ওয়েবসাইটে বা ওয়েব সার্ভারে সময় নিয়ে অনেক কাজ করতে হতে পারে। আর তাই জাভাস্ক্রিপ্ট এ বিল্ট-ইনভাবেই এর জন্যে একটা অবজেক্ট আছে। সেটা হচ্ছে <code>Date</code> অবজেক্ট। সময় নিয়ে বিভিন্নভাবে কাজ করার জন্যে এই অবজেক্ট এর বেশকিছু মেথডও আছে। আর এগুলো খুবই কাজের, কারণ আমাদের আলাদা করে সময় নিয়ে খুব বেশী ভাবতে হয় না যেহেতু জাভাস্ক্রিপ্ট এ বিল্ট-ইনভাবেই এরা আছে।</p>\n<p>বাই ডিফল্ট এই <code>Date</code> অবজেক্ট আপনি আপনার যে ইনভারোমেন্টে অ্যাপ্লিকেশন চালাচ্ছেন সেটা অনুযায়ীই সময়ের হিসাব করবে। এখন এই <code>Date</code> অবজেক্ট একটু অন্যরকমভাবে কাজ করে অন্যান্য গ্লোবাল অবজেক্ট এর সাথে তুলনা করলে। <code>Date</code> অবজেক্ট একমাত্র ইউজ করা যায় <code>Date</code> নামে একটা কন্সট্রাকটর ফাংশনকে কল করার মাধ্যমে।</p>\n<p>এখন এই ডেট কন্সট্রাকটর ফাংশনের নিজস্ব কিছু মেথড আছেঃ</p>\n<pre><code>console.dir(Date);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*kr-BYd-yg0TIuWYLvXtdTA.png\" alt=\"\" /></p>\n<p>এটা একটা কন্সট্রাকটর ফাংশন, বাম পাশে ত্রিভুজাকৃতির বাটনটায় ক্লিক করলে এটা খুলে যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*rl5xwu7HQPNj59ydp23y6A.png\" alt=\"\" /></p>\n<p>এখানে কিছু মেথড দেখতে পাবেন যেগুলো এই <code>Date</code> দিয়ে সরাসরি অ্যাক্সেস করতে পারবেন।</p>\n<ul>\n<li><p><code>Date.now()</code>: বর্তমান সময় মিলিসেকেন্ডে রিটার্ণ করবেঃ</p>\n<p>console.log(Date.now());</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*G01QDKtZ8mnTz0OIrjMWww.png\" alt=\"\" /></p>\n<p>এই মিলিসেকেন্ড হিসেব করা হয় ১৯৭০ সালের পহেলা জানুয়ারী থেকে আজকে আপনার এই কোড রান করার সময় পর্যন্ত কতো মিলিসেকেন্ড হয়েছে সেটার উপর ভিত্তি করে। পরে আরো মেথড ইউজ করে এই মিলিসেকেন্ড থেকেও ইউজফুল কাজে লাগানোর মতো সময় বের করতে পারবেন যেগুলো নিয়ে পরে বিস্তারিত লেখা হয়েছে।</p>\n<ul>\n<li><p><code>Date.parse()</code>: এটার সাহায্যে একটা ডেটের স্ট্রিং কে নরমাল ডেট অবজেক্ট এ নিয়ে যেতে পারবেন। এটাও মিলিসেকেন্ড আকারেই দেখাবে। আগের মতোই ১৯৭০ সালের পহেলা জানুয়ারী থেকে আপনার দেওয়া ডেট পর্যন্ত কত মিলিসেকেন্ড হয়েছে সেটাই রিটার্ণ করবে। এখন এই ডেটের স্ট্রিং এরও ফরম্যাট আছে। ফরম্যাট ঠিক না হলে <code>NaN</code>(<strong>N</strong>ot <strong>a</strong> <strong>N</strong>umber) রিটার্ণ পাবেন। তবে আপনাকে এটা লিখতে হবে না, আপনি এই স্ট্রিংও বের করতে পারবেন। এটা নিয়ে পরে বিস্তারিত লেখা হয়েছে। যেমন আমরা যদি ১৯৭০ সালের পহেলা জানুয়ারীর ডেট স্ট্রিং টাই পাস করি এই মেথডেঃ</p>\n<p>console.log(Date.parse('01 Jan 1970 00:00:00 GMT'));</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*eIjPQCqtq2RElUaFU2LUiQ.png\" alt=\"\" /></p>\n<p><code>0</code> দেখাচ্ছে, কারণ এটা গণনা শুরুই করে এই সময় থেকে। এখন ডেট চেঞ্জ করে দিলেঃ</p>\n<pre><code>console.log(Date.parse('10 Oct 1996 21:29:00 GMT'));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*h8wZeLsiUsg2YcpSBlKO_w.png\" alt=\"\" /></p>\n<ul>\n<li><code>Date.UTC()</code>: এটাও মিলিসেকেন্ড রিটার্ণ করে। সেক্ষেত্রে এটা বছর, মাস, দিন, ঘন্টা, মিনিট, সেকেন্ড পৃথক পৃথক আর্গুমেন্ট হিসেবে নেয় আর সেটার উপর ভিত্তি করে ১৯৭০ সাল থেকে উক্ত সময় পর্যন্ত মিলিসেকেন্ড রিটার্ণ করে।</li>\n</ul>\n<p>আর যে প্রোটোটাইপ মেথড দেখবেন সেগুলো এই ফাংশন কন্সট্রাকটর দিয়ে কোনো অবজেক্ট তৈরী করলে সেই অবজেক্ট দিয়ে অ্যাক্সেস করতে পারবেন।</p>\n<p>এখন এই <code>Date()</code> কন্সট্রাকটর ফাংশনটা থেকেও সরাসরি আউটপুট পাওয়া যায়ঃ</p>\n<pre><code>const date = Date();\n</code></pre>\n<p>এভাবে <code>Date()</code> কন্সট্রাকটর ফাংশনকে কল করলে এটা বর্তমান সময়টাকে একটা স্ট্রিং আকারে রিটার্ণ করেঃ</p>\n<pre><code>console.log(date);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*wTVRbXOvrNLgLXcDRDxexQ.png\" alt=\"\" /></p>\n<p>এখন এটার টাইপ দেখলে দেখবেন এটা নিতান্তই একটা স্ট্রিংঃ</p>\n<pre><code>typeof date\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*tZLr1xEK9U3t3eyoY98M1Q.png\" alt=\"\" /></p>\n<p>এখন স্ট্রিং হলে স্ট্রিং এর মেথডগুলোর অ্যাক্সেসই পাবেন, ডেট অবজেক্ট এর যে বিল্ট-ইন মেথডগুলো আছে সেগুলোর অ্যাক্সেস পাবেন না। তাছাড়া আমরা জানি কোনো কন্সট্রাকটর থেকে অবজেক্ট বানাতে হলে <code>new</code> কীওয়ার্ড লাগবে। আর তাই <code>Date()</code> কন্সট্রাকটর ফাংশনটাকে <code>new</code> কীওয়ার্ড দিয়ে কল করতে হয়। তাহলে আমরা আসলে ডেট অবজেক্ট পাবো এবং একই সাথে সেই কন্সট্রাকটরের প্রোটোটাইপের মেথডগুলো অ্যাক্সেস করতে পারবো।</p>\n<p>এখন এখানেও এই কন্সট্রাকটর ফাংশনকে কয়েকভাবে কল করা যায়ঃ</p>\n<ul>\n<li><p>কোনো আর্গুমেন্ট ছাড়া, যেমনঃ<code>new Date()</code> । এটা ঠিক বর্তমান সময়টাই দেখাবেঃ</p>\n<p>console.log(new Date());</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*hWuEh-6gZNQmd1qs6WYnGA.png\" alt=\"\" /></p>\n<ul>\n<li><p>অন্য কোনো সময়ের বছর, মাস, দিন, ঘন্টা, মিনিট, সেকেন্ড, মিলিসেকেন্ড আর্গুমেন্ট হিসেবে দিয়ে, যেমনঃ <code>new Date(year, month, day, hours, minutes, seconds, milliseconds)</code> । তবে এখানে <code>year</code> আর <code>month</code> ছাড়া বাকী সবগুলো অপশনাল। <code>year</code> সরাসরি বসরের নাম্বারটা নিবে, যেমন <code>2018</code> । মাস ইন্ডেক্স নাম্বার নিবে <code>0</code> থেকে <code>11</code> এর মধ্যে, এখানে (<code>0</code>-জানুয়ারী থেকে শুরু করে <code>11</code>-ডিসেম্বর পর্যন্ত)। এটা যদি আগের বা ভবিষ্যৎ এর কোনো সময়ের ডেট অবজেক্ট তৈরী করতে চান তাহলে এভাবে সবকিছু বলে দিতে হবে। যেমন ধরেন আমরা <code>1996</code> সালের অক্টোবর(ইন্ডেক্স নাম্বার<code>9</code>) মাসের <code>19</code> তারিখ দিয়ে একটা ডেট অবজেক্ট বানাতে চাচ্ছিঃ</p>\n<p>console.log(new Date(1996, 9, 19));</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*GoNiQZiCCXVbskAqGPtHBg.png\" alt=\"\" /></p>\n<p>মনে রাখবেন এখানে শুধুমাত্র বসর আর মাসের ইন্ডেক্স নাম্বারটাই প্রয়োজনীয়, বাকী আর্গুমেন্টগুলো অপশনাল। আপনি যেরকমভাবে ডেট অবজেক্টটা চাইবেন ঐ পরিমাণ তথ্য আর্গুমেন্ট হিসেবে পাস করবেন। এখানে আমি শুধুমাত্র দিন, মাস আর বসর দেওয়ায় সেটা ঠিক সেই দিনের, সেই মাসের এবং সেই তারিখের সময়টাই রিটার্ণ করেছে। আর বাকীগুলো বাই ডিফল্ট ভ্যালু, যেমন এখানে সময় হচ্ছে <code>00:00:00</code> , মানে দিনের একদম দিনের শুরুতে যেহেতু আমি ঘন্টা, মিনিট, সেকেন্ড বলে দেইনি। তাই এটা একদম শুরু থেকে বাই ডিফল্টভাবে ধরে নেয়। আবার আপনি যদি মাসের ইন্ডেক্স নাম্বার বেশী দেন, মানে ১১ এরও বেশী। বা আপনি যদি দিনের নাম্বারটাও বেশী দেন, তাহলে জাভাস্ক্রিপ্ট ঠিকঠাক ক্যালকুলেট করে তারিখটা বের করে দেখাবে। যেমন মাস <code>12</code> দিলে সেটা পরের বছরের জানুয়ারী হয়ে যাবে। বা তারিখ <code>32</code> দিলে সেটা পরের মাসে চলে যাবেঃ</p>\n<pre><code>console.log(new Date(1996, 12, 32));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*mv6kxQnrCuEeonxHtf-Pbg.png\" alt=\"\" /><strong>জাভাস্ক্রিপ্ট ক্যালকুলেট করে কাঙ্খিত সময়টাই দেখাবে</strong></p>\n<ul>\n<li><p>শুধুমাত্র মিলিসেকেন্ড আর্গুমেন্ট হিসেবে পাস করে। এই ব্যাপারটা একটু অন্যরকম। এটার সিস্টেম হচ্ছে আপনি মিলিসেকেন্ড দিবেন, জাভাস্ক্রিপ্ট একটা নির্দিষ্ট সময় এর সাথে সেই মিলিসেকেন্ড যোগ করে যে সময় হবে সেটার অবজেক্ট তৈরী করবে। তবে কোন সময়ের সাথে যোগ করে জাভাস্ক্রিপ্ট এই হিসাব করবে সেটাও আগে থেকেই ডিফাইন করা জাভাস্ক্রিপ্ট এর ভিতরে। জাভাস্ক্রিপ্ট ১৯৭০ সালের পহেলা জানুয়ারী থেকে সময় গণনা শুরু করবে। তার মানে আপনি <code>o</code> মিলিসেকেন্ড দিলে ঠিক ঐদিনটাই রিটার্ণ করবেঃ</p>\n<p>console.log(new Date(0));</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ePGrphDj55PoF-nc3g79-A.png\" alt=\"\" /><strong>এটা আসলে GMT টাইম ধরে হিসাব করে, আর আমি ইন্ডিয়াতে থাকার কারণে +05ঃ30 যোগ হয়েছে।</strong></p>\n<p>এখন যদি <code>100000000000</code> মিলিসেকেন্ড দেই তাহলে এটা ১৯৭০ সালের জানুয়ারীর ১ তারিখের সাথে এই মিলিসেকেন্ড অ্যাড করে যে তারিখে যেয়ে পড়বে সে তারিখটাই রিটার্ণ করবেঃ</p>\n<pre><code>console.log(new Date(100000000000));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Zad4oxBlBiuVlLZJjBlfrw.png\" alt=\"\" /><strong>হিসেব করে ঠিক এই দিন, ঘন্টা, সেকেন্ড, মিলিসেকেন্ডটাই পাবেন</strong></p>\n<ul>\n<li><p>ডেট স্ট্রিং আর্গুমেন্ট হিসেবে পাস করে, যেমন <code>new Date(‘Tue Aug 28 2018 13:13:20 GMT+0530 (India Standard Time)')</code>। আপনি একটা ডেট স্ট্রিং থেকেও ডেট অবজেক্ট তৈরী করতে পারবেন। যেমন আমরা শুরুর দিকেই একটা ডেট স্ট্রিং তৈরী করেছিলাম। সেটাকে ডেট অবজেক্ট এ নিতে চাইলে জাস্ট এভাবে পাস করে দিলেই হবেঃ</p>\n<p>new Date(date)</p></li>\n</ul>\n<p>এখন এটার টাইপ দেখলে দেখবেন এটাও এখন ডেট অবজেক্ট হয়ে গেছেঃ</p>\n<pre><code>console.log(typeof new Date(date));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*IAKwZG7tco82lBdbGQUr2A.png\" alt=\"\" /></p>\n<p>এখন এই লেখায় আমরা বর্তমান সময় নিয়েই মানে <code>new Date()</code> নিয়েই কাজ করবো, যেহেতু মেথডগুলোর আসল কাজটা বুঝে আসলে পরে বর্তমান, অতীত বা ভবিষ্যৎ এর ডেট নিয়ে কাজ করতে আর কোনো অসুবিধা হবে না।</p>\n<p>এখন আমরা একটা বর্তমান সময় নিয়ে একটা ডেট অবজেক্ট তৈরী করিঃ</p>\n<pre><code>const dateObj = new Date();\n</code></pre>\n<p>এখন এখানে <code>dateObj</code> হচ্ছে একটা ডেট অবজেক্টঃ</p>\n<pre><code>typeof dateObj\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4v6qI7ZynWkLyf76JXFaXA.png\" alt=\"\" /></p>\n<p>এখন আমরা এটার ভিতর থেকে ডেট এর সব মেথডগুলো দেখতে পারি ক্রোমের কন্সোলের সাহায্যেঃ</p>\n<pre><code>console.dir(dateObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*GZq7S35Kjbx8Z2RhA1tEBw.png\" alt=\"\" /></p>\n<p>এখন এখানে বাম পাশের ত্রিভুজাকৃতির বাটনে ক্লিক করলে এই অবজেক্ট টা খুলে যাবে। এখন এখানে <code>__proto__</code> এর ভিতরে সবগুলো মেথড পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4wnZCVFBjOprFfKTklSoFQ.png\" alt=\"\" /></p>\n<p>এখন এই মেথডগুলো আপনি যেই ডেট অবজেক্টটা তৈরী করলেন সেটার উপর অ্যাপ্লাই হবে এবং আপনাকে সে ডেট থেকে মিনিট, ঘণ্টা, সেকেন্ড বা বিভিন্ন ফরম্যাটে সময় দেখাবে। মেথডগুলোর উদ্দেশ্য ঠিক তাই। আমি নিচে কমন কিছু মেথডের ইউসেজ দেখাবো আমাদের তৈরী করা <code>dateObj</code> এর উপর অ্যাপ্লাই করে। আপনি চাইলে যেকোনো ডেট অবজেক্ট এর উপরেই একইভাবে এই মেথডগুলো অ্যাপ্লাই করতে পারবেন।</p>\n<p>আমরা যে সময়ের উপর অবজেক্ট তৈরী করেছি সেটা থেকে প্রয়োজনীয় তারিখ, দিন, মাস, বছর, সেকেন্ড, মিলিসেকেন্ড, মিনিট, ঘন্টা বের করতে চাইলে কিছু হ্যান্ডি মেথড আছেঃ</p>\n<ul>\n<li><p><code>getDate()</code>: উক্ত সময় থেকে তারিখটা বের করতে চাইলে। তারিখ মানে আজকে কত তারিখ সেটা</p></li>\n<li><p><code>getDay()</code>: দিন বের করতে, রবিবার মানে <code>0</code>, এবং এভাবে শুরু করে সাপ্তাহের শেষ দিন শনিবার হলে রিটার্ণ পাবেন <code>6</code></p></li>\n<li><p><code>getFullYear()</code>: কোন বছর সেটা জানতে চাইলে এই মেথড ইউজ করতে পারবেন। এটা আপনাকে উক্ত সময়ের বছরটা নাম্বারে রিটার্ণ করবে।</p></li>\n<li><p><code>getHours()</code>: ঘন্টা রিটার্ণ করবে, উক্ত দিনের কোন ঘণ্টায় আপনার অবজেক্টটি রয়েছে সেই ঘন্টা</p></li>\n<li><p><code>getMilliseconds()</code>: মিলিসেকেন্ড রিটার্ণ করবে, কত ঘন্টা, মিনিট, সেকেন্ড হওয়ার পর কতো মিলিসেকেন্ড হয়েছে সেটা</p></li>\n<li><p><code>getMinutes()</code>: কত মিনিটে আছে আপনার উক্ত অবজেক্ট</p></li>\n<li><p><code>getMonth()</code>: কোন মাসে আছে আপনার অবজেক্ট</p></li>\n<li><p><code>getSeconds()</code>: সেকেন্ডটা রিটার্ণ করবে</p>\n<p>console.log(<code>getDate: ${dateObj.getDate()}</code>);\nconsole.log(<code>getDay: ${dateObj.getDay()}</code>);\nconsole.log(<code>getFullYear: ${dateObj.getFullYear()}</code>);\nconsole.log(<code>getHours: ${dateObj.getHours()}</code>);\nconsole.log(<code>getMilliseconds: ${dateObj.getMilliseconds()}</code>);\nconsole.log(<code>getMinutes: ${dateObj.getMinutes()}</code>);\nconsole.log(<code>getMonth: ${dateObj.getMonth()}</code>);\nconsole.log(<code>getSeconds: ${dateObj.getSeconds()}</code>);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EQ6vyQFyfiI1TVeF2Iqs-A.png\" alt=\"\" /></p>\n<p>আরো কিছু মেথড আছে যেগুলো আপনার ১৯৭০ সাল থেকে আপনার অবজেক্ট এর সময় পর্যন্ত কিছু ভ্যালু রিটার্ণ করবেঃ</p>\n<ul>\n<li><p><code>getTime()</code>: পুরোটা সময় ১৯৭০ সাল থেকে আপনার ডেট অবজেক্ট পর্যন্ত কতো মিলিসেকেন্ড হয়েছে সেটা রিটার্ণ করবে।</p></li>\n<li><p><code>getYear()</code>: কোনো কারণে এটা ১৯০০ সাল(<strong>১৯০০সাল থেকে কিন্তু</strong>) থেকে এখন পর্যন কয় বছর হয়েছে সেটা রিটার্ণ করবে।</p>\n<p>console.log(<code>getTime: ${dateObj.getTime()}</code>);\nconsole.log(<code>getYear: ${dateObj.getYear()}</code>);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*QrvcRZ1v3aMwHHtaCR0YUw.png\" alt=\"\" /></p>\n<p>আরো কিছু মেথড আছে যেগুলো UTC এর সাথে তুলনা করার জন্যে বা UTC টাইমের সাথে কিছু কাজ করার জন্যে ব্যবহৃত হয়। এখন UTC মানে হচ্ছে <strong>Universal Time Coordinated.</strong> এটা মূলত <strong>GMT</strong>(Greenwich Mean Time) বলে পূর্বে পরিচিত ছিলো। এটা হচ্ছে আন্তর্জাতিক সময়। আন্তর্জাতিক সময়ের সাথে আপনার সময়ের বিভিন্ন অপারেশন চালানোর জন্যেই এই মেথডগুলো ইউজ করা হয়।</p>\n<ul>\n<li><p>getTimezoneOffset(): আপনার ডেট অবজেক্ট এর সাথে UTC টাইম ডিফারেন্স দেখাবে(মিনিটে)। আপনি UTC টাইম থেকে এগিয়ে থাকলে সেটা নেগেটিভ ভ্যালু হিসেবে আসবে। আর UTC টাইম থেকে পিছিয়ে থাকলে পজিটিভ ভ্যালু আসবে। যেমন বাংলাদেশ UTC টাইম থেকে ৬ ঘন্টা এগিয়ে, আর ইন্ডিয়া সাড়ে ৫ ঘন্টা। তাই বাংলাদেশের ক্ষেত্রে <code>-360</code> দেখাবে, আর ইন্ডিয়ার ক্ষেত্রে <code>-330</code> দেখাবে।</p></li>\n<li><p><code>getUTCDate()</code>: UTC টাইম অনুযায়ী শুধুমাত্র আপনার ডেট অবজেক্ট এর তারিখটা দেখাবে।</p></li>\n<li><p><code>getUTCDay()</code>: একইরকমভাবে UTC টাইম অনুযায়ী আপনার ডেট অবজেক্ট এর কি বার সেটা <code>0</code> থেকে <code>6</code> পর্যন্ত ইন্ডেক্স আকারে দেখাবে। রবিবারের জন্যে <code>0</code> আর এভাবে সাপ্তাহের শেষদিন শনিবারের জন্যে <code>6</code> দেখাবে।</p></li>\n<li><p><code>getUTCFullYear()</code>: আপনার ডেট অবজেক্ট UTC টাইম অনুযায়ী কোন বছরে আছে সেই বছর দেখাবে।</p></li>\n<li><p><code>getUTCHours()</code>: আপনার ডেট অবজেক্ট UTC টাইম অনুযায়ী কোন ঘন্টায় আছে সেটা দেখাবে।</p></li>\n<li><p><code>getUTCMilliseconds()</code>: আপনার ডেট অবজেক্ট UTC টাইম অনুযায়ী কোন মিলিসেকেন্ডে আছে সেটা দেখাবে।</p></li>\n<li><p><code>getUTCMinutes()</code>: আপনার ডেট অবজেক্ট UTC টাইম অনুযায়ী কোন মিনিটে আছে সেটা দেখাবে।</p></li>\n<li><p><code>getUTCMonth()</code>: আপনার ডেট অবজেক্ট UTC টাইম অনুযায়ী কোন মাসে আছে সেই মাসটা <code>0</code> থেকে <code>11</code> নাম্বারে ইন্ডেক্স আকারে দেখাবে। এখানে <code>0</code> মানে জানুয়ারী আর <code>11</code> মানে ডিসেম্বর।</p></li>\n<li><p><code>getUTCSeconds()</code>: আপনার ডেট অবজেক্ট UTC টাইম অনুযায়ী কোত সেকেন্ডে আছে সেটা দেখাবে।</p>\n<p>console.log(<code>getUTCDate: ${dateObj.getUTCDate()}</code>);\nconsole.log(<code>getUTCDay: ${dateObj.getUTCDay()}</code>);\nconsole.log(<code>getUTCFullYear: ${dateObj.getUTCFullYear()}</code>);\nconsole.log(<code>getUTCHours: ${dateObj.getUTCHours()}</code>);\nconsole.log(<code>getUTCMilliseconds: ${dateObj.getUTCMilliseconds()}</code>);\nconsole.log(<code>getUTCMinutes: ${dateObj.getUTCMinutes()}</code>);\nconsole.log(<code>getUTCMonth: ${dateObj.getUTCMonth()}</code>);\nconsole.log(<code>getUTCSeconds: ${dateObj.getUTCSeconds()}</code>);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*BF36Jr3XjqcL_BAmmF6hMQ.png\" alt=\"\" /></p>\n<p>এতক্ষন আমরা কিভাবে বিভিন্নরকমভাবে আমরা আমাদের ডেট অবজেক্ট থেকে ডেট বের করে আনতে পারি সেগুলো দেখলাম। ঠিক এগুলোর মতোই এখন ডেট সেট করার মেথডও আছে। আপনি এই মেথডগুলো ডেকে ডেকে আপনার ডেট অবজেক্ট এর কাঙ্খিত সময় নতুন করে সেট করতে পারবেন। এই মেথডগুলোও নরমাল আর UTC টাইমের জন্যে আলাদা আলাদা করে আছে।</p>\n<ul>\n<li><code>setDate()</code>: আপনার ডেট অবজেক্ট এর তারিখ সেট করার জন্যে</li>\n<li><code>setFullYear()</code>: আপনার ডেট অবজেক্ট এর বছর সেট করার জন্যে</li>\n<li><code>setHours()</code>: আপনার ডেট অবজেক্ট এর ঘণ্টা সেট করার জন্যে</li>\n<li><code>setMilliseconds()</code>: আপনার ডেট অবজেক্ট এর মিলিসেকেন্ড সেট করার জন্যে</li>\n<li><code>setMinutes()</code>: আপনার ডেট অবজেক্ট এর মিনিট সেট করার জন্যে</li>\n<li><code>setMonth()</code>: আপনার ডেট অবজেক্ট এর মাস সেট করার জন্যে</li>\n<li><code>setSeconds()</code>: আপনার ডেট অবজেক্ট এর সেকেন্ড সেট করার জন্যে</li>\n<li><code>setTime()</code>: আপনার ডেট অবজেক্ট এর টাইম সেট করার জন্যে</li>\n</ul>\n<p>আমি এখানে দুইটা উদাহরণ দেখাবো। যেমন আমাদের <code>dateObj</code> টা এখন এই অবস্থায় আছেঃ</p>\n<pre><code>console.log(dateObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*3qvAf9yYKknHKxvlt8i4KA.png\" alt=\"\" /></p>\n<p>আমি এখন উপরের একটা মেথড দিয়ে আমার মাসটা আগস্ট থেকে অক্টোবর করতে চাচ্ছি। আগস্টের ইন্ডেক্স নাম্বার <code>7</code> যেহেতু জিরো থেকে গণনা শুরু হয়। আর অক্টোবরের ইন্ডেক্স নাম্বার <code>9</code> তার মানে আমরা <code>setMonth()</code> ইউজ করে আর আর্গুমেন্ট হিসেবে <code>9</code> দিলেই মাস আগস্ট থেকে অক্টোবর হয়ে যাবেঃ</p>\n<pre><code>dateObj.setMonth(9);\n</code></pre>\n<p>এবার আমাদের ডেট অবজেক্ট টা আবার প্রিন্ট করে দেখি চেঞ্জ হয়েছে কিনাঃ</p>\n<pre><code>console.log(dateObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*AQy5ATg6gckaVI41PoJcZA.png\" alt=\"\" /></p>\n<p>হ্যাঁ, চেঞ্জ হয়ে গেছে যেভাবে চাচ্ছিলাম সেভাবেই। কিন্ত এখন আমরা জানি আমাদের মোট ১২ টা মাস আছে। ইন্ডেক্স হিসেবে <code>0</code> থেকে <code>11</code> পর্যন্ত। এখন যদি আমরা এখানে <code>15</code> দেই তাহলে কি হবে? জাভাস্ক্রিপ্ট এখানে অনেক স্মার্ট, ১৫ দিলে জাভাস্ক্রিপ্ট ১১ এর পরে ১২ তে পরের বছরের জানুয়ারীতে চলে যাবে। তার মানে ১৫ মানে এখানে পরের বছরের এপ্রিল মাস। দেখি তাহলে ঠিক তাই কিনাঃ</p>\n<pre><code>dateObj.setMonth(15);\n</code></pre>\n<p>এখন <code>dateObj</code> দেখলেঃ</p>\n<pre><code>console.log(dateObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ivUbQaxxSk7wuSlqsmi0pg.png\" alt=\"\" /></p>\n<p>এটা একটু বেশীই স্মার্ট! এভাবে ঘণ্টা, মিনিট, সেকেন্ড সবার ক্ষেত্রেই প্রযোজ্য হবে এই অটোম্যাটিক টাইম ক্যালকুলেট করার ব্যাপারটা।</p>\n<p>সেইমভাবে UTC টাইম সেট করার জন্যেও আলাদা আলাদা মেথড আছে। মেথডগুলো সেইম আগেরগুলোর মতোই কাজ করে। এগুলো হচ্ছেঃ <code>setUTCDate()</code>, <code>setUTCFullYear()</code>, <code>setUTCHours()</code>, <code>setUTCMilliseconds()</code>, <code>setUTCMinutes()</code>, <code>setUTCMonth()</code>, <code>setUTCSeconds()</code></p>\n<p>এগুলো ছাড়াও আরো বেশ কিছু কাজের মেথড আছেঃ</p>\n<ul>\n<li><p><code>toDateString()</code>: সুন্দর করে আপনার ডেট অবজেক্ট টাকে স্ট্রিং এ নিয়ে যাবে। এটা আসলে অনেক কাজের। যেমন আমরা আমাদের ডেট অবজেক্ট এ এটা অ্যাপ্লাই করলেঃ</p>\n<p>console.log(dateObj.toDateString());</p></li>\n</ul>\n<p>এরকম সুন্দর ফরম্যাট এ ডেট দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*FnKqiP_t6DXURIlw_LnnYA.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>toUTCString()</code>: সেইমভাবে আপনার ডেট অবজেক্ট টাকে UTC টাইমে দেখাবে</p></li>\n<li><p><code>toISOString()</code>: আপনার ডেট অবজেক্ট টাকে ISO ফরম্যাটে দেখাবে</p></li>\n<li><p><code>toJSON()</code>: স্ট্রিং আকারে দেখাবে আগের মতোই, তবে যাতে জেসন এর সাথে ইউজ করা যায় ঐরকম ফরম্যাটে দেখাবে। জেসন কি যদি জানা না থাকে তাহলে আপাতত এটুকু মনে রাখুন এটা জেসন ফরম্যাটে সময়টা দেখাবে।</p></li>\n<li><p><code>toLocaleDateString()</code>: এই মেথডটা বেশ কাজের। এবং কাজের মানে এটা বেশ কিছু আর্গুমেন্টও নেয়। এটা আপনার ডেট অবজেক্টটাকে বিভিন্ন ভাষায় ফরম্যাট করে ডেট রিটার্ণ করবে। এই মেথড প্রথম আর্গুমেন্ট হিসেবে কোন ভাষায় চান, আর দ্বিতীয় আর্গুমেন্ট এ কিছু অপশন নেয়। অপশন মানে হচ্ছে ঠিক কিভাবে আপনি আপনার ডেটটাকে ফরম্যাট করতে চাচ্ছেন। এখন এই দুইটা আর্গুমেন্টই অপশনাল। আপনি যদি খালি রাখেন তাইলে বাই ডিফল্ট ইংলিশে একটা ফরম্যাট এ আপনার ডেট রিটার্ণ করবেঃ</p>\n<p>console.log(dateObj.toLocaleDateString());</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4A_oGlJ0KGOpSWvJfVtGNw.png\" alt=\"\" /></p>\n<p>এখন যদি প্রথম আর্গুমেন্ট ইউজ করি, আমরা ল্যাঙ্গুয়েজ সেট করবো। তো অবশ্যই বাংলায় ডেট চাচ্ছি এখনঃ</p>\n<pre><code>console.log(dateObj.toLocaleDateString('bn-BD'));\n</code></pre>\n<p>দেখুন কি রিটার্ণ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iMaLPwHAiZGqIzx164zavA.png\" alt=\"\" /></p>\n<p>এখন এখানে যে ফরম্যাটে ডেট আসছে, আমরা সেটা চেঞ্জ করতে চাচ্ছি। সেটাই করা হয় দ্বিতীয় আর্গুমেন্ট দিয়ে। এখন এই আর্গুমেন্ট টা মূলত একটা অবজেক্ট হবে, আর সেই অবজেক্ট এর ভিতরে অনেক অপশন পাস করা যাবে। ধরি আমরা ডেট চাই এরকমঃ <em>২৮ এপ্রিল, ২০১৯</em>। আর তাই আমাদের এভাবে অপশন পাস করতে হবেঃ</p>\n<pre><code>console.log(dateObj.toLocaleDateString('bn-BD', {day: 'numeric', month: 'long', year: 'numeric'}));\n</code></pre>\n<p>এটা আমাদের কাঙ্খিত ফরম্যাটে ডেট দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*5Vf8Q_LYvkE57KQydARMOg.png\" alt=\"\" /></p>\n<p>আমরা যদি ঘন্টা মিনিটও দেখাতে চাই তাহলে অপশন এ সেগুলোও বলে দিতে হবেঃ</p>\n<pre><code>console.log(dateObj.toLocaleDateString('bn-BD', {day: 'numeric', month: 'long', year: 'numeric', hour: 'numeric', minute: 'numeric'}));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*01yjvXk1tmmb_Z4Plpf7PQ.png\" alt=\"\" /></p>\n<p>এরকম আরো অনেক অপশন সাপোর্ট করে এখানে। তবে ব্যাপারগুলো ঠিক এরকমি। আশা করি এটা নিয়ে যেভাবে ইচ্ছা ফরম্যাট করে কাজ করতে পারবেন।</p>\n<ul>\n<li><code>toLocaleString()</code>: এটাও অনেকটা আগের মেথডের মতোই। একই রকমভাবে আর্গুমেন্ট নেয় এবং ডেট ফরম্যাট করে দেয়।</li>\n<li><code>toLocaleTimeString()</code>: এটাও আগের দুইটার মতোই সেইম অনেকটাই… এগুলো নিয়ে বিস্তারিত লিখলে আরেকটা পোস্ট হয়ে যাবে। তাছাড়া ইউসেজ সেইমই। জাস্ট গুগুল করে অপশনগুলো দেখে নিলেই কাজ করতে পারবেন।</li>\n<li><code>toString()</code>: ডেট অবজেক্ট টাকে স্ট্রিং আকারে রিটার্ণ করবে</li>\n<li><code>toTimeString()</code>: হিউম্যান রিডেবল ফরম্যাট এ ডেট অবজেক্ট টা স্ট্রিং আকারে রিটার্ণ করবে।</li>\n<li><code>toUTCString()</code>: UTC টাইমে ডেট অবজেক্ট টাকে স্ট্রিং আকারে রিটার্ণ করবে।</li>\n<li><code>valueOf()</code>: আপনার ডেট অবজেক্টটা প্রিমিটিভ আকারে রিটার্ণ করবে। প্রিমিটিভ মানে মিলিসেকেন্ড আকারে রিটার্ণ করবে।</li>\n</ul>\n<p>এখানে কিছু কিছু মেথড একইরকম জিনিস রিটার্ণ করে বলে মনে হলেও কিছু কিছু তফাৎ আছে যেটা আপনি আপনার কাজের সুবিধা হয় এমন দেখে মেথড ইউজ করবেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-08-31T16:37:54.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&&)","thumb_img_path":"/images/dailyjs.gif","content":"<p>লজিক্যাল অপারেটর, এ সম্পর্কে আমরা পূর্বে জাভাস্ক্রিপ্ট ব্যাসিকেই জেনেছিলাম। কিন্তু আমরা আজকে তারমধ্যে দুইটা লজিক্যাল অপারেটর নিয়ে বিস্তারিত কথা বলবো। সেগুলো হচ্ছে অর <code>||</code> আর অ্যান্ড অপারেটর <code>&amp;&amp;</code> । এগুলোকে সিম্পল মনে হলেও এরা আসলে আরো অনেক জটিল জটিল কাজ করতে সক্ষম। আজকে আমরা ঠিক এদের ব্যবহার নিয়েই জানবো।</p>\n<p>তবে এগুলো নিয়ে শুরু করার আগে জাভাস্ক্রিপ্ট এ অন্য আরেকটা ব্যাপার নিয়ে কিছু কথা বলবো। জাভাস্ক্রিপ্ট এ কিছু স্পেশাল ভ্যালু ছাড়া বাকি সবকিছুই সত্য এক্সপ্রেশন বলে বিবেচিত হয়। এর মানে কি? হ্যাঁ নিচের এই উদাহরণটা দেখিঃ</p>\n<pre><code>if(true) {\n   console.log('Print it!');\n}\n</code></pre>\n<p>এখন এইটা প্রিন্ট হবে, কারণ আমাদের ভিতরের কন্ডিশন <code>true</code> দেওয়া। এখন এখানে মিথ্যা <code>false</code> দিলে প্রিন্ট হবে নাঃ</p>\n<pre><code>if(false) {\n   console.log('Print it!');\n}\n</code></pre>\n<p>সেইমভাবে আমরা এখানে সরাসরি সত্য <code>true</code> বা মিথ্যা <code>false</code> না লিখে কিছু এক্সপ্রেশন লিখি সাধারণত যেগুলো এই সত্য <code>true</code> অথবা মিথ্যা <code>false</code> রিটার্ণ করে। আর সেগুলোর উপর ভিত্তি করেই সিদ্ধান্ত নেওয়া হয়। এখন নিচের এই টাইপের এক্সপ্রেশন হলে হয়তো আমরা সহজেই বুঝতে পারি এটা সত্য <code>true</code> না মিথ্যা <code>false</code></p>\n<pre><code>10 === 10\n</code></pre>\n<p>কিন্তু এর বাইরেও যদি আমরা কোনো এক্সপ্রেশন এভাবে লিখিঃ</p>\n<pre><code>if('anything') {\n   console.log('Print it!');\n}\n</code></pre>\n<p>এটা রান করলে দেখবেন আপনার লেখা প্রিন্ট হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*5A4UUmLjo9zx5vpFzgZWkw.png\" alt=\"\" /></p>\n<p>কিন্তু কারণটা কি? হ্যাঁ সেই কারণ হচ্ছে জাভাস্ক্রিপ্ট এ এক্সপ্রেশনের ভিতরে কিছু থাকলেই সেটা সত্য। যেকোনো কিছু থাকলেই হবে শুধুমাত্র নিচের এগুলো ছাড়াঃ</p>\n<ul>\n<li><code>false</code> (বুলিয়ান <code>false</code>, নিজেই মিথ্যা)</li>\n<li><code>null</code></li>\n<li><code>NaN</code></li>\n<li><code>0</code></li>\n<li>খালি (<code>\"\"</code> , <code>''</code>অথবা ````);</li>\n<li><code>undefined</code></li>\n<li><code>!anythingTrue</code> (সত্য কোনো এক্সপ্রেশনের পূর্বে <code>!</code> দিয়েও সেটাকে মিথ্যা করা যায়)</li>\n</ul>\n<p>এগুলো যদি আপনি কোথাও ব্যবহার করেন কন্ডিশনের জন্যে, তাহলে এরা মিথ্যা <code>false</code> হিসেবে বিবেচিত হবে।</p>\n<p>এখন <code>||</code> এবং <code>&amp;&amp;</code> এই লজিক্যাল অপারেটরগুলো মূলত বুলিয়ান ভ্যালুর সাথেই ব্যবহার করা হয়। কিন্তু এদের কিছু বৈশিষ্ট্য থাকার কারণে এদের দিয়ে অনেক কাজ শর্টকাটেও করে ফেলা যায়। তাই প্রথমে এই দুই অপারেটর আসলে কি করে সেটা বাংলায় বলা যাক।</p>\n<h4 id=\"or\">|| অর (OR) অপারেটরঃ</h4>\n<p><code>||</code> বা অর দুইটা এক্সপ্রেশনের মধ্যে থাকলেঃ</p>\n<pre><code>'ক্লাসে যাও' || 'ঘুরতে যাও'\n</code></pre>\n<p>বাংলায় বললেঃ</p>\n<pre><code>'ক্লাসে যাও' অথবা 'ঘুরতে যাও'\n</code></pre>\n<p>এখন যদি এখানে আপনি ক্লাসে যাওয়া চুজ করেন, তাহলে আপনি ঘুরতে যেতে পারবেন না। মানে এখানে অপশন একটাই। হয় ক্লাসে যাবেন অথবা ঘুরতে যাবেন। এখন আবার যদি ক্লাসে না যান তাহলে আপনি ঘুরতে যেতে পারবেন। মানে আপনি পরের অপশনটা নিতে পারবেন।</p>\n<p>এখন এই টেকনিকটাই কাজে লাগিয়ে আপনি দুইটা এক্সপ্রেশন থেকে যেকোনো একটা রান করতে পারবেন। ব্যাপারটা এরকম যে প্রথম এক্সপ্রেশন সত্য <code>true</code> হলে দ্বিতীয়টা আর চলবে না। আর যদি প্রথমটা যদি মিথ্যা <code>false</code> হয় তাহলে দ্বিতীয়টা চলবে। তারপর দ্বিতীয়টা সত্য <code>true</code> না মিথ্যা সেটার উপর ভিত্তি করে ফলাফল দেখাবে। নিচের প্রোগ্রামগুলোর আউটপুট দেখেনঃ</p>\n<pre><code>console.log(true || false);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*2o4tbK0Mr_adWvjxXf7X0Q.png\" alt=\"\" /></p>\n<pre><code>console.log(false || true);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*KIizjNO59gxCgmSghustmg.png\" alt=\"\" /></p>\n<pre><code>console.log(false || false);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*md-F_OtiLP10qq4ih22dOw.png\" alt=\"\" /></p>\n<pre><code>console.log(true || true);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*NsMi8UvSvIrqErl0FcszoQ.png\" alt=\"\" /></p>\n<p>শুধুমাত্র সত্য মিথ্যা দিয়ে কি হবে? হ্যাঁ তাহলে এবার চলুন এই পাওয়ারটাকে কাজে লাগিয়ে কাজের কিছু করিঃ</p>\n<pre><code>console.log(’Go to Class' || 'Go to Visit’);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*epPTvPG5_N4j6MCZ8JChfA.png\" alt=\"\" /></p>\n<p>এখানে প্রথমেই <code>Go to Class</code> পাওয়ায় সেটা প্রিন্ট করেছে। কিন্ত কেনো? হ্যাঁ <code>Go to Class</code> মানেও এখানে সত্য <code>true</code> । আর তাই এখানে Go to Class প্রিন্ট হয়েছে। আরো ক্লিয়ার হবে এই উদাহরণ থেকেঃ</p>\n<pre><code>console.log(undefined || 'Go to Visit’);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*0mlhOnMAdXyq4Aw_YOfvvw.png\" alt=\"\" /></p>\n<p>দেখুন প্রথম ভ্যালুটা মিথ্যা হওয়ায় সেটা দ্বিতীয়টা প্রিন্ট করেছে। এটাও আসলে এই অর অপারেটরের আসল পাওয়ার।</p>\n<p>এখন এই জিনিসটা কিভাবে কাজে লাগবে আমাদের রিয়েল লাইফ প্রোজেক্টে? হ্যাঁ আমাদের অ্যাপ্লিকেশনে এমন কিছু ভ্যারিয়েবল বা ভ্যালু থাকতে পারে যেটা কোনো কোনো সময় থাকতেও পারে আবার কোনো কোনো সময় নাও থাকতে পারে। এখন আমরা এই অপারেটর দিয়ে একাধিক ভ্যারিয়েবল বা ভ্যালু ব্যবহার করতে পারি। একটা না পেলে আরেকটা ধরবে এরকম করে। ধরি ভ্যারিয়েবলের ক্ষেত্রেঃ</p>\n<pre><code>const empty = ‘’;\nconst something = 'Eat’;\nconst work = empty || something;\n</code></pre>\n<p>এখন এখানে যদি <code>work</code> প্রিন্ট করিঃ</p>\n<pre><code>console.log(work);\n</code></pre>\n<p>দেখুন কি প্রিন্ট হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*FOvQ-f6Iwbjh3k72hz8uhw.png\" alt=\"\" /></p>\n<p>এখানে প্রথম ভ্যারিয়েবল <code>empty</code> এর কোনো ভ্যালু নাই বলে বা <code>‘’</code> যা মিথ্যা হওয়ায় এটা পরেরটায় চলে গেছে। আর পরেরটায় ভ্যালু থাকায় সেটাই অ্যাসাইন করেছে। আমরা এখানে মাত্র দুইটার জন্যে করলেও আপনি চাইলে যত ইচ্ছা ততগুলো ভ্যারিয়েবলের জন্যেই করতে পারবেনঃ</p>\n<pre><code>const aa = '';\nlet bb; //cause const don't allow empty variable initialization\nconst cc = 'Hello';\nconst dd = 'A Lot';\n</code></pre>\n<p>এটা প্রিন্ট করলে দেখবেন কি আসে ফলাফলঃ</p>\n<pre><code>console.log(aa || bb || cc || dd);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*FYYqT5fUinM8LuKky5LLsg.png\" alt=\"\" /></p>\n<p>আমি বেশীরভাগ উদাহরণেই দুইটা নিয়ে দেখালেও আপনি চাইলে এভাবে যত ইচ্ছা ততগুলো নিয়েই করতে পারবেন। যেমন আরেকটা উদাহরণ দেখাইঃ</p>\n<pre><code>const userOr = {\n   name: 'Zonayed Ahmed'\n}\n</code></pre>\n<p>এখন আপনি আরেকটা ভ্যারিয়েবল নিলেন যেটাতে আপনি এই ইউজারের নাম স্টোর করে রাখতে চাচ্ছেনঃ</p>\n<pre><code>const userOrName = userOr.name;\n</code></pre>\n<p>এটা ভ্যালিড এবং এটা করতে পারবেন। এখন আবার এখন এই ইউজারের বয়সও আরেকটা ভ্যারিয়েবলে স্টোর করতে চাচ্ছেনঃ</p>\n<pre><code>const userOrAgeTry = userOr.age;\n</code></pre>\n<p>এখন এভাবে স্টোর করলেও আপনার কোনো এরর আসবে না, কিন্তু আপনি যদি চান যে যদি ইউজারের বয়স দেওয়া থাকে তাহলে আমার এই ভ্যারিয়েবলে সেই বয়স স্টোর করবো। আর যদি দেওয়া না থাকে তাহলে আমার এই ভ্যারিয়েবলে অন্য একটা লেখা থাকবে যে ইউজারের বয়স পাওয়া যায় নি। তাহলে একভাবে আমরা এটা করতে পারিঃ</p>\n<pre><code>let userOrAgeTry2;\nif(userOr.age) {\n   userOrAgeTry2 = userOr.age;\n} else {\n   userOrAgeTry2 = 'User Age Not Found';\n}\n</code></pre>\n<p>অথবা আপনি হয়তো জানেন <code>if else</code> এর ব্লকের ভিতরে এরকম একলাইনের কোড থাকলে আমরা ব্র্যাকেটসগুলো অ্যাভয়েড করতে পারি। তাইলে আমাদের কোড এরকম হবেঃ</p>\n<pre><code>if(userOr.age) userOrAgeTry2 = userOr.age;\nelse userOrAgeTry2 = 'User Age Not Found';\n</code></pre>\n<p>এখন এই <code>userOrAgeTry2</code> ভ্যারিয়েবল প্রিন্ট করলেঃ</p>\n<pre><code>console.log(userOrAgeTry2);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EZTJPkBvpkgExkg6ZMkoAA.png\" alt=\"\" /></p>\n<p>এখন এই সিম্পল একটা কাজ অর অপারেটর দিয়ে এক লাইনেই সম্ভবঃ</p>\n<pre><code>const userOrAge = userOr.age || 'Age Not Found';\n</code></pre>\n<p>ব্যাস! কাজ শেষ। এখন আমাদের এই ভ্যারিয়েবল প্রিন্ট করলেঃ</p>\n<pre><code>console.log(userOrAge);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*1cOmW5rk7G2v2k15vEopeQ.png\" alt=\"\" /></p>\n<p>এখানে হয়তো অল্প কয়েকটা লাইন সেভ হয়েছে, কিন্তু আমি উদাহরণ সিম্পল রাখার জন্যে এরকম সিম্পলভাবে দেখিয়েছি। কিন্তু আপনি যখন কোনো ওয়েব অ্যাপ্লিকেশনে কাজ করতে যাবেন, অনেক বড় বড় কাজে এই ছোট্টো টেকনিকটাও কাজে লাগতে পারে।</p>\n<p>আবার চাইলে এরকম কোনো এক্সপ্রেশনের সত্য মিথ্যার উপর নির্ভর করে আমরা ফাংশনও রান করাতে পারি। যেমন ধরি আমাদের এমন একটা ফাংশন আছেঃ</p>\n<pre><code>const aFunc = () =&gt; {\n   console.log('Print Me!');\n}\n</code></pre>\n<p>এখন এটা আরেকটা এক্সপ্রেশনের উপর নির্ভর করে রান করাবো। যদি সে এক্সপ্রেশন সত্য হয় তাহলে রান হবে নাঃ</p>\n<pre><code>true || aFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Bf_yqFdvtX9Mag2KO5sEjQ.png\" alt=\"\" /></p>\n<p>কিন্তু সেই এক্সপ্রেশন যদি মিথ্যা হয় তাহলে আমরা এই ফাংশন রান করতে চাইঃ</p>\n<pre><code>false || aFunc();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*md0Jmq-GaQGIvXVM3gqTIA.png\" alt=\"\" /></p>\n<p>এভাবেই এই অপারেটর দিয়ে এরকম পাওয়ারফুল কাজ নিমিষেই করে ফেলতে পারবেন। এখানে কিন্তু মনে রাখবেন আমি দুইটা দিয়ে কাজ করলেও আপনি অনেকগুলো একসাথে নিতে পারবেন। আপনার বাম দিকে থেকে শুরু হয়ে যেখানেই সত্য পাবে সেখান পর্যন্ত অপারেশন চলবে।</p>\n<h4 id=\"and\"><code>&amp;&amp;</code> অ্যান্ড (AND ) অপারেটরঃ</h4>\n<p>এই <code>&amp;&amp;</code> অথবা অ্যান্ড অপারেটর দুইটা এক্সপ্রেশনের মধ্যে থাকলেঃ</p>\n<pre><code>'বাজারে যাও' &amp;&amp; 'বাজার করো'\n</code></pre>\n<p>এখন এখানে লক্ষ্য করুন, আপনি যদি বাজারে যান তাহলেই একমাত্র বাজার করতে পারবেনঃ</p>\n<pre><code>‘বাজারে যাও' এবং 'বাজার করো'\n</code></pre>\n<p>এখন অ্যান্ড অপারেটরটার কাজও ঠিক তাই। আপনার প্রথম এক্সপ্রেশন যদি সত্য হয় তাহলেই একমাত্র দ্বিতীয়টা চলবে। আর যদি প্রথমটা মিথ্যা হয় তাহলে দ্বিতীয়টা কখনোই চলবে নাঃ</p>\n<pre><code>console.log(true &amp;&amp; false);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_8f8UD8a_4wPTK_mSeQbfw.png\" alt=\"\" /></p>\n<pre><code>console.log(true &amp;&amp; true);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EVbibuwwRZJKdUWbomfYKQ.png\" alt=\"\" /></p>\n<pre><code>console.log(false &amp;&amp; true);\n</code></pre>\n<p>পরেরটা সত্য <code>true</code> হলেও লাভ নাই, মিথ্যা <code>false</code> হলেও এটা ধরাই হবে না। তাই সত্য <code>true</code> মিথ্যা <code>false</code> তে কিচ্ছু যায় আসে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*V0wEpukFHMoEXdilKqNQvw.png\" alt=\"\" /></p>\n<p>এভাবে আমরা এই টেকনিকটা ব্যবহার করে আরো অ্যাডভান্স লেভেলের কাজ করতে পারি। আমরা প্রথম এক্সপ্রেশনের উপর ডিপেন্ড করে পরের এক্সপ্রেশনে যেতে পারি। মানে যদি প্রথমটা সত্য হয় তাহলেই একমাত্র পরের এক্সপ্রেশনটা চলবেঃ</p>\n<pre><code>true &amp;&amp; console.log(‘Eat');\n</code></pre>\n<p>দেখেন এখানে <code>Eat</code> প্রিন্ট হয়েছে। কারণ প্রথমটা সত্য তাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*K_mWQKEQvjyokVCwK8RuYg.png\" alt=\"\" /></p>\n<p>কিন্তু প্রথমটাই যদি মিথ্যা false ভ্যালু হয়ঃ</p>\n<pre><code>false &amp;&amp; console.log(‘Eat');\n</code></pre>\n<p><code>Eat</code> প্রিন্ট হবে না কারন প্রথম ভ্যালুই মিথ্যাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*LoIetPkGi106zQStURxIgg.png\" alt=\"\" /></p>\n<p>সেইম ভ্যারিয়েবলের ক্ষেত্রেও হবেঃ</p>\n<pre><code>const anoVar = 'Me' &amp;&amp; 'You';\n</code></pre>\n<p>এখন এই <code>anoVar</code> প্রিন্ট করলেঃ</p>\n<pre><code>console.log(anoVar);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EUJVA8uhE-2Nv2li_dvPOw.png\" alt=\"\" /></p>\n<p>কেনো এমন হলো? হ্যাঁ এখানে প্রথমটা সত্য হওয়াতেই দ্বিতীয়টায় গিয়েছে। আর তাই দ্বিতীয়টাই শেষে ভ্যারিয়েবল হিসেবে <code>anoVar</code> এ স্টোর হয়েছে। এখন প্রথমটা মিথ্যা <code>false</code> হলে দ্বিতীয়টা ধরাই হবে নাঃ</p>\n<pre><code>const anoVar2 = false &amp;&amp; 'Anything';\n</code></pre>\n<p>এটা প্রিন্ট করলেঃ</p>\n<pre><code>console.log(anoVar2);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*B9CUWPRCAveCmUOMRJeUGQ.png\" alt=\"\" /></p>\n<p>প্রথমটাই প্রিন্ট করলো, দ্বিতীয়টা ধরে নি।</p>\n<p>এখন এই টেকনিকটা কাজে লাগিয়েই আমরা চাইলে একটা এক্সপ্রেশন সত্য হলেই আরেকটা রান করাবো এমন করে বলতে পারি। যেমন ধরি নিচে আমাদের একটা অবজেক্ট আছেঃ</p>\n<pre><code>const userAnd = {\n   name: 'Zonayed Ahmed'\n}\n</code></pre>\n<p>এখন আমি চাচ্ছি যদি অবজেক্ট এর <code>name</code> প্রপার্টি থাকে তাহলেই সেটা আমি প্রিন্ট করাবোঃ</p>\n<pre><code>if(userAnd.name) {\n   console.log(`Name is: ${userAnd.name}`);\n}\n</code></pre>\n<p>তো অবজেক্ট এর এই প্রপার্টি আছে তাই প্রিন্ট হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*g-F_6tpE9LCE9JC5HyBJ-w.png\" alt=\"\" /></p>\n<p>এখন সেইম কাজটা অ্যান্ড অপারেটরের টেকনিক লাগিয়েও করতে পারি। যদি অবজেক্ট এর <code>name</code> প্রপার্টি থাকে তাইলেই সেটা প্রিন্ট করোঃ</p>\n<pre><code>userAnd.name &amp;&amp; console.log(`Name is: ${userAnd.name}`);\n</code></pre>\n<p>ব্যাস এটাও ঠিক আমাদের সেইম আউটপুটই দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*6UTVuu1EaKHEMKQ3Gdo02A.png\" alt=\"\" /></p>\n<p>এখন ধরি আমরা আরেকটা প্রপার্টি প্রিন্ট করতে চাচ্ছি। চাচ্ছি যদি এই অবজেক্ট এর <code>age</code> নামে কোনো প্রপার্টি থেকে থাকে তাহলে সেটা প্রিন্ট করা হউকঃ</p>\n<pre><code>if(userAnd.age) {\n   console.log(`Age is: ${userAnd.age}`);\n}\n</code></pre>\n<p>কিন্তু এরকম প্রপার্টি যেহেতু নাই তাই প্রিন্ট হবে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*9vZ6zPSIqt3rrQfON_R29g.png\" alt=\"\" /></p>\n<p>এখন এই কাজটাও অ্যান্ড অপারেটর দিয়ে সুন্দর করে একলাইনেও করা যাবে। যদি অমুক প্রপার্টি থাকে তাহলেই তমুক প্রিন্ট করবাঃ</p>\n<pre><code>userAnd.age &amp;&amp; console.log(`Age is: ${userAnd.age}`);\n</code></pre>\n<p>এটাও যেহেতু অবজেক্ট এর এমন কোনো প্রপার্টিই নাই, তাই কিছুই প্রিন্ট হবে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*qpvsQCNcDRe3FRRoIU8IlA.png\" alt=\"\" /></p>\n<p>এখন একই ভাবে আমরা চাচ্ছি যদি এই অবজেক্ট এর <code>name</code> প্রপার্টি এবং <code>age</code> প্রপার্টি থাকে তাহলে অমুক একটা লেখা প্রিন্ট করতে হবেঃ</p>\n<pre><code>userAnd.name &amp;&amp; userAnd.age &amp;&amp; console.log(`${userAnd.name} is ${userAnd.age} years old!`);\n</code></pre>\n<p>এখন এখানে যেহেতু <code>age</code> প্রপার্টি নাই তাই এটা প্রিন্ট হবে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*uEbqrdqdUv8MV9egvQei4w.png\" alt=\"\" /></p>\n<p>এখন আমরা অর আর অ্যান্ড মিলিয়েও দিতে পারি। যদি <code>name</code> অথবা <code>age</code> প্রপার্টি থাকে তাহলে <code>name</code> অথবা <code>age</code> যেটাই আছে সেটাই প্রিন্ট করবোঃ</p>\n<pre><code>(userAnd.name ||userAnd.age) &amp;&amp; console.log(`Found: ${userAnd.name || userAnd.age}`);\n</code></pre>\n<p>এখানে আমি ব্র্যাকেটস ব্যবহার করেছি, কারণ এই পুরো এক্সপ্রেশনটা সত্য হলেই তাহলে যাতে পরেরটা প্রিন্ট হয়ঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*d8d5XcgIqtqDY3xc0hpF-Q.png\" alt=\"\" /></p>\n<p>এরকম করে আমরা যত ইচ্ছা ততগুলো নিয়েই কাজ করতে পারি জাভাস্ক্রিপ্ট এ। একইরকমভাবে ফাংশনও ঠিক আগের মতোই এরকম সত্য না মিথ্যা সেটার উপর ভিত্তি করে রান করতে পারি। ধরি আমাদের একটা ফাংশন আছেঃ</p>\n<pre><code>const anoFunc = () =&gt; {\n   console.log('Print Me!');\n}\n</code></pre>\n<p>এখন এরকম একটা এক্সপ্রেশনের উপর ডিপেন্ড করে এই ফাংশন প্রিন্ট করাবোঃ</p>\n<pre><code>true &amp;&amp; anoFunc();\n</code></pre>\n<p>এখানে ফাংশন চলবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*JqY5VkwKfgQA1iWWvFZ08w.png\" alt=\"\" /></p>\n<p>মিথ্যা হলেঃ</p>\n<pre><code>false &amp;&amp; anoFunc();\n</code></pre>\n<p>এখানে ফাংশন চলবে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*OIe1nNaibt_085eDZxZLUw.png\" alt=\"\" /></p>\n<p>এই টেকনিকগুলোই আপনার ওয়েব অ্যাপ্লিকেশনে কাজে লাগাতে পারবেন। আপনার অ্যাপ্লিকেশনে এরকম সিচুয়েশন আসতে পারে যেখানে আপনার এরকম কয়েকটা এক্সপ্রেশন লিখতে হতে পারে। একটার ফলাফলের উপর ভিত্তি করে আরেকটা রান করাতে হতে পারে। সেক্ষত্রে আপনি শর্টকাটে অর অথবা অ্যান্ড অপারেটর ব্যবহার করে অনেক জটিল জটিল কাজ সহজেই করে ফেলতে পারবেন। কোড দেখতেও ক্লিন এবং স্মার্ট তো বটেই!</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-01T16:37:49.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর","thumb_img_path":"/images/dailyjs.gif","content":"<p>কন্ডিশনাল বা টার্নারি অপারেটর প্রায় ক্ষেত্রে <code>if</code> <code>else</code> স্টেটমেন্ট এর পরবর্তিতে শর্টকাট হিসেবে ব্যবহার করা হয়। শর্টকাটে একলাইনে একটা সিদ্ধান্তের উপর ডিশিসন নিয়ে ফেলা যায়। এই অপারেটর অনেকটা এভাবে কাজ করেঃ</p>\n<pre><code>কন্ডিশন ? কন্ডিশন যদি সত্য হয় তাহলে এটা : কন্ডিশন যদি মিথ্যা হয় তাহলে এটা\n</code></pre>\n<p>এখানে এই যে স্পেশাল দুইটা জিনিস <code>?</code> এবং <code>:</code> দেখতেছেন, এগুলোই মূলত এখানে ব্যবহার হয়।</p>\n<p>ধরি নিচে একটা ভ্যারিয়েবল আছেঃ</p>\n<pre><code>const age = 21;\n</code></pre>\n<p>এখন এই <code>age</code> এর উপর ডিপেন্ড করে আমরা একটা লেখা প্রিন্ট করতে চাই। যদি <code>age</code> ১৮ এর নিচে হয় তাহলে একটা লেখা, আর যদি ১৮ বা ১৮ এর উপর হয় তাহলে আরেকটা লেখা প্রিন্ট করবো। এটা আমরা <code>if</code> <code>else</code> ব্যবহার করে এভাবে করতে পারিঃ</p>\n<pre><code>if(age &lt; 18) {\n   console.log('You are not Adult!');\n} else {\n   console.log('You are Adult');\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*GApq2nMnxQLdzakKxYMMSw.png\" alt=\"\" /></p>\n<p>কিন্তু সেইম কাজটাই আমরা টার্নারি অপারেটর ব্যবহার করে মাত্র একলাইনেই করতে পারিঃ</p>\n<pre><code>console.log(age &lt; 18 ? 'You are not Adult!' : 'You are Adult');\n</code></pre>\n<p>এবার এটা রান করলে দেখবেন সেইম আউটপুটইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*HjYhSdMOMdVxY3CLWU2g1w.png\" alt=\"\" /></p>\n<p>এটা যেকোনো জায়গায় যেকোনোভাবে ব্যবহার করতে পারবেনঃ</p>\n<pre><code>function findAuthor(name) {\n   return(name === 'Zonayed Ahmed' ? 'This is the author' : 'Some other person');\n}\n</code></pre>\n<p>এখন এই ফাংশন টাকে আর্গুমেন্ট দিয়ে কল করলে এটা আর্গুমেন্ট অনুযায়ী ফলাফল দেখাবেঃ</p>\n<pre><code>console.log(findAuthor('Zonayed Ahmed'));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*NT3uyf3z2esj1TEASAVkYg.png\" alt=\"\" /></p>\n<p>অন্যকিছু দিলেঃ</p>\n<pre><code>console.log(findAuthor('John Doe'));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*JFWqxP7bGhIZl6MiaI_rHg.png\" alt=\"\" /></p>\n<p>রিয়েল লাইফে এটা কিভাবে কাজে লাগতে পারে? হ্যাঁ ধরুন আপনি আপনার ইউজারকে ইমেইল দিতে বলছেন। ইমেইল দিয়ে সাবমিট করলে আপনি এই ফাংশনটা রান করবেনঃ</p>\n<pre><code>function successFunc() {\n   console.log('Got your email');\n}\n</code></pre>\n<p>ইমেইলটা আপনি এরকম একটা ভ্যারিয়েবল স্টোর করবেনঃ</p>\n<pre><code>let email;\n</code></pre>\n<p>এখন ইউজার ইমেইল না দিলেই সাবমিট ক্লিক করে দিলে আপনি টার্নারি অপারেটর ইউজ করে খুব সহজেই ধরে ফেলতে পারবেন, আর অন্যকিছু দেখাতে পারবেন। ধরি এখানে আমরা জাস্ট একটা কন্সোল লগই দেখালামঃ</p>\n<pre><code>email ? successFunc() : console.log('Please provide your email!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_GtdLd2SFJolrPoZz4beKA.png\" alt=\"\" /></p>\n<p>এটা কিভাবে হলো? হ্যাঁ এটা হয়েছে কারণ এখানে <code>email</code> মিথ্যা <code>false</code> তাই। তাহলে দেখি এখানে <code>email</code> টা কি কারণে মিথ্যা <code>false</code> ভ্যালু দিলোঃ</p>\n<pre><code>console.log(email);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*NVWMUBmJ7F075PSj7YDyAg.png\" alt=\"\" /></p>\n<p>আচ্ছা ইমেইল তাহলে এখানে <code>undefined</code> হ্যাঁ, ঠিক তাই। কারণ আমাদের ইউজার ইমেইল দেয় নাই। আর আমরা জানি <code>undefined</code> মিথ্যা <code>false</code> । গত পর্বে আমরা দেখেছিলাম জাভাস্ক্রিপ্ট এ কিছু থাকলেই সেটা সত্য, শুধুমাত্র নিচের এগুলো ছাড়াঃ</p>\n<ul>\n<li><code>false</code> (বুলিয়ান <code>false</code>, নিজেই মিথ্যা)</li>\n<li><code>null</code></li>\n<li><code>NaN</code></li>\n<li><code>0</code></li>\n<li>খালি (<code>\"\"</code> , <code>''</code>অথবা ````);</li>\n<li><code>undefined</code></li>\n<li><code>!anythingTrue</code> (সত্য কোনো এক্সপ্রেশনের পূর্বে <code>!</code> দিয়েও সেটাকে মিথ্যা করা যায়)</li>\n</ul>\n<p>আর তাই এখানে <code>email</code> মিথ্যা।</p>\n<p>এবার যদি ইউজার ইমেইল দেয়ঃ</p>\n<pre><code>email = 'zonayedpca@yahoo.com';\n</code></pre>\n<p>দেওয়ায়র পর সাবমিট করলো, এবার আমরা আবার আবার দেখিঃ</p>\n<pre><code>email ? successFunc() : console.log('Please provide your email!');\n</code></pre>\n<p>ব্যাস, এবার দেখবেন আপনার ফাংশনটা রান করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*TsjDJ3cBf4YYPYM4X7PyIw.png\" alt=\"\" /></p>\n<p>এখন ভাইয়া এখানে ইমেইল, ইমেইল সাবমিট-টাবমিট আসলো কোথা থেকে… হ্যাঁ এখানে এগুলো সব কাল্পনিক হলেও রিয়েল লাইফ প্রোজেক্ট করতে গেলে এরকম সিচুয়েশনেই পড়বেন আর ঠিক এভাবেই টার্নারি অপারেটর ব্যবহার করে সহজেই একলাইনেই কাজ সেরে ফেলতে পারবেন।</p>\n<p>এখন টার্নারি অপারেটর কিন্তু একটা ভিতরেও আরেকটা দিতে পারবেন, যতক্ষন ইচ্ছা দিতে পারবেন রুলস মেইন্টেইন করে। ধরি আমাদের নিচে এরকম একটা অবজেক্ট আছেঃ</p>\n<pre><code>const objTer = {\n   name: 'Zonayed Ahmed',\n   age: 21,\n   job: 'Student'\n}\n</code></pre>\n<p>এখন ধরি আমরা এখানে যদি <code>objTer</code> এর <code>name</code> এবং <code>age</code></p>\n<pre><code>objTer.name ? objTer.age ? console.log('It has name and age') : objTer.job ? console.log('yes it has a job') : console.log('no it does not have any job') : console.log('I does not have any name');\n</code></pre>\n<p>এটা রান করালেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*7hcawxom7w_iyEbs9ybKdQ.png\" alt=\"\" /></p>\n<p>অনেক বড় লাইন ঠিক না? এটাকে একটু ভেঙ্গে ভেঙ্গে দেখলেই ধারণা পাবেন। আসলে এভাবেও চাইলে আপনি অনেকগুলো টার্নারি অপারেটর একসাথে নিয়ে একটা ভিতরে আরেকটা দিয়ে কাজ করতে পারবেন। প্রয়োজনে ব্র্যাকেটসও ব্যবহার করতে পারবেন। এটাও আরেকটা পাওয়ারফুল টেকনিক।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-08T16:37:39.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)","thumb_img_path":"/images/dailyjs.gif","content":"<p>রেগুলার এক্সপ্রেশন! সব প্রোগ্রামিং ল্যাংগুয়েজেই কমন একটা জিনিস। যদিও ল্যাঙ্গুয়েজ ভেদে একটু পার্থক্য থাকতে পারে, কিন্তু আসল ধারণা এক। রেগুলার এক্সপ্রেশন হচ্ছে ক্যারেক্টার আর সিম্বলের সিকুয়েন্স যেটার সাহায্যে আপনি নির্দিষ্ট প্যাটার্ন এর টেক্সট বা স্ট্রিং সার্চ করতে পারবেন এবং সেটার উপর ভিত্তি করে অ্যাকশন নিতে পারবেন। আমার রেগুলার এক্সপ্রেশনের উপর একটা সিরিজ লেখা আছে <a href=\"https://with.zonayed.me/bn/%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%B8-%E0%A6%8F%E0%A6%A8%E0%A7%8D%E0%A6%A1-%E0%A6%9F%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%95%E0%A7%8D%E0%A6%B8/%E0%A6%8F%E0%A6%95-%E0%A6%AA%E0%A6%B2%E0%A6%95%E0%A7%87-%E0%A6%B0%E0%A7%87%E0%A6%97%E0%A7%81%E0%A6%B2%E0%A6%BE%E0%A6%B0-%E0%A6%8F%E0%A6%95%E0%A7%8D%E0%A6%B8%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%87/\">এখানে</a>। আরো ডিটেইলস জানতে এখান থেকে দেখতে পারেন।</p>\n<p>আজকের এই পর্বে আমি রেগুলার এক্সপ্রেশন ঠিক জাভাস্ক্রিপ্ট কিভাবে ব্যবহার করবো সেটাই দেখবো।</p>\n<p>জাভাস্ক্রিপ্ট এ যেহেতু সবকিছুই বলতে গেলে অবজেক্ট, সেই হিসেবে রেগুলার এক্সপ্রেশনগুলোও এখানে অবজেক্ট। এদেরও মেথড আছে। রেগুলার এক্সপ্রেশন নিজস্ব মেথড দিয়েই ব্যবহার করা যায় আবার স্ট্রিং এর কিছু মেথড আছে, ঐগুলো দিয়েও ব্যবহার করা যায়। আমরা এখানে নিত্যদিন ব্যবহৃত হয় এমন মেথডগুলো নিয়েই আলোচনা করবো।</p>\n<p><strong>রেগুলার এক্সপ্রেশন তৈরী করাঃ</strong> জাভাস্ক্রিপ্ট এ দুইভাবে রেগুলার এক্সপ্রেশন তৈরী করা যায়। আপনি চাইলে আপনার সুবিধামতো যেকোনো একটা উপায় ব্যবহার করতে পারবেন।</p>\n<ul>\n<li><p>রেগুলার এক্সপ্রেশন লিটারেল ব্যবহার করে। এক্ষেত্রে পুরো এক্সপ্রেশনটা <code>/</code> ভিতরে থাকেঃ</p>\n<p>/এক্সপ্রেশন/মডিফায়ার</p></li>\n</ul>\n<p>মডিফায়ার এখানে মূলত সার্চের ধরণ পরিবর্তন করার ব্যবহার করা হয়। এটা যদিও অপশনাল(যদি আপনার মডিফায়ার দরকার না পরে তাহলে এটা লেখা বাদ দিতে পারবেন)। আমরা এটা নিয়ে পরে আলোচনা করবো।</p>\n<p>এবার এটা আমরা জাস্ট অন্যান্য ভ্যারিয়েবলের মতোই যেকোনোভাবে স্টোর করতে পারবোঃ</p>\n<pre><code>const regex = /ab+c/i\n</code></pre>\n<p>এখানে <code>/ab+c/</code> আমাদের রেগুলার এক্সপ্রেশন আর পরের <code>i</code> হচ্ছে মডিফায়ার।</p>\n<ul>\n<li><p>আরেকটা উপায় হচ্ছে <code>RegExp</code> কন্সট্রাকটর ফাংশন ব্যবহার করে সেটা থেকে অবজেক্ট তৈরী করেঃ</p>\n<p>const regexCons = new RegExp('ab+c', i);</p></li>\n</ul>\n<p>এখানে আপনাকে এক্সপ্রেশনটা <code>‘’</code> এর ভিতরে রাখতে হবে। এর দ্বিতীয় আর্গুমেন্ট হিসেবে সেই সেইমভাবেই মডিফায়ার যাবে। এটা অপশনাল ঠিক আগের মতোই। যদি আপনার না লাগে তাহলে দ্বিতীয় আর্গুমেন্ট না দিলেও হবে।</p>\n<p>এখানে আপনার জায়গা বুঝে যেকোনো একটা ব্যবহার করতে হবে। প্রথম উপায়টা সাধারণত আপনি যদি হার্ড কোড করে কোডের ভিতরেই রেগুলার এক্সপ্রেশন লিখেন তাহলে এটা ব্যবহার করতে পারবেন। কারণ দেখেন এখানে এটা স্ট্রিং না, স্পেশাল লিটারেল ব্যবহার করা হয়েছে যেটা আপনি সরাসরি কোডেই লিখতে পারবেন। কিন্তু যখন এই এক্সপ্রেশন বাইরের কোনো সোর্স থেকে আসবে অথবা ইউজার ইনপুট দিবে তখন আপনাকে দ্বিতীয় মেথড টাই ব্যবহার করতে হবে। কারণ তখন সেটা আপনি স্ট্রিং হিসেবে পাবেন। আর স্ট্রিং সুন্দর করে <code>RegExp</code> কন্সট্রাকটর ফাংশনের ভিতর দিয়ে চালিয়ে দিতে পারবেন।</p>\n<p><strong>রেগুলার এক্সপ্রেশন নিয়ে কাজ করাঃ</strong> প্রথমেই অন্যদিকে যাওয়ার আগে আমরা দেখে নিবো কিভাবে রেগুলার এক্সপ্রেশন নিয়ে কাজ করতে হয়। ধরি আমাদের একটা খুবই নরমাল একটা রেগুলার এক্সপ্রেশন আছে, সাধারন একটা উদাহরণ দিয়েই শুরু করিঃ</p>\n<pre><code>const regexToMatch = /Mydesh/;\n</code></pre>\n<p>এখন ধরি আমাদের নিচে এরকম একটা স্ট্রিং আছেঃ</p>\n<pre><code>const aText = 'I am from Mydesh';\n</code></pre>\n<p>এখন আমরা স্ট্রিং এর <code>replace</code> মেথড সম্পর্কে জানি, এটা মূলত একটা স্ট্রিং এ কিছু ক্যারেক্টার রিপ্লেস করার জন্যে ব্যবহার করা হয়। এটা দুইটা আরগুমেন্ট নেয়, প্রথমটা কোন লেখা বা ক্যারেক্টারগুলো রিপ্লেস করবেন, আর দ্বিতীয়টায় কি দিয়ে রিপ্লেস করবেন সেটা আর্গুমেন্ট হিসেবে যাবে। এখন মজার ব্যাপার হলো এই মেথডটাও রেগুলার এক্সপ্রেশন সাপোর্ট করে। আর তাই আমরা এটা ব্যবহার করে আমাদের স্ট্রিং থেকে রেগুলার এক্সপ্রেশনের সাহায্যে কিছু ক্যারেক্টার রিপ্লেস করবোঃ</p>\n<pre><code>const newText = aText.replace(regexToMatch, 'Bangladesh');\n</code></pre>\n<p>এখন এই <code>newText</code> কন্সোলে প্রিন্ট করে দেখিঃ</p>\n<pre><code>console.log(newText);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iNlG036s3BzCagGMxw-ZtA.png\" alt=\"\" /></p>\n<p>কি সুন্দর করে রিপ্লেস হয়ে গেলো। কিন্তু এই উদাহরণ থেকে রেগুলার এক্সপ্রেশনের আসল পাওয়ার বুঝা না গেলেও এটা আসলে কিভাবে বা কেনো ব্যবহার করা হয় সেটা সম্পর্কে অন্তত ধারণা হবে। আরো গভীরে যাওয়ার আগে, আরো পাওয়ার জানার জন্যে আমাদের আগে রেগুলার এক্সপ্রেশনের খুঁটিনাটি জেনে নিতে হবে।</p>\n<p>তবে নিচে আলোচনার সুবিধার্থে আমি আরেকটা স্ট্রিং এর মেথডের সাথে এখানে পরিচয় করিয়ে দিবো। স্ট্রিং এর একটা মেথড আছে <code>match()</code> নামে। এর কাজ হচ্ছে যদি কোনো স্ট্রিং এর সাথে প্যাটার্ন মিলে যায় তাহলে এটা একটা অ্যারে(বিস্তারিত পরে জানবো) রিটার্ণ করবে, আর না মিললে <code>null</code> রিটার্ণ করবে। উপরের উদাহরণে <code>aText</code> হচ্ছে আমাদের স্ট্রিং। আর তাই এটা থেকেই আমরা এই <code>match()</code> এর অ্যাক্সেস পাবো। আর এটার ভিতরে আর্গুমেন্ট হিসেবে আমরা যেটা ম্যাচ করাতে চাচ্ছি(এক্ষত্রে রেগুলার এক্সপ্রেশন) সেটা পাস করতে হবে। প্রথমে আমরা আমাদের <code>aText</code> দিয়ে দেখিঃ</p>\n<pre><code>aText.match(regexToMatch);\n</code></pre>\n<p>এটা একটা অ্যারে রিটার্ণ করবে যেখান থেকে ম্যাচ করেছে সেখানকার ইন্ডেক্স নাম্বারসহঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*HVdrLklsv4vvxfVQgmQUQg.png\" alt=\"\" /></p>\n<p>আবার যদি <code>newText</code> এর সাথে দেখিঃ</p>\n<pre><code>newText.match(regexToMatch);\n</code></pre>\n<p>তাহলে এটা <code>null</code> দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*s1pROLLMFKz-jaHVj-jf6g.png\" alt=\"\" /></p>\n<p>আমরা পরে আরো মেথড নিয়ে বিস্তারিত আলোচনা করবো।</p>\n<p><strong>মডিফায়ারঃ</strong> উপরে আমরা মডিফায়ার এর কথা উল্লেখ করেছিলাম। মডিফায়ার মূলত রেগুলার এক্সপ্রেশনে সার্চের ধরণ পরিবর্তন করার জন্যে ব্যবহার করা হয়। বেশ কয়েকটা টাইপের মডিফায়ার আছেঃ</p>\n<ul>\n<li><code>i</code> — যেটা আমরা এখানে উদাহরণে ব্যবহার করেছি। এই মডিফায়ার ব্যবহার করা হলে রেগুলার এক্সপ্রেশন কেস-ইনসেন্সিটিভ হয়ে কাজ করবে। মানে লেখা বড় হাতের ছোটো হাতের যাই হউক, লেখা মিললেই এটা ম্যাচ করে ফেলবে। বাই ডিফল্ট রেগুলার আপনি কোনো মডিফায়ার না দিলে রেগুলার এক্সপ্রেশন কেস-সেন্সিটিভ হয়ে কাজ করবে। তাই আপনার যদি এরকমভাবে প্রয়োজন হয় যেখানে বড় হাতের লেখা ছোটো হাতের লেখা কোনো ব্যাপার না তাহলে এই মডিফায়ার ব্যবহার করতে হবে।</li>\n</ul>\n<p><code>i</code> মডিফায়ার ব্যবহার করে নিচের স্ট্রিং থেকে যদি <code>this</code> ম্যাচ করাতে চানঃ</p>\n<pre><code>const text1 = 'This is my Pen';\ntext1.match(/this/i);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*C7MHx4U1dMeKCaYkQ4_JiQ.png\" alt=\"\" /></p>\n<p>তাহলে এখানে আপনার <code>This</code> ম্যাচ করবে। কিন্তু <code>i</code> মডিফায়ার না থাকলে এটাতে যেহেতু <code>T</code> বড় হাতের আর আপনি খুঁজতে চাচ্ছেন <code>this</code>, তাই এটা ম্যাচ করবে নাঃ</p>\n<pre><code>text1.match(/this/);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_id7Ea78ya_rgRJdyE-qEg.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>g</code> — এটা পুরো স্ট্রিং এর গ্লোবাললি সার্চ করার জন্যে ব্যবহার করা হয়। এটার মানে কি? এটার মানে হচ্ছে আপনি যদি নিচের স্ট্রিং থেকে <code>is</code> খুঁজেন কোনো মডিফায়ার ব্যবহার না করে তাহলে এটা শুধুমাত্র প্রথম <code>is</code> টাই ম্যাচ করবেঃ</p>\n<p>const text2 = 'This is my Pen';\ntext2.match(/is/);</p></li>\n</ul>\n<p>একটা মাত্র অ্যারে রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*wSg6_l-Sg_HQpXlTQ0cPaQ.png\" alt=\"\" /></p>\n<p>কিন্তু আপনি যদি <code>g</code> মডিফায়ার ব্যবহার করেন তাহলে এখানে পুরোটার মধ্যে যেখানে যেখানে এই <code>is</code> আছে সবগুলো ম্যাচ করবেঃ</p>\n<pre><code>text2.match(/is/g);\n</code></pre>\n<p>দুইটা ম্যাচ করবে, আর তাই দুইটা অ্যারে পাবেন এবারঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*pfxzUeFKLOsFCGIjg8j4bQ.png\" alt=\"\" /></p>\n<p>এখানে আরেকটা মজার ব্যাপার হলো আপনি চাইলে একসাথে একাধিক মডিফায়ারও ব্যবহার করতে পারবেন। জাস্ট একটা পর আরেকটা লিখে দিবেন এভাবেঃ</p>\n<pre><code>/regex/ig\n</code></pre>\n<p>এগুলো ছাড়াও আরো কিছু মডিফায়ার আছে, তবে এগুলোই বেশী ব্যবহার হয়, তাই আমি আমার এই লেখা এগুলোতেই সীমাবদ্ধ রাখলাম।</p>\n<p><strong>রেগুলার এক্সপ্রেশন লিখাঃ</strong></p>\n<p>এখন আসুন আমরা রেগুলার এক্সপ্রেশন কিভাবে লিখবো সেদিকে আসি। রেগুলার এক্সপ্রেশনে কয়েক ধরনের ক্যারেক্টার সেট আছে। এগুলোর ব্যবহারের উপর ভিত্তি করে <code>Brackets</code> , <code>Metacharacter</code> ও <code>Quantifier</code> নামে বিভক্ত করা যায়। নিশ্চয়ই এখন মাথা ঘুরতেছে এগুলো আবার কি। সমস্যা নাই আমি সবগুলো নিয়েই নিচে লিখতেছিঃ</p>\n<p><strong>ব্র্যাকেটস(Brackets):</strong> ব্র্যাকেটস এ সাধারনত ব্র্যাকেটসএর ভিতরে কিছু ক্যারেক্টার থাকে, আর এগুলো বিভিন্ন রেঞ্জের ক্যারেক্টার ম্যাচ করতে ব্যবহার করা হয়ঃ</p>\n<ul>\n<li><p><code>[abc]</code> — এটা দ্বারা বুঝানো হয় যে আমরা <code>a</code> অথবা <code>b</code> অথবা <code>c</code> এর মধ্যে যেকোনো একটা ক্যারেক্টার ম্যাচ করাতে চাচ্ছি।</p>\n<p>/[abc]/</p></li>\n</ul>\n<p>এখন নিচের এরকম স্ট্রিং থাকলে একটা ক্যারেক্টারটাই ম্যাচ করবে, আর সেটা একদম প্রথম যেটা ম্যাচ করবে সেটাই। মনে রাখবেন এখানে আমরা কোনো মডিফায়ার ইউজ করি নাইঃ</p>\n<pre><code>const bText = 'A Normal Text';\nbText.match(/[aox]/);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*B7mlWHA5MkQANrC1KXi2aw.png\" alt=\"\" /><strong>কেস সেন্সিটিভ তাই প্রথমটা ম্যাচ করেনি</strong></p>\n<p>কিন্তু গ্লোবাল মডিফায়ার <code>g</code> ব্যবহার করলে এটা সবগুলো ম্যাচই দেখাবেঃ</p>\n<pre><code>bText.match(/[aox]/g);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*bqtsHDFnOFz7jtqh4vOElg.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>[^abc]</code> — এটা ঠিক উল্টো, এর দ্বারা বুঝানো হয় যে আমরা <code>a</code> অথবা <code>b</code> অথবা <code>c</code> ছাড়া যেকোনো একটা ক্যারেক্টার ম্যাচ করাতে চাচ্ছিঃ</p>\n<p>bText.match(/[^abc]/);</p></li>\n</ul>\n<p>এটা প্রথম <code>A</code> টাই দেখাবে, কারণ এটা উপরের ক্যারেক্টারগুলোর মধ্যে পড়ে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*mPAMhZqCVg57UIaiIliXoQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>[0–9]</code> বা <code>[a-z]</code> — <code>[0–9]</code>মানে হচ্ছে <code>0</code> থেকে <code>9</code> এর মধ্যে কোনো নাম্বার থাকলেই ম্যাচ করবে, ঠিক বাকীগুলোই এরকম <code>[a-z]</code> মানে হচ্ছে <code>a</code> থেকে <code>z</code> এরমধ্যে কোনো ক্যারেক্টার থাকলেই সেটা ম্যাচ করবেঃ</p>\n<p>/[a-z]/g</p></li>\n</ul>\n<p>উপরের টেক্সটটায় অ্যাপ্লাই করলে <code>g</code> মডিফায়ারসহঃ</p>\n<pre><code>bText.match(/[a-z]/g);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*IZv7JhJoH7X1oTF9qq1NZg.png\" alt=\"\" /></p>\n<p>এখানে যত(যেহেতু <code>g</code> মডিফায়ার ব্যবহার করেছি) অক্ষর আছে <code>a</code> থেকে <code>z</code> এর মধ্যে সবগুলোই একটা একটা করে ম্যাচ করবে। একইভাবে নাম্বারের ক্ষেত্রেও কাজ করবে যদি <code>[0–9]</code> ব্যবহার করিঃ</p>\n<pre><code>/[0-9]/g\n</code></pre>\n<p>মনে রাখবেন এটা পুরোটা একসাথে সিলেক্ট করে না বরং একটা একটা করে ক্যারেক্টার সিলেক্ট করেঃ</p>\n<pre><code>const bText2 = '0123456789';\nbText2.match(/[0-9]/g);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*TsEr7oazOWEHb5BJURmj3w.png\" alt=\"\" /></p>\n<p>আর বরাবরের মতোই <code>g</code> ফ্ল্যাগ না থাকলে শুধুমাত্র প্রথম ম্যাচটাই দেখাবেঃ</p>\n<pre><code>bText2.match(/[0-9]/);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*fdCpXHbYit4L8BXPatZGBQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>[^0–9]</code> বা <code>[^a-z]</code> — এটাও হয়তো ধরতে পেরেছেন, ঠিক আগেরটার উল্টো। এই রেঞ্জের ক্যারেক্টারগুলো ছাড়া বাকি সব ম্যাচ করবে।</p></li>\n<li><p><code>(ab|bc)</code> — সোজা বাংলায় <code>ab</code> অথবা <code>bc</code> ম্যাচ করবেঃ</p>\n<p>/(ab|bc)/g</p></li>\n</ul>\n<p>এখানে আমরা যেহেতু <code>ab</code>, <code>bc</code> ই খুঁজতে দিয়েছি তাই এখানে <code>ab</code> আর <code>bc</code> একসাথে সিলেক্ট করবেঃ</p>\n<pre><code>const bText3 = 'ab on bc, no meaning';\nbText3.match(/(ab|bc)/g);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*yZKyy6ZyDszgSEBIc6BmTA.png\" alt=\"\" /></p>\n<p><code>g</code> ফ্ল্যাগ ব্যবহার করা না হলে প্রথম ম্যাচটাই দেখাবেঃ</p>\n<pre><code>bText3.match(/(ab|bc)/)\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*axZzBCpHJNXGGnOFDu1QiA.png\" alt=\"\" /></p>\n<p><strong>মেটাক্যারেক্টার( Metacharacter):</strong> মেটাক্যারেক্টার হচ্ছে স্পেশাল কিছু ক্যারেক্টার, যেগুলোর স্পেশাল মিনিং আছে। একই টাইপের কোনো ক্যারেক্টার ম্যাচ করানোর জন্যেই সাধারণত এই মেটাক্যারেক্টারগুলো ব্যবহার করা হয়। আমরা নিচে এই স্ট্রিং টার এর উপর সবগুলো উদাহরণ দেখবোঃ</p>\n<pre><code>const mText = 'ABCDEFGHIJK abcdefghijk\\n\\t01234567890!@#$%^&amp;()';\n</code></pre>\n<ul>\n<li><p><code>.</code>— নতুন লাইন ছাড়া সব ধরনের ক্যারেক্টার একটা একটা করে সিলেক্ট করার জন্যেঃ</p>\n<p>mText.match(/./g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*1yg9c22dBe28ghTnlP4Bhg.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\w</code> — ওয়ার্ড ক্যারেক্টার a-z, A-Z এবং 0–9 সহ _(আন্ডারস্কোর) ম্যাচ করতে ব্যবহার করা হয়ঃ</p>\n<p>mText.match(/\\w/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EBGbpCsCsM17B1T99lNJ5Q.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\W</code> — ওয়ার্ড ক্যারেক্টারগুলো ছাড়া বাকী সব ম্যাচ করতে ব্যবহার করা হয়ঃ</p>\n<p>mText.match(/\\W/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*D1e8qjiQbY5WBa-4vauj5A.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\d</code> — এটা ডিজিট ম্যাচ করার জন্যে ইউজ করা হয়ঃ</p>\n<p>mText.match(/\\d/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Rr76VU90rUgqFFs589-2iw.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\D</code> — এটা ডিজিট ছাড়া বাকি সব ম্যাচ করানোর জন্যেঃ</p>\n<p>mText.match(/\\D/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*QQtruDiNBitolajD70okKQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\s</code> — যতরকমের White space আছে যেমন স্পেস, ট্যাব বা নিউলাইন ম্যাচ করার জন্যে ইউজ করা হয়ঃ</p>\n<p>mText.match(/\\s/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*RCw5OC79t-O8KnmULiUB9w.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\S</code> — যেগুলো <em>White space</em> এর মধ্যে পড়ে না ঐধরনের ক্যারেক্টার ম্যাচ করার জন্যে ইউজ করা হয়ঃ</p>\n<p>mText.match(/\\S/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*lLTgOuPvC1qV5lpIWlVWGQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>\\b</code> — একটা ওয়ার্ডের শুরুর বা শেষের কোনো ক্যারেক্টার ম্যাচ করানো জন্যে/ যেমন আমাদের উপরের টেক্সট টাতে দ্বিতীয় ওয়ার্ড <code>a</code> দিয়ে শুরু হয়েছেঃ</p>\n<p>mText.match(/\\ba/g);</p></li>\n</ul>\n<p>এই <code>\\b</code> আসলে যেদিক দিয়ে আপনার ওয়ার্ড বাউন্ডারি, বামে বা ডানে যেদিকে হবে সেদিকেই বসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*z01ahEugwF0nsaG3IhhI9g.png\" alt=\"\" /></p>\n<p>তেমনি শেষের দিক থেকে ম্যাচ করাতে চাইলে ওয়ার্ড বাউন্ডারিটা পরে বসবেঃ</p>\n<pre><code>mText.match(/K\\b/g);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*71s8AAuNI4bH-qBVQXKNJg.png\" alt=\"\" /></p>\n<ul>\n<li><code>\\B</code>— আগেরটার উল্টো, কোনো ওয়ার্ডের শুরুতে বা শেষে নাই এমনকিছু ম্যাচ করানোর জন্যে ব্যবহার করা হয়।</li>\n<li><code>\\0</code> — নাল ক্যারেক্টার ম্যাচ করানোর জন্যে ব্যবহৃত হয়।</li>\n<li><code>\\n</code> — নিউ লাইন ক্যারেক্টার ম্যাচ করানোর জন্যে ব্যবহৃত হয়</li>\n</ul>\n<p><em>*** মনে রাখবেন এখানে উদাহরণগুলোতে আমরা <code>g</code> ফ্ল্যাগ ব্যবহার করেছি। এই ফ্ল্যাগ ব্যবহার না করলে শুধুমাত্র প্রথম ম্যাচটাই পাবেন সবসময়। গ্লোবাললি সবগুলো ম্যাচ পাবেন না।</em></p>\n<p>এগুলোর সাথে ব্যবহার করা জন্যে আবার কিছু কোয়ান্টিফায়ারও আছে। তাই এবার সেগুলো নিয়েই জানা যাক।</p>\n<p><strong>কোয়ান্টিফায়ার(Quantifiers):</strong> কোয়ান্টিফায়ারের কাজ হচ্ছে পরিমাণটা নির্ধারণ করা। আপনি যে অমুক অমুক প্যাটার্নের ক্যারেক্টার চাচ্ছেন, এখন সেটা কেমন পরিমানে চাচ্ছেন সেটাই নির্ধারণ করা যায় কোয়ান্টিফায়ার দিয়ে। ধরি আমাদের নিচে এরকম একটা স্ট্রিং আছেঃ</p>\n<pre><code>const qText = 'aaaabcdefghij109823456';\n</code></pre>\n<p>এখানে উদাহরণ হিসেবে দেওয়া হলেও আপনি এখানে প্লেইন টেক্সট (a, b, c, d…) থেকে শুরু করে একটু আগে আলোচনা করা মেটাক্যারেক্টার এবং ব্র্যাকেটস, দুইটা মিক্স করে বা সবগুলো মিক্স করেও ব্যবহার করতে পারবেন।</p>\n<ul>\n<li><p><code>a+</code> — অন্তত একবার <code>a</code> এমন ক্যারেক্টার ম্যাচ করে। একবার থেকে শুরু করে যতবার থাকবে পুরোটা একসাথে করবেঃ</p>\n<p>qText.match(/a+/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*1yu06tAdiwWjW75Cda2KhQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>a*</code> — সেইম আগেরটার মতোই, তবে না থাকলেও ম্যাচ করবে।</p>\n<p>qText.match(/jk*/g);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*xJ4ZBMFsSQ8W5-RrbmyS5A.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>a?</code> — <code>a</code> থাকতেও পারে আবার নাও থাকতে পারে এমন সিচুয়েশনে এটা ব্যবহার করা যায়ঃ</p>\n<p>qText.match(/jk?1/);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*lEr34BvsCUk2szz9OoVw7Q.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>a$</code> — <code>a</code> স্ট্রিং এর শেষে আছে এমন। আমাদের উদাহরণের টেক্সট এ <code>6</code> শেষে আছেঃ</p>\n<p>qText.match(/6$/);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ty56p-0tDv4qE7ZctsZvFg.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>^a</code> — <code>a</code> শুরুতে আছে এমন স্ট্রিং ম্যাচ করবে। আমাদের এখানেও শুরুতে <code>a</code> ই আছেঃ</p>\n<p>qText.match(/^a/);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*AjBiO7JywzvBXF7_wfFCLw.png\" alt=\"\" /></p>\n<p>এগুলো ছাড়াও আরো কয়েকরকমের আছে, তবে আসল আইডিয়া পেয়ে গেছেন এগুলো আসলে কিভাবে ব্যবহার করতে হয় আশা করি।</p>\n<p>এবার আসি, আমরা রেগুলার এক্সপ্রেশন দিয়ে না হয় এরকম ম্যাচ করালাম। কিন্তু কিভাবে এগুলো ব্যবহার করবো? হ্যাঁ সেজন্যে রেগুলার এক্সপ্রেশনের কিছু মেথড আছে, সেই সাথে স্ট্রিং এরও কিছু মেথড আছে যেগুলো রেগুলার এক্সপ্রেশন সাপোর্ট করে।</p>\n<p><strong>রেগুলার এক্সপ্রেশন দিয়ে কাজ করাঃ</strong> এখন আমরা নিচে রেগুলার এক্সপ্রেশনের ব্যবহার করা যায় এমন কিছু মেথড নিয়ে আলোচনা করবো। এখানকার কিছু মেথড স্ট্রিং এর আর কিছু রেগুলার এক্সপ্রেশনের। রেগুলার এক্সপ্রেশনের মেথড হলে সেটা রেগুলার এক্সপ্রেশন দিয়েই অ্যাক্সেস করতে হবে, আর স্ট্রিং এর মেথড হলে স্ট্রিং দিয়েই অ্যাক্সেস করতে হবে।</p>\n<ul>\n<li><p><code>exec</code>— রেগুলার এক্সপ্রেশনের মেথড, স্ট্রিং এ ম্যাচ করতে ব্যবহার করা হয়। এই স্পেশাল মেথড সাধারণত লুপের সাথে ব্যবহার করা হয়। এটা অ্যারেতে ম্যাচগুলোর কিছু ইমফরমেশনসহ বা কিছু না পেলে <code>null</code> রিটার্ণ করেঃ</p>\n<p>const regexp = (/ab/g);\nlet match;</p>\n<p>while(match = regexp.exec('abcdeabf')) {\nconsole.log(match);\n}</p></li>\n</ul>\n<p>এভাবে লুপ ইউজ করলে এটা প্রত্যেকটা ম্যাচের জন্যে কিছু ইনফরমেশনসহ অ্যারে রিটার্ণ করবে। এখানে যেহেতু দুইটা ম্যাচ আছে, তাই দুইবার দুইটা ম্যাচের জন্যে ইনফরমেনশনসহ দুইটা অ্যারে রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4K2EAYB7C3WQK__c2syXoQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>test</code> — এটাও রেগুলার এক্সপ্রেশনের মেথড, তবে শুধুমাত্র <code>true</code> অথবা <code>false</code> রিটার্ণ করবে ম্যাচ করা উপর ভিত্তি করেঃ</p>\n<p>(/ab/g).test('abcdeabf')</p></li>\n</ul>\n<p>এখানে সত্য <code>true</code> রিটার্ণ হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*H8qoTaOitjeRAnSafX8Uiw.png\" alt=\"\" /></p>\n<pre><code>(/ab/g).test('cdef')\n</code></pre>\n<p>এখানে যেহেতু ম্যাচ করবে না, তাই <code>false</code> রিটার্ণ হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*wq554bDzFWfUvLPdUoYgkw.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>match</code> — এটা স্ট্রিং এর মেথড, স্ট্রিং থেকে কাঙ্খিত ক্যারেক্টারগুলো ম্যাচ করে অ্যারে আকারে রিটার্ণ করে। কিছু না পেলে <code>null</code> রিটার্ণ করবে। এটা <code>exec()</code> এর মতো কিছুটা যদি আমরা গ্লোবাল ম্যাচ এর জন্যে <code>g</code> ফ্ল্যাগ ব্যবহার না করি। আর একের অধিক ম্যাচ থাকলে এটা শুধুমাত্র ম্যাচগুলো একটা অ্যারে আকারে রিটার্ন করেঃ</p>\n<p>('abcdeabf').match(/ab/)</p></li>\n</ul>\n<p>এটা ঠিক আগের <code>exec()</code> এর মতোই ফলাফল দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ErC9hNk8wbOV8tnUliAiXA.png\" alt=\"\" /></p>\n<p>আর যদি একের অধিক ম্যাচ থাকে বা <code>g</code> ফ্ল্যাগ ব্যবহার করা হয়ঃ</p>\n<pre><code>('abcdeabf').match(/ab/g)\n</code></pre>\n<p>শুধুমাত্র ম্যাচগুলো একটা অ্যারে আকারে দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*JxS4N-jLITiAME0Yumarxw.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>search</code> — স্ট্রিং এর মেথড, কিন্তু এটা ইন্ডেক্স নাম্বার রিটার্ণ করে।আর কিছু ম্যাচ না হলে <code>-1</code> রিটার্ণ করে। যখন আপনি কোনো প্যাটার্ন ম্যাচ করাতে চাইবেন এবং একই সাথে সেটার ইন্ডেক্স নাম্বারও চাইবেন, এই মেথডটা কাজে আসবেঃ</p>\n<p>('abcdef').search(/de/)</p></li>\n</ul>\n<p>এটা শুধুমাত্র ইন্ডেক্স নাম্বারটাই রিটার্ণ করবে। আর এটার যেহেতু শুধুমাত্র জানা দরকার যে অমুক স্ট্রিং এ এরকম কোনো প্যাটার্ণ আছে কিনা, তাই এটা প্রথম ম্যাচটাই কাউন্ট করবে এবং সেটার ইন্ডেক্স নাম্বারই রিটার্ণ করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*RRNxFZH6tik2i7oaB1xsBw.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>replace</code> — স্ট্রিং এর এই মেথডের কথা আমরা সবাই কমবেশি জানি, অথবা আমরা হয়তো ব্যবহারও করি। কিন্তু মজার ব্যাপার হলো স্ট্রিং এ ম্যাচ করানোর জন্যে এই মেথডেও আমরা চাইলে রেগুলার এক্সপ্রেশন ব্যবহার করতে পারবো। বাকি সব আগের মতোই। এখানে মজার ব্যাপার হলো <code>g</code> ফ্ল্যাগ ব্যবহার করা হলে যতটা ম্যাচ পাবে, ততটাই রিপ্লেস করে ফেলবেঃ</p>\n<p>('abcdeabf').replace(/ab/g, 'ba')</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*xyiR4cYTV5gOlC07pg05yg.png\" alt=\"\" /></p>\n<p><code>g</code> ফ্ল্যাগ ব্যবহার করা না হলে জাস্ট প্রথম ম্যাচটাই রিপ্লেস করবেঃ</p>\n<pre><code>('abcdeabf').replace(/ab/, 'ba')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*5L6ro6MXCD4V6DfWdo3b5g.png\" alt=\"\" /></p>\n<ul>\n<li><p><code>split</code> — এই মেথডটাও আমাদের নিত্যদিন অনেক কাজে লাগে এবং এটাও রেগুলার এক্সপ্রেশন সাপোর্ট করে। তবে এখানে আমাদের <code>g</code> ফ্ল্যাগ লাগবে না, এটা ম্যাচ পেলেই সেখানে স্প্লিট করে ফেলবেঃ</p>\n<p>('abcdeabf').split(/b/)</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_dSfTzsnGNwmNl_k7ANhXw.png\" alt=\"\" /></p>\n<hr />\n<p>রেগুলার এক্সপ্রেশন নিয়ে লিখলে আরেকটা সিরিজ হয়ে যাবে, আর তাই এখানে খুব ডিটেইলস আলোচনা করলাম না। আপনি চাইলে আমার রেগুলার এক্সপ্রেশনের উপর লিখা ‘<a href=\"https://with.zonayed.me/bn/%E0%A6%9F%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%B8-%E0%A6%8F%E0%A6%A8%E0%A7%8D%E0%A6%A1-%E0%A6%9F%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%95%E0%A7%8D%E0%A6%B8/%E0%A6%8F%E0%A6%95-%E0%A6%AA%E0%A6%B2%E0%A6%95%E0%A7%87-%E0%A6%B0%E0%A7%87%E0%A6%97%E0%A7%81%E0%A6%B2%E0%A6%BE%E0%A6%B0-%E0%A6%8F%E0%A6%95%E0%A7%8D%E0%A6%B8%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%87/\">এক পলকে রেগুলার এক্সপ্রেশন</a>’ সিরিজটা পড়ে দেখতে পারেন।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-10T16:37:34.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)","thumb_img_path":"/images/dailyjs.gif","content":"<p>এরর আমাদের নিত্যদিনের সঙ্গী। কোড লিখলে এরর হবেই। তবে আমরা অনেকে মনে করি এরর মানে তো এররই, এগুলোর উপর আর আমাদের কোনো কন্ট্রোল নাই। হ্যা, ব্যাপারটা আংশিক সত্য হলেও ঠিক পুরোপুরি না। তাছাড়া একটা ভালো অ্যাপ্লিকেশনে কোনো এরর আসলে সেটা ইউজারদের বুঝতে না দেওয়াটাও অন্যতম একটা বৈশিষ্ট্য। ইউজার আমাদের মতো ডেভেলপার কন্সোল ওপেন করে দেখবেও না যে এরর হয়েছে, আর তাই আমাদের সে এররকেও ভালো ইউজার এক্সপেরিয়েন্সের মধ্যে নিয়ে যেতে হবে। আর মূলত এইজন্যেই এই এরর হ্যান্ডেলিং এর ব্যাপারটা আসে। আমরা আজকে এটা নিয়েই আলোচনা করবো।</p>\n<p>এখন আমাদের অ্যাপ্লিকেশনে কিছু কোড বা ফাংশন থাকতে পারে যেগুলো এরর ফলাফল দেখাতে পারে। আর তাই ঐসব কোডগুলোর ক্ষেত্রে একটু সতর্ক হয়ে হ্যান্ডল করতে হয়। আর সেজন্যেই জাভাস্ক্রিপ্ট এ কিছু স্টেটমেন্ট আছে এরকম পরিস্থিতি সামাল দেওয়ায়র জন্যে।</p>\n<p>প্রথমেই আমরা একদম সাধারণ একটা কোডে কোনোরকম এরর হ্যান্ডল না করে দেখি সেটা আমাদের কেমন আউটপুট দেয়ঃ</p>\n<pre><code>console.aula('This is an error');\n</code></pre>\n<p>এটা একদম কড়াকড়িভাবে এরর দিবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*fN22x5OO7zdNxakIwWFtOA.png\" alt=\"\" /></p>\n<p>এখন এই এররটা হয়তো কোডে তেমন ইফেক্ট ফেলবে না। কিন্তু আমাদের আসল ওয়েব অ্যাপ্লিকেশনে হয়তো কোনো এররের কারণে পুরো অ্যাপ্লিকেশনই ঠিকমতো কাজ করা বন্ধ করে দিতে পারে, ক্র্যাশ করতে পারে। আর তাই আমাদের এরকম লাল লাল এররগুলোকে হ্যান্ডল করতে হয় যাতে ওয়েব অ্যাপ্লিকেশন এরকম এরর সম্পর্কে আগেভাগে তৈরী থাকতে পারে। তাহলে অ্যাপ্লিকেশন ঠিকঠাক মতো কাজ করতে পারবে। এরর আসলেও সেটা হ্যান্ডল করে ফেলায় আর ক্র্যাশ করবে না। আর তাই নিচের এগুলো দিয়ে আমরা এরর হ্যান্ডল করতে পারিঃ</p>\n<p><strong>১। <code>try</code> স্টেটমেন্টঃ</strong> যেখানে এররের সম্ভাবনা আছে, সেটা পুরোটাকে এই <code>try</code> ব্লকের ভিতরে রাখতে হয়। যদি কোড ঠিকঠাক রান করে তাহলে তো করলোই। কিন্তু যদি কোনো এরর আসে, তাহলে এটা নিজে থেকেই একটা এরর থ্রো করবেঃ</p>\n<pre><code>try {\n   console.aula('This is an error');\n}\n</code></pre>\n<p>এখন শুধু এই ট্রাই ব্লকের কোড একা রান করবে না, এর সাথে আপনার আরেকটা স্টেটমেন্টও থাকা লাগবে।</p>\n<p><strong>২। <code>catch</code> স্টেটমেন্টঃ</strong> ক্যাচ স্টেটমেন্ট এর কাজ হচ্ছে সেই থ্রো করা এররটাকে ক্যাচ করা। যদি কোনো এরর না হয় তাহলে এই ব্লকের ভিতরের কোড কাজ করবে না। মূলত কোনো এরর আসলে এখানেই সেটাকে হ্যান্ডল করতে হয়। আগের ট্রাই এর উদাহরণে ট্রাই স্টেটমেন্ট একা কাজ করতে পারে না, সেটার সাথে এই ক্যাচ স্টেটমেন্টও লাগবেঃ</p>\n<pre><code>try {\n   console.aula('This is an error');\n} catch(err) {\n   console.log('Do anything here');\n   console.log(err);\n}\n</code></pre>\n<p>এবার দেখবেন কত সুন্দর করে আউটপুট এসেছে সরাসরি কোনো এরর না দেখিয়েঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*7nw5Lc_pjP3Yuopr3IbGUg.png\" alt=\"\" /></p>\n<p><code>catch</code> ব্লকে এরকম এরর প্রিন্ট করার জন্যে নয় বরং আপনি এখানে ইউজারকে সুন্দর করে কিছু লেখা বা ম্যাসেজ দিতে পারেন যে আসলে এভাবে হচ্ছে না অন্যকিছু করতে হবে। মোট কথা এখানে এররটা হ্যান্ডল করে ইউজারকে ভালো এক্সপেরিয়েন্স দেওয়া যাবে।</p>\n<p><strong>৩। <code>throw</code> স্টেটমেন্টঃ</strong> এই স্টেটমেন্ট দিয়ে আমরা কাস্টম এরর থ্রো করতে পারি। আমাদের কোডে কোনো কন্ডিশনের উপরে ভিত্তি করে আমরা কাস্টম এরর দেখাতে পারিঃ</p>\n<pre><code>const age = 17;\ntry {\n   if(age &lt; 18) {\n      throw 'You are too young';\n   } else {\n      console.log('You are adult');\n   }\n} catch(err) {\n   console.log(err);\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*ArDAqNEALG6IGaj5_qrXXw.png\" alt=\"\" /></p>\n<p><strong>৪। <code>finally</code> স্টেটমেন্টঃ</strong> এই স্টেটমেন্ট এর ভিতরের কোড সবসময়েই রান করবে, এরর হউক বা নাই হউকঃ</p>\n<pre><code>try {\n   throw 'An error'\n} catch(err) {\n   console.log(err);\n} finally {\n   console.log('I will run always');\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*CVLD_FJ6GoBE_KlkiAUsFg.png\" alt=\"\" /></p>\n<pre><code>try {\n   console.log('No error');\n} catch(err) {\n   console.log(err);\n} finally {\n   console.log('I will run always');\n}\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*PHAbEpO3pfFaocQT8k92YQ.png\" alt=\"\" /></p>\n<p>এই <code>finally</code> সাধারণত ব্যবহার করা হয় আমাদের একটা কোড ট্রাই করার পর কোনো বাধ্যতামূলক অ্যাকশন নেওয়ার জন্যে। কোড রান করলে তো করলোই, এরর দিলে সেটা তো <code>catch</code> করা হচ্ছেই, কিন্তু আমার সব কাজ শেষ করার পর অমুক কাজটা অবশ্যই করতে হবে। আর এরকম পরিস্থিতিতেই এই <code>finally</code> কাজে লাগে।</p>\n<h4 id=\"\"><strong>এরর অবজেক্টঃ</strong></h4>\n<p>জাভাস্ক্রিপ্ট এ বিল্ট-ইন এরর অবজেক্টও আছে। আর অবজেক্ট মানে সেটার প্রপার্টিও আছে। আমরা চাইলে এরকম এরর অবজেক্ট তৈরী করতে পারি <code>Error()</code> কন্সট্রাকটর মেথড থেক। আমরা একটু আগে <code>throw</code> ব্যবহার করে কাস্টম একটা টেক্সট থ্রো করেছিলাম এরর দেখানোর জন্যে। কিন্তু এররকে আরো বাস্তব রূপ দেওয়ার জন্যে এই <code>Error()</code> কন্সট্রাকটর ব্যবহার করে আরো সুন্দর এরর অবজেক্ট তৈরী করা যাবে।</p>\n<p>তো এটা দিয়ে এভাবে কাস্টমভাবে আরো বাস্তবসম্মত এরর তৈরী করা যাবেঃ</p>\n<pre><code>const anError = new Error('This is a error object');\n</code></pre>\n<p>এখন যদি আমাদের নতুন বানানো এই <code>anError</code> এরর অবজেক্ট টা দেখেন রান করেঃ</p>\n<pre><code>console.log(anError);\n</code></pre>\n<p>এটা সত্যিকারের এররের মতো করে এসেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*esjjLavSZaBSj4HfvhL4nQ.png\" alt=\"\" /></p>\n<p>এখন এটা কোথায় কাজে লাগাবো? হ্যা, উপরের <code>throw</code> তে আমরা একটা কাস্টম এরর থ্রো করেছিলাম। যদিও ঐটা জাস্ট একটা মাত্র টেক্সট ছিলো। কিন্তু এখন আমরা এই এরর কন্সট্রাক্টর মেথড ব্যবহার করে আরো সুন্দর করে এররের মতো করে এরর থ্রো করতে পারবোঃ</p>\n<pre><code>const ageNew = 17;\ntry {\n   if(ageNew &lt; 18) {\n      throw new Error('You are too young');\n   } else {\n      console.log('You are adult');\n   }\n} catch(err) {\n   console.log(err);\n}\n</code></pre>\n<p>এবারেরটা সত্যিকারের এররের মতো এরর থ্রো করেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*D4cjd-rOaT8BbAJZj6x5rA.png\" alt=\"\" /></p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-11T16:37:28.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)","thumb_img_path":"/images/dailyjs.gif","content":"<p>ডেভেলপার কন্সোল! এগুলো আমাদের জাভাস্ক্রিপ্ট ডেভেলপমেন্ট এর লাইফে সবচেয়ে বেশী কাজে লাগে। বিশেষ করে ব্রাউজারের কন্সোলগুলো। কারণ ব্যবহার করা সহজ আর যেকোনো জায়গা থেকেই অ্যাক্সেস করা যায়। এতোদিন আমরা দেখেছিও কিভাবে আমাদের এই কন্সোল আমাদের সাহায্য করতে পারে। আর ক্রোমের ডেভেলপার কন্সোল বেশ পাওয়ারফুল হওয়ার কারণে আমি আমার সব লেখায় এটাই ব্যবহার করেছি। আপনি ফলো করে থাকলে হয়তো দেখবেন এই ক্রোমের ডেভেলপার কন্সোল কতটা কাজে লাগে ডেভেলপমেন্ট এর সময়। কিন্তু এর বাইরেও ক্রোমের(সাথে অন্যান্য ব্রাউজেরেরও) এই কন্সোলে আরো অনেক কাজ করা যায়। আজকে এই পর্বে আমরা সেগুলোই দেখবো একটা একটা করে।</p>\n<p>এই লেখায় যে ব্যাপারগুলো নিয়ে আলোচনা করা হবে এগুলো একই সাথে ফায়ারফক্স বা অন্যান্য ডেভেলপার কন্সোলেও চলবে। সেই সাথে নোড জেএস এও দুই একটা ছাড়া বাকী সবগুলো টেকনিকই অ্যাপ্লাই করতে পারবেন।</p>\n<p><code>console.log</code> এটা আমাদের নিত্যদিনের সঙ্গী। কিন্তু এখানে একটা জিনিস খেয়াল করলে দেখবেন <code>console</code> এখানে একটা অবজেক্ট আর <code>log</code> এই অবজেক্ট এর একটা মেথড। এখন <code>console</code> অবজেক্ট এর কি আর কোনো মেথড আছে? হ্যা তাহলে এই <code>console</code> টাকেই ইন্সপেক্ট করে দেখিঃ</p>\n<pre><code>console.dir(console);\n</code></pre>\n<p>এখানে দেখবেন <code>log()</code> মেথডটা ছাড়াও আরো অনেক মেথড আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*E3mGVPALQgurhxw-jq25Bg.png\" alt=\"\" /></p>\n<p>এখন এই মেথড একেকটার কাজ একেকরকম। আমরা এখানে আজকে সবগুলো দেখবো না। বরং যেগুলো কাজে লাগতে পারে শুধুমাত্র সেগুলোই দেখবো।</p>\n<ul>\n<li><p><strong><code>console.assert():</code></strong> যারা টেস্টিং এর সাথে পরিচিত আছেন, তাদের এই <code>assert()</code> মেথড বেশ কাজে লাগতে পারে। এটা দুইটা আর্গুমেন্ট নিবে। প্রথমটায় একটা এক্সপ্রেশন নিবে। আর দ্বিতীয়টায় একটা ম্যাসেজ। এই ম্যাসেজ ওয়ার্নিং আকারে দেখাবে যদি আপনার দেওয়া এক্সপ্রেশনটা মিথ্যা <code>false</code> রিটার্ণ করেঃ</p>\n<p>console.assert(1==1, 'Error');</p></li>\n</ul>\n<p>এখানে কিছুই পাবেন না কারণ <code>1==1</code> সত্য <code>true</code> রিটার্ণ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*mx6yBWD9DdBohDwDrO9rnA.png\" alt=\"\" /></p>\n<p>কিন্তু যদি এই এক্সপ্রেশন মিথ্যা <code>false</code> রিটার্ণ করবে তাহলেই একমাত্র এখানকার ম্যাসেজটা দেখাবেঃ</p>\n<pre><code>console.assert(1==2, 'Error');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*EXpS-9KbT7s29D4SDxocpA.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console.clear():</code></strong> মেথডের নাম যেরকম, কাজও সেরকমই। এটা দিয়ে কন্সোলে থাকা সব ধরনের লেখা মুছে ফেলতে পারবেন। মানে এক কথায় কন্সোল ক্লিয়ার করে ফেলতে পারবেন। একটু আগের আউটপুটগুলো যদি আপনার কন্সোলে থাকে, আপনি উপরে <strong>Clear console</strong> এ ক্লিক করে কন্সোল ক্লিয়ার করতে পারবেন। কিন্তু আপনি চাইলে এই <code>clear()</code> মেথড ব্যবহার করেও কন্সোল ক্লিয়ার করতে পারবেন। আপনি কোডের ভিতর থেকে চাইলে এই মেথড ব্যবহার করে কন্সোল ক্লিয়ার রাখতে পারবেনঃ</p>\n<p>console.clear();</p></li>\n</ul>\n<p>এটা রান করার পর কন্সোল ক্লিয়ার হয়ে যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*2LqJ4yogmvs2pbjDl3WA2g.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console.count()</code>:</strong> এটা খুব মজার একটা মেথড। আপনি এই কাউন্ট মেথড টা কতবার কল করেছেন সেটা এই কাউন্ট মেথডই রিটার্ণ করবেঃ</p>\n<p>console.count();\nconsole.count();\nconsole.count();\nconsole.count();\nconsole.count();</p></li>\n</ul>\n<p>এইগুলো একটা একটা করে রান করলে দেখবেন কতবার কাউন্ট কল করা হচ্ছে সেটা রিটার্ণ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*jA8kKzDW76KCpHNikQAlFA.png\" alt=\"\" /></p>\n<p>এখন নিজেই নিজেকে গণনা করাটা খুব কাজের না, তবে এখানে আপনি একটা আর্গুমেন্টও দিতে পারবেন। সেই আর্গুমেন্ট কোনো নির্দিষ্ট ভ্যারিয়েবলও হতে পারে, আবার যেকোনো লেভেলও হতে পারে। তখন আপনার ঐ ভ্যারিয়েবলকে কতবার কল করেছেন সেটা কাউন্ট রিটার্ণ করবেঃ</p>\n<pre><code>const countVar = 'Hello';\nconsole.count(countVar);\nconsole.count(countVar);\nconsole.count(countVar);\n</code></pre>\n<p>তিনবার কল করেছি, আর প্রত্যেকবার কতবার কল করা হয়েছে সেটাই রিটার্ণ করছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*kZDp-BA-ISKL1boMg5SOGA.png\" alt=\"\" /></p>\n<p>ভ্যারিয়েবল ছাড়া যেকোনোকিছুও হতে পারেঃ</p>\n<pre><code>console.count('Anything');\nconsole.count('Anything');\nconsole.count('Anything');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iW3mvQQXjPunCRQei8YJ8A.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console.dir()</code>:</strong> এই মেথডটাও আমরা কোথাও কোথাও ব্যবহার করেছি, আর ডেভেলপমেন্ট এর সময় অনেক উপকারী একটা মেথড। এটার কাজ হচ্ছে জাভাস্ক্রিপ্ট এর কোনো অবজেক্টকে সুন্দর করে খুলে উপস্থাপন করা। অবজেক্ট এ কি কি প্রপার্টি আছে, মেথড আছে এসব কিছু সুন্দর করে লিস্ট আকারে দেখাবে আপনার কন্সোলে। যেমন আমরা যদি উপরে <code>console</code> অবজেক্ট খুলে দেখেছিলামঃ</p>\n<p>console.dir(console);</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*kdUZe6-DQmN1YP5qcalbqw.png\" alt=\"\" /></p>\n<p>এখন এখানে ত্রিভাজাকৃতির বাটনে ক্লিক করলেই সুন্দর করে লিস্ট আকারে এই <code>console</code> অবজেক্ট এর ভিতরের প্রপার্টি, মেথড সব দেখতে পারবেন। খুব কাজের!</p>\n<ul>\n<li><p><strong><code>console.error()</code>:</strong> এটার কাজ হচ্ছে এরর দেখানো। আমাদের কোডে কোনো এরর থাকলে সাধারণত কন্সোলে লাল এরর টাইপের লেখা দেখতে পাই। সেইম জিনিসটাই আমরা এই মেথড দিয়েও তৈরী করতে পারিঃ</p>\n<p>console.error('This is a error log');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*eXObp-X7uv_ltCEhL2aNkw.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console group()</code>,<code>console.groupEnd()</code>:</strong> এই দুই মেথডটা আসলে একসাথেই কাজ করে। আমাদের সব কন্সোল লগ বা এরর, ওয়ার্নিং সহ আরো বাকি সবকিছু গ্রুপ করার জন্যে এই দুইটা মেথড ব্যবহার করা হয়ঃ</p>\n<p>console.group('A Grouped Console');\nconsole.log('Normal Console Log');\nconsole.error('Error Console Log');\nconsole.dir(console);\nconsole.groupEnd();</p></li>\n</ul>\n<p>এখানে গ্রুপ <code>group()</code> দিয়ে শুরু হয়েছে, আর <code>group()</code> এর ভিতরে আমরা গ্রুপের নাম দিয়েছি, না দিলেও চলে। তারপর মাঝখানে কতগুলো কন্সোলের অপারেশন করা হয়েছে। এবং সবশেষে <code>groupEnd()</code> দিয়ে গ্রুপিং শেষ করা হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*wcJuU0m9CQgBfuF6fMv0vw.png\" alt=\"\" /></p>\n<p>নেস্টেড গ্রুপিং বা একটা ভিতরে আরেকটা গ্রুপ করাও সম্ভবঃ</p>\n<pre><code>console.group('A Grouped Console');\nconsole.log('Normal Console Log');\nconsole.error('Error Console Log');\nconsole.dir(console);\n\nconsole.group('Another Grouped Console');\nconsole.log('Normal Console Log');\nconsole.error('Error Console Log');\nconsole.dir(console);\nconsole.groupEnd();\n\nconsole.groupEnd();\n</code></pre>\n<p>এখানে দেখবেন দুইটা গ্রুপ তৈরী হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*maprR_VBhPs3hz6dvsnm8Q.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console.info()</code>:</strong> সিম্পল ইনফো টাইপের ম্যাসেজ দেখানোর জন্যেঃ</p>\n<p>console.info('Just a info message');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*UBKVffMtExYesVP7n9lsCw.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console.log()</code>:</strong> এটা আমাদের বহুল ব্যবহৃত log() মেথড। এটা কেনো ব্যবহার করা হয় সেটা হয়তো আর বলা লাগবে নাঃ</p>\n<p>console.log('A Simple Console Log');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*iNF8HAdxExG0Sx0lEMBGkQ.png\" alt=\"\" /></p>\n<p>কিন্তু এখানেই এটার কাজ শেষ না, আমরা চাইলে এটা দিয়ে আরো কিছু কাজ করতে পারি। যেমন আমরা প্লেসহোল্ডার বসিয়ে কোনোকিছু প্রিন্ট করতে পারিঃ</p>\n<pre><code>console.log('Hello I am %s!', 'Zonayed Ahmed')\n</code></pre>\n<p>এখানে <code>%s</code> এর জায়গায় আমাদের পরে দেওয়া আর্গুমেন্টটা বসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*VbNAsPLeJhJsg_gVNsv46Q.png\" alt=\"\" /></p>\n<p>যত ইচ্ছা পারবেনঃ</p>\n<pre><code>console.log('My name is %s And I am %s years old!', 'Zonayed', 21)\n</code></pre>\n<p>যতটা এরকম প্লেসহোল্ডার দিবেন, পরে ঠিক সিরিয়ালি আর্গুমেন্টগুলো দিতে হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*S1TUr3e5zxpTbkEJggORXw.png\" alt=\"\" /></p>\n<p>এক্সপ্রেশনও এখানে ভ্যালিডঃ</p>\n<pre><code>console.log('Addition of 2 + 2 is: %s', (2 + 2));\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Y_PJc1ticfwJU1dWRL1mFw.png\" alt=\"\" /></p>\n<p>ইএস৬ এর টেমপ্লেট লিটারেল আরো বেশ ভালো কাজ করে এখানেঃ</p>\n<pre><code>const myName = 'Zawad Ahmed';\nconsole.log(`My name is ${myName}`);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*W9bHSMXW9bnZ8ZK4F5A8mg.png\" alt=\"\" /></p>\n<p>তারপর সবচেয়ে মজার যে জিনিসটা এখন দেখাবো সেটা হচ্ছে কন্সোলের লেখাগুলোতেও চাইলে আমরা CSS দিয়ে স্টাইলিং করতে পারবো। অনায়ন্য সবগুলো টেকনিক সাপোর্ট করলেও এটা নোড জেএস এ সাপোর্ট করবে না। তাই নোড জেএস এ ব্যবহার করতে পারবেন না। কিন্তু সব ব্রাউজারেই সাপোর্ট করেঃ</p>\n<pre><code>console.log('%cZonayed Ahmed', 'font-size: 50px; background-color: red')\n</code></pre>\n<p>আমরা এখানে <code>%c</code> দিয়ে বুঝাতে চাচ্ছি আমরা এখান থেকে পরের আর্গুমেন্ট এ লেখা সিএসএসটা অ্যাপ্লাই করতে চাচ্ছিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*obqZq32mMBm5PKhwkbGtug.png\" alt=\"\" /></p>\n<p>এখন এই স্টাইল পুরো কন্টেন্ট এ অ্যাপ্লাই হবে এমন না, যেখানে আপনি <code>%c</code> দিবেন সেখান থেকেই অ্যাপ্লাই হবেঃ</p>\n<pre><code>console.log('My name is %cZonayed Ahmed', 'color: #fff; background-color: red; border-radius: 4px')\n</code></pre>\n<p>যেখানে দিবেন সেখান থেকেই স্টাইলিং টা হবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*HEJppNH2TbPfgmiR4sI7sQ.png\" alt=\"\" /></p>\n<p>এখন আপনি চাইলে যতগুলো ইচ্ছা এই <code>%c</code> ব্যবহার করতে পারবেন একটা লগেই, আর নিজের ইচ্ছামতো স্টাইলও দিতে পারবেন। শুধুমাত্র <code>%c</code> যতটা হবে, সিএসএসওগুলোও ততটা আর্গুমেন্ট এবং পজিশন ক্রমানুসারে ঠিক করে দিতে হবেঃ</p>\n<pre><code>console.log('My name is %cZonayed Ahmed and I am %c21', 'color: #fff; background-color: red; border-radius: 4px', 'color: #fff; background-color: #333; border-radius: 4px')\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*H3SvpKvRQfETwwMONVfwqw.png\" alt=\"\" /></p>\n<p>ফেসবুকে কখনো ডেভেলপার কন্সোল ওপেন করে থাকলে হয়তো এরকম কিছুই দেখবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*SMX1IZtEpiPsnsqWXA00jQ.png\" alt=\"\" /></p>\n<p>এবার আপনিও জানেন এটা কিভাবে করতে হয়।</p>\n<ul>\n<li><p><strong><code>console.table()</code>:</strong> এটা আরেকটা মজার মেথড। আপনি চাইলে আপনার ডাটা স্ট্রাকচারের ডাটাগুলো আরো সুন্দর করে, টেবিল আকারে দেখাতে পারবেন। ধরি আমাদের এমন একটা অ্যারে আছেঃ</p>\n<p>const anArr = ['Salam', 'Barkat', 'Rafiq', 'Jabbar'];</p></li>\n</ul>\n<p>এখন এটা যদি এই টেবিল মেথড দিয়ে দেখিঃ</p>\n<pre><code>console.table(anArr);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*wGyygzDOmUQ9hF68O7FCuw.png\" alt=\"\" /></p>\n<p>সেইম যদি অবজেক্ট থাকে তাহলে সেটাও এরকম টেবিল আকারে দেখাবে। অ্যারের টেবিলে দেখবেন ইন্ডেক্স ব্যবহার করা হয়েছে। অবজেক্ট এর ক্ষেত্রে আমরা সেখানে কী দেখতে পাবোঃ</p>\n<pre><code>const anObj = {\n   name: 'Zawad Ahmed',\n   age: 1,\n   canWalk: true,\n   canTalk: false,\n   nationality: 'Bangladeshi',\n   gender: 'Male'\n}\n</code></pre>\n<p>এখন এই অবজেক্ট যদি দেখি এই টেবিল মেথড দিয়েঃ</p>\n<pre><code>console.table(anObj);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*FH_KCg0u31tPjSz2We2w9w.png\" alt=\"\" /></p>\n<p>এই মেথডটা নোড জেএস এ কাজ করবে না।</p>\n<ul>\n<li><p><strong><code>console.time()</code>, <code>console.timeEnd()</code>:</strong> এই দুইটা মেথড এর মধ্যে আপনি আপনার জাভাস্ক্রিপ্ট কোড দিবেন, তারপর রান করানোর পর এটা আপনাকে বলে দিবে আপনার কোডের অপারেশন শেষ করতে কত সময় লেগেছেঃ</p>\n<p>console.time();\nfor(var i = 0; i &lt; 10000; i++) {\nconsole.log('Fake Time');\n}\nconsole.timeEnd();</p></li>\n</ul>\n<p>এখানে একটু সতর্ক হয়ে নিবেন যেহেতু আমি ফেইক অপারেশন তৈরী করার জন্যে ১০ হাজার লুপ তৈরী করেছি। ম্যাশিন স্লো হলে ট্রাই করার দরকার নাই। এবার দেখবেন এটা রিটার্ণ করবে এই অপারেশনটা শেষ করতে কতসময় লেগেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*9X_WV-LnIxX4I0iI51Zq9w.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong><code>console.warn()</code>:</strong> কন্সোলে ওয়ার্নিং আকারে ম্যাসেজ দেখানোর জন্যেঃ</p>\n<p>console.warn('A Simple Warning');</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*_vlOB7qK_cVyy_s_nZrPLg.png\" alt=\"\" /></p>\n<hr />\n<p>এই অংশে যেগুলো নিয়ে আলোচনা করবো এগুলো সব ডম স্পেসিফিক। এগুলো আপনি নোড জেএস এ ব্যবহার করতে পারবেন না। শুধুমাত্র আপনার ব্রাউজারে কাজ করবে। ব্রাউজারে কন্সোলে কিভাবে আপনি আপনার ডমের সাথে কাজ করবেন ঐরকম কিছু টেকনিক নিয়েই এই অংশে আলোচনা করা হয়েছে। এখানকার বেশীরভাগ টেকনিকই গুগুল ক্রোম স্পেসেফিক। তাই অন্যান্য ব্রাউজারে নাও চলতে পারে।</p>\n<p><strong>DOM ইলিমেন্ট সিলেক্ট করাঃ</strong></p>\n<ul>\n<li><strong>কারেন্ট ডম ইলিমেন্ট সিলেক্ট করাঃ</strong> আপনি যদি <a href=\"https://js.zonayed.me/\">কোনো</a> ডম ইলিমেন্ট ইন্সপেক্ট করে সিলেক্ট করেন তাহলে ঐটার ডান পাশে এরকম একটা <code>$0</code> সাইন দেখতে পাবেনঃ</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*uY6l9qH7CEdRF3ifQgQmIw.png\" alt=\"\" /></p>\n<p>এখন কন্সোল থেকে আপনি $0 লিখে এই সিলেক্ট করা ডম ইলিমেন্ট টা কন্সোলে সিলেক্ট করতে পারবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*4ueo8-bUF7dkbuMcGTE6gQ.png\" alt=\"\" /></p>\n<ul>\n<li><p><strong>আগের ডম সিলেকশন হিস্টোরী সিলেক্ট করাঃ</strong> একইভাবে চাইলে আপনি আগের সিলেক্ট করা চারটা ডম ইলিমেন্ট এভাবে যথাক্রমে <code>$1</code>, <code>$2</code>, <code>$3</code> ও <code>$4</code> দিয়ে কন্সোলে সিলেক্ট করতে পারবেন। এখানে <code>$1</code> হচ্ছ বর্তমানে ইন্সপেক্ট এ সিলেক্ট করা ডম ইলিমেন্ট এর ঠিক আগেরটা, $2 এরও আগেরটা আর এভাবে বাকি দুইটা। এভাবে <code>$_</code> দিয়েও আগের সিলেক্ট করা ইলিমেন্টটা কন্সোলে সিলেক্ট করতে পারবেন। এখানে ডিমো দেখানো টাফ তাই নিজে প্র্যাক্টিস করে দেখে নিবেন।</p></li>\n<li><p>আগের রান করা এক্সপ্রেশন দেখতেঃ আমরা <code>$_</code> এর কথা একটু আগে বললেও এটা দিয়ে আরেকটা কাজ করা যায়। সেটা হচ্ছে আপনি সর্বশেষ যে এক্সপ্রেশনটা রান করেছেন সেটা যদি দেখতে চান তাহলে এই <code>$_</code> ব্যবহার করতে পারবেন। ধরি আমরা একটা সিম্পল এক্সপ্রেশন রান করিয়েছি কন্সোলেঃ</p>\n<p>10 + 20</p></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*qZWFNp8Q1G3qKx2cwowhuA.png\" alt=\"\" /></p>\n<p>এখন এটা রিটার্ণ করে ফেলছে, মানে শেষ। কিন্তু যদি আমরা আবার দেখতে চাই কি রিটার্ণ করেছে এটা তাহলে সহজেই করে ফেলতে পারবোঃ</p>\n<pre><code>$_\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*PqscuhNmI-ENZwQ7mxsR1w.png\" alt=\"\" /></p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-12T16:37:23.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)","thumb_img_path":"/images/dailyjs.gif","content":"<p>জাভাস্ক্রিপ্ট কি সিনক্রোনাস, নাকি অ্যাসিনক্রোনাস? এটা নিয়ে অনেক কনফিউশন থাকলেও জাভাস্ক্রিপ্ট নরমালি সিনক্রোনাস প্রোগ্রামিং ল্যাংগুয়েজই, তবে আমরা যদি রিমোট কোনো সার্ভারে কোনো অপারেশন করতে চাই, বা ইনপুট/আউটপুট টাইপের কোনো অপারেশন করতে চাই যেটাকে আসলে অ্যাজাক্স কল বলে, তখন আসলে জাভাস্ক্রিপ্ট অ্যাসিনক্রোনাস আচরণ করে। এখন এই অ্যাসিনক্রোনাস মানে কি? হ্যা সেটা জানার জন্যে আমাদের আরেকটা শব্দ ‘সিনক্রোনাস’ এর সাথেও পরিচিত হতে হবে প্রথমে। যত প্রোগ্রামিং ল্যাংগুয়েজ আছে তারমধ্যে বেশীরভাগই হচ্ছে সিনক্রোনাসলি সব কাজ করে। এটার মানে কি? হ্যা তাহলে নিচে আমরা সি++ আর জাভাস্ক্রিপ্ট এর দেখতে একই রকম দুইটা কোড দেখিঃ</p>\n<p>সি++ জানা লাগবে না আপনার, তবে অন্যান্য যেকোনো ল্যাঙ্গুয়েজে যদি এরকম কিছু লিখিঃ</p>\n<pre><code>#include&lt;iostream&gt;\n#include &lt;unistd.h&gt;\n\nint getVar() {\n   int x = 12;\n   sleep(3);\n   return x;\n}\n\nint main() {\n   int value = getVar();\n   std::cout &lt;&lt; \"The Value is: \" &lt;&lt; value &lt;&lt; std::endl;\n}\n</code></pre>\n<p>আপনি যদি জানেন সি++ এ কিভাবে প্রোগ্রাম রান করতে হয় তাহলে এটা ট্রাই করতে পারেন, আর যদি না জানেন তাহলেও সমস্যা নাই। আমি যা বলি জাস্ট দেখে যান। এখানে মূলত আমি একটা <code>value</code> নিতে চাচ্ছি আরেকটা ফাংশন <code>getVar</code> এর মাধ্যমে। এখন এই <code>getVar</code> তিন সেকেন্ড স্লিপ করে তারপর ভ্যালুটা রিটার্ণ করেছে। এখন এটা যদি আমরা রান করি তাহলে এরকম আউটপুট দেখতে পাবোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ouGveyrkuhmPBSumhBt8Kg.png\" alt=\"\" /></p>\n<p>এটা তিন সেকেন্ড ওয়েট করবে, তারপর আমাদের আউটপুট দেখাবে। মূলত সব প্রোগ্রামিং ল্যাংগুয়েজই ঠিক এরকম বিহ্যেইভ করবে যেটাকে সিনক্রোনাস বলে।</p>\n<p>কিন্তু সেইম টাইপের অপারেশনের ক্ষেত্রে জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের জন্যে একটু অন্যরকমভাবে কাজ করবে। জাভাস্ক্রিপ্ট এ অনেকটা সেইম কোড দিলেঃ</p>\n<pre><code>function getVar() {\n   var x;\n   setTimeout(function() {\n      x = 12;\n   }, 3000)\n   return x;\n}\nvar value = getVar();\nconsole.log('The Value is: ' + value);\n</code></pre>\n<p>এখন দেখবেন অনেকটা সেইম দেখতে জাভাস্ক্রিপ্ট কোড আমাদের <code>value</code> এর কোনো ভ্যালু দেখাচ্ছে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ExhhAhL7yRgkMPMD1n4ZNw.png\" alt=\"\" /></p>\n<p>কারণ জাভাস্ক্রিপ্ট এখানে অ্যাসিনক্রোনাস আচরণ করছে। অন্যান্য সব ল্যাংগুয়েজ যেখানে একটার পর আরেকটা ইন্সট্রাকশন ক্রমানুসারে এক্সিকিউট করে যায়, জাভাস্ক্রিপ্ট এ রকম অ্যাজাক্স কলের ক্ষেত্রে ঐরকমটা করে না। জাভাস্ক্রিপ্ট যদি দেখে কোথাও কোনো কোডের ইন্সট্রাকশনের কাজ করতে একটু টাইম লাগছে বা অন্যকথায় কোনো অ্যাজাক্স কল দেখে, তাহলে সেটা সেই অংশে সেই অপারেশন শেষ হওয়া পর্যন্ত অপেক্ষা না করে পরের অপারশনে চলে বাকীগুলো করতে থাকে। এখন এই প্রোগ্রামেও আমরা <code>setTimeout</code> দিয়ে ৩ সেকেন্ড পরে x এ ভ্যালু অ্যাসাইন করতে বলছি। এখন যেহেতু এখানে ৩ সেকেন্ড টাইম লাগবে, তাই এই অংশটাতে অপেক্ষা না করে পরের বাকি অপারশনগুলো রান হয়ে যায়। এখানে রিটার্ণ স্টেটমেন্ট এ চলে গেছে। মানে ভ্যালু রিটার্ণ করে দিয়েছে, যেখানে ভ্যালু হচ্ছে <code>undefined</code> আর তাই রেজাল্টেও <code>undefined</code> ই দেখাচ্ছে।</p>\n<p>উপরের কোডটা জাস্ট সি++ এর সাথে মিল রেখে লিখা, কিন্তু আমরা এটা এভাবেও একটু মডিফাই করতে পারিঃ</p>\n<pre><code>var value;\nsetTimeout(function() {\n value = 12;\n}, 3000)\nconsole.log('The value is: ' + value);\n</code></pre>\n<p>এখানে আমরা <code>value</code> তে ৩ সেকেন্ড পরে ভ্যালু অ্যাসাইন করেছি। আর জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের জন্যে এখানে কন্সোল লগটাতে <code>value</code> <code>undefined</code> দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*0qLiyofMoTf_uHdZ1WS7UA.png\" alt=\"\" /></p>\n<p>কিন্তু, কিন্তু আপনি যদি ৩ সেকেন্ড যাওয়ার পর আবার <code>value</code> কন্সোল লগ করে দেখেনঃ</p>\n<pre><code>console.log('The value is: ' + value);\n</code></pre>\n<p>এখন ভ্যালু দেখাচ্ছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*gVf0SMFuip0gpDTx-GHdjw.png\" alt=\"\" /></p>\n<p>এখানে একদম পরিষ্কারভাবে অ্যাসিনক্রোনাস জাভাস্ক্রিপ্ট এর বিহ্যেভিয়ার দেখা যাচ্ছে। জাভাস্ক্রিপ্ট এরকম টাইম নিতে পারে অপারেশনগুলোকে জাস্ট ট্রিগার করে পরের অপারেশনগুলো করতে থাকে। আর তাই এখানে আমরা যেহেতু বলেছি ৩ সেকেন্ড পরে <code>value</code> তে <code>12</code> অ্যাসাইন করতে, সেহেতু ৩ সেকেন্ড আগে বা সাথে সাথে কন্সোল লগ করায় জাভাস্ক্রিপ্ট ৩ সেকেন্ড অপেক্ষা না করে বা অন্যান্য ল্যাংগুয়েজের মতো সিনক্রোনাসলি অপারেশন না করায় পরের কন্সোল লগে চলে গেছে এবং <code>undefined</code> প্রিন্ট করেছে। আবার একটু পরে(৩ সেকেন্ড যাওয়ার পর) যখন আবার <code>value</code> কন্সোল লগ করলাম, তখন আবার <code>12</code> ই দেখলাম। কারণ ঐ যে কোড অ্যাজাক্স অপারেশনটা শেষ হওয়ার আগেই ফেলে এসেছে, এখন ৩ সেকেন্ড যাওয়ার পর সেটা কমপ্লিট হওয়াতে এই(<code>setTimeout</code>) ফাংশনের ভিতর থেকে <code>value</code> তে <code>12</code> অ্যাসাইন হয়েছে। আর তাই এখন আমাদের <code>12</code> ই আউটপুট হিসেবে দেখাচ্ছে।</p>\n<p>অন্য প্রোগ্রামিং ল্যাংগুয়েজ থেকে আসার পর অনেকের মধ্যে এই একটা জিনিস নিয়েই ঝামেলা লাগে। আর অনেক সময় ঠিক যেরকম আউটপুট পাবার কথা, সেরকম আউটপুট আসে না, জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের জন্যে।</p>\n<p><strong>বাস্তব সিচুয়েশনঃ</strong> এখন এই ধরনের আচরণের জন্যে বাস্তবে কি সমস্যা হতে পারে? হ্যা সেটা নিয়েই এখন বলবো।</p>\n<p>ধরুন আপনি আপনার ওয়েব অ্যাপ্লিকেশনে এমন কোড লিখলেন যেটা আরেকটা সার্ভার থেকে কিছু ডাটা এনে শো করাবে আপনার অ্যাপ্লিকেশনে। এখন আপনি প্রথম লাইনে ডাটা আনলেন। আর পরের লাইনে সেগুলো প্রিন্ট করে দিলেনঃ</p>\n<pre><code>অমুক সার্ভার থেকে ডাটা আনো;\nএখন ডাটা শো করাও;\n</code></pre>\n<p>তাহলে এরকম কোড আপনার ঠিকমতো আচরণ করবে না। দেখবেন আপনার ডাটা শো করছে না, <code>undefined</code> দেখাচ্ছে বা এরর হয়ে যাচ্ছে। কারণ জাভাস্ক্রিপ্ট তো অমুক সার্ভার থেকে ডাটা আসার আগেই ডাটা শো করানোর ইন্সট্রাকশনে চলে গেছে অ্যাসিনক্রোনাস আচরণের কারণে। আর তাই আপনি ঠিকঠাক ফলাফল দেখবেন না।</p>\n<p>তবে এগুলো হ্যান্ডল করার জন্যেও জাভাস্ক্রিপ্ট এ অনেক টেকনিক আছে। যেগুলো পরে আলোচনা করা হবে।</p>\n<p>আর অ্যাসিনক্রোনাস স্বভাব আসলে খারাপ কিছু না। এখানে সময় কম অপচয় হয়। আর এগুলো যেহেতু সুন্দর করে হ্যান্ডেল করার টেকনিকও আছে, তাই কোনো ঝামেলা নাই। নিচের ছবিটা খেয়াল করুনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*ZKogVr0fiPYRtyypqJT_iw.gif\" alt=\"\" /></p>\n<p>এখানে IO Operation মানে হচ্ছে এমন কিছু অপারেশন যেটা একটু টাইম নিবে, আর এগুলো অ্যাসিনক্রোনাস।</p>\n<p>এখানেই অ্যাসিনক্রোনাস আর সিনক্রোনাসের পার্থক্য বুঝতে পারবেন। উপরে সেইম কাজই দুইভাবে করা হয়েছে। কিন্তু খেয়াল করবেন প্রায় অর্ধেক সময়ের মধ্যে Asynchronous অপারেশন কাজ কমপ্লিট করে ফেলেছে এরকম টেকনিক ব্যবহার করার কারণে। কোনো সময়ই এখানে অপচয় হয়নি অ্যাসিনক্রোনাস অপারেশনের ক্ষেত্রে। আর তাই এটা অর্ধেক সময়ের মধ্যেই সেইম কাজটাই শেষ করে ফেলেছে।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-13T16:37:18.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন","thumb_img_path":"/images/dailyjs.gif","content":"<p>কলব্যাক ফাংশন? অনেক জায়গায় হয়তো এটার কথা শুনে থাকবেন। কিন্তু কলব্যাক ফাংশনটা আসলে কি? হ্যা, কলব্যাক ফাংশনের মানে এক কথায় এটা এমন একটা ফাংশন যেটা আরেকটা ফাংশন এক্সিকিউট হওয়ার পর এক্সিকিউট হয়। আর এজন্যেই এটার নাম কলব্যাক ফাংশন।</p>\n<p>আমরা জাভাস্ক্রিপ্ট এ হাইয়ার অর্ডার ফাংশনের কথা জানি। এখানে ফাংশনও অবজেক্ট। আর একটা ফাংশনকে আরেকটা ফাংশন রিটার্ণ করতে পারে আবার একই সাথে একটা ফাংশন আর্গুমেন্ট হিসেবে আরেকটা ফাংশনকেও নিতে পারে। আর যখনি এরকম একটা ফাংশন আরেকটা ফাংশনকে আর্গুমেন্ট হিসেবে নেয়, তখনি আমরা সেই আর্গুমেন্টে যাওয়া ফাংশনটাকে কলব্যাক ফাংশন বলি।</p>\n<p>এখন কলব্যাকের কাজটা কি? আমরা জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের কথা জানি। জাভাস্ক্রিপ্ট কোনো কাজ করতে সময় লাগলে সেখানে অপেক্ষা না করে পরের কোডে চলে যায়ঃ</p>\n<pre><code>const getVar = () =&gt; {\n   setTimeout(function() {\n      console.log('A Function that takes some time');\n   }, 3000)\n}\n\nconst printSomething = () =&gt; {\n   console.log('Another Function');\n}\n\ngetVar();\nprintSomething();\n</code></pre>\n<p>এই কোডটা রান করালে জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের জন্যে এরকমভাবে পরেরটা আগে, আর আগেরটা পরে দেখাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*SsuIOznH6QZP-7KbRgA5eg.png\" alt=\"\" /></p>\n<p>এখন এখানে আমাদের কি সমস্যা হতে পারে সেটা আমরা জানি। আমরা যদি কোনো ডাটা রিমোট কোনো সার্ভার থেকে কোথাও দেখাতে চাই, তাহলে জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরনের কারণে ডাটা রিমোট সার্ভার থেকে আসার আগেই ডাটা দেখানোর লাইনে চলে যাবে। আর সেখানে যেহেতু ডাটা এখনো আসে নাই তাই যেরকমটা চাচ্ছিলাম সেরকম ফলাফল দেখাবে না। এররও আসতে পারে। আর এখানেই কলব্যাক ফাংশনের খেলা।</p>\n<p>কলব্যাকের ফাংশনের সংজ্ঞা থেকে আমরা জেনেছিলাম এটা আরেকটা ফাংশন এক্সিকিউট হলে পরেই এক্সিকিউট হয়। আর তাই আমরা এখানে এই টেকনিকটা ইউজ করে এরকম পৃথক পৃথকভাবে দুইটা ফাংশন লিখেও কলব্যাকের মাধ্যমে ঠিক যেসময় ফাংশনটাকে কল করা দরকার সেসময়েই করতে পারবোঃ</p>\n<pre><code>const getVarC = (callback) =&gt; {\n   setTimeout(function() {\n      console.log('A Function that takes some time');\n      callback();\n   }, 3000)\n}\n\nconst printSomethingC = () =&gt; {\n   console.log('Another Function');\n}\n\ngetVarC(printSomethingC);\n</code></pre>\n<p>আমরা এখানে আমাদের মেইন ফাংশন কলের ভিতরে আর্গুমেন্ট হিসেবে আমাদের ফাংশনটাকে পাস করে দিলাম। আর সেটা পরে ঠিক যেখানে দরকার সেখানেই কল করলাম। এখানে এই <code>printSomething()</code> ফাংশনটাই কলব্যাক ফাংশন হয়ে গেলো। এটা আমাদের মনের মতো ফলাফল দিবে। মানে একটার পরে আরেকটা। এটা ঠিকই ৩ সেকেন্ড ওয়েট করবে তারপর ফলাফল দিবে। কিন্তু সিরিয়াল মেইন্টেইন করে। প্রথমে প্রমিস শেষ হবে, সেখান থেকে ডাটা আসবে, তারপর কলব্যাক ফাংশন রান করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*Jni_2SaOqa11L4NBai0U2g.png\" alt=\"\" /></p>\n<h4 id=\"\">বাস্তব উদাহরণঃ</h4>\n<p>এখন এটার বাস্তব লাইফে কি কাজে লাগতে পারে? হ্যা, এখন আমরা ঐরকম কিছু একটাই দেখবো। এখানে দেখানো কোডগুলো কাল্পনিক, তাই আপনি রান করাতে পারবেন না তবে জাস্ট উদাহরণ হিসেবে দেখানোর জন্যে এখানে দিলাম। ধরি আমরা বাইরের কোনো রিমোট সার্ভার থেকে ডাটা এনে দেখাতে চাচ্ছি এরকমঃ</p>\n<pre><code>const userInfo = getSomeData('https://aremoteserver.com');\n</code></pre>\n<p>আমি আসলে একটা রিকোয়েস্ট এর মাধ্যমে ইউজারের কিছু ইনফো আনতে চাচ্ছি। আর সেই ইনফোগুলো <code>userInfo</code> নামক ভ্যারিয়েবলে স্টোর করলাম। এখন আমি পরের লাইনে <code>userInfo</code> দেখাবোঃ</p>\n<pre><code>const userInfo = getSomeData('https://aremoteserver.com');\nconsole.log(userInfo);\n</code></pre>\n<p>এখন জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের কারণে এখানে কি হতে পারে? হ্যা ঠিকভাবেই ধারণা করতে পেরেছেন। এখানে বাইরের কোনো সার্ভার ডাটা আনতে কিছু সময় লাগবে। আর এরমধ্যেই জাভাস্ক্রিপ্ট সেটার জন্যে অপেক্ষা না করে পরের লাইনের কন্সোল লগ এক্সিকিউট করে ফেলবে। আর দেখুন এই কন্সোল লগে আমরা এমন কিছু লগ করতে চাচ্ছি যেটা আগের সেই লাইনের কোডের সাথে সম্পর্কযুক্ত। এখন আগের লাইনের কোড তো জাস্ট ট্রিগার হয়েছে, ডাটা না আসতেই পরের লাইন এক্সিকিউট হয়ে গেছে। স্বাভাবিকভাবেই এই অবস্থায় আমরা <code>undefined</code> ই দেখতে পাবো।</p>\n<p>এখানে আমরা যে অ্যাপিআই বা যার মধ্য দিয়ে এই রিমোট সার্ভারে রিকোয়েস্ট করবো সেগুলো বেশীরভাগই এরকম পরিস্থিতিতে এড়ানোর জন্যে কলব্যাক ফাংশন ব্যবহার করে। আপনি এভাবে রিকোয়েস্ট করবেন, তারপর এর সাথেই আবার আরেকটা ফাংশন পাস করবেন, যেটা আসলে কলব্যাক ফাংশন। আর তাই আগের ডাটা আসার পরেই এই কলব্যাক চলবে। আর তাই এই কলব্যাক ফাংশনের আর্গুমেন্ট হিসেবেই রিমোট সার্ভার থেকে আসা ডাটাগুলো পাস করা হয়। এখন এই ফাংশনের ভিতর থেকে আমরা নিরাপদে সেই ডাটা অ্যাক্সেস করতে পারি যেহেতু এটা একমাত্র আগের ফাংশন এক্সিকিউট হওয়া শেষ হলেই একমাত্র রান করেঃ</p>\n<pre><code>getSomeData('https://aremoteserver.com', (userInfo) =&gt; {\n   console.log(userInfo);\n});\n</code></pre>\n<p>এখানে <code>(userInfo) =&gt; {…}</code> পুরোট হচ্ছে কলব্যাক ফাংশন। আর এটার ভিতর থেকেই আমরা ঠিকমতো রিমোট সার্ভার থেকে আসা অ্যাক্সেস করতে পারবো। আমরা পরের পর্বে এর সাথে সম্পর্কযুক্ত প্রমিস নিয়ে আলোচনা করবো, তখন এই কাল্পনিক রিকোয়েস্টকে বাস্তবরূপ দেওয়া যাবে।</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-14T16:37:13.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)","thumb_img_path":"/images/dailyjs.gif","content":"<p>জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণ সম্পর্কে আমরা জানি। রিমোট কোনো সার্ভার থেকে বা একটু সময় লাগে এমন কোনো অপারেশন শেষ করার জন্যে জাভাস্ক্রিপ্ট অপেক্ষা না করে বরং পরের অপারেশনে চলে যায়। এধরনের অপারেশন হচ্ছে অ্যাসিনক্রোনাস অপারেশন। এখন এই অপারেশন ফেলে অন্য অপারেশনে চলে গেলেও জাভাস্ক্রিপ্ট ঠিকই এটাকেও ট্র্যাক করে রাখে। আর এইজন্যেই জাভাস্ক্রিপ্ট প্রমিস(Promise) ব্যবহার করে।</p>\n<p>এখন প্রমিসের কাজ হচ্ছে এ ধরনের অ্যাসিনক্রোনাস অপারেশনকে হ্যান্ডল করা। এখন আমরা রিমোট একটা সার্ভারের উপর অপারেশন চালাচ্ছি, কিন্তু ডাটা না আসা পর্যন্ত কিন্তু আমরা বলতে পারি না সে অপারেশন সফল হবে না বিফলে যাবে। আর মূলত এইসব হ্যান্ডল করার জন্যেই প্রমিস কাজ করে। অধিকাংশ ক্ষেত্রেই আমাদের প্রমিস নিজেদের তৈরী করতে হয় না। আমরা জাস্ট প্রমিসটা হ্যান্ডল করি। প্রমিসের মূল স্ট্রাকচার আমরা যে লাইব্রেরী দিয়ে কাজ করবো, সিস্টেম থেকে করবো, সেখানেই ইমপ্লিমেন্ট করা থাকে। আমাদের জাস্ট প্রমিসটাকে হ্যান্ডল করতে হয়। তবে আমি এখানে প্রমিস কিভাবে আমরা নিজেরা তৈরী করতে পারি সেটাও দেখবো। প্রমিসের মূলত ৩টা স্টেট আছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*eyXprdVQ8MkjN6YPjGD1vw.png\" alt=\"\" /></p>\n<p><strong>প্রমিস তৈরী করাঃ</strong></p>\n<pre><code>const aPromise = control =&gt; { \n   return new Promise((resolve, reject) =&gt; {\n      setTimeout(() =&gt; {\n         if(control) {\n            resolve();\n         } else {\n            reject();\n         }\n      }, 3000)\n   })\n}\n</code></pre>\n<p>এখানে আমরা একটা ফাংশন তৈরী করেছি, যেটার একটা আর্গুমেন্ট নিবে। এখন এই ফাংশন প্রমিস রিটার্ণ করবে। প্রমিস দুইটা আর্গুমেন্ট নেয়, <code>resolve</code> আর <code>reject</code> । তারপর আমরা ভিতরে <code>setTimeout</code> দিয়ে একটা ফেইক টাইম লাগতে পারে এমন অপারেশন তৈরী করেছি ৩০০০ মিলিসেকেন্ড(৩ সেকেন্ড) টাইম দিয়ে। তারপর আসলে মজার ব্যাপার। আমাদের প্রমিস যদি তখনি সফল হবে যদি আমরা আমাদের কাঙ্খিত ফলাফল পাই। এখন আমরা এই ফাংশনে(<code>aPromise</code>) একটা আর্গুমেন্ট নিয়েছি, এটা দিয়ে আমরা <code>true</code> অথবা <code>false</code> পাস করে প্রমিস সফল না ব্যর্থ সেরকম একটা কন্ডিশন তৈরী করবো। যদি আর্গুমেন্ট টা <code>true</code> হয় তাহলে আমাদের প্রমিস সফল হয়েছে এবং আমরা <code>resolve()</code> কল করবো। আর যদি <code>false</code> হয় তাহলে <code>reject()</code> কল করার মাধ্যমে প্রমিস ব্যর্থ হয়ে যাবে।</p>\n<p>এখন আমরা আমাদের ফাংশনটা <code>true</code> আর্গুমেন্ট দিয়ে কল করলেঃ</p>\n<pre><code>aPromise(true);\n</code></pre>\n<p>এরকম কিছু একটা আউটপুট দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*7LM-E6CiJXpmEf5SJ0YCdw.png\" alt=\"\" /></p>\n<p><strong>প্রমিস হ্যান্ডল করাঃ</strong></p>\n<p>এখন আমরা প্রমিস সফল বা ব্যর্থ হয়েছে কিনা সেটা হ্যান্ডল করবো। সেক্ষেত্রে যদি প্রমিস সফল হয় তাহলে আমাদের <code>aPromise</code> ফাংশনের সাথে <code>.then()</code> চেইন করে এখানে একটা কলব্যাক ফাংশন দিতে পারবো, যেটা প্রমিসে সফল বা অন্যকথায় <code>resolve</code> হলে রান হবেঃ</p>\n<pre><code>aPromise(true)\n  .then(() =&gt; {\n     console.log('This is a Success');\n  })\n</code></pre>\n<p>এটা তিন সেকেন্ড পরে <code>true</code> আর্গুমেন্ট হিসেবে দেওয়ায় প্রমিস <code>resolve</code> হয়ে আমাদের কলব্যাক রান করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*gHcIFAp9cpg_aD1ZV0lbiA.png\" alt=\"\" /></p>\n<p>আর যদি প্রমিস রিজেক্ট হয় তাহলে আমাদের সেটা আরেকটা চেইন অপারেশন <code>.catch()</code> এর মধ্যে কলব্যাক ফাংশন দিয়ে হ্যান্ডল করতে হবে। এখন আমরা কিন্তু জানিনা যে অপারেশন সফল না ব্যর্থ হবে। সেক্ষেত্রে আমাদের <code>.then()</code> আর <code>.catch()</code> দুইটাই রাখতে হবে। <code>.catch()</code> রান করবে কোনো কারণে যদি আমাদের প্রমিস <code>reject</code> হয়ঃ</p>\n<pre><code>aPromise(false)\n  .then(() =&gt; {\n     console.log('This is a Success');\n  })\n  .catch(() =&gt; {\n     console.log('This is a Failure');\n  })\n</code></pre>\n<p>এখানে যেহেতু আর্গুমেন্ট এ <code>false</code> দিয়েছি, তাই প্রমিস থেকে <code>reject</code> হবে। আর তাই ৩ সেকেন্ড পরে অপারেশন শেষ হয়ে <code>catch</code> ব্লকের ভিতরের কলব্যাক রান করবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*aCMQ6AwNVWV60VgYG-SzJA.png\" alt=\"\" /></p>\n<p>এখানে প্রথমে আমরা যে <code>aPromise</code> ফাংশন দিয়ে প্রমিস রিটার্ণ করলাম, সেই প্রমিস তৈরী করার পার্টটা বেশীরভাগ ক্ষেত্রেই আমাদের লেখা লাগে না। বরং আমরা যে সিস্টেম ব্যবহার করে ডাটা আদান-প্রদান করি, বা লাইব্রেরী ব্যবহার করি সেগুলোতেই এই অংশটা কোড করা থাকে কখন কিভাবে প্রমিস <code>resolve</code> করবে নাকি <code>reject</code> করবে এসব। আমাদের বেশীর ভাগ ক্ষেত্রে রিটার্ণ হওয়া প্রমিস <code>.then()</code> আর <code>.catch()</code> দিয়েই হ্যান্ডল করতে হয়। আবার ভিতরে যে কলব্যাক গুলো ব্যবহার করা হয়, সেসব কলব্যাকে বেশীরভাগ ক্ষেত্রে আমাদের রিমোট সার্ভার থেকে যে ডাটা চাই, সেগুলো আর্গুমেন্ট হিসেবে আসে। আমরা কলব্যাকের ভিতর থেকে সেই আর্গুমেন্ট এর সাহায্যে সেগুলো অ্যাক্সেস করতে পারি। যেমন আগের প্রমিসটা একটু মডিফাই করলে, আমরা চাইলে <code>resolve()</code> বা <code>reject()</code> থেকে ডাটা পাঠাতে পারিঃ</p>\n<pre><code>const aPromiseWithData = control =&gt; { \n   return new Promise((resolve, reject) =&gt; {\n      setTimeout(() =&gt; {\n         if(control) {\n            resolve('Simple Success Data');\n         } else {\n            reject('Simple Error Data');\n         }\n      }, 3000)\n   })\n}\n</code></pre>\n<p>এখানে <code>resolve()</code> বা <code>reject()</code> থেকে ঠিক যেভাবে ডাটাগুলো পাঠানো হয়েছে সেভাবেই আমরা <code>.then()</code> বা <code>.catch()</code> এর কলব্যাক থেকে অ্যাক্সেস করতে পারবো আর্গুমেন্ট হিসেবে অ্যাক্সেপ্ট করেঃ</p>\n<pre><code>aPromiseWithData(true)\n  .then((data) =&gt; {\n     console.log(data);\n  })\n</code></pre>\n<p>দেখুন এই ডাটা আমাদের প্রমিস থেকে এসেছে, তারপর এখানে <code>resolve()</code> হয়ে <code>.then()</code> এর কলব্যাকে আর্গুমেন্ট হিসেবে এসেছে, যেটা আমরা পরে অ্যাক্সেস করে প্রিন্ট করতে পেরেছিঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*95TvbHuqsSf8js4TpBtdpA.png\" alt=\"\" /></p>\n<p>একইভাবে প্রমিস <code>reject</code> হলেওঃ</p>\n<pre><code>aPromiseWithData(false)\n  .then((data) =&gt; {\n     console.log(data);\n  })\n  .catch((err) =&gt; {\n     console.log(err);\n   })\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*7JNivMt_-5YKz-BkXDSyHQ.png\" alt=\"\" /></p>\n<p><strong>একাধিক প্রমিস হ্যান্ডল করাঃ</strong> এরকম কোনো কোনো সময় আমাদের একাধিক প্রমসিও হ্যান্ডল করতে হতে পারে। যেমন ধরি আমাদের দুইটা প্রমিস আছেঃ</p>\n<pre><code>const promise1 = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         resolve('Promise 1 Resolved');\n      } else {\n         reject('Promise 1 Error');\n      }\n   }, 5000)\n })\n</code></pre>\n<p>আমরা এভাবেও সরাসরি প্রমিস তৈরী করতে পারি। নিচে আরেকটা প্রমিস তৈরী করলামঃ</p>\n<pre><code>const promise2 = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         resolve('Promise 2 Resolved');\n      } else {\n         reject('Promise 2 Error');\n      }\n   }, 5000)\n})\n</code></pre>\n<p>এখন এই দুইটা প্রমিস কমপ্লিট হওয়ার পর কোনো অপারেশন চালাতে চাইলে আমরা দুইটা প্রমিসকে অ্যারে আকারে এভাবে নিতে পারিঃ</p>\n<pre><code>Promise.all([promise1, promise2]);\n</code></pre>\n<p>তারপর <code>.then()</code> দিয়ে কলব্যাক কল করতে পারবো যেটা এই দুইটা প্রমিস কমপ্লিট হলে পরেই রান করবে। আর এই প্রমিসগুলো থেকে আসা ডাটাগুলো এই কলব্যাক ফাংশনে অ্যারে আকারে আসবেঃ</p>\n<pre><code>Promise.all([promise1, promise2]).then((dataArr) =&gt; {\n   console.log(dataArr);\n})\n</code></pre>\n<p>ব্যাস এবার setTimeout এর টাইম শেষ হয়ে গেলে আপনার প্রমিসের ফলাফল দেখতে পাবেনঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*SmYW9ec6VaRaHOTVvGSd4w.png\" alt=\"\" /></p>\n<h4 id=\"fetch\">fetch() অ্যাপিআইঃ</h4>\n<p>এখন আমরা সত্যিকারের রিমোট সার্ভার থেকে ডাটা এনে সেটা নিয়ে কাজ করবো, এজন্যে আমরা ব্রাউজারের <code>fetch()</code> অ্যাপিআই ব্যবহার করবো। এই অ্যাপিআই এর কাজ হচ্ছে বাইরের রিমোট কোনো সার্ভার থেকে রিসোর্স আনা। এই অংশটা নোড জেএস এ ঠিক সরাসরি কাজ করবে না। যদিও নোড জেএস এ চাইতেও আরো ভালো ভালো লাইব্রেরী আছে, তবে এটা যেহেটু মডার্ণ ব্রাউজারগুলোতে বিল্ট-ইন ভাবেই আছে, তাই আমরা এখানে এটাই ব্যবহার করবো। এখন এই <code>fetch()</code> অ্যাপিআই নিজে নিজেই প্রমিস রিটার্ণ করার প্রসেসটা হ্যান্ডেল করে। আমাদের জাস্ট রিটার্ণ হওয়া প্রমিসটা হ্যান্ডেল করতে হবে। আমরা একটা একটা একটা রিমোট সার্ভার থেকে ফেইক কিছু ডাটা সত্যিকারেরই আনবোঃ</p>\n<pre><code>const dataFromRemote = fetch('https://jsonplaceholder.typicode.com/posts');\n</code></pre>\n<p><a href=\"https://jsonplaceholder.typicode.com/posts\">এই লিঙ্কটা</a> ওপেন করলে কিছু ডাটা দেখতে পাবেন। এগুলো মূলত জেসন(JSON) ডাটা। যাই হউক, এই কোড রান করলে ব্রাউজারের কন্সোলে এই ডাটাগুলো ফেচ হয়ে <code>dataFromRemote</code> নামক একটা ভ্যারিয়েবলে স্টোর হবে। এখন আমার কথামতো ফেচ অ্যাপিআই প্রমিস রিটার্ণ করার কথা। তাহলে এখানে <code>dataFromRemote</code> নিশ্চই প্রমিস হবেঃ</p>\n<pre><code>console.log(dataFromRemote);\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*CKcM9lhTCmQ3PeAJ_UQhhw.png\" alt=\"\" /></p>\n<p>হ্যা! এটা প্রমিসই। এখন আমরা এটাকে সহজেই <code>.then()</code> <code>.catch</code> দিয়ে সহজেই হ্যান্ডল করতে পারবো। আর এই ফেচ অ্যাপিআই ফেচ করা ডাটাগুলো <code>.then</code> এর কলব্যাকে আর্গুমেন্ট হিসেবে পাস করে। আর কোনো এরর হলে <code>.catch</code> এর কলব্যাকে আর্গুমেন্ট হিসেবে পাস করেঃ</p>\n<pre><code>dataFromRemote.then((data) =&gt; {\n   console.log(data);\n})\n</code></pre>\n<p>এখন এখানে <code>data</code> তে কিছু ডাটা দেখতে পারবেন। এগুলোই আপনার প্রমিস <code>resolve</code> হওয়ার কারণে সাক্সেস টাইপের কিছু ডাটাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*UPTitYi9ENJTPMlehR1cDQ.png\" alt=\"\" /></p>\n<p>এখন ফেচ অ্যাপিআই এর জটিল স্ট্রাকচারের কারণে মূল যে ডাটা ফেচ করেছি সেটা এখানে না থাকলেও এটা মূলত আমাদের প্রমিস <code>resolve</code> হওয়ার পরের ডাটাই এখানে দেখাচ্ছে। তবে সমস্যা নাই, ফেচ অ্যাপিআই থেকে ভালো ভালো আরো অনেক লাইব্রেরী আছে যেগুলোই আসলে আমরা আমাদের ডেভেলপমেন্ট এ সবচেয়ে বেশী ব্যবহার করবো। এখন যদি কোনো কারণে আমরা একটা ভুলভাল রিকোয়েস্ট পাঠাই ফেচ অ্যাপিআই দিয়েঃ</p>\n<pre><code>const dataFromRemoteFailed = fetch('https://jsonplaceholderdoesntexist.typicode.com/posts');\n</code></pre>\n<p>আপনি যদিও আপনার কন্সোলে প্রমিস রিজেক্ট হওয়ার ম্যাসেজ পাবেন। তবে আসল ম্যাসেজ আপনি <code>.catch()</code> থেকে পাবেন যেখানে আপনি এই এররটাকে হ্যান্ডল করতে পারবেনঃ</p>\n<pre><code>dataFromRemoteFailed.then((data) =&gt; {\n   console.log(data);\n}).catch((err) =&gt; {\n   console.log('Your Error:', err);\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*sYAZEeE5sddY_gMsNc98mw.png\" alt=\"\" /></p>\n<p>এখন আমাদের প্রমিস <code>resolve</code> হয়ে গেলে কিন্তু <code>catch</code> ব্লকের কোনো দরকারই পড়ে না। কিন্তু এটাও মোটেও ভালো প্র্যাক্টিস না যে আপনি <code>catch</code> ব্লক না রেখেই আপনার অ্যাপ্লিকেশনে সব প্রমিস হ্যান্ডল করে ফেললেন। এরর হতেই পারে, যেকোনো কারণেই হতে পারে। আর সেজন্যে এই <code>catch</code> ব্লক রেখে সেটাকে হ্যান্ডল করাটাই ভালো প্র্যাক্টিসের মধ্যে পড়ে।</p>\n<h4 id=\"\">আসল ডাটা উদ্ধার করাঃ</h4>\n<p>একটু আগে আমরা অন্য এক জায়গা থেকে ডাটা ফেচ করার জন্যে ফেচ অ্যাপিআই দিয়ে রিকোয়েস্ট করলাম, কিন্তু আসল ডাটা এখনো আমরা দেখিনাই। এটার কারণ ফেচ অ্যাপিআইয়ের জটিল স্ট্রাকচারের জন্যে। তবে যাই হউক একটা জিনিস ভালো হয়েছে যে এখন আমরা দেখবো কিভাবে আসল ডাটা উদ্ধার করা যায় এখান থেকে, আর সেই সাথে আমরা নতুন আরেকটা সমস্যার সাথে পরিচয় করিয়ে দিবো এখানেই। আমরা আমাদের ডাটাগুলো অ্যাক্সেস করবোঃ</p>\n<pre><code>fetch('https://jsonplaceholder.typicode.com/posts')\n   .then((data) =&gt; {\n      return data.json();\n   }).then((posts) =&gt; {\n      console.log(posts);\n})\n</code></pre>\n<p>এখানে আমাদের <a href=\"https://jsonplaceholder.typicode.com/posts\">এই লিঙ্কে</a> থাকা ১০০ টা অ্যারেসহ সব ডাটা চলে আসবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*tQ9UXomOV1d8NQJ6QZ5zOA.png\" alt=\"\" /></p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Daily","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-17T16:37:05.000Z","series":"ব্লগ","template":"post","title":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await","thumb_img_path":"/images/dailyjs.gif","content":"<p>আমরা জাভাস্ক্রিপ্ট এ প্রমিসের কথা জানি, প্রমিস হ্যান্ডেল করতে এবং প্রমিস থেকে ডাটা উদ্ধার করতে কলব্যাক কিভাবে ব্যবহার করতে হয় সেটা নিয়েও আমরা জানি। আমরা দেখেছি কিভাবে একটা প্রমিস হ্যান্ডেল করার পর এটার ভিতরে কলব্যাক ফাংশন কল করতে হয়। আবার সেই কলব্যাক ফাংশনের ভিতরে প্রমিস থেকে আসা ডাটাগুলো অ্যাক্সেস করতে হয়। এভাবে একটার পর একটার ভিতরে গিয়ে গিয়ে এভাবে আমাদের অপারেশনগুলো চালাতে হয় শুধুমাত্র জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের কারণে। অ্যাসিনক্রোনাস যদি না হতো তাহলে আমরা লাইন বাই লাইন কোড লিখে সুন্দর করে কাজ করতে পারতাম।</p>\n<p>যেমন ধরি আমাদের একটা প্রমিস আছেঃ</p>\n<pre><code>const aDemoPromise = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         resolve('Print Me');\n      } else {\n         reject('Error');\n      }\n   }, 5000)\n})\n</code></pre>\n<p>এখন আমরা জাভাস্ক্রিপ্ট এক্ষেত্রে অ্যাসিনক্রোনাস না হলে হয়তো এভাবেও ডাটা উদ্ধার করতে পারতাম এই প্রমিস থেকেঃ</p>\n<pre><code>const data = aDemoPromise;\nconsole.log(data);\n</code></pre>\n<p>বা এখানে প্রমিস রিজেক্ট হলে সেটা <code>try…catch</code> দিয়ে হ্যান্ডল করতে পারতামঃ</p>\n<pre><code>try {\n   const data = aDemoPromise;\n   console.log(data);\n} catch(err) {\n   console.log(err);\n}\n</code></pre>\n<p>কিন্তু জাভাস্ক্রিপ্ট এখানে অ্যাসিনক্রোনাস আচরণ করাতে এটা সম্ভব না। আমাদের চেইন করে কলব্যাক ফাংশনের ভিতর থেকেই এরকমভাবে ডাটা উদ্ধার করতে হবেঃ</p>\n<pre><code>aDemoPromise.then((data) =&gt; {\n   console.log(data);\n})\n</code></pre>\n<p>কিন্তু যাই হউক, এভাবে চেইন করে কলব্যাক ফাংশন দিয়েও প্রমসিএ হ্যান্ডল করা কোনো সমস্যা ছিলো না, সমস্যা হচ্ছে এরকম একটা কলব্যাক এর ভিতরে আরেকটা কলব্যাক, ভিতরে আবার কলব্যাক কল করতে থাকলে কোডের স্ট্রাকচারের অনেকটা এরকম দেখা যাবে। এই কোডটা <a href=\"http://callbackhell.com/\">এখান থেকে</a> আনা হয়েছেঃ</p>\n<pre><code>fs.readdir(source, function (err, files) {\n  if (err) {\n    console.log('Error finding files: ' + err)\n  } else {\n    files.forEach(function (filename, fileIndex) {\n      console.log(filename)\n      gm(source + filename).size(function (err, values) {\n        if (err) {\n          console.log('Error identifying file size: ' + err)\n        } else {\n          console.log(filename + ' : ' + values)\n          aspect = (values.width / values.height)\n          widths.forEach(function (width, widthIndex) {\n            height = Math.round(width / aspect)\n            console.log('resizing ' + filename + 'to ' + height + 'x' + height)\n            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {\n              if (err) console.log('Error writing file: ' + err)\n            })\n          }.bind(this))\n        }\n      })\n    })\n  }\n})\n</code></pre>\n<p>এই কোড আপাতত আমাদের কাজে লাগবে না, তাই রান করানোর দরকার নাই। শুধুমাত্র এটুকু দেখুন এখানে একটার ভিতর আরেকটা কলব্যাক দিতে দিতে কোডের স্ট্রাকচার কেমন এলোমেলো হয়ে গেছে। এখানে খুব সহজেই হারিয়ে যাবেন কোন লাইন কি করছে, বা কোনটার এরর কোনটা। এরকম আরো অনেক সমস্যা এখানে পাবেন। হয়তো শুনে থাকবেন, এধরনের সমস্যাকেই কলব্যাক হেল (Callback Hell) বলা হয়। কিন্তু সেইম কোডগুলোই যদি লাইন বাই লাইন থাকতো তাহলে কত সুন্দর দেখা যেতো, আর বুঝতেও সুবিধা হতো।</p>\n<p>আর সেজন্যেই জাভস্ক্রিপ্ট এ এই নতুন <code>async</code> আর <code>await</code> এর পরিচয় করিয়ে দেওয়া হয়েছে। যেখানেই আপনি এরকম অ্যাসিনক্রোনাস কোডকে সিনক্রোনাস আচরণ করাতে চান সেখানেই এগুলো ব্যবহার করতে পারবেন। তবে এখানে কিছু নিয়ম কানুন আছে। আপনাকে <code>async</code> এই কীওয়ার্ডটা ব্যবহার করতে হবে ফাংশনের সাথে। আপনি যে কোডগুলোকে সিনক্রোনাস আচরণ করাতে চাচ্ছেন সেগুলো সবগুলো একটা ফাংশনের ভিতরে ঢুকিয়ে সেই ফাংশনের নামের আগে জাস্ট এভাবে <code>async</code> কীওয়ার্ডটা লাগিয়ে দিবেনঃ</p>\n<pre><code>async function asyncCode() {\n   // Asynchronous Codes\n}\n</code></pre>\n<p>অ্যারো ফাংশন হলেঃ</p>\n<pre><code>const asyncCode6 = async() =&gt; {\n   // Asynchronous Codes\n}\n</code></pre>\n<p>ব্যাস এভাবেই আপনি আপনার ফাংশন টাকে অ্যাসিনক্রোনাস কোড থাকতে পারে বলে চিহ্নিত করে ফেলতে পারবেন। এবার আপনাকে আসল অ্যাসিনক্রোনাস কোডগুলোকে একটা একটা করে চিহ্নিত করে জাভাস্ক্রিপ্টকে বলে দিতে হবে যে এই হচ্ছে আমার প্রমিস যেটা সল্ভ না হওয়া পর্যন পরের ইন্সট্রাকশনে যাওয়া যাবে না। তার আগে আমাদের প্রমিস তো লাগবে, ঠিক না? হ্যা তাহলে একটা প্রমিস দিয়েই শুরু করিঃ</p>\n<pre><code>const aPromise = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         resolve('I am here!');\n      } else {\n         reject('No! It is an error!');\n      }\n   }, 5000)\n})\n</code></pre>\n<p>এখন আমরা এই প্রমিসটাকে একটা অ্যাসিনক্রোনাস ফাংশনের ভিতরে নিয়ে হ্যান্ডেল করবো। সেজন্যে একটা অ্যাসিনক্রোনাস চিহ্নিত করে ফাংশন নিয়ে ভিতরে আমাদের প্রমিস টাকে কল করবো। এখন এখানেই আমাদের <code>await</code> কীওয়ার্ডটা লাগবে। এটা দিয়ে আমরা আমাদের প্রমিসটাকে চিহ্নিত করে দিবো যাতে এই প্রমিস কমপ্লিট না হওয়ার আগ পর্যন্ত পরের ইন্সট্রাকশনে না যায়ঃ</p>\n<pre><code>const promiseHandle = async() =&gt; {\n   const data = await aPromise;\n   console.log(data);\n}\n</code></pre>\n<p>এখানে দেখুন লক্ষ্য করে আমি ঠিক এর পরের লাইনেই আমাদের প্রমিস থেকে আসা ডাটা প্রিন্ট করে দিয়েছি। হ্যা এখানেই <code>async</code> আর <code>await</code> এর ম্যাজিক। এটা আমাদের অ্যাসিনক্রোনাস কোডকে সিনক্রোনাস আচরণ করতে সাহায্য করে যাতে আমাদের আর কলব্যাকে হেলে পড়তে না হয়। আমরা একদম লাইন বাই লাইন ইন্সট্রাকশন দিয়েই ডাটা উদ্ধার করতে পারবো। এখন আমাদের এই ফাংশনটাকে কল করলেই দেখবেন আমাদের কাঙ্খিত ডাটাঃ</p>\n<pre><code>promiseHandle()\n</code></pre>\n<p>এখন দেখবেন আপনার প্রমিস কপ্লিট হয়েই তারপরের লাইনের কন্সোল লগ প্রিন্ট হয়েছে। যদি বুঝতে সমস্যা হয় তাহলে <code>setTimeout()</code> এর সময় বাড়িয়ে দিয়েও নিজে টেস্ট করতে পারেন কোড সিনক্রোনাসলি কাজ করছে কি করছে নাঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*XacdXVoqVRhvK46M-li-kg.png\" alt=\"\" /></p>\n<p>এখন যদি প্রমিস রিজেক্টেড হয় তাহলে? হ্যা তাহলে আমাদের সেই আগের <code>try…catch</code> ব্লক দিয়েই আমরা আমাদের এই রিজেকশন বা এরর হ্যান্ডল করতে পারবো। তার আগে আমাদের প্রমিস যাতে রিজেক্ট হয় ঐরকম আরেকটা তৈরী করে নিইঃ</p>\n<pre><code>const aPromiseRejection = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         reject('No! It is an error!');\n      } else {\n         resolve('I am here!');\n      }\n   }, 5000)\n})\n</code></pre>\n<p>এখন আমরা <code>async</code> <code>await</code> আমাদের ফাংশন তৈরী করবো। কিন্তু আমাদের এই প্রমিস থেকে ডাটা নেওয়ার আগে পুরোটাকে <code>try…catch</code> ব্লকের ভিতরে ঢুকিয়ে নিতে হবে। আর সেই সাথে <code>catch</code> ব্লকে আমরা আমাদের এরর ম্যাসেজ অ্যাক্সেস করতে পারবোঃ</p>\n<pre><code>const promiseWithErrorHandle = async() =&gt; {\n   try {\n      const data = await aPromiseRejection;\n      console.log(data);\n   } catch(err) {\n      console.log(err);\n   }\n}\n</code></pre>\n<p>ব্যাস এবার ফাংশনটাকে কল করলেঃ</p>\n<pre><code>promiseWithErrorHandle()\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*VB7TC2xMxjdLLo0X7jj6rQ.png\" alt=\"\" /></p>\n<p><strong>একাধিক প্রমিস হ্যান্ডেল করাঃ</strong> এখন আমরা চাইলে এভাবে একাধিক প্রমিসও সিনক্রোনাসলি হ্যান্ডেল করতে পারি। ধরি আমাদের দুইটা প্রমিস আছেঃ</p>\n<pre><code>const promise1 = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         resolve('Promise 1 Resolved');\n      } else {\n         reject('Promise 1 Error');\n      }\n   }, 5000)\n })\n</code></pre>\n<p>আরেকটাঃ</p>\n<pre><code>const promise2 = new Promise((resolve, reject) =&gt; {\n   setTimeout(() =&gt; {\n      if(true) {\n         resolve('Promise 2 Resolved');\n      } else {\n         reject('Promise 2 Error');\n      }\n   }, 5000)\n})\n</code></pre>\n<p>এখন এখানে একটু বুঝার বিষয়। আমরা যদি <code>Promise.all</code> ব্যবহার করি তাহলে এটা কি রিটার্ন করে দেখিঃ</p>\n<pre><code>console.log('Promise All Returns:', Promise.all([promise1, promise2]));\n</code></pre>\n<p>মানে এটাও প্রমিস রিটার্ণ করেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*YV-GJZEXy-t4IVbd2L5PdA.png\" alt=\"\" /></p>\n<p>তাইলে এটা দিয়েই আমরা সহজে এরকম একাধিক প্রমিস হ্যান্ডেল করতে পারবোঃ</p>\n<pre><code>const handleMultiplePromise = async() =&gt; {\n   const data = await Promise.all([promise1, promise2]);\nconsole.log(data);\n}\n</code></pre>\n<p>আচ্ছা তাহলে এদের ডাটা কিভাবে আসবে? হ্যা ডাটা ঠিক অ্যারে আকারেই আসবে যেটা আমরা আগেও দেখেছি। এখন ফাংশনটাকে কল করলেঃ</p>\n<pre><code>handleMultiplePromise();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*YJiIU5eBiNmde6UaHSARww.png\" alt=\"\" /></p>\n<h4 id=\"\">বাস্তব উদাহরণঃ</h4>\n<p>ধরি আমাদের একটা প্রমিস আছে যেটা থেকে আমরা একজনের নাম পাবো, এখন এই নাম দিয়ে আবার আরেকটা প্রমিস তৈরী করে সেটা থেকে তার বয়স জেনে নাম আর বয়স প্রিন্ট করবো। এখন এখানে মাত্র দুইটা ডাটা থাকলেও রিয়েল লাইফের প্রোজেক্টে এরকম একাধিক ডাটা, একটা উপর আরেকটা নির্ভরশীল থাকতে পারে। এধরনের সিচুয়েশনে কলব্যাক জরুরী। ধরি আমাদের নাম জানার প্রমিসটাঃ</p>\n<pre><code>const getMyName = new Promise((resolve) =&gt; {\n   return resolve('Zonayed');\n})\n</code></pre>\n<p>একদম সাধারণভাবে লিখলাম এটা ধরে যে এখানে কোনো এরর হবে না। বেশীরভাগ ক্ষেত্রেও আমাদের প্রমিস লিখতে হয় না, তাই এটা ব্যাপার না এখন আরেকটা প্রমিস লিখবো যেটা এই প্রমিস থেকে নাম নিয়ে সেটার উপর ভিত্তি করে বয়স রিটার্ণ করবে। এখন যে জন্যে আমাদের একটা ফাংশনও লাগবেঃ</p>\n<pre><code>const getAge = (name) =&gt; {\n   return new Promise((resolve, reject) =&gt; {\n      if(name === 'Zonayed') {\n         resolve(21);\n      } else {  \n         reject('Not Found!');\n      }\n   }\n)}\n</code></pre>\n<p>এখন প্রথম প্রমিস থেকে আমরা নামটা নিবো, তারপর সেই নামটা পাস করে দ্বিতীয় প্রমিস থেকে বয়স নিবোঃ</p>\n<pre><code>getMyName.then((name) =&gt; {\n   getAge(name).then((age) =&gt; {\n      console.log('My name is ' + name + ' and I am ' + age + ' years old!');\n   })\n})\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*WW0pMwqs02iAyCy3DTCvww.png\" alt=\"\" /></p>\n<p>ব্যাস এভাবে আমাদের একটা কলব্যাকের ভিতরে আরেকটা কলব্যাক দিয়ে ডাড়া উদ্ধার করতে হলো। কিন্তু নতুন <code>async</code> আর <code>await</code> হলে একই কাজটা আরো ক্লিন লাইন বাই লাইন ইন্সট্রাকশনে করা যাবেঃ</p>\n<pre><code>const getMyDetails = async() =&gt; {\n   const name = await getMyName;\n   const age = await getAge(name);\n   console.log('My name is ' + name + ' and I am ' + age + ' years old!');\n}\n</code></pre>\n<p>কত ক্লিন কোড হয়ে গেলো দেখুন। এটাই <code>async</code> <code>await</code> এর আসল কাজ। এখন আমরা সিম্পলি ফাংশনটাকে কল করলেই ব্যাস ফলাফল সামনেঃ</p>\n<pre><code>getMyDetails();\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*9lMp3IK3llISdDGE4lkC9g.png\" alt=\"\" /></p>\n<p>বাস্তবে কলব্যাক হেলের সমস্যা খুব প্রখর। তাছাড়া আমরা কলব্যাকে একটা আর্গুমেন্ট নিয়ে কাজ করলেও বাস্তবে সেখানে আরো অনেক আর্গুমেন্ট পাবেন। এভাবে কলব্যাক দিয়ে কাজ করতে গেলে সহজেই খেই হারিয়ে ফেলবেন। তাই নতুন টেকনিক ব্যবহার করাই ভালো।</p>"}],"algods":[{"language":"বাংলা","tags":["Algorithm","coding","JavaScript","JavaScript-AlgoDS","JavaScript-Algorithms","JavaScript-Bangla","JavaScript-Data-Structures","programming","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-09-22T16:36:55.000Z","series":"ব্লগ","template":"post","title":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো","thumb_img_path":"/images/1_hpx2hgocDpD76ogoDZkIBA.jpeg","content":"<p><strong>সমস্যাঃ</strong> আমরা একটা ফাংশনে একটা স্ট্রিং আর্গুমেন্ট হিসেবে দিবো। সেটা আমাদেরকে স্ট্রিং টা সম্পূর্ণ উল্টো করে রিটার্ণ করবে। যেমনঃ</p>\n<pre><code>stringReverese('Hello World!');\n// Should Return: !dlroW olleH\n</code></pre>\n<p><strong>সমস্যা বিশ্লেষণ ও সম্ভাব্য সমাধানের রাস্তাঃ</strong> আমরা এখানে অ্যারে হলে অনেক সহজেই উল্টিয়ে ফেলতে পারতাম। কারণ অ্যারের রিভার্স <code>reverse()</code> মেথড আছে। এখন আমরা চাইলে এখানে আমাদের স্ট্রিংটাকেই ভাগ <code>split</code> করে অ্যারেতে নিয়ে যেতে পারি। তারপর অ্যারে থেকে অ্যারের রিভার্স মেথড দিয়ে উল্টিয়ে আবার অ্যারেটাকে অ্যারেরই <code>join()</code> মেথড দিয়ে আবার স্ট্রিং এ নিয়ে আসতে পারি।</p>\n<p><strong>অ্যালগরিদমঃ</strong></p>\n<p><strong>স্টেপ ১ঃ</strong> শুরু</p>\n<p><strong>স্টেপ ২ঃ</strong> স্ট্রিং টাকে অ্যারেতে নিয়ে যাওয়া</p>\n<p><strong>স্টেপ ৩ঃ</strong> অ্যারেটাকে অ্যারের রিভার্স মেথড দিয়ে উল্টিয়ে ফেলা</p>\n<p><strong>স্টেপ ৪ঃ</strong> এবার উল্টানো অ্যারেটাকে অ্যারেরই আরেকটা মেথড দিয়ে জয়েন করে পুনরায় স্ট্রিং এ রূপান্তর করা।</p>\n<p><strong>স্টেপ ৫ঃ</strong> এবার সেই স্ট্রিং টাকে রিটার্ন করা।</p>\n<p><strong>স্টেপ ৬ঃ</strong> শেষ!</p>\n<p><strong>কোডঃ</strong></p>\n<pre><code>function stringReverese(str) {\n   return str.split('').reverse().join('');\n}\n</code></pre>\n<p><strong>টেস্টঃ</strong></p>\n<pre><code>stringReverese('Hello World!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*OZrQSFuC1wEztfDzvmdHew.png\" alt=\"\" /></p>\n<pre><code>stringReverese('Zonayed Ahmed');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*WruZn1YqyJYHShUOKkVYfg.png\" alt=\"\" /></p>\n<pre><code>stringReverese('ABCDabcd1234!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*OYPxFeJqiasRnyG5pb_b7g.png\" alt=\"\" /></p>\n<p><strong>আরেকটা সম্ভাব্য সমাধানের রাস্তাঃ</strong> আমরা এখানে আরেকটা সমাধানের চেষ্টা করতে পারি লুপ ব্যবহার করে। একটা খালি স্ট্রিং নিয়ে আমাদের কাঙ্খিত স্ট্রিং এর উপর লুপ চালিয়ে প্রতিটা ক্যারেক্টার সেই স্ট্রিং এর প্রথমে বসিয়ে দিতে হবে। তাহলে এই হিসেবে একদম প্রথম ক্যারেক্টারটা সবার শেষে চলে যাবে, আর একদম শেষেরটা সবার প্রথমে বসবে। ব্যাস, হয়ে গেলো আমাদের স্ট্রিং উল্টানো।</p>\n<p><strong>অ্যালগরিদমঃ</strong></p>\n<p><strong>স্টেপ ১ঃ</strong> শুরু</p>\n<p><strong>স্টেপ ২ঃ</strong> একটা খালি ভ্যারিয়েবল <code>reversed</code> নেওয়া</p>\n<p><strong>স্টেপ ৩ঃ</strong> এবার স্ট্রিং টার উপরে প্রতিটা ক্যারেক্টার <code>char</code> অ্যাক্সেস করতে লুপ চালানো</p>\n<p><strong>স্টেপ ৪ঃ</strong> এবার লুপের প্রতিটা ইটারেশনে প্রতি ক্যারেক্টার <code>char</code> এর জন্যে আমরা আমাদের <code>reserved</code> ভ্যারিয়েবলে প্রথমে ক্যারেক্টার <code>char</code> টা অ্যাড করবো এবং পরে <code>reserved</code> অ্যাড করবো এভাবেঃ <code>reserved = char + reserved</code>(এখানেই আসল ট্রিক)</p>\n<p><strong>স্টেপ ৫ঃ</strong> লুপ শেষে <code>reserved</code> রিটার্ন করা।</p>\n<p><strong>স্টেপ ৬ঃ</strong> শেষ!</p>\n<p><strong>কোডঃ</strong></p>\n<pre><code>function stringReverese(str) {\n   let reversed = '';\n   for(let char of str) {\n      reversed = char + reversed;\n   }\n   return reversed; \n}\n</code></pre>\n<p><strong>টেস্টঃ</strong></p>\n<pre><code>stringReverese('Hello World!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*OZrQSFuC1wEztfDzvmdHew.png\" alt=\"\" /></p>\n<pre><code>stringReverese('Zonayed Ahmed');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*WruZn1YqyJYHShUOKkVYfg.png\" alt=\"\" /></p>\n<pre><code>stringReverese('ABCDabcd1234!');\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/880/1*OYPxFeJqiasRnyG5pb_b7g.png\" alt=\"\" /></p>"}],"soft":[{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Soft","জাভাস্ক্রিপ্ট"],"date":"2018-03-11T18:00:00.000Z","series":"ব্লগ","template":"post","title":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে - ফান প্রোজেক্ট","thumb_img_path":"/images/1_gOBvRumpgbXNEj9VoAK7yA.jpeg","content":"<p>জাভাস্ক্রিপ্ট দিয়ে কি কি করা যায় লিস্ট করলে হয়তো শেষ করা যাবে না। কিন্তু আশ্চর্য্য হলেও সত্যি জাভাস্ক্রিপ্ট দিয়ে অনেক সহজেই আপনি জাস্ট ইলেকট্রন ইউজ করে ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলতে পারবেন। তবে এটা শুরু করার আগে বলে নেই, আমি ইলেকট্রন নিয়ে ডিটেইলস জানিনা। তাই আমার এই অ্যাপ কতটুকু অপ্টিমাইজড হবে, পারফর্মেন্স কেমন হবে বা পিছনের অনেক কিছুই আমি জানিনা। জাস্ট ইন্সপায়ারেশন বা ছোটোখাটো ইমার্জেন্সি কাজ সারতে আপাতত এইটুকুই ফলো করেই কাজ করতে পারবেন। এর জন্যে আপনাকে অবশ্যই নোড জেএস, ই এস ৬(খুব বেশী দরকার নাই) এবং এনপিএম প্যাকেজ ম্যানেজারের সাথে পরিচিত থাকতে হবে। এবং আপনার কম্পিউটারে নোড ও এনপিএম ইন্সটল থাকতে হবে। আমি এখানে এগুলা নিয়া কোনো কথা বলবো না।</p>\n<p>নোড আর এনপিএম ইন্সটল আছে কিনা চ্যাক করতে কমান্ড লাইন(সিএমডি বা আপনি যেটা ইউজ করেন) ওপেন করে নিচের কমান্ডগুলো টাইপ করুনঃ</p>\n<pre><code>node -v\n</code></pre>\n<p>এবং</p>\n<pre><code>npm -v\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*545n08mUYdmn82AR5MHDcQ.png\" alt=\"\" />নোড এবং এনপিএম ভার্শন দেখাচ্ছে, আপনার ভার্শন ভিন্ন হতে পারে</p>\n<p>এখানে ভার্শন দেখতে পাবেন। এছাড়া অন্য কোনো এরর দেখলে তাইলে আবার ইন্সটল করে নিন।</p>\n<p>এবার আসি মেইন ফ্রেমওয়ার্কে, প্রথমেই ইলেক্ট্রনের পরিচয় দিয়ে শুরু করি। ইলেকট্রন একটা জাভাস্ক্রিপ্ট ফ্রেমওয়ার্ক। এর কাজ হচ্ছে ক্রস প্ল্যাটফর্ম ডেক্সটপ অ্যাপ বানানো। আর এটা আমার কাছে অন্যান্য ফ্রেমওয়ার্ক থেকে অনেক সহজ এবং স্ট্রেইট ফরোয়ার্ড মনে হইছে। তবে ইজি বলে যে ভালো অ্যাপ বানানো যাবে না এমন জিনিস এটা না। ইলেকট্রন দিয়ে বানানো অ্যাপঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yu15BhXRokrC2sv0xlRE-w.png\" alt=\"\" />ইলেকট্রন দিয়ে তৈরী</p>\n<p>সবগুলা অ্যাপ এর লিস্ট দেখতে <a href=\"https://electronjs.org/apps\">এখানে</a> দেখুন। এবার দেখেন তো পরিচিত ফেস আছে কিনা :D হ্যা আমার কয়েকটাই বেশ পরিচিত এবং আমি এক্সাইটেড যে আসলে ইলেকট্রন দিয়া বানানো অ্যাপ পাওয়ারফুল এবং ইফেক্টিভ হতে পারে।</p>\n<p>আমি আজকে এখানে যে অ্যাপ বানাবো এটার কাজ হচ্ছে আপনার প্লেইন এইচটিএমএল, সিএসএস এ বানানো একটা ওয়েব টেমপ্লেট রান করবে। মানে আপনি চাইলে আপনার ওয়েবসাইট, আপনার বানানো কোনো ওয়েব অ্যাপ্লিকেশনও এই সিস্টেমে ডেক্সটপ অ্যাপ বানিয়ে ফেলতে পারবেন। আর সবশেষে প্যাকেজ করে উইন্ডোজ, ম্যাক বা লিনাক্সের জন্য রেডি করতে পারবেন।</p>\n<p>তাইলে দেরী না করে শুরু করি চলেনঃ</p>\n<p>যেখানে কাজ করবেন সে ডিরেক্টরিতে গিয়ে নতুনএকটা ডিরেক্টরি বানিয়ে আপনার কমান্ড লাইন ইন্টারফেস ওপেন করুন। আর নতুন প্রোজেক্ট ইনিশিয়েট করুনঃ</p>\n<pre><code>npm init\n</code></pre>\n<p>তারপর আপনার মন মতো অপশন দিয়ে কাজ কমপ্লিট করুন। আমার এখানে এন্ট্রি পয়েন্ট অ্যাপ ডট জেএস দিয়েছি। আমার কাছে ইন্ডেক্স ডট জেএস ভালো লাগে না তাই অ্যাপ ডট জেএস ইউজ করেছি। এটা কোনো ব্যাপার না।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*jSdivjWNluxckW-6hw_WbA.png\" alt=\"\" /></p>\n<p>তারপর কমান্ড লাইন থেকে ইলেকট্রন এর প্যাকেজ ডেভ ডিপেন্ডেসি হিসাবে নামিয়ে ফেলুনঃ</p>\n<pre><code>npm i -D electron\n</code></pre>\n<p>তারপর ব্রাউজার উইন্ডো প্যাজকেজও ডিপেন্ডিসি হিসাবে নামিয়ে ফেলুন</p>\n<pre><code>npm i --save browser-window\n</code></pre>\n<p>ব্যাস, দরকার হলে প্যাকেজ ডট জেসন চ্যাক করে দেখেন সব ঠিক আছে কিনা। আর হ্যা প্যাকেজ ডট জেসনে এই সামান্য এডিট করতে হবে। প্যাকেজ ডট জেসন এর ভিতরে স্ক্রিপ্ট এ এই লাইন অ্যাড করুনঃ</p>\n<pre><code>“start”: “electron .”\n</code></pre>\n<p>কপি পেস্ট করবেন না, কারণ কপি পেস্ট করলে “ ” এগুলার মিনিং চ্যাঞ্জ হয়ে যায় যেটার কারণে এরর আসতে পারে।</p>\n<p>পরে আরো স্ক্রিপ্ট থাকলে শেষে কমা দিতে ভুলবেন না কিন্তু!</p>\n<p>অনেকটা এরকম দেখা যাবেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*PJYDcJSYrGsS0KRvg4i-Xw.png\" alt=\"\" />স্টার্ট স্ক্রিপ্ট থাকতে হবে মাস্ট</p>\n<p>ব্যাস এবার সব রেডী। এখন রুট ডিরেক্টরিতে অ্যাপ ডট জেএস(আমি যেহেতু অ্যাপ ডট জেএস দিয়েছি, আপনার ক্ষেত্রে আপনি যেটা দিয়েছেন) ফাইল ক্রিয়েট করুন। ওপেন করুন এবং ইন্সটল করা দুইটা প্যাকেজ রিকোয়ার করুন এভাবেঃ</p>\n<p>app.js ফাইলের ভিতরে</p>\n<p>ব্যাস এবার এই ফাংশন লিখুন যেটা সরাসরি ইলেকট্রন থেকে এসেছেঃ</p>\n<p>app.js ফাইলের ভিতরে</p>\n<p>এর মানে হচ্ছে যখন অ্যাপ রেডী হবে তখন এই ফাংশন কল করবে। তারপর ভিতরে নিচের এটা লিখুন যেটা ব্রাউজার উইন্ডো প্যাকেজ থেকে আসছে। এটা একটা অবজেক্ট আর্গুমেন্ট নিবে। আর্গুমেন্টে আপনার অ্যাপের উইন্ডোর হাইট-ওয়াইট ডিফাইন করতে হবে। এখানে আরো কিছু ডিফাইন করা যায়। <a href=\"https://github.com/jamen/browser-window/blob/master/docs/API.md\">ডকুমেন্টেশন </a>থেকে আরো কিছু ট্রাই করতেই পারেন ;)</p>\n<p>app.js ফাইলের ভিতরে</p>\n<p>এখন এই ফাংশন দেখার পরে মনে হয় অনেকটাই বুঝে ফেলছেন এখানে কি হচ্ছে! এখানে চিটিং হচ্ছে :P হ্যা! ইলেকট্রন ব্রাউজার ইউজ করতেছে, ব্রাউজার যেমন ক্রস প্ল্যাটফর্ম সাপোর্টেড তাই আপনার অ্যাপও সব প্ল্যাটফর্মেই কাজ করবে :D এই আর কি।</p>\n<p>এই অবস্থায় আসলে আপনি চাইলে আপনার অ্যাপ রান করাতে পারবেন। ঐতো একটু আগে প্যাকেজ ডট জেসনে স্টার্ট স্ক্রিপ্ট রেখেছিলাম। তাই আপনার কমান্ড লাইনে যদি লিখেনঃ</p>\n<pre><code>npm start\n</code></pre>\n<p>তাইলে দেখবেন ব্লাঙ্ক একটা অ্যাপ ওপেন হচ্ছে ;) এটাই আপনার অ্যাপ!</p>\n<p>যাই হউক এবার আপনার এই উইন্ডো তে কি লোড করবেন সেটা এটার নিচে ডিফাইন করুন। লোকাল কোনো ফোল্ডার হলেঃ</p>\n<p>app.js ফাইলের ভিতরে</p>\n<p>আমি রুট ফোল্ডারের ভিতরে পাব্লিক নামে আরেকটা ফোল্ডারে ইন্ডেক্স ডট এইচটিএমএল ফাইল রেখেছি যেটা আমি এখানে লোড করতে চাইঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Mcl0Q_2Y5dd9csLsu93VVw.png\" alt=\"\" /></p>\n<p>এখন ইন্ডেক্স ডট এইচটিএমএলে কিছু কন্টেন্ট রাখেন ডেমো হিসাবে। এখানে নরমাল একটা ওয়েব টেমপ্লেত/ওয়েবপেজের মতোই সব কাজ করবেঃ</p>\n<p>public/index.html ফাইলের ভিতরে</p>\n<p>কিন্তু মজার ব্যাপার হলো এখানে স্ক্রিপ্ট ইউজ করলে সেখানে নোড জেএসের ফাংশানিলিটিগুলোও অ্যাক্সেস করতে পারবেন।</p>\n<p>যাই হউক সবশেষে আপনার অ্যাপ ডট জেএস এরকম হবেঃ</p>\n<p>app.js এর ফাইনাল ভার্শন</p>\n<p>আপনি যদি ইএস৬ এ স্বাচ্ছন্দ্যবোধ না করেন তাইলে ইএস৫ এ এরকম হবে কোডঃ</p>\n<p>app-es5.js</p>\n<p>এবার অ্যাপ রান করে দেখেন একটুঃ</p>\n<pre><code>npm start\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GwZzixLE2Bq08BHSZnGnOw.png\" alt=\"\" />হ্যা হ্যা!!!</p>\n<p>এবার বুঝে ফেলছেন কিভাবে কি করতে হবে :D মজার না জিনিসটা? হ্যা আসলেই অনেক মজার। আমি এতোটাই এক্সাইটেড হইছিলাম যে পরীক্ষা বাদ দিয়া ইলেকট্রন গুতাইতেছিলাম :P</p>\n<p>যাই হউক এবার যদি কোনো ওয়েবসাইট মানে ইউআরএল লোড করতে চান তাইলে এই ফাংশন ইউজ করতে হবেঃ</p>\n<p>app.js ফাইলের ভিতরে</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ICcXNkPywjfqBElC04uf4Q.png\" alt=\"\" />URL লোড করলে</p>\n<p>আর এগুলা সবই এদের <a href=\"https://github.com/jamen/browser-window/blob/master/docs/API.md\">ডকুমেন্টেশনে </a>দেওয়া আছে। আপনি <a href=\"https://github.com/jamen/browser-window/blob/master/docs/API.md\">ডকুমেন্টেশন </a>দেখলেই বুঝে ফেলবেন সবকিছু।</p>\n<p>এবার এটাকে এক্সেটিউবেল ফাইল বানাতে চাই। হ্যা এর জন্যেও প্যাকেজ আছে। জাস্ট এটা ইন্সটল করুনঃ</p>\n<pre><code>npm i -g electron-packager\n</code></pre>\n<p>তারপর এটা ইউজ করুন রুট ডিরেক্টরি থেকে সিম্পল ভাবেঃ</p>\n<pre><code>electron-packager .\n</code></pre>\n<p>ব্যাস দেখুন এবার আপনার ওয়ার্কিং ডিরেক্টরিতে আপনার এক্সিটিউবেল ফাইল :D</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*W62tn6ou2ihoIY5WVfXlFw.png\" alt=\"\" />আপনার .exe ফাইল এটার ভিতরে</p>\n<p>তবে এই প্যাকেজারটা দিয়ে আরো অনেক কিছু করা যায়। বিশেষ করে অন্য প্ল্যাটফর্ম বা আরো সিকিউরড করতে চাইলে <a href=\"https://github.com/electron-userland/electron-packager\">ডকুমেন্টেশন</a> ফলো করুন।</p>\n<p>ফুল প্রোজেক্ট গিটহাব থেকে দেখার জন্যেঃ</p>\n<p><a href=\"https://github.com/zonayedpca/Basic-Electron-App\" title=\"https://github.com/zonayedpca/Basic-Electron-App\"><strong>zonayedpca/Basic-Electron-App</strong>  \n<em>Contribute to Basic-Electron-App development by creating an account on GitHub.</em>github.com</a></p>\n<p>এবার যদি এটাকে প্যাকেজ করতে চান সবার সাথে শেয়ার করার জন্য তাইলে নিচের এই প্যাকেজগুলো দেখতে পারেন। আর আমাকে জানাবেন এগুলা কিরকম কাজ করে। কারণ আমি ট্রাই করি নাই তবে কাজ করে এটা শিউর। ডকুমেন্টেশন দেখে নিবেন ব্যাস কাজ হয়ে যাবে।</p>\n<p><strong>নোটঃ</strong> আপনি যদি উইন্ডোজের প্যাকেজ/ইন্সটলার বানাতে চান তাহলে অবশ্যই প্যাকেজ ম্যানেজার উইন্ডোজ থেকেই রান করতে হবে। সেইম ম্যাকের জন্যে হলে ম্যাকে রান করাতে হবে, লিনাক্সের জন্য হলে লিনাক্সে রান করাতে হবে।মেইন কথা যে ইনভারোমেন্টের জন্য প্যাকেজ বা ইন্সটলার বানাবেন সে ইনভারোমেন্টে ঐটার প্যাকেজ ইন্সটল করে রান করাতেহবে। বাট মেইন ডেভেলপমেন্ট যেকোনো প্ল্যাটফর্ম থেকে করলেই হবে।</p>\n<h3 id=\"\">আরো গুরুত্বপূর্ন লিঙ্কঃ</h3>\n<ul>\n<li><a href=\"https://github.com/mongodb-js/electron-installer-zip\">electron-installer-zip</a> — জিপ ফাইল বানানোর জন্যে</li>\n</ul>\n<p><strong>উইন্ডোজঃ</strong></p>\n<ul>\n<li><a href=\"https://github.com/electron/windows-installer\">electron-winstaller</a> — উইন্ডোজ ইন্সটলার ক্রিয়েট করতে</li>\n<li><a href=\"https://github.com/felixrieseberg/electron-windows-store\">electron-windows-store</a> — উইন্ডোজ স্টোরের জন্যে প্যাকেজ বানাতে চাইলে</li>\n<li><a href=\"https://github.com/felixrieseberg/electron-wix-msi\">electron-wix-msi</a> — MSI ইন্সটলার বানাতে</li>\n</ul>\n<p><strong>ওএস(অ্যাপেল)ঃ</strong></p>\n<ul>\n<li><a href=\"https://github.com/mongodb-js/electron-installer-dmg\">electron-installer-dmg</a> — DMG ফাইল বানানোর জন্যে</li>\n</ul>\n<p><strong>লিনাক্সঃ</strong></p>\n<ul>\n<li><a href=\"https://github.com/unindented/electron-installer-debian\">electron-installer-debian</a> — DEB ফাইল বানানোর জন্যে</li>\n<li><a href=\"https://github.com/unindented/electron-installer-redhat\">electron-installer-redhat</a> — RPM ফাইল বানানোর জন্যে</li>\n<li><a href=\"https://github.com/endlessm/electron-installer-flatpak\">electron-installer-flatpak</a> — Flatpak ফাইল বানানোর জন্যে</li>\n<li><a href=\"https://github.com/electron-userland/electron-installer-snap\">electron-installer-snap</a> — Snap ফাইল বানানোর জন্যে</li>\n</ul>"},{"language":"বাংলা","tags":["gulp","gulp-bangla","gulp-js","JavaScript","JavaScript-Bangla","JavaScript-Soft","জাভাস্ক্রিপ্ট","জাভাস্ক্রিপ্ট-বাংলা"],"date":"2018-05-03T06:30:49.000Z","series":"ব্লগ","template":"post","title":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন","thumb_img_path":"/images/gulp.jpeg","content":"<p><strong>Gulp JS</strong> মূলত একটা <strong>টুলস</strong> আপনার নিত্যপ্রয়োজনীয় টাস্ককে <strong>অটোম্যাট</strong> করার জন্যে। আমাদের ওয়েব অ্যাপ্লিকেশন বা ওয়েব ডেভেলপমেন্ট এ অনেক কাজ আছে যেগুলো বারবার করতে হয়। ধরুন আপনি SASS দিয়ে স্টাইল করতেছেন, এখন প্রত্যেকবার আপনার ফাইল দেখার জন্যে SASS ফাইলটাকে কম্পাইল করে প্লেইন CSS এ নিতে হয়। এজন্যে আপনাকে প্রয়োজনীয় কমান্ড দিয়ে কম্পাইল করতে হয়। যদিও SASS এরও অটোম্যাট(watch) কম্পাইল কমান্ড দেওয়ার অপশন আছে। কিন্তু আপনার প্রোজেক্টে এই SASS কে CSS এ নেওয়া ছাড়াও আরো এরকম অনেক কাজ থাকতে পারে। যেমন আপনি চাচ্ছেন আপনার প্রোডাকশন ভার্শনে মিনিমাইজড স্ক্রিপ্ট ফাইলগুলো থাকবে, কিন্তু ডেভেলপমেন্ট এর সময় আপনি ডেভেলপমেন্ট ফাইলই রাখবেন। কিন্তু এক্ষেত্রে ডেভেলপমেন্ট এর সময় বারবার মিনিমাইজড করে করে কাজ করা বিরক্তকর, একই সাথে আপনি ডেভেলপমেন্ট ভার্শনে মডিউল আকারে অনেকগুলো ফাইলে স্ক্রিপ্ট লিখলেন, এখন প্রোডাকশন এ চাচ্ছেন সেগুলো একসাথে করে ফেলতে। আবার যদি আপনার প্রোজেক্টে অনেক মেম্বার থাকে, তাহলে তাদেরকেও আপনার কাজগুলো করতে হবে, প্রয়োজনীয় মিনিমাইজড ভার্শন করার টুলস, SASS থেকে CSS করার টুলস, কমান্ড সবই নতুন করে ইন্সটল করা, কমান্ড দেওয়া সব করতে হবে। এটা আসলে অনেক বিরক্তকর। আপনি আপনার আসল কাজই করবেন নাকি টুলস ইন্সটলেশন আর কমান্ড দিতে দিতেই দিন শেষ করে দিবেন? অবশ্যই চাইবেন এমন কোনো টুলস যেটা সবকিছু অটোম্যাট করে দিতে পারবে। হ্যাঁ, গাল্প এর কাজ এরকম কিছুই। তাই আমি আজকে Gulp নিয়ে কথা বলবো।</p>\n<p>প্রথমেই আপনার ম্যাশিনে <strong>নোড জেএস</strong> ইন্সটল করা থাকতে হবে। এবার একটি ডিরেক্টরি নিয়ে সেখানে আমরা Gulp এর ব্যাসিকগুলো দেখবো। আপনি যে কমান্ড লাইন ইউজ করেন সেটি ওপেন করুন। একটা ডিরেক্টরি ক্রিয়েট করুন। যেখানে আপনার Gulp এর জন্যে প্রয়োজনীয় সব ফাইলগুলো থাকবে।</p>\n<pre><code>mkdir gulp-practice\n\ncd gulp-practice\n</code></pre>\n<p>এবার এই ডিরেক্টরিতে npm প্রোজেক্ট ইনিশিয়েট করুনঃ</p>\n<pre><code>npm init\n</code></pre>\n<p>সবকিছু বাই ডিফল্ট ভাবেই রাখতে পারেন, চাইলে আপনি আপনার মনমতোও দিতে পারেন। এতে কোনো ইফেক্ট পড়বে না।</p>\n<p>এখন আপনার আসল <strong>Gulp</strong> সহ <strong>Gulp CLI</strong> ও ইন্সটল করতে হবে। এখানে <code>gulp</code> <strong>ডেভ ডিপেন্ডেন্সি</strong> আর <code>gulp-cli</code> <strong>গ্লোবাললি</strong> ইন্সটল করতে হবেঃ</p>\n<pre><code>npm install -g gulp-cli\n\nnpm install --save-dev gulp\n</code></pre>\n<p>এখন প্রোজেক্টের রুট ডিরেক্টরিতে <code>gulpfile.js</code> নামে একটি ফাইল ক্রিয়েট করতে হবে যেটাতেই মূলত Gulp এর অটোম্যাট টাস্ক রানারের কোডগুলো থাকবে। অনেকটা Config ফাইলের মতোই।</p>\n<pre><code>touch gulpfile.js\n</code></pre>\n<p>এবার আপনার <code>gulpfile.js</code> ফাইলটি আপনার পছন্দের কোড এডিটরে ওপেন করুন।</p>\n<p>Gulp এ মূলত নিচের এই মেথডগুলোই বেশী ইউজ করা হয়। সবকিছু অনেকটা এগুলোর উপরেই করা হয়।</p>\n<p><code>gulp.task</code> টাস্ক বানানোর জন্যে ইউজ করা হয়।</p>\n<p><code>gulp.src</code> যে ফাইলের উপর অ্যাকশন নেওয়া হবে সেটার লোকেশান…</p>\n<p><code>gulp.dest</code> অ্যাকশন নেওয়া ফাইলটা যেখানে সেইভ করবেন…</p>\n<p><code>gulp.watch</code> কোনো ফাইলকে নজরদারীতে রাখার জন্যে, ঐ ফাইলে কিছু চ্যাঞ্জ হলেই আপনার দেওয়া টাস্ক অটোম্যাটিকভাবেই অ্যাপ্লাই হয়ে যাবে।</p>\n<hr />\n<h4 id=\"\">টাস্ক তৈরী করাঃ</h4>\n<p><code>gulp.task</code> দিয়ে টাস্ক ক্রিয়েট করা হয়। এটা সাধারণত দুইটা আর্গুমেন্ট নেয়। প্রথমটা আপনার টাস্কের নাম এবং দ্বিতীয়টায় একটা কলব্যাক ফাংশন। এই ফাংশনের ভিতরেই আপনি কি করতে চাচ্ছেন সেগুলোর কোড লিখবেন।</p>\n<pre><code>gulp.task('taskName', function() {\n  // What do you want to do\n});\n</code></pre>\n<p>আমরা যেহেতু <code>gulp</code> ইউজ করেছি তাই এটা অবশ্যই <code>require</code> করিয়ে নিতে হবেঃ</p>\n<pre><code>const gulp = require('gulp');\n</code></pre>\n<p>যেমন খুব সিম্পলভাবে একটা টেক্সট <code>console.log</code> করাতে চাইলেঃ</p>\n<pre><code>gulp.task('hello', function() {\n   console.log('Hi! This is my First Task!!');\n});\n</code></pre>\n<p>এখন Gulp এর এই টাক্স রান করাতে আপনাকে <code>gulp-cli</code> ইউজ করতে হবে। যেহেতু আমরা এটা গ্লোবাললি ইন্সটল করে নিয়েছি তাই এখন আমরা কমান্ড লাইনে <code>gulp</code> কমান্ড ইউজ করতে পারবো। প্রথমে কমান্ড লাইনে <code>gulp</code> লিখে তারপর আপনার টাস্কের নাম লিখতে হবে। অবশ্যই মনে রাখবেন এই কমান্ড প্রোজেক্টের রুটে বা যেখানে <code>gulpfile.js</code> ফাইলটা রয়েছে সেখান থেকে রান করাতে হবে। এবার আমরা উপরের ডিমো <code>console.log</code> টা রান করাবো। আপনার কমান্ড লাইনে লিখুনঃ</p>\n<pre><code>gulp hello\n</code></pre>\n<p>তারপর এন্টার চাপলে দেখবেন আপনার লেখা প্রিন্ট হয়েছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*W2wcNfIObWjUAlmooJTPLg.png\" alt=\"\" /></p>\n<p>যদিও এটা এতোটা কাজের মনে হচ্ছে না, কিন্তু কিভাবে একটা টাস্ক বানানো হয় এবং রান করাতে হয় সেটা এখন আশা করি ক্লিয়ার।</p>\n<h4 id=\"-1\">ফাইল কপি করাঃ</h4>\n<p>এখন আমাদের ডেভেলমেন্ট এ অনেক সময় একটা ডেভেলপমেন্ট ভার্শন থাকে, আরেকটা প্রোডাকশন ভার্শন থাকে। ধরি আমাদের <a href=\"https://github.com/zonayedpca/gulp-demo/archive/project-structure.zip\">এরকম</a>(ডাউনলোড করে নিন) স্ট্রাকচার আছে মেইন প্রোজেক্ট এরঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vDrlSGQIXeJCTYA0mzrcuA.png\" alt=\"\" /></p>\n<p>এখন <code>src</code> এর ভিতরের সব ডেভেলপমেন্ট ভার্শন। এখন বাই কনভেনশন আমরা <code>dist</code> নামে একটা ডিরেক্টরিতে প্রোডাকশন ভার্শনটা রাখি। এখন যদি আমরা ডেভেলপমেন্ট ভার্শন থেকে প্রোডাকশন ভার্শনে নেওয়ার জন্যে একটা টাস্ক ক্রিয়েট করতে চাচ্ছি। <code>about.html</code> আর <code>index.html</code> কে কপি করে <code>dist</code> ডিরেক্টির ভিতরে নিতে চাচ্ছি। লক্ষ্য করুন আমাদের কিন্তু <code>dist</code> নামে কোনো ডিরেক্টরিই নাই। সমস্যা নাই, <code>gulp</code> ডিরেক্টরি না থাকলে ক্রিয়েট করে দিবেঃ</p>\n<pre><code>gulp.task('copy', function() {\n   gulp.src('./src/*.html').pipe(gulp.dest('./dist/'));\n});\n</code></pre>\n<p>এখানে প্রথমে টাস্ক ক্রিয়েট করে তারপর সোর্স দেওয়া হয়েছে। <code>*</code> দিয়ে বুঝানো হয়েছে আমরা সব নামের <code>html</code> ফাইলগুলো চাচ্ছি কপি করতে। তারপর <code>pipe()</code> এর ভিতরে ডেসটিনেশন দিয়েছি যেখানে আমরা ফাইলগুলো কপি করতে চাচ্ছি। এভাবেই <code>pipe()</code> করে আপনি যে অ্যাকশন নিতে চাচ্ছেন নিতে হবে।</p>\n<p>এবার টাস্ক রান করুনঃ</p>\n<pre><code>gulp copy\n</code></pre>\n<p>দেখুন এবার <code>dist</code> নামে একটা ডিরেক্টরি ক্রিয়েট হয়েছে এবং সব <code>html</code> ফাইল সেখানে কপি হয়ে গেছেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iZC2095CFvwmHk6clsEe0Q.png\" alt=\"\" /></p>\n<h4 id=\"sasscss\">SASS কে CSS এ নেওয়াঃ</h4>\n<p>এজন্যে আমরা gulp এর <code>gulp-sass</code> প্লাগিন ইউজ করবো। এরকম gulp এর অনেক প্লাগিন আছে বিভিন্ন টাস্ক কমপ্লিট করার জন্যে। gulp এর অফিশিয়াল ওয়েবসাইটের তথ্য অনুযায়ী এখন পর্যন্ত gulp এর ৩,৬৯৫+ প্লাগিন রয়েছে। অলমোস্ট ইউজ করা হয় এমন সব কাজ করার প্লাগিনই পাবেন। প্রথমে <code>gulp-sass</code> ডেভ ডিপেন্ডেন্সি হিসেবে ইন্সটল করে নিনঃ</p>\n<pre><code>npm install --save-dev gulp-sass\n</code></pre>\n<p>এখন আমাদের প্রোজেক্টের <code>src/css/style.scss</code> ফাইলের ভিতরে কিছু SASS লিখা যাক, যেটা আমরা <code>dist</code> এর ভিতরে আসল CSS এ কনভার্ট করে নিয়ে যাবোঃ</p>\n<pre><code>$bgColor: #333;\n$fontColor: #fff;\n\nbody {\n  background: $bgColor;\n  color: $fontColor;\n}\n</code></pre>\n<p>এবার এটাকে কনভার্ট করে জায়গামতো নেওয়ার জন্যে নতুন আরেকটা টাস্ক ক্রিয়েট করা যাকঃ</p>\n<pre><code>gulp.task('sass', function() {\n  gulp.src('./src/css/*.scss')\n    .pipe(sass())\n      .pipe(gulp.dest('./dist/css'));\n});\n</code></pre>\n<p>এখানে যেহেতু <code>sass()</code> ইউজ করেছি এটা অবশ্যই আগে <code>require</code> করিয়ে নিতে হবেঃ</p>\n<pre><code>const sass = require('gulp-sass');\n</code></pre>\n<p>এখানে দেখুন এভাবেই <code>pipe()</code> ইউজ করে একটা অ্যাকশন (SASS কে CSS এ কনভার্ট করে) নিয়ে তারপর ডেসটিনেশন দিয়েছি। এবার এই টাস্ক রান করুনঃ</p>\n<pre><code>gulp sass\n</code></pre>\n<p>আর দেখুন আপনার CSS ফাইল একদম যেভাবে দিয়েছেন সেভাবেই চলে গিয়েছে।</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*BNCjdzkRvaNx1GZC_wWiIQ.png\" alt=\"\" /></p>\n<h4 id=\"-2\">স্ক্রিপ্টকে মিনিমাইজ করাঃ</h4>\n<p>আমাদের প্রোজেক্টে দুইটা স্ক্রিপ্ট ফাইল আছে। এবার এগুলোর ভিতরে কিছু লিখা যাক। <code>alert.js</code> ওপেন করে লিখিঃ</p>\n<pre><code>// Alert a message on the browser window\n// Really Exciting\n//\n//\n\nalert('I am learning Gulp JS');\n\n//\n\n//\n\nconsole.log('Log Nothing');\n</code></pre>\n<p>আবার <code>log.js</code> ওপেন করে লিখিঃ</p>\n<pre><code>// Alert a message on the browser window\n// Really Exciting\nconsole.log('Log Something on the Console');\n//\n//\n\nconsole.log('Log Something Else');\n\n//\n//\n\n//\n\nconsole.log('Log Nothing');\n</code></pre>\n<p>এখন আমরা এখানে gulp এর <code>gulp-uglify</code> প্লাগিন ইউজ করে এই দুইটা স্ক্রিপ্টকে কম্প্রেসড করে <code>dist</code> এ রাখবো। এজন্যে প্রথমে <code>gulp-uglify</code> ডেভ ডিপেন্ডেসি হিসাবে ইন্সটল করে নেইঃ</p>\n<pre><code>npm install --save-dev gulp-uglify\n</code></pre>\n<p>এখন <code>gulpfile.js</code> এ এই প্লাগিনটা <code>require</code> করিয়ে কাজ শুরু করবোঃ</p>\n<pre><code>const uglify = require('gulp-uglify');\n</code></pre>\n<p>এখন নতুন একটা টাস্ক ক্রিয়েট করি যেটা আমাদের কাজ করবেঃ</p>\n<pre><code>gulp.task('compress', function() {\n  gulp.src('./src/js/*')\n    .pipe(uglify())\n      .pipe(gulp.dest('./dist/js'));\n});\n</code></pre>\n<p>এখানে <code>src/js</code> এর ভিতরের সব ফাইল নিয়ে <code>dist/js</code> ডিরেক্টরিতে মিনিমাইজড করে রাখতে চাচ্ছি। এবার টাস্ক রান করুনঃ</p>\n<pre><code>gulp compress\n</code></pre>\n<p>এবার <code>dist/js</code> এর ভিতরে দেখুন আপনার কম্প্রেসড ফাইলগুলোঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NCL51ctpGW3nPyZFoQrnKA.png\" alt=\"\" /></p>\n<h4 id=\"-3\">কয়েকটা ফাইলকে একটা ফাইলে নেওয়াঃ</h4>\n<p>আমাদের এখানে দুইটা স্ক্রিপ্ট ফাইল <code>alert.js</code> এবং <code>log.js</code> আছে। এখন আমরা চাচ্ছি দুইটাকে একসাথে করে <code>dist</code> ডিরেক্টরিতে একটা ফাইলে রাখতে। তাছাড়া আমাদের <strong>html</strong> ফাইলগুলোয় দেখবেন আমি একটা স্ক্রিপ্ট লিঙ্ক করিয়েছি <code>main.js</code> নামে। আমরা এখন সেটাই করবো gulp এর <code>gulp-concat</code> প্লাগিন ইউজ করে। প্রথমে প্লাগিনটা ডেভ ডিপেন্ডেন্সি হিসাবে ইন্সটল করে ফেলিঃ</p>\n<pre><code>npm install --save-dev gulp-concat\n</code></pre>\n<p>এখন <code>gulpfile.js</code> এ এই প্লাগিনটা <code>require</code> করিয়ে কাজ শুরু করবোঃ</p>\n<pre><code>const concat = require('gulp-concat');\n</code></pre>\n<p>এবার ফাইল দুইটাকে একসাথে করে <code>dist</code> এ একটা <code>main.js</code> ফাইল ক্রিয়েট করবো। এর জন্যে নতুন টাস্ক লিখতে হবেঃ</p>\n<pre><code>gulp.task('concat', function() {\n  gulp.src('./src/js/*')\n    .pipe(concat('main.js'))\n      .pipe(gulp.dest('./dist/js'));\n});\n</code></pre>\n<p>এখানে সব আগের মতো হলেও দেখবেন <code>concat()</code> একটা আর্গুমেন্ট নিয়েছে যেটা আপনার ফাইলের নাম। এধরনের ব্যাপারগুলো শুধুমাত্র জানতে পারবেন প্লাগিনের <a href=\"https://www.npmjs.com/package/gulp-concat\">ডকুমেন্টেশন</a> থেকে। প্লাগিনের ডকুমেন্টশন দেখে দেখেই এখন যেকোনো প্লাগিন দিয়ে কাজ করতে পারবেন আশা করি। এবার এই টাস্কটা রান করুনঃ</p>\n<pre><code>gulp concat\n</code></pre>\n<p>এবার দেখুন আপনার <code>dist</code> ডিরেক্টরিতেঃ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Qs_5i2K3f9rRtd1vP-yI-A.png\" alt=\"\" /></p>\n<h4 id=\"-4\">একসাথে দুইটা অ্যাকশন পারফর্ম করাঃ</h4>\n<p>এখন ধরি আগের উদাহরণটায় আমরা <code>main.js</code> ফাইলটাকে কমপ্রেসড করতে চাচ্ছি <code>gulp-uglify</code> দিয়ে। তাহলে একদম ইজি। জাস্ট আরো একটা <code>pipe()</code> অ্যাড করতে হবে এরকমভাবেঃ</p>\n<pre><code>gulp.task('concatmin', function() {\n  gulp.src('./src/js/*')\n    .pipe(uglify())\n      .pipe(concat('main.js'))\n        .pipe(gulp.dest('./dist/js'));\n});\n</code></pre>\n<p>এবার টাস্ক রান করিয়ে দেখুন আপনার <code>main.js</code> একই সাথে কম্প্রেসডও হয়ে গেছে।</p>\n<h4 id=\"-5\">কোনো ফাইলকে নজরদারীতে রাখাঃ</h4>\n<p>আমরা চাইলে কোনো ফাইলকে নজরদারীতেও রাখতে পারি <code>gulp.watch()</code> দিয়ে। এটার কাজ হলো আপনি যে ফাইলকে নজরদারীতে রাখবেন সেটাতে কোনোরকম চ্যাঞ্জ হলেই আপনার দেওয়া টাস্ক অটোম্যাটিকালি অ্যাপ্লাই হয়ে যাবে।</p>\n<p>আমরা চাচ্ছি <code>index.html</code> ও <code>about.html</code> কে নজরদারীতে রাখতে। এগুলোতে কোনো চ্যাঞ্জ হওয়ার সাথে সাথেই <code>dist</code> এর ভিতরে অটো কপি হয়ে যাবে, এর জন্যে নতুন আরেকটা টাস্ক স্কিয়েট করিঃ</p>\n<pre><code>gulp.task('watch', function() {\n  gulp.watch('./src/*.html', ['copy']);\n});\n</code></pre>\n<p>এখানে <code>gulp.watch()</code> দুইটা আর্গুমেন্ট নেয়। প্রথমটা কোন ফাইল বা ফাইলগুলোকে নজরদারীতে রাখতে চাচ্ছেন আর দ্বিতীয়টা একটা অ্যারে যেখানে আপনি কোন কোন অ্যাকশন অ্যাপ্লাই করতে চাচ্ছেন সেই অ্যাকশনের টাস্কের নাম একটার পর একটা। উল্লেখিত ফাইলে কোনোরূপ চ্যাঞ্জ হলেই এই অ্যারেতে ডিফাইন করা অ্যাকশনগুলো অ্যাপ্লাই হয়ে যাবে অটোম্যাটিকেলি। এবার এই টাস্ক রান করুনঃ</p>\n<pre><code>gulp watch\n</code></pre>\n<p>এবার <code>index.html</code> বা<code>about.html</code> তে কোনোকিছু চ্যাঞ্জ করতেই দেখবেন <code>dist</code> এর ভিতরের <code>index.html</code> বা <code>about.html</code> ফাইলগুলোও অটোম্যাটিক চ্যাঞ্জ হয়ে যাচ্ছে। এভাবে আমরা চাইলে আরো অনেকগুলো জিনিস একইভাবে নজরদারীতে রাখতে পারিঃ</p>\n<pre><code>gulp.task('watch', function() {\n  gulp.watch('./src/*.html', ['copy']);\n  gulp.watch('./src/css/*.scss', ['sass']);\n  gulp.watch('./src/js/*', ['concatmin']);\n});\n</code></pre>\n<p>এবার <code>gulp watch</code> রান করার সাথে সাথেই দেখবেন এখানে উল্লেখিত সবগুলো ফাইলই নজরদারীতে রাখা হচ্ছে এবং এই ফাইলগুলোয় কোনো চ্যাঞ্জ অ্যাপ্লাই করার সাথে সাথেই আপনার উল্লেখিত অ্যাকশন অ্যাপ্লাই করা হচ্ছে। এখানেই gulp এর আসল মজা <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/svg/1f600.svg\" alt=\"😀\" /></p>\n<h4 id=\"-6\">ডিফল্ট টাস্কঃ</h4>\n<p>gulp এ ডিফল্ট টাস্কও ক্রিয়েট করতে পারবেন এভাবেঃ</p>\n<pre><code>gulp.task('default', ['copy', 'sass', 'concatmin', 'watch']);\n</code></pre>\n<p>এখানে দুইটা আর্গুমেন্ট নিয়েছে। প্রথমটা <code>‘default’</code> ডিফল্ট টাস্কের জন্যে। আর দ্বিতীয়টা একটা অ্যারে বাই ডিফল্ট আপনি কোন কোন টাস্ক রান করাতে চাচ্ছেন সেগুলো। এই ডিফল্ট টাস্ক রান করাতে চাইলে সিম্পলি এভাবে লিখলেই রান করা শুরু করবেঃ</p>\n<pre><code>gulp\n</code></pre>\n<p>এজন্যে এটাকে ডিফল্ট টাস্ক বলা হয়।</p>\n<p>কমপ্লিট প্রোজেক্টটি আমার গিটহাব থেকে ডাউনলোড করতে পারবেনঃ</p>\n<p><a href=\"https://github.com/zonayedpca/gulp-demo\" title=\"https://github.com/zonayedpca/gulp-demo\"><strong>zonayedpca/gulp-demo</strong>  \n<em>Contribute to gulp-demo development by creating an account on GitHub.</em>github.com</a></p>\n<p>আজকে এই পর্যন্তই। আশা করি gulp সম্পর্কে ক্লিয়ার ধারণা হয়ে গেছে। এখন শুধু প্লাগিনের ডকুমেন্টেশন দেখে দেখেই কাজ করতে পারবেন আশা করি। এতোক্ষন সাথে থাকার জন্যে ধন্যবাদ!</p>"},{"language":"বাংলা","tags":["coding","JavaScript","JavaScript-Bangla","JavaScript-Soft","Node","Node-Js","জাভাস্ক্রিপ্ট"],"date":"2018-05-05T06:30:42.000Z","series":"ব্লগ","template":"post","title":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে","thumb_img_path":"/images/react-starter.jpeg","content":"<p>আমরা রিঅ্যাক্ট এ অ্যাপ্লিকেশন ডেভেলপমেন্ট করার আগে সাধারণত <code>create-react-app</code> CLI দিয়ে প্রথমের রিঅ্যাক্ট এর স্টার্টার প্যাক বানিয়ে ফেলি। অথবা অলরেডি এরকম বানানো আছে এমন প্যাক নামিয়ে সেটার উপর কাজ করা শুরু করি। বিগিনার লেভেল এর জন্যে এই পদ্ধতিটাই সবচেয়ে বেস্ট, কারণ এই প্যাক এর এনভারোমেন্ট সেটাপ করতে করতেই অনেকে ডিমোটিভেট হয়ে আসল রিঅ্যাক্ট শিখাই বাদ দিয়ে দিতে পারে। তাই যাদের একান্ত ইচ্ছা আছে বা আসলেই জানতে চান কিভাবে এই স্টার্টার প্যাকটা বানানো হয়, কি কি থাকে, কিভাবে কি কাজ করে, তাহলে তাদের জন্যেই আজকে আমার লেখা।</p>\n<p>আমি সবকিছু একদম পার্ট পার্ট করে ব্যাখ্যা করে দিবো, এবং সবশেষে আমার বানানো প্যাকগুলোর লিঙ্কও পাবেন, যেগুলো ডাউনলোড করে আপনি আপনার মন মতো কাস্টমাইজ করেও কাজ করতে পারবেন। চাইলে লাইভের পোর্ট চ্যাঞ্জ করতে পারবেন, নতুন কোনো প্লাগিনও লাগাতে পারবেন আপনার কাজকে আরো অটোম্যাট করতে।</p>\n<p>প্রথমেই আপনার ডিভাইসে অবশ্যই নোড জেএস ইন্সটল থাকতে হবে। নোড জেএস এবং NPM আছে কিনা দেখার জন্যে এদের ভার্শন চ্যাক করতে পারেন কমান্ড লাইন থেকে। বাই দ্যা ওয়ে, কমান্ড লাইন আপনার পছন্দমতো যেকোনো একটা ইউজ করলেই হবে। জাস্ট কাজ করলেই হবে।</p>\n<p>Node JS এবং NPM এর ভার্শন চ্যাক করুনঃ</p>\n<pre><code>node --version \nবা,\nnode -v\n\nএবং\n\nnpm --version\nবা,\nnpm -v\n</code></pre>\n<p>ভার্শন দেখালে ঠিক আছে। অন্যকিছু দেখালে তাহলে হয়তো আপনাকে Node JS ইন্সটল করতে হবে।</p>\n<p>যাই হউক এবার আমরা মেইন প্রোজেক্টে কাজ করবো। একদম স্ক্র্যাচ থেকে সবকিছু শুরু করবো। আপনার মনমতো যেকোনো জায়গায় একটা ডিরেক্টরি নিয়ে প্রোজেক্ট শুরু করুন।</p>\n<pre><code>mkdir react-starter-pack\n</code></pre>\n<p>এবার আপনার ডিরেক্টরিতে চলে যানঃ</p>\n<pre><code>cd react-starter-pack\n</code></pre>\n<p>এবার একটা NPM প্রোজেক্ট ইনিশিয়েট করুনঃ</p>\n<pre><code>npm init\n</code></pre>\n<p>এখানে আপনার পছন্দমতো ডিটেইলস দিয়ে সবকিছু পূরণ করুন। সবশেষে কনফার্ম করে ফেলুন। দেখবেন আপনার ডিরেক্টরিতে সব ঠিক থাকলে একটা এরকম <code>package.json</code> ফাইল তৈরী হয়েছেঃ</p>\n<pre><code>{\n  \"name\": \"react-starter-pack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"Zonayed Ahmed\",\n  \"license\": \"MIT\"\n}\n</code></pre>\n<p>এবার রিঅ্যাক্ট এ সাধারণত সব স্ক্রিপ্ট ফাইলগুলো বান্ডেল হয়ে প্রোডাকশন ভার্শনে একটা স্ক্রিপ্ট ফাইলে চলে যায়। যেই কাজটাই ওয়েবপ্যাক দিয়ে করা হয়। আবার একই সাথে ডেভেলপমেন্ট এর সময় আমাদের লাইভসার্ভারের কাজও লাগে যেটা লোকাহোস্টের একটা পোর্টে চলন্ত অবস্থায় থাকে। আমাদের বান্ডেল করার জন্যে <code>webpack</code>, লাইভ ডেভেলপমেন্ট সার্ভারের জন্যে <code>webpack-dev-server</code> এবং সবশেষে webpack কম্পাইলারের জন্যে <code>webpack-cli</code> প্যাকেজ লাগবে। এগুলো ডেভ ডিপেন্ডেসি হিসাবে ইন্সটল করে ফেলুনঃ</p>\n<pre><code>npm install --save-dev webpack webpack-dev-server webpack-cli\n</code></pre>\n<p>এখন ওয়েবপ্যাকের জন্যে একটা প্রোজেক্টের রুটে <code>webpack.config.js</code> ফাইল বানাতে হবে যেখানে ওয়েবপ্যাকের কনফিগারেশনগুলো থাকবেঃ</p>\n<pre><code>touch webpack.config.js\n</code></pre>\n<p>এখন ওয়েব ডেভেলপমেন্ট এ কনভেনশনালি প্রোজেক্টের স্ট্রাকচার অনেকটা দেখবেন একটা <code>src</code> ডিরেক্টরি থাকে যেখানে আপনার ডেভেলপমেন্ট এর সময়কার ফাইল/কোড গুলো থাকে, আর আরেকটা <code>dist</code> বা <code>build</code> নামে একটা ডিরেক্টরি থাকে যেখানে আপনার প্রোডাকশন ভার্শন থাকে। আমাদের এই প্যাকেও আমরা সেইম কনভেনশান মেনেই স্টারকচার করবো। তবে আপনি চাইলে আপনার মতো করেও যেকোনোভাবে করতে পারবেন।</p>\n<p>একটা ডিরেক্টরি তৈরী করুন <code>src</code> নামে যেটার ভিতরে একটা স্ক্রিপ্ট ফাইল রাখুন <code>index.js</code> নামেঃ</p>\n<pre><code>mkdir src\ntouch src/index.js\n</code></pre>\n<p>এবার index.js er ফাইলের ভিতরে কিছু কোড লিখুন জাস্ট দেখার জন্যেঃ</p>\n<pre><code>console.log('Hello React Starter Pack!');\n</code></pre>\n<p>এবার আমরা এটাকে <code>dist</code> নামে একটা ফোল্ডারে নিয়ে বান্ডেল তৈরী করবো। এর জন্যে আমাদের <code>webpack.config.js</code> এ ওয়েবপ্যাকের জন্যে কিছু কনফিগারেশন করে দিতে হবে এরকমঃ</p>\n<pre><code>module.exports = {\n  entry: './src/index.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  }\n}\n</code></pre>\n<p>এখানে একটা অবজেক্ট ক্রিয়েট করে সেটা এক্সপোর্ট করা হচ্ছে। সাথে সেই অবজেক্ট এর ভিতরে এন্ট্রি পয়েন্ট দিতে হবে। এর নিচে আবার আউটপুট নামেরও আরেকটা অবজেক্ট নিতে হবে যেখানে আপনি আপনার পাথ মেনশন করে দিতে হবে যেখানে আপনি বান্ডেল ফাইলটা রাখতে চাচ্ছেন। কিন্তু এখানে পাথ এর লোকেশান একদম অ্যাবসিলিউট হতে হবে, তাই আপনারে <code>__dirname</code> ইউজ করে বাকি পাথটা রিলেটেভলি মেনশন করে দিতে হবে, অন্যথায় এরর আসবে। এবং দ্বিতীয়টায় আপনাকে বান্ডেল করা ফাইলের নামটাও মেনশন করে দিতে হবে। আমি এখানে আমার বর্তমার প্রোজেক্টের ডিরেক্টরিতে <code>dist</code> নামে একটা ডিরেক্টরির ভিতরে <code>bundle.js</code> নামে একটা ফাইলে বান্ডেলটা রাখতে চাচ্ছি। আপনি এখানে চাইলে যেকোনো নামই ইউজ করতে পারবেন।</p>\n<p>এবার ওয়েবপ্যাকের ব্যাসিক কনফিগারেশন রেডী। এবার NPM দিয়ে এটা রান করাতে চাচ্ছি, তাই <code>package.json</code> এ কিছু <code>scripts</code> লিখতে হবে। <code>package.json</code> ওপেন করে <code>scripts</code> এর ভিতরে সবকিছু কেটে নতুন একটা <code>build</code> স্ক্রিপ্ট লিখুনঃ</p>\n<pre><code>...\n\"scripts\": {\n    \"build\": \"webpack\"\n  },\n...\n</code></pre>\n<p>এবার স্ক্রিপ্ট রেডি। কমান্ড লাইন থেকে <code>build</code> স্ক্রিপ্টটা রান করানঃ</p>\n<pre><code>npm run build\n</code></pre>\n<p>আর দেখুন একটা <code>dist</code> ডিরেক্টরিসহ ভিতরে <code>bundle.js</code> তৈরী হয়ে গেছে আপনার প্রোজেক্টে।</p>\n<p>এখন এখানে <code>build</code> স্ক্রিপ্ট এ কিছু ফ্ল্যাগও দিতে পারবেন। যেমন আমরা সাধারণত প্রোডাকশন ভার্শনে মিনিমাইজড ভার্শনের বান্ডেলটাই রাখি। কম সাইজ, লোড তাড়াতাড়ি হবে। তাই এখানে কিছু ফ্ল্যাগ লাগিয়ে দিতে পারেন সে কাজটা করার জন্যেঃ</p>\n<pre><code>...\n\"scripts\": {\n    \"build\": \"webpack --mode production\"\n  },\n...\n</code></pre>\n<p>এবার এই স্ক্রিপ্ট রান করালে প্রোডাকশন ভার্শনের বান্ডেল পাবেন। <strong>নোটঃ</strong> কোনো <code>mode</code> না দিলে ওয়েবপ্যাক বাই ডিফল্ট প্রোডাকশন ভার্শনে বান্ডেল করে। কিন্তু এখানে একটা ওয়ার্নিং আসবে তাই মুড মেনশন করে দেওয়াই ভালো।</p>\n<p>এবার আপনার অনেক প্রোজেক্টে দেখবেন একটা <code>public</code> নামে একটা ডিরেক্টরি থাকে যেখানে আপনার ব্যাসিক ফাইলগুলো যেমন <code>index.html</code> থাকে। এখন আমরা তাই একটা প্লাগিন <code>html-webpack-plugin</code> ইউজ করবো এই উদ্দেশ্যে। এখন এই প্লাগিনটা ইউজ না করলেও ম্যানুয়ালিও আপনি index.html বানিয়ে public ডিরেক্টরিতে রেখে কাজ করতে পারবেন। তবে এই প্লাগিন আমাদের কিছু কাজ জিনিস সহজ করে দিবে তাই আমরা ইউজ করবো। প্রথমে ডেভ ডিপেন্ডেসি হিসাবে নামিয়ে ফেলুনঃ</p>\n<pre><code>npm install --save-dev html-webpack-plugin\n</code></pre>\n<p>এখন এইটার কনফিগারেশন গুলো মেনশন করে দিতে হবে <code>webpack.config.js</code> ফাইলের ভিতরে। যেহেতু এটা ওয়েবপ্যাকের প্লাগিন তাই এটা entry, output এর পরে plugins নামে একটা অ্যারের ভিতরে যাবে। এবং অবশ্যই আগে এটা <code>require</code> করিয়ে নিতে হবে।</p>\n<pre><code>const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  },\n  plugins: [\n    new HtmlWebpackPlugin()\n  ]\n}\n</code></pre>\n<p>এখন এভাবে রেখে যদি <code>npm run build</code> দেই তাহলে <code>html-webpack-plugin</code> একটা ব্যাসিক <code>index.html</code> ফাইল ক্রিয়েট করে দিবে <code>dist</code> ডিরেক্টরিতে। এখানে দেখুন অটোম্যাটিকভাবেই আপনার বান্ডেল ফাইলটা লিঙ্ক করে দিয়েছে এই প্লাগিনটা, আমরা ব্যাসিকালি এই কাজের জন্যেই এটা ইউজ করতেছি। কিন্তু রিঅ্যাক্ট এ আমাদের একটা ইলিমেন্ট সিলেক্ট করতে হবে রিঅ্যাক্ট ঐখানে রেন্ডার করার জন্যে। তাই আমাদের এই <code>html-webpack-plugin</code> কিছু অপশন পাস করে দিতে হবে যাতে আমাদের তৈরী করা স্ট্রাকচারের উপরই <code>index.html</code> ফাইলটা জেনারেট করে। কনভেনশনালি <code>public</code> ডিরেক্টরিতেই আমাদের স্ট্রাকচারের <code>index.html</code>ফাইল রেখে প্লাগিনটাকে বলে দিতে হবে এটা দেখে দেখে প্রোডাকশন ভার্শনের ফাইল জেনারেট করো। তাই প্রথমে ফাইলটা বানিয়ে নিনঃ</p>\n<pre><code>mkdir public\ntouch public/index.html\n</code></pre>\n<p>এখন <code>index.html</code> এর ভিতরে আপনি আপনার স্ট্রাকচার রাখবেন। ব্যাসিকালি আপনার একটা ইলিমেন্ট লাগবে যেটাতে রিঅ্যাক্ট রেন্ডার হবে। অনেকটা এরকমঃ</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;React Starter Pack From Scratch&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"app\"&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>এখন আমাদের এখানে বান্ডেল ফাইলের কথা মেনশন করতে হবে না, এটা অটোম্যাটিকালি প্লাগিনটাই করে দিবে। তারজন্যে <code>webpack.config.js</code> এর <code>html-webpack-plugin</code> এর জন্যে কিছু অপশন পাস করে দিতে হবে এরকমঃ</p>\n<pre><code>...\n    new HtmlWebpackPlugin({\n      template: './public/index.html'\n    })\n...\n</code></pre>\n<p>এখানে কোন ফাইল থেকে <code>index.html</code> নিতে চাচ্ছেন সেটার লোকেশান মেনশন করে দিতে হবে। আর এগুলো সব <code>html-webpack-plugin</code> এর <a href=\"https://github.com/jantimon/html-webpack-plugin\">ডকুমেন্টেশন</a> থেকে জানতে পারবেন। আরো ইউজফুল অনেক কিছু আছে তাই <a href=\"https://github.com/jantimon/html-webpack-plugin\">ডকুমেন্টেশন</a> চ্যাক করতে পারেন চাইলে।</p>\n<p>এখন আমরা রিঅ্যাক্ট এ সাধারণত jsx লিখি, জাভাস্ক্রিপ্ট এর ES6 ভার্শনের কোড লিখি, কিন্তু এগুলো আমাদের সব ব্রাউজার ফ্রেন্ডলি না। তাই আমাদের এই কোডগুলোও কম্পাইল করে বান্ডেলে নিতে হবে যাতে আমাদের সব ব্রাউজার বুঝতে পারে। এজন্যে আমাদের <code>babel-core</code>ব্যাবেল কোর কম্পাইলারের জন্যে, <code>babel-loader</code>জাভাস্ক্রিপ্ট কোড ট্রান্সপাইলিং এর জন্যে, <code>babel-preset-env</code>আপনার ইনভারোমেন্ট ডিটেক্ট করে হায়ার ভার্শনের জাভাস্ক্রিপ্ট(ES6+)কে সাপোর্টের ভার্শনের জাভাস্ক্রিপ্ট(ES5) এ নেওয়ার জন্যে এবং <code>babel-preset-react</code> jsx কে কনভার্ট করার জন্যে ইউজ করতে হবে। এই প্যাকেজ সবগুলো ডেভ ডিপেন্ডেসি হিসেবে নামিয়ে ফেলুনঃ</p>\n<pre><code>npm install --save-dev babel-core babel-loader\nnpm install --save-dev babel-preset-env babel-preset-react\n</code></pre>\n<p>এখন এই ব্যাবেলের জন্যেও কনফিগারেশন লাগবে। কনফিগারেশন দুইভাবে করা যায়। রুট ডিরেক্টরিতে <code>.babelrc</code> নামে একটা ফাইল বানিয়ে ঐখানেও কনফিগারেশনগুলো রাখতে পারবেন আবার চাইলে <code>package.json</code> এই <code>babel</code> নামে কনফিগারেশনগুলো রাখতে পারবেন। আমরা এখানে <code>package.json</code> এই রাখবো। নিচের এগুলো লিখে ফেলেন <code>package.json</code> এঃ</p>\n<pre><code>...\n\"babel\": {\n    \"presets\": [\n      \"env\",\n      \"react\"\n    ]\n }\n...\n</code></pre>\n<p>এখানে আমরা ইন্সটল করা ব্যাবেলের দুইটা প্রিসেট <code>babel-preset-env</code>আর <code>babel-preset-react</code> ইউজ করতে চাচ্ছি তাই এভাবে কনফিগার করে নিতে হবে।</p>\n<p>এখন আমাদের <code>webpack.config.js</code> এ ব্যাবেলকে ইউজ করার জন্যে কনফিগার করে দিতে হবেঃ</p>\n<pre><code>module: {\n  rules: [\n    {\n      test: /\\.js$/, //সব ফাইল js বা jsx গুলোর উপরে অ্যাপ্লাই করার জন্যে\n      exclude: /node_modules/, // node_modules বাদ দিয়ে\n      use: {\n        loader: 'babel-loader'\n      }\n    }\n  ]\n}\n</code></pre>\n<p><code>webpack.config.js</code> ফাইলটা এখন এরকম দেখা যাবেঃ</p>\n<pre><code>const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/, \n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './public/index.html'\n    })\n  ]\n}\n</code></pre>\n<p>এবার আমাদের সবকিছু অনেকটাই তৈরী। এখন <code>src</code> এর ভিতরের <code>index.js</code> থেকে রিঅ্যাক্ট কোড লিখেই <code>npm run build</code> দিলে দেখবেন প্রোডাকশন ভার্শন রেডী।</p>\n<p>এবার কিছু রিঅ্যাক্ট দিয়ে খেলাধুলা করা যাক। কিন্তু তার আগে অবশ্যই <code>react</code> এবং <code>react-dom</code> ডিপেন্ডেসি হিসাবে ইন্সটল করতে ভুলবেন না।</p>\n<pre><code>npm install --save react react-dom\n</code></pre>\n<p>এবার <code>index.js</code> ওপেন করে ভিতরে রিঅ্যাক্ট লিখা শুরু করুন</p>\n<pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Root = () =&gt; {\n  return (\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n  )\n}\n\nReactDOM.render(&lt;Root /&gt;, document.getElementById('app'));\n</code></pre>\n<p>এখন এখানে <code>index.js</code> আপনার এন্ট্রি পয়েন্ট, তারপর ভিতরে যতই Component, Package বা আর যা দিয়েই কাজ করেন না কেনো সবই এটার সাথে কোনো না কোনোভাবে অ্যাড থাকবে আর এভাবেই ওয়েবপ্যাক আপনার ফাইলগুলো বান্ডেল করে ফেলবে।</p>\n<h4 id=\"\">ডেভেলপমেন্ট সার্ভার তৈরী</h4>\n<p>এবার এ তো গেলো কিভাবে ওয়েবপ্যাক কনফিগার করতে হবে। কিন্তু আমাদের ডেভেলপমেন্ট এর সময় লাইভ ডেভেলপমেন্ট সার্ভারেরও প্রয়োজন হয়। তাই এবার আমরা সেটা কিভাবে বানাবো সেটাই দেখবো। একবার ওয়েবপ্যাক ঠিকমতো কনফিগার হয়ে গেলে <code>webpack-dev-server</code> ইউজ করে খুব সহজেই ডেভেলপমেন্ট সার্ভার বানিয়ে ফেল যায়।</p>\n<p>আপনার <code>package.json</code> ফাইলটা ওপেন করুন আর নতুন একটা স্ক্রিপ্ট অ্যাড করুন ডেভেলপমেন্ট এর জন্যেঃ</p>\n<pre><code>\"scripts\": {\n  \"start\": \"webpack-dev-server --mode development\",\n  ...\n},\n</code></pre>\n<p>এখন <code>npm start</code> দিলেই দেখবেন আপনার সার্ভার রানিং আছে, বাই ডিফল্ট লোকালহোস্টের পোর্ট <code>8080</code> হবে। কিন্তু আমরা সবকিছু নিজের হাতে করতেছি তাই আমরা পুরো কন্ট্রোল নিয়ে নিবো। যেখানে মন চায় সেখানেই রান করাবো, যেভাবে মন চায় সেভাবেই রান করাবো। তাই কিছু ফ্ল্যাগ ইউজ করবো। পোর্ট মেনশন করার জন্যে <code>--port</code> , ফাইলে এডিট করার সাথে সাথেই ব্রাউজারে অটো রিলোডের জন্যে <code>--hot</code> এবং সবশেষে চাচ্ছি <code>npm start</code> দেওয়ার সাথে সাথেই লাইভ আমাদের বাই ডিফল্ট ব্রাউজারে যাতে ওপেন হয়ে যায়, সেজন্য <code>--open</code> ফ্ল্যাগ ইউজ করবো। সবশেষে package.json এর ভিতরে স্ক্রিপ্টগুলো এরকম দেখা যাবেঃ</p>\n<pre><code>\"scripts\": {\n  \"start\": \"webpack-dev-server --mode development --hot --open --port 4004\",\n  \"build\": \"webpack --mode production\"\n},\n</code></pre>\n<p>এখানে পোর্ট আমি 4004 দিয়েছি, আপনি যেখানেই দিবেন, যতক্ষন পর্যন্ত ঐ পোর্ট আর কোথাও ইউজ না হচ্ছে। আপনি সেখানেই দিয়ে কাজ করতে পারবেন।</p>\n<p>ব্যাসিকালি আমাদের কাজ এখানেই শেষ। আপনি এখন একদম আপনার নিজের হাতে বানানো প্যাক পেয়ে ফেললেন। এখন যতো ইচ্ছা নিজের মন মতো কাস্টমাইজ করে, নিজের প্রয়োজনমতো যা ইচ্ছা করতে পারবেন। কিন্ত আমি আরেকটা জিনিস দেখবো এখানে যেটা আসলে ইউজফুল। আপনি এখন CSS ইউজ করতে পারবেন না। এজন্যেও আরো কিছু মডিউল ইউজ করতে হবে আপনাকে।</p>\n<hr />\n<h4 id=\"css\">CSS সাপোর্টেড বান্ডেলঃ</h4>\n<p>CSS সাপোর্ট করানোর জন্যে আপনাকে আরো দুইটা প্যাকেজ ডেভ ডিপেন্ডেসি হিসাবে নামিয়ে ইউজ করতে হবে ওয়েবপ্যাকের মডিউল হিসাবে।</p>\n<pre><code>npm install --save-dev style-loader css-loader\n</code></pre>\n<p>এখন এই মডিউলগুলো webpack.config.js এর ভিতরে কনফিগার করে দিতে হবেঃ</p>\n<pre><code>{\n  test: /\\.css$/,\n  use: [ 'style-loader', 'css-loader' ]\n}\n</code></pre>\n<p>এটা অ্যাড করার পর webpack.config.js অনেকটা এরকম দেখাবেঃ</p>\n<pre><code>const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader'\n        }\n      }, {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader' ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './public/index.html'\n    })\n  ]\n}\n</code></pre>\n<p>এখন আপনি <code>import ‘./index.css’</code> এভাবে স্টাইল ইম্পোর্ট করতে পারবেন রিঅ্যাক্টের ভিতরে। এগুলো বান্ডেল হয়ে যাবে সবকিছুর সাথে একসাথে।</p>\n<h4 id=\"-1\">ইমেজ সাপোর্ট অ্যাড করাঃ</h4>\n<p>সেইমভাবে এজন্যেই <code>file-loader</code> নামে একটা প্যাকেজ ইউজ করতে হবে এবং এটার জন্যেও ওয়েবপ্যাকে কনফিগার করে নিতে হবে এরকমঃ</p>\n<pre><code>module: {\n  rules: [\n    ..., \n    ..., {\n      test: /\\.(gif|png|jpe?g|svg)$/i,\n      use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[path][name].[ext]'\n            }\n          }\n      ]\n    }\n  ]\n},\n</code></pre>\n<p>এখন চাইলেই রিঅ্যাক্ট এ আপনি ইমেজ এভাবে, <code>import favicon from ‘./favicon.png’</code> ইম্পোর্ট করে ইউজ করতে পারবেন <code>&lt;img src={favicon} /&gt;</code> । <code>dist</code> এর ভিতরে একটা <code>src</code> নামে ডিরেক্টরি তৈরী হয়ে ইমেজগুলো স্টোর হবে। আপনি চাইল <a href=\"https://www.npmjs.com/package/file-loader\">ডকুমেন্টেশন</a> থেকে আরো মডিফাই, নিজের মনমতো করে করতে পারবেন।</p>\n<p>আজকে এই পর্যন্তই। আশা করি কিভাবে কি হচ্ছে সবকিছু সম্পর্কে অন্তত আমার লেখা দেখে ধারণা করতে পারবেন। আর অবশ্যই যে প্যাকেজগুলোর কথা এখানে বলা হয়েছে সেগুলোর ডকুমেন্টেশন দেখে দেখে আরো অনেকভাবে মডিফাই করে নিজের মতো করে বানিয়ে নিতে পারবেন।</p>\n<p>আমার এই কোর্সে বানানো প্যাক/ফাইলগুলো গিটহাবে পাবেন। এটার ব্রাঞ্চ এ আপনি স্পেসেফিক ভার্শনগুলোও পাবেন। চাইলে গিটহাব থেকে দেখে নিতে পারেন। এই ভার্শনটা একটু মডিফাই করা হয়েছে যাতে কেউ চাইলে এটা স্টার্টার প্যাক হিসাবে ইউজ করতে পারে।</p>\n<p><a href=\"https://github.com/zonayedpca/react-starter-pack\" title=\"https://github.com/zonayedpca/react-starter-pack\"><strong>zonayedpca/react-starter-pack</strong>  \n<em>Contribute to react-starter-pack development by creating an account on GitHub.</em>github.com</a></p>"}]}}}}