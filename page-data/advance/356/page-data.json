{"componentChunkName":"component---src-templates-post-page-js","path":"/advance/356","webpackCompilationHash":"81761d2f324522b163a2","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":356,"date":"2018-07-07T09:31:04","date_gmt":"2018-07-07T09:31:04","guid":{"rendered":"https://with.zonayed.me/?p=356"},"modified":"2019-08-16T17:01:25","modified_gmt":"2019-08-16T17:01:25","slug":"%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%85%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%a1%e0%a6%ad%e0%a6%be%e0%a6%a8-2","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%85%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%a1%e0%a6%ad%e0%a6%be%e0%a6%a8-2/","title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-divider\"></div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">গত পর্বে</a> আমি <code class=\"markup--code markup--p-code\">this</code> কীওয়ার্ড নিয়ে আলোচনা করেছি। সেখানে <code class=\"markup--code markup--p-code\">this</code> কীওয়ার্ডের ভ্যালু বা অন্য কথায় <code class=\"markup--code markup--p-code\">this</code> এর কন্টেক্সট(Context) ডিটারমাইন করার জন্যে চারটা রুলস এর কথা বলেছিলামঃ</p>\n<p class=\"graf graf--p\">১। গ্লোবাল রুলস</p>\n<p class=\"graf graf--p\">২। অবজেক্ট রুলস</p>\n<p class=\"graf graf--p\">৩। স্পষ্ট রুলস</p>\n<p class=\"graf graf--p\">৪। <code class=\"markup--code markup--p-code\">new</code> কীওয়ার্ড রুলস</p>\n<p class=\"graf graf--p\">তার মধ্যে প্রথম দুইটা আলোচনা করা হয়েছে <a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">গত পর্বে</a>ই। এই পর্বে তিন নাম্বার রুলস নিয়ে আলোচনা করবো। এখানেই আমি <code class=\"markup--code markup--p-code\">call()</code>, <code class=\"markup--code markup--p-code\">bind()</code>ও <code class=\"markup--code markup--p-code\">apply()</code> এই তিনটা মেথডকে পরিচয় করিয়ে দিয়েছিলাম। জাভাস্ক্রিপ্ট ভালো করে আয়ত্তে আনতে হলে এই তিনটা মেথড সম্পর্কে আপনার পরিষ্কার ধারণা থাকতে হবে। আজকে তাই আমি এগুলো নিয়ে বিস্তারিত লিখবো।</p>\n<p class=\"graf graf--p\">এই তিনটা মেথডই প্রথম আর্গুমেন্ট হিসাবে <code class=\"markup--code markup--p-code\">this</code> কীওয়ার্ডের কন্টেক্সট বা ভ্যালু কি হবে সেটা নেয়। তারমধ্যে <code class=\"markup--code markup--p-code\">call()</code> আর <code class=\"markup--code markup--p-code\">bind()</code> আনলিমিটেড আর্গুমেন্ট নিতে পারে আর অন্যদিকে <code class=\"markup--code markup--p-code\">apply()</code> মাত্র দুইটা আর্গুমেন্ট(প্রথমটা সবসময়েই <code class=\"markup--code markup--p-code\">this</code>এর ভ্যালু ডিটারমাইন করতে, আর দ্বিতীয়টা একটা অ্যারে) নেয়। এখন বুঝলাম প্রথম আর্গুমেন্ট <code class=\"markup--code markup--p-code\">this</code> ডিটারমাইন করার জন্যে দেওয়া হয়, কিন্তু বাকী আর্গুমেন্টগুলা কিসের? হ্যাঁ বাকিগুলো আপনি যে ফাংশনের সাথে এই মেথডগুলো লাগাবেন সেই ফাংশনেরও আর্গুমেন্ট থাকতে পারে, সে আর্গুমেন্ট যতটাই হউক আপনি <code class=\"markup--code markup--p-code\">call()</code> আর <code class=\"markup--code markup--p-code\">bind()</code> এর ক্ষেত্রে একটার পর একটা দিতে পারবেন। অন্যদিকে <code class=\"markup--code markup--p-code\">apply()</code> এর ক্ষেত্রে যে অ্যারেটা দিবেন সেটা হবে সেই ফাংশনের সবগুলো আর্গুমেন্টের অ্যারে। কনফিউজড হয়ে গেলে সমস্যা নাই আমি প্রত্যেকটা উদাহরনসহ নিচে দেখাবো। আশা করি পরিষ্কার ধারণা হয়ে যাবে।</p>\n<p class=\"graf graf--p\">আরেকটা ডিফারেন্স হলো <code class=\"markup--code markup--p-code\">call()</code> , <code class=\"markup--code markup--p-code\">apply()</code> আর <code class=\"markup--code markup--p-code\">bind()</code> এর মধ্যে। যেখানে <code class=\"markup--code markup--p-code\">call()</code> , <code class=\"markup--code markup--p-code\">apply()</code> যে ফাংশনের সাথে ইউজ করবেন সেটা সাথে সাথে কল হয়ে যাবে। অন্যদিকে <code class=\"markup--code markup--p-code\">bind()</code> সাথে সাথে ফাংশনটাকে কল করে না, বরং আপনি সেটা পরে যেকোনো সময় চাইলে নিজের মন মতো করে কল করতে পারবেন।</p>\n<h4 class=\"graf graf--h4\">call() মেথডঃ</h4>\n<p class=\"graf graf--p\"><a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">আগের পর্বে</a> একটা উদাহরণ দিয়েছিলাম। সেইমটার উপরেই আজকে কাজ করবোঃ</p>\n<pre class=\"graf graf--pre\">var myCustomObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   job: 'Student',\r\n   anotherObj: {\r\n      name: 'Ahmed Zonayed',\r\n      value: function() {\r\n         console.log('My name is ' + this.name);\r\n      }\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এখানে যদি আমরা <code class=\"markup--code markup--p-code\">value()</code> ফাংশনটাকে কল করি তাহলে <em class=\"markup--em markup--p-em\">My name is Ahmed Zonayed</em> দেখাবে। মানে এখানে <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু হচ্ছে <code class=\"markup--code markup--p-code\">anotherObj</code> , আর তাই এভাবে আউটপুট পাবেন।</p>\n<pre class=\"graf graf--pre\">myCustomObj.anotherObj.value();</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*Cnf-sSImumYH5EkxyMuLGw.png?resize=350%2C221&#038;ssl=1\" data-image-id=\"1*Cnf-sSImumYH5EkxyMuLGw.png\" data-width=\"350\" data-height=\"221\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কিন্তু এখানে যদি আমরা চাই <code class=\"markup--code markup--p-code\">value()</code> এর ভিতরের <code class=\"markup--code markup--p-code\">this</code> এর কন্টেক্সট বা ভ্যালু হিসাবে <code class=\"markup--code markup--p-code\">myCustomObj</code> সেট করতে তাহলে সেটা আমরা স্পষ্ট করে <code class=\"markup--code markup--p-code\">call()</code> দিয়ে সেট করে দিতে পারি এভাবেঃ</p>\n<pre class=\"graf graf--pre\">myCustomObj.anotherObj.value.call(myCustomObj);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*jmn8qxI65YZgtPJ5v5SEMA.png?resize=358%2C294&#038;ssl=1\" data-image-id=\"1*jmn8qxI65YZgtPJ5v5SEMA.png\" data-width=\"358\" data-height=\"294\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">দেখুন এবার প্রিন্ট হয়েছে <em class=\"markup--em markup--p-em\">My name is Zonayed Ahmed, </em>মানে <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু এখানে আমরা আমাদের মতো করে চেঞ্জ করতে পেরেছি। আরেকটা জিনিস আমরা চাইলে <code class=\"markup--code markup--p-code\">call()</code> টা আমাদের অবজেক্ট এর সাথেও দিতে পারতাম। কিন্তু ঐ যে বললাম <code class=\"markup--code markup--p-code\">call()</code> যেখানে ইউজ করা হয় সেটা সাথে সাথে কল হয়ে যায়, তাই আপনি যেরকম আশা করবেন সেরকম রেজাল্ট নাও আসতে পারেঃ</p>\n<pre class=\"graf graf--pre\">var myCustomObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   job: 'Student',\r\n   anotherObj: {\r\n      name: 'Ahmed Zonayed',\r\n      value: function() {\r\n         console.log('My name is ' + this.name);\r\n      }.call(myCustomObj)\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এটা এভাবে রান করার পর পরই দেখবেন আপনার ফাংশন কল করা ছাড়াই প্রিন্ট হয়ে গেছেঃ</p>\n<figure class=\"graf graf--figure\"><img src=\"https://i0.wp.com/miro.medium.com/max/349/1*S72LqoxxZ8dwwRmkECQsnQ.png?w=767&#038;ssl=1\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">সেইমভাবে আপনার দুইটা সম্পূর্ন পৃথক পৃথক অবজেক্ট এর ক্ষেত্রেও আপনি এই মেথডগুলো কাজে লাগাতে পারবেন। যেমন ধরি আমাদের দুইটা অবজেক্ট আছে এরকমঃ</p>\n<pre class=\"graf graf--pre\">var karim = {\r\n   name: 'Karim Rahman',\r\n   dob: 1996,\r\n   age: function(currentYear) {\r\n      console.log(this.name + ' is ' + (currentYear - this.dob) + ' years old!');\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">আরেকটাঃ</p>\n<pre class=\"graf graf--pre\">var rahim = {\r\n   name: 'Rahim Abdu',\r\n   dob: 1986\r\n}</pre>\n<p class=\"graf graf--p\">দেখুন প্রথম অবজেক্ট <code class=\"markup--code markup--p-code\">karim</code> থেকে আমরা খুব সহজেই <code class=\"markup--code markup--p-code\">age</code> ফাংশনটা কল করে <code class=\"markup--code markup--p-code\">karim</code> এর বয়স জানতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">karim.age(2018)</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*ZJfy5oriByCd5QcE1N8jdw.png?resize=239%2C46&#038;ssl=1\" data-image-id=\"1*ZJfy5oriByCd5QcE1N8jdw.png\" data-width=\"239\" data-height=\"46\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন লক্ষ্য করুন <code class=\"markup--code markup--p-code\">rahim</code> এ আমাদের কিন্তু <code class=\"markup--code markup--p-code\">age</code> নামক ফাংশনটা নাই, কিন্তু তারপরেও আমরা চাইলে এই <code class=\"markup--code markup--p-code\">age</code> ইউজ করে এর সাথে <code class=\"markup--code markup--p-code\">call()</code>, <code class=\"markup--code markup--p-code\">bind()</code> বা <code class=\"markup--code markup--p-code\">apply()</code> দিয়ে এর ভিতরের <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু চেঞ্জ করে সেটা <code class=\"markup--code markup--p-code\">rahim</code> এর জন্যেও ইউজ করতে পারিঃ</p>\n<pre class=\"graf graf--pre\">karim.age.call(rahim, 2018);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*sX8od8VzVMMgoVh6XTbWRA.png?resize=218%2C46&#038;ssl=1\" data-image-id=\"1*sX8od8VzVMMgoVh6XTbWRA.png\" data-width=\"218\" data-height=\"46\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">আরো দেখবেন এখানে দ্বিতীয় আর্গুমেন্ট হিসাবে <code class=\"markup--code markup--p-code\">age</code> এর আর্গুমেন্ট হিসাবে ভ্যালু পাস করেছি। সেইম জিনসটা <code class=\"markup--code markup--p-code\">bind()</code> আর <code class=\"markup--code markup--p-code\">apply()</code> দিয়েও করা যাবে।</p>\n<h4 class=\"graf graf--h4\">apply() মেথডঃ</h4>\n<p class=\"graf graf--p\">এটাও সেইম টু সেইম <code class=\"markup--code markup--p-code\">call()</code> এর মতোই, জাস্ট এটা দুইটা আর্গুমেন্ট নিবে আর দ্বিতীয় আর্গুমেন্ট টা আপনার ফাংশনের জন্যে যে কয়টা আর্গুমেন্ট থাকবে সেগুলার অ্যারে নিবেঃ</p>\n<pre class=\"graf graf--pre\">var myCustomObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   job: 'Student',\r\n   anotherObj: {\r\n      name: 'Ahmed Zonayed',\r\n      value: function() {\r\n         console.log('My name is ' + this.name);\r\n      }\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">আগের এই সেইম উদাহরণে <code class=\"markup--code markup--p-code\">apply()</code> ইউজ করলেও সেইম রেজাল্ট পাবেনঃ</p>\n<pre class=\"graf graf--pre\">myCustomObj.anotherObj.value.apply(myCustomObj);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*SbMoo-xA8kTyB6SQEnqu3Q.png?resize=365%2C221&#038;ssl=1\" data-image-id=\"1*SbMoo-xA8kTyB6SQEnqu3Q.png\" data-width=\"365\" data-height=\"221\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">call()</code> থেকে<code class=\"markup--code markup--p-code\">apply()</code> এর পার্থক্যটা দ্বিতীয় আর্গুমেন্ট নেওয়ার ক্ষেত্রে যেখানে <code class=\"markup--code markup--p-code\">apply()</code> আর্গুমেন্ট এর অ্যারে নেয়। আগের <code class=\"markup--code markup--p-code\">rahim</code> আর <code class=\"markup--code markup--p-code\">karim</code> একটু মডিফাই করেঃ</p>\n<pre class=\"graf graf--pre\">var karim = {\r\n   name: 'Karim Rahman',\r\n   dob: 1996,\r\n   age: function(currentYear, msg) {\r\n      console.log(msg + ' ' + this.name + ' is ' + (currentYear - this.dob) + ' years old!');\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এবংঃ</p>\n<pre class=\"graf graf--pre\">var rahim = {\r\n   name: 'Rahim Abdu',\r\n   dob: 1986\r\n}</pre>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">karim</code> এর <code class=\"markup--code markup--p-code\">age</code> কল করলেঃ</p>\n<pre class=\"graf graf--pre\">karim.age(2018, 'Hello World!');</pre>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">age</code> ফাংশনটায় দুইটা আর্গুমেন্ট লাগিয়েছি বুঝার সুবিধার্থে। এটা রান করলে কন্সোলে পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*cgOrXBkrcxqmCjWQorZUjw.png?resize=319%2C43&#038;ssl=1\" data-image-id=\"1*cgOrXBkrcxqmCjWQorZUjw.png\" data-width=\"319\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এই সেইম <code class=\"markup--code markup--p-code\">age</code> ফাংশন <code class=\"markup--code markup--p-code\">rahim</code> এ ঠিক আগের মতো করে ইউজ করতে চাচ্ছি। কিন্তু এবার <code class=\"markup--code markup--p-code\">apply()</code> দিয়েঃ</p>\n<pre class=\"graf graf--pre\">karim.age.apply(rahim, [2018, 'Hello World!']);</pre>\n<p class=\"graf graf--p\">লক্ষ্য করুন এখানে দ্বিতীয় আর্গুমেন্ট টা একটা অ্যারে যেটা আপনার <code class=\"markup--code markup--p-code\">age</code> ফাংশনের সবগুলো আর্গুমেন্ট নিয়েছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*M9jdfdr0ooYE5qbx9WpKag.png?resize=347%2C40&#038;ssl=1\" data-image-id=\"1*M9jdfdr0ooYE5qbx9WpKag.png\" data-width=\"347\" data-height=\"40\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">আশা করি এবার <code class=\"markup--code markup--p-code\">call()</code> আর <code class=\"markup--code markup--p-code\">apply()</code> মধ্যে তফাৎ টা ধরতে পেরেছেন। এবার চলি আসুন <code class=\"markup--code markup--p-code\">bind()</code> নিয়ে কথা বলি।</p>\n<h4 class=\"graf graf--h4\">bind() মেথডঃ</h4>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">bind()</code> ঠিক <code class=\"markup--code markup--p-code\">call()</code> এর মতো হলেও যেখানে <code class=\"markup--code markup--p-code\">call()</code> আর<code class=\"markup--code markup--p-code\">apply()</code> সাথে সাথে যে ফাংশনের সাথে ইউজ করা হয়েছে সেটাকে কল করে ফেলে, <code class=\"markup--code markup--p-code\">bind()</code> সেখানে সে ফাংশনকে কল করে না, বরং এটা সেই ফাংশনের আরেকটা ডেফিনেশন রিটার্ন করে যেটা পরবর্তিতে আপনি যেকোনো জায়গায় কল করতে পারবেন বা ইউজ করতে পারবেন। আগের সেইম উদাহরণেই যদি সেইমভাবে <code class=\"markup--code markup--p-code\">bind()</code> ইউজ করি তাহলে পার্থক্যটা ধরতে পারবেনঃ</p>\n<pre class=\"graf graf--pre\">var myCustomObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   job: 'Student',\r\n   anotherObj: {\r\n      name: 'Ahmed Zonayed',\r\n      value: function() {\r\n         console.log('My name is ' + this.name);\r\n      }\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এবার সেইমভাবে <code class=\"markup--code markup--p-code\">value</code> এর <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু <code class=\"markup--code markup--p-code\">myCustomObj</code> এ সেট করতে আগের মতোই <code class=\"markup--code markup--p-code\">bind()</code> মেথড ইউজ করলেঃ</p>\n<pre class=\"graf graf--pre\">myCustomObj.anotherObj.value.bind(myCustomObj);</pre>\n<p class=\"graf graf--p\">এটা দেখবেন সরাসরি আপনার কাঙ্ক্ষিত লেখা প্রিন্ট করছে না, বরং এটা যা রিটার্ণ করছে সেটা আরেকটা ফাংশন ডেফিনেশনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*B_Pzwu09_JdKR8vHVOckhw.png?resize=357%2C78&#038;ssl=1\" data-image-id=\"1*B_Pzwu09_JdKR8vHVOckhw.png\" data-width=\"357\" data-height=\"78\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এই ফাংশনটাকে আপনি আরেকটা ভ্যারিয়েবলে স্টোর করে পরে যেকোনো সময়, যেকোনো জায়গায় ইউজ করতে পারবেনঃ</p>\n<pre class=\"graf graf--pre\">var anotherFunc = myCustomObj.anotherObj.value.bind(myCustomObj);</pre>\n<p class=\"graf graf--p\">এবার এই ফাংশন যেখানে কল করবেন সেখানেই আপনার কাঙ্ক্ষিত ফলাফল আসবেঃ</p>\n<pre class=\"graf graf--pre\">anotherFunc();</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*SuRGrkJ3mFrsmwx0azbxow.png?resize=466%2C99&#038;ssl=1\" data-image-id=\"1*SuRGrkJ3mFrsmwx0azbxow.png\" data-width=\"466\" data-height=\"99\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">আর এ জন্যেই <a href=\"https://with.zonayed.me/bn/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A7%87%E0%A6%8F%E0%A6%B8-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82/%E0%A6%9C%E0%A6%BE%E0%A6%AD%E0%A6%BE%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BF%E0%A6%AA%E0%A7%8D%E0%A6%9F-%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A1%E0%A6%AD%E0%A6%BE%E0%A6%A8%E0%A7%8D/\">গত পর্বে</a> উদাহরনটায় আমরা <code class=\"markup--code markup--p-code\">bind()</code> ইউজ করেছিলাম <code class=\"markup--code markup--p-code\">call()</code> বা <code class=\"markup--code markup--p-code\">apply()</code> ইউজ না করে। আর এজন্যেই এই তিনটা মেথডের মধ্যে এই <code class=\"markup--code markup--p-code\">bind()</code> সবচেয়ে ইউজফুল।</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">bind()</code> এ আপনি আর্গুমেন্টগুলোও পৃথক পৃথক ভাবে কল করতে পারবেন। ধরেন প্রথমে আপনি আপনার কিছু আর্গুমেন্ট দিলেন, পরে আবার ফাংশন কল করার সময় বাকি আর্গুমেন্টগুলো দিতে পারবেন। যেমন <code class=\"markup--code markup--p-code\">apply()</code> তে ইউজ করা <code class=\"markup--code markup--p-code\">kahim</code> আর <code class=\"markup--code markup--p-code\">rahim</code> এর উদাহরণের ক্ষেত্রেঃ</p>\n<pre class=\"graf graf--pre\">var karim = {\r\n   name: 'Karim Rahman',\r\n   dob: 1996,\r\n   age: function(currentYear, msg) {\r\n      console.log(msg + ' ' + this.name + ' is ' + (currentYear - this.dob) + ' years old!');\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">আরঃ</p>\n<pre class=\"graf graf--pre\">var rahim = {\r\n   name: 'Rahim Abdu',\r\n   dob: 1986\r\n}</pre>\n<p class=\"graf graf--p\">এই উদাহরণের ক্ষেত্রে যদি আমরা চাই <code class=\"markup--code markup--p-code\">msg</code> এর ভ্যালু পরে সেট করতে তাহলে এটা এভাবেও করা যাবেঃ</p>\n<pre class=\"graf graf--pre\">var rahimAge = karim.age.bind(rahim, 2018);</pre>\n<p class=\"graf graf--p\">লক্ষ্য করুন আমরা এখানে মাত্র একটা আর্গুমেন্ট দিয়েছি, আরেকটা দেই নাই। যেটা পরবর্তিতে আমরা এই ফাংশনটাকে কল করার সময় দিতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">rahimAge('Hello World!');</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*tTJYjsYepXmkUIpQ9i4ZDw.png?resize=329%2C99&#038;ssl=1\" data-image-id=\"1*tTJYjsYepXmkUIpQ9i4ZDw.png\" data-width=\"329\" data-height=\"99\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">বা আমরা চাইলে এটাকে আরো এক ধাপ আগায় নিতে পারি এভাবে। প্রথমে জাস্ট <code class=\"markup--code markup--p-code\">bind()</code> দিয়ে আরেকটা ফাংশন বানাইলাম যেটার কাজ হবে <code class=\"markup--code markup--p-code\">rahim</code> এর <code class=\"markup--code markup--p-code\">age</code> ক্যালকুলেট করাঃ</p>\n<pre class=\"graf graf--pre\">var rahimAgeCalculate = karim.age.bind(rahim);</pre>\n<p class=\"graf graf--p\">এখন এই <code class=\"markup--code markup--p-code\">rahimAgeCalculate</code> ফাংশনে বাকি আর্গুমেন্ট গুলা পাস করতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">rahimAgeCalculate(2018, 'Hello Dolly!');</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*w_Oe5eDgghn5Mqah9g8fAw.png?resize=337%2C84&#038;ssl=1\" data-image-id=\"1*w_Oe5eDgghn5Mqah9g8fAw.png\" data-width=\"337\" data-height=\"84\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">যতবার যতভাবে ইচ্ছাঃ</p>\n<pre class=\"graf graf--pre\">rahimAgeCalculate(2028, 'Hello Ahmed!');\r\nrahimAgeCalculate(2028, 'Hello Zonayed!');\r\nrahimAgeCalculate(2050, 'Hi!');</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*Gb9KvEX-Py4YP8ynZQ-MNw.png?resize=337%2C113&#038;ssl=1\" data-image-id=\"1*Gb9KvEX-Py4YP8ynZQ-MNw.png\" data-width=\"337\" data-height=\"113\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানেই এই <code class=\"markup--code markup--p-code\">bind()</code> একটু স্পেশাল আর ইউজ কেসও বেশী এটার।</p>\n<h4 class=\"graf graf--h4\">স্পেশাল উদাহরণঃ</h4>\n<p class=\"graf graf--p\">নিচের এই উদাহরনে <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু কি হতে পারে অনুমান করার চেষ্টা করুনঃ</p>\n<pre class=\"graf graf--pre\">var myObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   timer: function() {\r\n      setTimeout(function() {\r\n         console.log('My name is ' + this.name);\r\n      }, 1000)\r\n    }\r\n}</pre>\n<p class=\"graf graf--p\">এখান আমরা <code class=\"markup--code markup--p-code\">timer</code> ফাংশনটাকে কল করলেঃ</p>\n<pre class=\"graf graf--pre\">myObj.timer();</pre>\n<p class=\"graf graf--p\">এটা দ্বিতীয় রুলস(অবজেক্ট রুলস) এ পড়ে যেহেতু এই ফাংশনটা একটা কাস্টমভাবে ডিফাইন করা অবজেক্ট এর ভিতরে আছে। তাহলে সে হিসাবে এটার ভিতরের <code class=\"markup--code markup--p-code\">this</code> আমার সেই অবজেক্ট <code class=\"markup--code markup--p-code\">myObj</code> কেই ইন্ডিকেট করার কথা। কিন্তু এটা এক্সিকিউট করলে ১০০০ মিলিসেকেন্ড পরে এমন আউটপুট আসবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*YQU24J1Cwijnt7mNWZA9gQ.png?resize=365%2C211&#038;ssl=1\" data-image-id=\"1*YQU24J1Cwijnt7mNWZA9gQ.png\" data-width=\"365\" data-height=\"211\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কোনো কারনে <code class=\"markup--code markup--p-code\">name</code> এর ভ্যালু আসছে না, তারমানে এখানে তাহলে কোথাও একটা প্রবলেম হচ্ছে। আচ্ছা তাহলে ঠিক এখানে <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু কি দেখে নেওয়া যাকঃ</p>\n<pre class=\"graf graf--pre\">var myAnotherObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   timer: function() {\r\n      setTimeout(function() {\r\n         console.log(this);\r\n      }, 1000)\r\n    }\r\n}</pre>\n<p class=\"graf graf--p\">এখানে <code class=\"markup--code markup--p-code\">timer</code> ফাংশনটাকে কল করলেঃ</p>\n<pre class=\"graf graf--pre\">myAnotherObj.timer();</pre>\n<p class=\"graf graf--p\">১০০০ মিলিসেকেন্ড পরে প্রিন্ট করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*zaU0alUOPhG0yUAnpESC9A.png?resize=536%2C218&#038;ssl=1\" data-image-id=\"1*zaU0alUOPhG0yUAnpESC9A.png\" data-width=\"536\" data-height=\"218\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে কোনো কারনে <code class=\"markup--code markup--p-code\">this</code> গ্লোবাল অবজেক্ট(ব্রাউজারের ক্ষেত্রে <code class=\"markup--code markup--p-code\">window</code> অবজেক্ট) কে ইন্ডিকেট করছে। কেনো? হ্যাঁ আপনি যদি আপনার গ্লোবাল অবজেক্ট ওপেন করে দেখেন দেখবেন এই <code class=\"markup--code markup--p-code\">setTimeout</code> আসলে সেই গ্লোবাল অবজেক্ট এর একটা মেথডঃ</p>\n<pre class=\"graf graf--pre\">console.dir(window);</pre>\n<p class=\"graf graf--p\">এটা ওপেন করলে অনেকগুলো মেথড পাবেন। তারমধ্যে <code class=\"markup--code markup--p-code\">setTimeout</code> ও পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*5FlVyqJukPprK5zvFgIKUw.png?resize=323%2C158&#038;ssl=1\" data-image-id=\"1*5FlVyqJukPprK5zvFgIKUw.png\" data-width=\"323\" data-height=\"158\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">তো আমাদের কথামতো <code class=\"markup--code markup--p-code\">setTimeout</code> এর ভিতরে <code class=\"markup--code markup--p-code\">this</code> তাই গ্লোবাল অবজেক্ট কেই ইন্ডিকেট করছে। যদিও <code class=\"markup--code markup--p-code\">setTimeout</code> আরেকটা কাস্টমভাবে ডিফাইনকৃত অবজেক্ট এর ভিতরে কিন্তু এটার ভিতরে থাকা <code class=\"markup--code markup--p-code\">this</code> এর সবচেয়ে কাছের অবজেক্ট হচ্ছে গ্লোবাল অবজেক্ট যেহেতু <code class=\"markup--code markup--p-code\">setTimeout</code> আসলে গ্লোবাল অবজেক্ট এরই একটা মেথড। তাই এভাবে একটার ভিতরে আরেকটা মেথড থাকলেও আপনার <code class=\"markup--code markup--p-code\">this</code> এর ভ্যালু চেঞ্জ হয়ে যেতে পারে।</p>\n<p class=\"graf graf--p\">এখন আমরা যেহেতু <code class=\"markup--code markup--p-code\">call()</code>, <code class=\"markup--code markup--p-code\">apply()</code>, <code class=\"markup--code markup--p-code\">bind()</code> মেথডগুলো জানি তাই চলেন আমরা এটা ফিক্স করে ঠিক যেটা প্রিন্ট করাতে চাচ্ছিলাম সেটাই প্রিন্ট করাইঃ</p>\n<pre class=\"graf graf--pre\">var myObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   timer: function() {\r\n      setTimeout(function() {\r\n         console.log('My name is ' + this.name);\r\n      }.bind(myObj), 1000)\r\n    }\r\n}</pre>\n<p class=\"graf graf--p\">এখন <code class=\"markup--code markup--p-code\">timer</code> ফাংশনটাকে কল করলেঃ</p>\n<pre class=\"graf graf--pre\">myObj.timer();</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*SjK9GOoIxSk1_tuwaElrKg.png?resize=351%2C211&#038;ssl=1\" data-image-id=\"1*SjK9GOoIxSk1_tuwaElrKg.png\" data-width=\"351\" data-height=\"211\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এখানে <code class=\"markup--code markup--p-code\">call()</code> বা<code class=\"markup--code markup--p-code\">apply()</code> কেনো ইউজ করলাম না? হ্যাঁ এই দুইটা মেথড ইউজ করা যাবে কিন্তু আমরা যেভাবে আশা করছিলাম সেরকম রেজাল্ট আসবে নাঃ</p>\n<pre class=\"graf graf--pre\">var myObj = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   timer: function() {\r\n      setTimeout(function() {\r\n         console.log('My name is ' + this.name);\r\n      }.call(myObj), 1000)\r\n    }\r\n}</pre>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">setTimeout</code> দিয়ে আমরা চাচ্ছি ১০০০ মিলিসেকেন্ড পরে উক্ত লেখাটা প্রিন্ট হউক, কিন্তু <code class=\"markup--code markup--p-code\">call()</code> ইউজ করায় সেটা সাথে সাথেই কল হয়ে যাবেঃ</p>\n<pre class=\"graf graf--pre\">myObj.timer();</pre>\n<p class=\"graf graf--p\">দেখবেন আপনার কন্সোলে সাথে সাথে প্রিন্ট হয়ে গেছে, কন্সোল ১০০০ মিলিসেকেন্ড ওয়েট করে নাইঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*Ia9iyYscz30MIcVg6CcZCw.png?resize=351%2C193&#038;ssl=1\" data-image-id=\"1*Ia9iyYscz30MIcVg6CcZCw.png\" data-width=\"351\" data-height=\"193\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">সেইম <code class=\"markup--code markup--p-code\">apply()</code> ক্ষেত্রেও হবে। তাই ক্ষেত্রবিশেষে এদের বিহেভিয়ার অনুযায়ী আপনাকে যেসময় যেটা দরকার সেটা ইউজ করতে হবে।</p>\n<p class=\"graf graf--p\">তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d9cbd3d5c01a-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d9cbd3d5c01a-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>গত পর্বে আমি this কীওয়ার্ড নিয়ে আলোচনা করেছি। সেখানে this কীওয়ার্ডের ভ্যালু বা অন্য কথায় this এর কন্টেক্সট(Context) ডিটারমাইন করার জন্যে চারটা রুলস এর কথা বলেছিলামঃ ১। গ্লোবাল রুলস ২। অবজেক্ট রুলস ৩। স্পষ্ট রুলস ৪। new কীওয়ার্ড রুলস তার মধ্যে প্রথম দুইটা আলোচনা করা হয়েছে গত পর্বেই। এই পর্বে তিন নাম্বার রুলস নিয়ে আলোচনা [&hellip;]</p>\n","protected":false},"author":1,"featured_media":354,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,94,158,108,78,86,160,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/356"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=356"}],"version-history":[{"count":3,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/356/revisions"}],"predecessor-version":[{"id":718,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/356/revisions/718"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/354"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=356"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=356"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=356"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}