{"componentChunkName":"component---src-templates-post-page-js","path":"/dom/651","webpackCompilationHash":"0f54ff061ee662469dad","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":651,"date":"2018-10-08T15:14:39","date_gmt":"2018-10-08T15:14:39","guid":{"rendered":"https://with.zonayed.me/?p=651"},"modified":"2018-10-08T15:14:39","modified_gmt":"2018-10-08T15:14:39","slug":"%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%a1%e0%a6%ae-%e0%a6%ae%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%a8%e0%a6%bf-5","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%a1%e0%a6%ae-%e0%a6%ae%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%a8%e0%a6%bf-5/","title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">ধরুন আমি ফেসবুক চালাচ্ছি, এখন একটা পোস্ট দেখে আমার ভালো লাগলো। এখন আমি এটাতে রিঅ্যাকশন দিতে চাচ্ছি। রিঅ্যাকশন বাটনে ক্লিক করার পর পুরো ফেসবুক আবার রিলোড হলো। কারণ আমি যে পোস্টে রিঅ্যাকশন দিয়েছি সে ডাটাকে ফেসবুকের সার্ভারে পাঠাতে হবে, আর তাই ব্রাউজার সে কাজ করতে গিয়ে পুরোপুরি রিলোড হলো। এখন প্রত্যেকবার যদি এমন রিঅ্যাকশন দিতে গিয়ে বারবার ফেসবুক পুরোপুরি রিলোড হয়, তাহলে ব্যাপারটা কেমন হলো? একে তো বারবার রিলোড হওয়ার কারণে ডাটাও বেশী খরচ হবে। একই সাথে ব্যাপারটা বিরক্তিকরও। আর এই সমস্যা সমাধানের জন্যেই এই অ্যাজাক্স টেকনিক এসেছে।</p>\n<p class=\"graf graf--p\">AJAX মানে হচ্ছে <strong class=\"markup--strong markup--p-strong\">A</strong>synchronous <strong class=\"markup--strong markup--p-strong\">J</strong>avaScript <strong class=\"markup--strong markup--p-strong\">A</strong>nd <strong class=\"markup--strong markup--p-strong\">X</strong>ML। অন্য কোনো ওয়েব সার্ভার অ্যাক্সেস করার জন্যে এটা একটা বিশেষ টেকনিক। অ্যাজাক্স এর এই টেকনিক মূলত কিছু জিনিসের সাহায্যে করা হয়ঃ</p>\n<p class=\"graf graf--p\">১। ব্রাউজারের স্পেশাল অবজেক্ট বা অ্যাপিআই, যেগুলোর সাহায্যে আমরা অন্য কোনো ওয়েব সার্ভারে রিকোয়েস্ট পাঠাতে পারি।</p>\n<p class=\"graf graf--p\">২। আর জাভাস্ক্রিপ্ট দিয়ে এইচটিএমএল ডমের সাহায্যে সেটার ফলাফল আমাদের ওয়েবপেজে দেখাতে পারি।</p>\n<p class=\"graf graf--p\">এখন বুঝলাম অ্যাজাক্স এর সাহায্যে এই কাজ করা যায়। কিন্তু এর সুবিধাটা কি? হ্যাঁ অ্যাজাক্সের কারণে আমরাঃ</p>\n<ul class=\"postList\">\n<li class=\"graf graf--li\">অন্য সার্ভারের রিকোয়েস্ট পাঠিয়ে ডাটা আনতে পারি।</li>\n<li class=\"graf graf--li\">একইভাবে চাইলে আমরা আমাদের ডাটাও অন্য কোনো সার্ভারে পাঠাতে পারি</li>\n<li class=\"graf graf--li\">পুরো ব্যাপারটা অ্যাসিনক্রোনাসভাবে হয়, আমাদের ওয়েবপেজ রিলোড করা লাগে না।</li>\n</ul>\n<p class=\"graf graf--p\">আর এজন্যেই এখন আমরা ফেসবুকে রিঅ্যাকশন দিলেও সেই ডাটা ব্যাকগ্রাউন্ডেই ফেসবুক সার্ভারে চলে যায়, আবার আমাদের এখানেও সেটা আপডেট হয়। কোনোরকম রিলোড হওয়া ছাড়াই সব কাজ ব্যাকগ্রাউন্ডে চলে। এতে আমাদের ইউজার এক্সপেরিয়েন্সও যেমন ভালো হয়, তেমনি ডাটাও খরচ কম হয়। আর সবচেয়ে বড় কথা পুরো ব্যাপারটাই বাস্তব মনে হয়।</p>\n<p class=\"graf graf--p\">এখন এই টেকনিকের জন্যে আমাদের আরো ছোটো ছোটো কিছু ব্যাপারও জানতে হবে। আজকে আমরা সেই টেকনিকগুলোই দেখবো এবং একই সাথে এই অ্যাজাক্সের সাহায্যে আমাদের পেজে অন্য কোনো ওয়েব সার্ভারে রিকোয়েস্ট পাঠিয়ে ডাটা এনে এইচটিএমএল ডমের সাহায্যে শো করাবো।</p>\n<p class=\"graf graf--p\">আমরা আজকে এই লেখায় প্র্যাক্টিসের জন্যে একটা প্রোজেক্ট ব্যবহার করবো। এটা <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/practicalJavaScript/javascript-dom/archive/ajax.zip\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/practicalJavaScript/javascript-dom/archive/ajax.zip\">এখান থেকে</a> ডাউনলোড করে আনজিপ করে নিবেন। তারপর আপনার পছন্দের কোড এডিটরে প্রোজেক্টটা ওপেন করে <code class=\"markup--code markup--p-code\">index.html</code> ফাইলটা ক্রোমে ওপেন করুন। একই সাথে ক্রোমের ডেভেলপার কন্সোলটাও ওপেন করে রাখবেন। আমরা আমাদের প্রোজেক্টের <code class=\"markup--code markup--p-code\">script.js</code> ফাইলের ভিতরে সব কোড লিখবো। আর কোড লিখে সেটার পরিবর্তন দেখতে হলে অবশ্যই <code class=\"markup--code markup--p-code\">script.js</code> ফাইলটা সেইভ করে ব্রাউজারে ওপেন করে রাখা ডকুমেন্টটা রিলোড করতে হবে।</p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">অ্যাজাক্স রিকোয়েস্ট তৈরীঃ</strong> শুরু করার আগে প্রথমেই আমরা কিভাবে অ্যাজাক্স রিকোয়েস্ট তৈরী করবো সেটা দেখে নিবো। একটু আগেই বলেছিলাম ব্রাউজারের স্পেশাল অবজেক্ট আর অ্যাপিআই এর কথা যেগুলোর সাহায্যে আমরা অ্যাজাক্স রিকোয়েস্ট করতে পারি। সে স্পেশাল অবজেক্ট হচ্ছে <code class=\"markup--code markup--p-code\">XMLHttpRequest</code> । আমরা আজকে এটা ব্যবহার করেই সবকিছু দেখবো। আর ব্রাউজারে নতুন আরেকটা অ্যাপিআই, <code class=\"markup--code markup--p-code\">fetch</code> অ্যাপিআইও যুক্ত হয়েছে যেটার সাহায্যেই অনেকটা একইরকম কাজ করা যায়(নিত্যদিনের জাভাস্ক্রিপ্ট সিরিজে এই অ্যাপিআই নিয়ে <a class=\"markup--anchor markup--p-anchor\" href=\"https://js.zonayed.me/daily/612\" target=\"_blank\" rel=\"noopener\" data-href=\"https://js.zonayed.me/daily/612\">আলোচনা করা হয়েছে</a>)। তবে আমরা এখানে বিশেষ সুবিধার কারণে <code class=\"markup--code markup--p-code\">XMLHttpRequest</code> ই ব্যবহার করবো। এখন একটা রিকোয়েস্ট তৈরী করার আগেঃ</p>\n<p class=\"graf graf--p\">১। <code class=\"markup--code markup--p-code\">XMLHttpRequest</code> এর একটা ইন্সট্যান্স অবজেক্ট তৈরী করা,</p>\n<p class=\"graf graf--p\">২। রিকোয়েস্ট ওপেন করা,</p>\n<p class=\"graf graf--p\">৩। রিকোয়েস্ট পাঠানো এবং</p>\n<p class=\"graf graf--p\">৪। রিকোয়েস্টটা হ্যান্ডেল করা।</p>\n<p class=\"graf graf--p\">একটা সিম্পল রিকোয়েস্টঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); // ইন্সট্যান্স অবজেক্ট তৈরী\r\nrequest.open('GET', 'url', true); // রিকোয়েস্ট ওপেন করা\r\nrequest.send(); // রিকোয়েস্ট পাঠানো\r\n// রিকোয়েস্ট হ্যান্ডেল\r\nrequest.onreadystatechange = function handleRequest(){\r\n  console.log(request);\r\n}</pre>\n<p class=\"graf graf--p\">এখানে প্রথম লাইনে আমরা <code class=\"markup--code markup--p-code\">XMLHttpRequest</code> থেকে একটা অবজেক্ট তৈরী করলাম। তারপর দ্বিতীয় লাইনে রিকোয়েস্ট ওপেন করলাম সেই অবজেক্ট এর <code class=\"markup--code markup--p-code\">open()</code> মেথড দিয়ে। এখন এই মেথড কয়েকটা আর্গুমেন্ট নিবে। এগুলো খুবই গুরুত্বপূর্ণ। প্রথম আর্গুমেন্ট টা রিকোয়েস্ট অ্যাকশন টাইপ, রিকোয়েস্ট অ্যাকশন টাইপ <code class=\"markup--code markup--p-code\">GET</code> থেকে শুরু করে আরো কয়েক টাইপের হতে পারে। এই রিকোয়েস্ট অ্যাকশন টাইপও বিভিন্ন অর্থ প্রকাশ করার জন্যে ব্যবহার করা হয়। যেমন এই <code class=\"markup--code markup--p-code\">GET</code> রিকোয়েস্ট সহ আরো কয়েক টাইপের রিকোয়েস্ট আছেঃ</p>\n<ul class=\"postList\">\n<li class=\"graf graf--li\"><code class=\"markup--code markup--li-code\"><strong class=\"markup--strong markup--li-strong\">GET</strong></code>: এই টাইপের রিকোয়েস্ট পাঠানো হয় কোনো সার্ভার থেকে ডাটা আনার জন্যে</li>\n<li class=\"graf graf--li\"><code class=\"markup--code markup--li-code\"><strong class=\"markup--strong markup--li-strong\">POST</strong></code>: এই টাইপটা পাঠানো হয় যদি আমরা সার্ভারে কোনো ডাটা ঢুকাতে চাই</li>\n<li class=\"graf graf--li\"><code class=\"markup--code markup--li-code\"><strong class=\"markup--strong markup--li-strong\">UPDATE</strong></code>: এই টাইপ দিয়ে বুঝানো হয় আমরা সার্ভারে কোনো ডাটা আপডেট করতে চাচ্ছি।</li>\n<li class=\"graf graf--li\"><code class=\"markup--code markup--li-code\"><strong class=\"markup--strong markup--li-strong\">DELETE</strong></code>: সার্ভারের কোনো ডাটা ডিলেট করার রিকোয়েস্ট</li>\n</ul>\n<p class=\"graf graf--p\">এই রিকোয়েস্টগুলো অর্থপূর্ণ রিকোয়েস্ট এর জন্যে ব্যবহার করা হয়। এদের মধ্যে ফাংশানালিটির তেমন কোনো পার্থক্য নাই। তবে আমরা সার্ভারের সাথে কিসের জন্যে রিকোয়েস্ট পাঠাচ্ছি সেটা বুঝার জন্যে এই টাইপগুলো ব্যবহার করা হয়, আর সার্ভারও এই টাইপগুলো বুঝতে পারে।</p>\n<p class=\"graf graf--p\">তারপর দ্বিতীয় আর্গুমেন্টটা হচ্ছে ইউআরএল, মানে আমরা যে সার্ভারে রিকোয়েস্ট পাঠাতে চাচ্ছি সেটার ঠিকানা। আর সবশেষ আর্গুমেন্টটা হচ্ছে আমরা এই রিকোয়েস্টটা অ্যাসিনক্রোনাস ভাবে করতে চাচ্ছি <code class=\"markup--code markup--p-code\">true</code> নাকি চাচ্ছি না <code class=\"markup--code markup--p-code\">false</code> সেটা বুঝাতে।</p>\n<p class=\"graf graf--p\">তারপরের লাইনে আমাদের রিকোয়েস্টটা পাঠানো হলো <code class=\"markup--code markup--p-code\">send()</code> দিয়ে। আর একদম শেষে আমরা যদি এই <code class=\"markup--code markup--p-code\">request</code> এর অবস্থার কোনো পরিবর্তন হয় তাহলে একটা ফাংশন রান করতে বলেছি। এই ফাংশনের ভিতরে আমরা <code class=\"markup--code markup--p-code\">request</code> টা লগ করেছি।</p>\n<p class=\"graf graf--p\">অ্যাজাক্স রিকোয়েস্ট দিয়ে ডাটা আনাঃ আমরা এখন এভাবে রিকোয়েস্ট তৈরী করে কিছু ডাটা আনবো। প্রথমে আমরা <a class=\"markup--anchor markup--p-anchor\" href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://jsonplaceholder.typicode.com/\">এই ওয়েবসাইটটা</a> ব্যবহার করে এদের সার্ভার থেকে ডাটা আনবো। এই ওয়েবসাইটে গেলে কিছু ডিমো ডাটার জন্যে লিঙ্ক পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*LSzYeFo_Gv4OlorZ6q2f0Q.png?resize=465%2C294&#038;ssl=1\" data-image-id=\"1*LSzYeFo_Gv4OlorZ6q2f0Q.png\" data-width=\"465\" data-height=\"294\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখান থেকে আমরা পোস্ট <code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\">/posts</strong></code> এর ডাটাগুলো অ্যাজাক্স রিকোয়েস্ট এর সাহায্যে আনবো। <a class=\"markup--anchor markup--p-anchor\" href=\"https://jsonplaceholder.typicode.com/posts\" target=\"_blank\" rel=\"noopener\" data-href=\"https://jsonplaceholder.typicode.com/posts\">এই লিঙ্কে</a> গেলে ডাটাগুলো সরাসরি ব্রাউজারেই দেখতে পাবেন। স্ক্রিপ্ট ফাইলটা ওপেন করে আমরা ডাটাগুলো আনবো এবং আপাতত কন্সোলে লগ করে দেখবোঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n  console.log(request.responseText);\r\n}</pre>\n<p class=\"graf graf--p\">এখানে দেখবেন আমরা <code class=\"markup--code markup--p-code\">request</code> এর কোনোরকম পরিবর্তনে যে ফাংশনটা লাগিয়েছে সেটাতে আমরা <code class=\"markup--code markup--p-code\">request.responseText</code> লগ করেছি, কারণ সার্ভার থেকে আসা ডাটা ঠিক এখানেই পাওয়া যাবে তাই।</p>\n<p class=\"graf graf--p\">এটা লিখে স্ক্রিপ্ট ফাইল সেইভ করে ব্রাউজার রিলোড দিলে কন্সোলে দেখতে পাবেন ডাটাগুলো চলে আসছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*dpS1_545MFBPwi0ceLTm3w.png?resize=459%2C242&#038;ssl=1\" data-image-id=\"1*dpS1_545MFBPwi0ceLTm3w.png\" data-width=\"459\" data-height=\"242\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">জেসন(JSON):</strong> জেসন বা পুরোনাম জাভাস্ক্রিপ্ট অবজেক্ট নোটেশন(JavaScript Object Notation) হচ্ছে সিম্পলি স্ট্রিং। কিন্তু স্ট্রিং এমনভাবে সাজানো যেটা জাভাস্ক্রিপ্ট এর অবজেক্ট এর মতো দেখা যায়, কিন্তু ঠিক জাভাস্ক্রিপ্ট এর অবজেক্ট না। আমরা যদি এটার টাইপ দেখতে চাই তাহলে আমরা <code class=\"markup--code markup--p-code\">typeof</code> দিয়ে আমাদের অন্য সার্ভার থেকে আনা ডাটাগুলোর টাইপ দেখতে পারি, জাস্ট স্ক্রিপ্ট ফাইএল <code class=\"markup--code markup--p-code\">typeof</code> কিওয়ার্ডটা লাগিয়ে দিন ডাটা কন্সোল লগ করার সময়ঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n  console.log(<strong class=\"markup--strong markup--pre-strong\">typeof</strong> request.responseText);\r\n}</pre>\n<p class=\"graf graf--p\">এবার স্ক্রিপ্ট ফাইলটা সেইভ করে ব্রাউজার রিলোড দেখতে পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*XeaKnttRY5ESXJ5ue3Xi-g.png?resize=105%2C35&#038;ssl=1\" data-image-id=\"1*XeaKnttRY5ESXJ5ue3Xi-g.png\" data-width=\"105\" data-height=\"35\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এটা স্ট্রিং কিন্তু জাভাস্ক্রিপ্ট এর বিল্ট-ইন কিছু ফাংশন আছে এই স্ট্রিংকে অবজেক্ট এ নেওয়ার জন্যে। অবজেক্ট এ নিলে আমরা একটা সুন্দর স্ট্রাকচার পাবো যেটা থেকে পরে বিভিন্নভাবে ডাটা বের করে এনে আমরা আমাদের পেজে দেখাতে পারবো। এরকম জেসন স্ট্রিং ডাটাকে অবজেক্ট এ নিতে চাইলে <code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\">JSON.parse()</strong></code> ব্যবহার করা হয়। এখন আমরা আমাদের উপরের কোডটা একটু মডিফাই করে একেবারে অবজেক্টই কন্সোলে লগ করতে চাইঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n  console.log(<strong class=\"markup--strong markup--pre-strong\">JSON.parse(</strong>request.responseText<strong class=\"markup--strong markup--pre-strong\">)</strong>);\r\n}</pre>\n<p class=\"graf graf--p\">এটা সেইভ করে ব্রাউজার রিলোড দিলে এরকম অবজেক্ট আকারে ডাটাগুলো পাবেন যেখানে ১০০টার মতো অ্যারে আছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*nOoTp24IucB79gznoMS-8g.png?resize=217%2C59&#038;ssl=1\" data-image-id=\"1*nOoTp24IucB79gznoMS-8g.png\" data-width=\"217\" data-height=\"59\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">রিকোয়েস্ট এর স্টেটঃ</strong> তবে আগে পরে একটু আশ্চর্যের কিছু জিনিস দেখতে পাবেন। সেগুলো হচ্ছে একদম প্রথম লাইনে একটা এরর। পরে ডাটাগুলো দুইবার লগ হয়েছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*k9F3ufAbeadomuNJ0VQ7Zg.png?resize=356%2C168&#038;ssl=1\" data-image-id=\"1*k9F3ufAbeadomuNJ0VQ7Zg.png\" data-width=\"356\" data-height=\"168\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এটার কারণ কি? হ্যাঁ, কারণ জানতে হলে আমাদের আরেকটু গভীরে যেতে হবে। আমরা যে অ্যাজাক্স রিকোয়েস্ট করলাম সেটার কয়েকটা স্টেট আছে। আমরা <code class=\"markup--code markup--p-code\">request.onreadystatechange</code> ব্যবহার করেছি যাতে <code class=\"markup--code markup--p-code\">request</code> এ কোনো পরিবর্তন হলেই ফাংশনটা রান করে। এখন এই স্টেটেরও কয়েকটা লেভেল আছে যেগুলো <code class=\"markup--code markup--p-code\">request</code> এর ভিতরে <code class=\"markup--code markup--p-code\">readyState</code> নামে পাওয়া যায়ঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest();\r\n<strong class=\"markup--strong markup--pre-strong\">console.log(request.readyState);</strong>\r\nrequest.open('GET', '<a class=\"markup--anchor markup--pre-anchor\" href=\"https://jsonplaceholder.typicode.com/posts%27\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://jsonplaceholder.typicode.com/posts'\">https://jsonplaceholder.typicode.com/posts'</a>, true);\r\n<strong class=\"markup--strong markup--pre-strong\">console.log(request.readyState);</strong>\r\nrequest.send();</pre>\n<pre class=\"graf graf--pre\">request.onreadystatechange = function handleRequest(){\r\n   <strong class=\"markup--strong markup--pre-strong\">console.log(request.readyState);</strong>\r\n}</pre>\n<p class=\"graf graf--p\">আমরা কয়েকটা জায়গায় এই <code class=\"markup--code markup--p-code\">readyState</code> এর অবস্থা দেখবো, এটা কিভাবে পরিবর্তন হয় সেটা দেখবো। এটা সেইভ করে ব্রাউজার রিলোড দিলে এরকম আউপুট পাবেন কন্সোলেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*mqPbq6dzEyeKU9XCUBXfTw.png?resize=56%2C91&#038;ssl=1\" data-image-id=\"1*mqPbq6dzEyeKU9XCUBXfTw.png\" data-width=\"56\" data-height=\"91\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে <code class=\"markup--code markup--p-code\">readyState</code> নাম্বার দিয়ে প্রকাশ করা হলেও এই নাম্বারগুলোর বিভিন্নরকমের মিনিং আছেঃ</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\"> 0 </strong></code> — মানে রিকোয়েস্ট এখনো আরম্ভ করা হয়নি</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\"> 1 </strong></code> — সার্ভারের সাথে কানেকশন তৈরী করা হয়েছে</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\"> 2 </strong></code> — রিকোয়েস্ট পাঠানো হয়েছে</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\"> 3 </strong></code> — রিকোয়েস্ট প্রসেস করা হয়েছে</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\"><strong class=\"markup--strong markup--p-strong\"> 4 </strong></code> — রিকোয়েস্ট সফলভাবে শেষ হয়েছে, রেসপন্স তৈরী</p>\n<p class=\"graf graf--p\">এখান আমাদের ডাটাগুলো পাওয়ার সবচেয়ে ভালো সময় হচ্ছে রিকোয়েস্ট <code class=\"markup--code markup--p-code\">readyState</code> <code class=\"markup--code markup--p-code\">4</code> এ থাকলে। আর আমরা এটা চেক না করেই ডাটা লগ করায় একবার এরর, আর দুইবার একই ডাটা দেখাচ্ছে। তাই আমরা এখন চেক বসিয়ে দিতে পারি ডাটা দেখানোর আগে যাতে এরকম সমস্যা তৈরী না হয়ঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n   <strong class=\"markup--strong markup--pre-strong\">if(request.readyState === 4)</strong> <strong class=\"markup--strong markup--pre-strong\">{</strong>\r\n      console.log(JSON.parse(request.responseText));\r\n   <strong class=\"markup--strong markup--pre-strong\">}</strong>\r\n}</pre>\n<p class=\"graf graf--p\">এবার কন্সোলে দেখবেন সুন্দর করেই একবারই ডাটাগুলো দেখাচ্ছে কোনো এরর ছাড়াঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*wokBulJ-nGhSSnP4Wcn-TQ.png?resize=286%2C59&#038;ssl=1\" data-image-id=\"1*wokBulJ-nGhSSnP4Wcn-TQ.png\" data-width=\"286\" data-height=\"59\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">রিকোয়েস্ট রেসপন্সঃ</strong> এখন আমরা যদি ভুল কোনো ইউআরএল দিয়ে রিকোয়েস্ট করি তাহলেঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', '<strong class=\"markup--strong markup--pre-strong\">https://jeiwebsitenai.typicode.com/posts</strong>', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n   if(request.readyState === 4) {\r\n      console.log(<strong class=\"markup--strong markup--pre-strong\">JSON.parse(</strong>request.responseText<strong class=\"markup--strong markup--pre-strong\">)</strong>);\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এখন কন্সোলে এরকম এরর দেখতে পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*Wy_H4339Z-iDxSpWy53f3Q.png?resize=517%2C63&#038;ssl=1\" data-image-id=\"1*Wy_H4339Z-iDxSpWy53f3Q.png\" data-width=\"517\" data-height=\"63\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এর কারণ হচ্ছে আমাদের ইউআরএলই ভুল, তাই প্রথম এররটা ইউআরএল পাওয়া যায়নি সেটার উপর। আর দ্বিতীয়টা পাওয়া না যাওয়া ডাটার উপর অপারেশন চালানোর এরর। এটা হ্যান্ডেল করার জন্যেও <code class=\"markup--code markup--p-code\">request</code> অবজেক্ট এর আরেকটা প্রপার্টি আছে <code class=\"markup--code markup--p-code\">status</code> নামে। এটার মূলত আপনার রিকোয়েস্ট এর স্ট্যাটাস কোড স্টোর করে। একটা সফল রিকোয়েস্ট এর স্ট্যাটাস কোড হচ্ছে <code class=\"markup--code markup--p-code\">200</code>,তার মানে আমরা এটাও চেক হিসেবে বসাতে পারি ডাটা দেখানোর আগেঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', '<strong class=\"markup--strong markup--pre-strong\">https://jeiwebsitenai.typicode.com/posts</strong>', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n   if(request.readyState === 4 <strong class=\"markup--strong markup--pre-strong\">&amp;&amp; request.status === 200</strong>) {\r\n      console.log(<strong class=\"markup--strong markup--pre-strong\">JSON.parse(</strong>request.responseText<strong class=\"markup--strong markup--pre-strong\">)</strong>);\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এখন ইউআরএল ভুল হলে বা কোনো কারণে সার্ভারে কোনো সমস্যা হলেও আমাদের আর এরর দেখতে হবে না। এরই সাথে আমরা স্ট্যাটাস কোড ব্যবহার করে ডাটা না পাওয়া গেলে সেটার উপর কন্ডিশন দিয়ে আমাদের ইউজারকে অন্যকোনো ম্যাসেজ শো করাতে পারবো। এরকম কমন কিছু স্ট্যাটাস কোড আছেঃ</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">200</code> : সফল রিকোয়েস্ট</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">403</code> : আপনার পারমিশন নেই</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">404</code> : পাওয়া যায় নি</p>\n<p class=\"graf graf--p\">এই রিকোয়েস্টগুলোর প্রথম নাম্বারগুলোও একটা প্যাটার্ন মেইন্টেইন করেঃ</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">1xx</code> : ইনফরমেশন</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">2xx</code> : সাক্সেস</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">3xx</code> : রিডাইরেকশন</p>\n<p class=\"graf graf--p\"> — <code class=\"markup--code markup--p-code\">4xx</code> : ক্লাইন্ট এরর</p>\n<p class=\"graf graf--p\">— <code class=\"markup--code markup--p-code\">5xx</code> : সার্ভার এরর</p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">পেজে এ ডাটা দেখানোঃ</strong> আমরা এতক্ষন ডাটা উদ্ধার করলাম। এখন সেই ডাটা আমাদের ডকুমেন্ট এ দেখাবো। তার আগে রিকোয়েস্টটাকে কমপ্লিট করে নেইঃ</p>\n<pre class=\"graf graf--pre\">var request = new XMLHttpRequest(); \r\nrequest.open('GET', 'https://jsonplaceholder.typicode.com/posts', true); \r\nrequest.send(); \r\n \r\nrequest.onreadystatechange = function handleRequest(){\r\n   if(request.readyState === 4 <strong class=\"markup--strong markup--pre-strong\">&amp;&amp; request.status === 200</strong>) {\r\n      console.log(<strong class=\"markup--strong markup--pre-strong\">JSON.parse(</strong>request.responseText<strong class=\"markup--strong markup--pre-strong\">)</strong>);\r\n   }\r\n}</pre>\n<p class=\"graf graf--p\">এখন কন্সোলে যদি দেখেন তাহলে দেখবেন ১০০টা অ্যারেরই কিছু প্রপার্টি আছে, তারমধ্যে <code class=\"markup--code markup--p-code\">title</code> টা আমরা লিস্ট আকারে আমাদের ডকুমেন্ট এ থাকা বক্সে দেখাবো। আমরা এটা এমনভাবে করবো, যদি কেউ এখানে থাকা <strong class=\"markup--strong markup--p-strong\">LOAD POSTS </strong>বাটনে ক্লিক করে তাহলে আমরা অ্যাজাক্স রিকোয়েস্ট পাঠিয়ে সার্ভার থেকে ডাটা এনে এটার নিচেই লিস্ট আকারে দেখাবো।</p>\n<p class=\"graf graf--p\">তাই প্রথমে আমাদের বাটনটা সিলেক্ট করে নিতে হবেঃ</p>\n<pre class=\"graf graf--pre\">var loadPosts = document.getElementById('btn-click-me');</pre>\n<p class=\"graf graf--p\">তারপর বক্সটাকেও সিলেক্ট করবো। এই বক্সেই চাইল্ড হিসেবে আমরা আমাদের লিস্টটা ঢুকাবোঃ</p>\n<pre class=\"graf graf--pre\">var box = document.getElementById('box');</pre>\n<p class=\"graf graf--p\">এখন আমরা আমাদের বাটনে একটা ইভেন্ট লিসেনার লাগাবো আর সেই ইভেন্টে আমরা পোস্টগুলো অ্যাজাক্স রিকোয়েস্ট হিসেবে সার্ভার থেকে আনবোঃ</p>\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">loadPosts.addEventListener('click', function() {</strong>\r\n   var request = new XMLHttpRequest();\r\n   request.open('GET', '<a class=\"markup--anchor markup--pre-anchor\" href=\"https://jsonplaceholder.typicode.com/posts%27\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://jsonplaceholder.typicode.com/posts'\">https://jsonplaceholder.typicode.com/posts'</a>, true);\r\n   request.send();</pre>\n<pre class=\"graf graf--pre\">   request.onreadystatechange = function handleRequest(){\r\n      if(request.readyState === 4 &amp;&amp; request.status === 200) {\r\n         console.log(JSON.parse(request.responseText));\r\n      }\r\n   }\r\n<strong class=\"markup--strong markup--pre-strong\">});</strong></pre>\n<p class=\"graf graf--p\">আমরা আগের রিকোয়েস্টাকেই বাটনের ক্লিকে যাতে ঘটে ঐরকম করে দিয়েছি। এখন স্ক্রিপ্ট ফাইল সেইভ করে ব্রাউজার রিলোড দিলে দেখবেন আর এটা সরাসরি রান করছে না। বাটনে ক্লিক করলেই কন্সোলে ফলাফল দেখতে পাবেন।</p>\n<p class=\"graf graf--p\">এখন আমরা কন্সোলে না, বরং বাটনের নিচে লিস্ট আকারে ফলাফল দেখতে চাচ্ছি। তাই আমরা সহজভাবেই আমাদের ডম ম্যানিপুলেশনের নলেজ দিয়ে সে কাজ করতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">var loadPosts = document.getElementById('btn-click-me');\r\nvar box = document.getElementById('box');<strong class=\"markup--strong markup--pre-strong\">\r\nvar uList = document.createElement('ul');</strong>\r\n   \r\nloadPosts.addEventListener('click', function() {\r\n   var request = new XMLHttpRequest();\r\n   request.open('GET', '<a class=\"markup--anchor markup--pre-anchor\" href=\"https://jsonplaceholder.typicode.com/posts%27\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://jsonplaceholder.typicode.com/posts'\">https://jsonplaceholder.typicode.com/posts'</a>, true);\r\n   request.send();\r\n   request.onreadystatechange = function handleRequest(){\r\n      if(request.readyState === 4 &amp;&amp; request.status === 200) {\r\n         <strong class=\"markup--strong markup--pre-strong\">var data = JSON.parse(request.responseText);</strong>\r\n         <strong class=\"markup--strong markup--pre-strong\">data.forEach(function(singleData) {\r\n           var list = document.createElement('li');\r\n           list.textContent = singleData.title;\r\n           uList.appendChild(list)\r\n         })\r\n         box.insertAdjacentElement('beforeend', uList);</strong>\r\n      }\r\n   }\r\n});</pre>\n<p class=\"graf graf--p\">কোডগুলো ভালো করে লক্ষ্য করুন, বেশী কিছু করা হয়নি এখানে। একদম সিম্পলভাবেই করা হয়েছে। এটা লিখে স্ক্রিপ্ট ফাইলটা সেইভ করে ব্রাউজার রিলোড দিয়ে যদি <strong class=\"markup--strong markup--p-strong\">LOAD POSTS </strong>বাটনে ক্লিক করি, তাহলে দেখবেন এরকম লিস্ট আকারে আমাদের ডাটাগুলো চলে আসছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*x4bLM18hJl8qsog5DhhhlA.png?resize=477%2C360&#038;ssl=1\" data-image-id=\"1*x4bLM18hJl8qsog5DhhhlA.png\" data-width=\"477\" data-height=\"360\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">ব্যাস, হয়ে গেলো আমাদের অ্যাজাক্স রিকোয়েস্টের সাহায্যে পেজ রিলোড না করেই অন্য কোনো সার্ভার থেকে ডাটা নিয়ে আসার কাজ।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d80dcf390514-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d80dcf390514-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>ধরুন আমি ফেসবুক চালাচ্ছি, এখন একটা পোস্ট দেখে আমার ভালো লাগলো। এখন আমি এটাতে রিঅ্যাকশন দিতে চাচ্ছি। রিঅ্যাকশন বাটনে ক্লিক করার পর পুরো ফেসবুক আবার রিলোড হলো। কারণ আমি যে পোস্টে রিঅ্যাকশন দিয়েছি সে ডাটাকে ফেসবুকের সার্ভারে পাঠাতে হবে, আর তাই ব্রাউজার সে কাজ করতে গিয়ে পুরোপুরি রিলোড হলো। এখন প্রত্যেকবার যদি এমন রিঅ্যাকশন দিতে [&hellip;]</p>\n","protected":false},"author":1,"featured_media":631,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,94,108,194,86,196,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/651"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=651"}],"version-history":[{"count":2,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/651/revisions"}],"predecessor-version":[{"id":653,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/651/revisions/653"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/631"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=651"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=651"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=651"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}