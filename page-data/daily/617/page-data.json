{"componentChunkName":"component---src-templates-post-page-js","path":"/daily/617","webpackCompilationHash":"6cfd4e5916fa0746c332","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":617,"date":"2018-09-17T15:24:37","date_gmt":"2018-09-17T15:24:37","guid":{"rendered":"https://with.zonayed.me/?p=617"},"modified":"2018-09-19T14:11:05","modified_gmt":"2018-09-19T14:11:05","slug":"%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-16","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-16/","title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-divider\">\n<p class=\"graf graf--p\">\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">আমরা জাভাস্ক্রিপ্ট এ প্রমিসের কথা জানি, প্রমিস হ্যান্ডেল করতে এবং প্রমিস থেকে ডাটা উদ্ধার করতে কলব্যাক কিভাবে ব্যবহার করতে হয় সেটা নিয়েও আমরা জানি। আমরা দেখেছি কিভাবে একটা প্রমিস হ্যান্ডেল করার পর এটার ভিতরে কলব্যাক ফাংশন কল করতে হয়। আবার সেই কলব্যাক ফাংশনের ভিতরে প্রমিস থেকে আসা ডাটাগুলো অ্যাক্সেস করতে হয়। এভাবে একটার পর একটার ভিতরে গিয়ে গিয়ে এভাবে আমাদের অপারেশনগুলো চালাতে হয় শুধুমাত্র জাভাস্ক্রিপ্ট এর অ্যাসিনক্রোনাস আচরণের কারণে। অ্যাসিনক্রোনাস যদি না হতো তাহলে আমরা লাইন বাই লাইন কোড লিখে সুন্দর করে কাজ করতে পারতাম।</p>\n<p class=\"graf graf--p\">যেমন ধরি আমাদের একটা প্রমিস আছেঃ</p>\n<pre class=\"graf graf--pre\">const aDemoPromise = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         resolve('Print Me');\r\n      } else {\r\n         reject('Error');\r\n      }\r\n   }, 5000)\r\n})</pre>\n<p class=\"graf graf--p\">এখন আমরা জাভাস্ক্রিপ্ট এক্ষেত্রে অ্যাসিনক্রোনাস না হলে হয়তো এভাবেও ডাটা উদ্ধার করতে পারতাম এই প্রমিস থেকেঃ</p>\n<pre class=\"graf graf--pre\">const data = aDemoPromise;\r\nconsole.log(data);</pre>\n<p class=\"graf graf--p\">বা এখানে প্রমিস রিজেক্ট হলে সেটা <code class=\"markup--code markup--p-code\">try…catch</code> দিয়ে হ্যান্ডল করতে পারতামঃ</p>\n<pre class=\"graf graf--pre\">try {\r\n   const data = aDemoPromise;\r\n   console.log(data);\r\n} catch(err) {\r\n   console.log(err);\r\n}</pre>\n<p class=\"graf graf--p\">কিন্তু জাভাস্ক্রিপ্ট এখানে অ্যাসিনক্রোনাস আচরণ করাতে এটা সম্ভব না। আমাদের চেইন করে কলব্যাক ফাংশনের ভিতর থেকেই এরকমভাবে ডাটা উদ্ধার করতে হবেঃ</p>\n<pre class=\"graf graf--pre\">aDemoPromise.then((data) =&gt; {\r\n   console.log(data);\r\n})</pre>\n<p class=\"graf graf--p\">কিন্তু যাই হউক, এভাবে চেইন করে কলব্যাক ফাংশন দিয়েও প্রমসিএ হ্যান্ডল করা কোনো সমস্যা ছিলো না, সমস্যা হচ্ছে এরকম একটা কলব্যাক এর ভিতরে আরেকটা কলব্যাক, ভিতরে আবার কলব্যাক কল করতে থাকলে কোডের স্ট্রাকচারের অনেকটা এরকম দেখা যাবে। এই কোডটা <a class=\"markup--anchor markup--p-anchor\" href=\"http://callbackhell.com/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://callbackhell.com/\">এখান থেকে</a> আনা হয়েছেঃ</p>\n<pre class=\"graf graf--pre\"><code class=\"markup--code markup--pre-code u-paddingRight0 u-marginRight0\">fs.readdir(source, <strong class=\"markup--strong markup--pre-strong\">function</strong> (err, files) {\r\n  <strong class=\"markup--strong markup--pre-strong\">if</strong> (err) {\r\n    console.log('Error finding files: ' <strong class=\"markup--strong markup--pre-strong\">+</strong> err)\r\n  } <strong class=\"markup--strong markup--pre-strong\">else</strong> {\r\n    files.<strong class=\"markup--strong markup--pre-strong\">forEach</strong>(<strong class=\"markup--strong markup--pre-strong\">function</strong> (filename, fileIndex) {\r\n      console.log(filename)\r\n      gm(source <strong class=\"markup--strong markup--pre-strong\">+</strong> filename).size(<strong class=\"markup--strong markup--pre-strong\">function</strong> (err, values) {\r\n        <strong class=\"markup--strong markup--pre-strong\">if</strong> (err) {\r\n          console.log('Error identifying file size: ' <strong class=\"markup--strong markup--pre-strong\">+</strong> err)\r\n        } <strong class=\"markup--strong markup--pre-strong\">else</strong> {\r\n          console.log(filename <strong class=\"markup--strong markup--pre-strong\">+</strong> ' : ' <strong class=\"markup--strong markup--pre-strong\">+</strong> values)\r\n          aspect <strong class=\"markup--strong markup--pre-strong\">=</strong> (values.width / values.height)\r\n          widths.<strong class=\"markup--strong markup--pre-strong\">forEach</strong>(<strong class=\"markup--strong markup--pre-strong\">function</strong> (width, widthIndex) {\r\n            height <strong class=\"markup--strong markup--pre-strong\">=</strong> Math.round(width / aspect)\r\n            console.log('resizing ' <strong class=\"markup--strong markup--pre-strong\">+</strong> filename <strong class=\"markup--strong markup--pre-strong\">+</strong> 'to ' <strong class=\"markup--strong markup--pre-strong\">+</strong> height <strong class=\"markup--strong markup--pre-strong\">+</strong> 'x' <strong class=\"markup--strong markup--pre-strong\">+</strong> height)\r\n            <strong class=\"markup--strong markup--pre-strong\">this</strong>.resize(width, height).write(dest <strong class=\"markup--strong markup--pre-strong\">+</strong> 'w' <strong class=\"markup--strong markup--pre-strong\">+</strong> width <strong class=\"markup--strong markup--pre-strong\">+</strong> '_' <strong class=\"markup--strong markup--pre-strong\">+</strong> filename, <strong class=\"markup--strong markup--pre-strong\">function</strong>(err) {\r\n              <strong class=\"markup--strong markup--pre-strong\">if</strong> (err) console.log('Error writing file: ' <strong class=\"markup--strong markup--pre-strong\">+</strong> err)\r\n            })\r\n          }.bind(<strong class=\"markup--strong markup--pre-strong\">this</strong>))\r\n        }\r\n      })\r\n    })\r\n  }\r\n})</code></pre>\n<p class=\"graf graf--p\">এই কোড আপাতত আমাদের কাজে লাগবে না, তাই রান করানোর দরকার নাই। শুধুমাত্র এটুকু দেখুন এখানে একটার ভিতর আরেকটা কলব্যাক দিতে দিতে কোডের স্ট্রাকচার কেমন এলোমেলো হয়ে গেছে। এখানে খুব সহজেই হারিয়ে যাবেন কোন লাইন কি করছে, বা কোনটার এরর কোনটা। এরকম আরো অনেক সমস্যা এখানে পাবেন। হয়তো শুনে থাকবেন, এধরনের সমস্যাকেই কলব্যাক হেল (Callback Hell) বলা হয়। কিন্তু সেইম কোডগুলোই যদি লাইন বাই লাইন থাকতো তাহলে কত সুন্দর দেখা যেতো, আর বুঝতেও সুবিধা হতো।</p>\n<p class=\"graf graf--p\">আর সেজন্যেই জাভস্ক্রিপ্ট এ এই নতুন <code class=\"markup--code markup--p-code\">async</code> আর <code class=\"markup--code markup--p-code\">await</code> এর পরিচয় করিয়ে দেওয়া হয়েছে। যেখানেই আপনি এরকম অ্যাসিনক্রোনাস কোডকে সিনক্রোনাস আচরণ করাতে চান সেখানেই এগুলো ব্যবহার করতে পারবেন। তবে এখানে কিছু নিয়ম কানুন আছে। আপনাকে <code class=\"markup--code markup--p-code\">async</code> এই কীওয়ার্ডটা ব্যবহার করতে হবে ফাংশনের সাথে। আপনি যে কোডগুলোকে সিনক্রোনাস আচরণ করাতে চাচ্ছেন সেগুলো সবগুলো একটা ফাংশনের ভিতরে ঢুকিয়ে সেই ফাংশনের নামের আগে জাস্ট এভাবে <code class=\"markup--code markup--p-code\">async</code> কীওয়ার্ডটা লাগিয়ে দিবেনঃ</p>\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">async</strong> function asyncCode() {\r\n   // Asynchronous Codes\r\n}</pre>\n<p class=\"graf graf--p\">অ্যারো ফাংশন হলেঃ</p>\n<pre class=\"graf graf--pre\">const asyncCode6 = <strong class=\"markup--strong markup--pre-strong\">async</strong>() =&gt; {\r\n   // Asynchronous Codes\r\n}</pre>\n<p class=\"graf graf--p\">ব্যাস এভাবেই আপনি আপনার ফাংশন টাকে অ্যাসিনক্রোনাস কোড থাকতে পারে বলে চিহ্নিত করে ফেলতে পারবেন। এবার আপনাকে আসল অ্যাসিনক্রোনাস কোডগুলোকে একটা একটা করে চিহ্নিত করে জাভাস্ক্রিপ্টকে বলে দিতে হবে যে এই হচ্ছে আমার প্রমিস যেটা সল্ভ না হওয়া পর্যন পরের ইন্সট্রাকশনে যাওয়া যাবে না। তার আগে আমাদের প্রমিস তো লাগবে, ঠিক না? হ্যা তাহলে একটা প্রমিস দিয়েই শুরু করিঃ</p>\n<pre class=\"graf graf--pre\">const aPromise = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         resolve('I am here!');\r\n      } else {\r\n         reject('No! It is an error!');\r\n      }\r\n   }, 5000)\r\n})</pre>\n<p class=\"graf graf--p\">এখন আমরা এই প্রমিসটাকে একটা অ্যাসিনক্রোনাস ফাংশনের ভিতরে নিয়ে হ্যান্ডেল করবো। সেজন্যে একটা অ্যাসিনক্রোনাস চিহ্নিত করে ফাংশন নিয়ে ভিতরে আমাদের প্রমিস টাকে কল করবো। এখন এখানেই আমাদের <code class=\"markup--code markup--p-code\">await</code> কীওয়ার্ডটা লাগবে। এটা দিয়ে আমরা আমাদের প্রমিসটাকে চিহ্নিত করে দিবো যাতে এই প্রমিস কমপ্লিট না হওয়ার আগ পর্যন্ত পরের ইন্সট্রাকশনে না যায়ঃ</p>\n<pre class=\"graf graf--pre\">const promiseHandle = <code class=\"markup--code markup--pre-code u-paddingRight0 u-marginRight0\"><strong class=\"markup--strong markup--pre-strong\">async</strong>() =&gt; {\r\n   const data = <strong class=\"markup--strong markup--pre-strong\">await</strong> aPromise;\r\n   console.log(data);\r\n}</code></pre>\n<p class=\"graf graf--p\">এখানে দেখুন লক্ষ্য করে আমি ঠিক এর পরের লাইনেই আমাদের প্রমিস থেকে আসা ডাটা প্রিন্ট করে দিয়েছি। হ্যা এখানেই <code class=\"markup--code markup--p-code\">async</code> আর <code class=\"markup--code markup--p-code\">await</code> এর ম্যাজিক। এটা আমাদের অ্যাসিনক্রোনাস কোডকে সিনক্রোনাস আচরণ করতে সাহায্য করে যাতে আমাদের আর কলব্যাকে হেলে পড়তে না হয়। আমরা একদম লাইন বাই লাইন ইন্সট্রাকশন দিয়েই ডাটা উদ্ধার করতে পারবো। এখন আমাদের এই ফাংশনটাকে কল করলেই দেখবেন আমাদের কাঙ্খিত ডাটাঃ</p>\n<pre class=\"graf graf--pre\">promiseHandle()</pre>\n<p class=\"graf graf--p\">এখন দেখবেন আপনার প্রমিস কপ্লিট হয়েই তারপরের লাইনের কন্সোল লগ প্রিন্ট হয়েছে। যদি বুঝতে সমস্যা হয় তাহলে <code class=\"markup--code markup--p-code\">setTimeout()</code> এর সময় বাড়িয়ে দিয়েও নিজে টেস্ট করতে পারেন কোড সিনক্রোনাসলি কাজ করছে কি করছে নাঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*XacdXVoqVRhvK46M-li-kg.png?resize=172%2C61&#038;ssl=1\" data-image-id=\"1*XacdXVoqVRhvK46M-li-kg.png\" data-width=\"172\" data-height=\"61\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন যদি প্রমিস রিজেক্টেড হয় তাহলে? হ্যা তাহলে আমাদের সেই আগের <code class=\"markup--code markup--p-code\">try…catch</code> ব্লক দিয়েই আমরা আমাদের এই রিজেকশন বা এরর হ্যান্ডল করতে পারবো। তার আগে আমাদের প্রমিস যাতে রিজেক্ট হয় ঐরকম আরেকটা তৈরী করে নিইঃ</p>\n<pre class=\"graf graf--pre\">const aPromiseRejection = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         <strong class=\"markup--strong markup--pre-strong\">reject('No! It is an error!');</strong>\r\n      } else {\r\n         resolve('I am here!');\r\n      }\r\n   }, 5000)\r\n})</pre>\n<p class=\"graf graf--p\">এখন আমরা <code class=\"markup--code markup--p-code\">async</code> <code class=\"markup--code markup--p-code\">await</code> আমাদের ফাংশন তৈরী করবো। কিন্তু আমাদের এই প্রমিস থেকে ডাটা নেওয়ার আগে পুরোটাকে <code class=\"markup--code markup--p-code\">try…catch</code> ব্লকের ভিতরে ঢুকিয়ে নিতে হবে। আর সেই সাথে <code class=\"markup--code markup--p-code\">catch</code> ব্লকে আমরা আমাদের এরর ম্যাসেজ অ্যাক্সেস করতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">const promiseWithErrorHandle = <code class=\"markup--code markup--pre-code u-paddingRight0 u-marginRight0\"><strong class=\"markup--strong markup--pre-strong\">async</strong>() =&gt; {\r\n   try {\r\n      const data = <strong class=\"markup--strong markup--pre-strong\">await</strong> </code>aPromiseRejection<code class=\"markup--code markup--pre-code\">;\r\n      console.log(data);\r\n   } catch(err) {\r\n      console.log(err);\r\n   }\r\n}</code></pre>\n<p class=\"graf graf--p\">ব্যাস এবার ফাংশনটাকে কল করলেঃ</p>\n<pre class=\"graf graf--pre\">promiseWithErrorHandle()</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*VB7TC2xMxjdLLo0X7jj6rQ.png?resize=190%2C61&#038;ssl=1\" data-image-id=\"1*VB7TC2xMxjdLLo0X7jj6rQ.png\" data-width=\"190\" data-height=\"61\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">একাধিক প্রমিস হ্যান্ডেল করাঃ </strong>এখন আমরা চাইলে এভাবে একাধিক প্রমিসও সিনক্রোনাসলি হ্যান্ডেল করতে পারি। ধরি আমাদের দুইটা প্রমিস আছেঃ</p>\n<pre class=\"graf graf--pre\">const promise1 = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         resolve('Promise 1 Resolved');\r\n      } else {\r\n         reject('Promise 1 Error');\r\n      }\r\n   }, 5000)\r\n })</pre>\n<p class=\"graf graf--p\">আরেকটাঃ</p>\n<pre class=\"graf graf--pre\">const promise2 = new Promise((resolve, reject) =&gt; {\r\n   setTimeout(() =&gt; {\r\n      if(true) {\r\n         resolve('Promise 2 Resolved');\r\n      } else {\r\n         reject('Promise 2 Error');\r\n      }\r\n   }, 5000)\r\n})</pre>\n<p class=\"graf graf--p\">এখন এখানে একটু বুঝার বিষয়। আমরা যদি <code class=\"markup--code markup--p-code\">Promise.all</code> ব্যবহার করি তাহলে এটা কি রিটার্ন করে দেখিঃ</p>\n<pre class=\"graf graf--pre\">console.log('Promise All Returns:', Promise.all([promise1, promise2]));</pre>\n<p class=\"graf graf--p\">মানে এটাও প্রমিস রিটার্ণ করেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*YV-GJZEXy-t4IVbd2L5PdA.png?resize=516%2C43&#038;ssl=1\" data-image-id=\"1*YV-GJZEXy-t4IVbd2L5PdA.png\" data-width=\"516\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">তাইলে এটা দিয়েই আমরা সহজে এরকম একাধিক প্রমিস হ্যান্ডেল করতে পারবোঃ</p>\n<pre class=\"graf graf--pre\">const handleMultiplePromise = <code class=\"markup--code markup--pre-code u-paddingRight0 u-marginRight0\"><strong class=\"markup--strong markup--pre-strong\">async</strong>() =&gt; {\r\n   const data = <strong class=\"markup--strong markup--pre-strong\">await</strong> </code>Promise.all([promise1, promise2]);\r\nconsole.log(data);\r\n<code class=\"markup--code markup--pre-code\">}</code></pre>\n<p class=\"graf graf--p\">আচ্ছা তাহলে এদের ডাটা কিভাবে আসবে? হ্যা ডাটা ঠিক অ্যারে আকারেই আসবে যেটা আমরা আগেও দেখেছি। এখন ফাংশনটাকে কল করলেঃ</p>\n<pre class=\"graf graf--pre\">handleMultiplePromise();</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*YJiIU5eBiNmde6UaHSARww.png?resize=362%2C68&#038;ssl=1\" data-image-id=\"1*YJiIU5eBiNmde6UaHSARww.png\" data-width=\"362\" data-height=\"68\" data-recalc-dims=\"1\" /></figure>\n<h4 class=\"graf graf--h4\">বাস্তব উদাহরণঃ</h4>\n<p class=\"graf graf--p\">ধরি আমাদের একটা প্রমিস আছে যেটা থেকে আমরা একজনের নাম পাবো, এখন এই নাম দিয়ে আবার আরেকটা প্রমিস তৈরী করে সেটা থেকে তার বয়স জেনে নাম আর বয়স প্রিন্ট করবো। এখন এখানে মাত্র দুইটা ডাটা থাকলেও রিয়েল লাইফের প্রোজেক্টে এরকম একাধিক ডাটা, একটা উপর আরেকটা নির্ভরশীল থাকতে পারে। এধরনের সিচুয়েশনে কলব্যাক জরুরী। ধরি আমাদের নাম জানার প্রমিসটাঃ</p>\n<pre class=\"graf graf--pre\">const getMyName = new Promise((resolve) =&gt; {\r\n   return resolve('Zonayed');\r\n})</pre>\n<p class=\"graf graf--p\">একদম সাধারণভাবে লিখলাম এটা ধরে যে এখানে কোনো এরর হবে না। বেশীরভাগ ক্ষেত্রেও আমাদের প্রমিস লিখতে হয় না, তাই এটা ব্যাপার না এখন আরেকটা প্রমিস লিখবো যেটা এই প্রমিস থেকে নাম নিয়ে সেটার উপর ভিত্তি করে বয়স রিটার্ণ করবে। এখন যে জন্যে আমাদের একটা ফাংশনও লাগবেঃ</p>\n<pre class=\"graf graf--pre\">const getAge = (name) =&gt; {\r\n   return new Promise((resolve, reject) =&gt; {\r\n      if(name === 'Zonayed') {\r\n         resolve(21);\r\n      } else {  \r\n         reject('Not Found!');\r\n      }\r\n   }\r\n)}</pre>\n<p class=\"graf graf--p\">এখন প্রথম প্রমিস থেকে আমরা নামটা নিবো, তারপর সেই নামটা পাস করে দ্বিতীয় প্রমিস থেকে বয়স নিবোঃ</p>\n<pre class=\"graf graf--pre\">getMyName.then((name) =&gt; {\r\n   getAge(name).then((age) =&gt; {\r\n      console.log('My name is ' + name + ' and I am ' + age + ' years old!');\r\n   })\r\n})</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*WW0pMwqs02iAyCy3DTCvww.png?resize=543%2C98&#038;ssl=1\" data-image-id=\"1*WW0pMwqs02iAyCy3DTCvww.png\" data-width=\"543\" data-height=\"98\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">ব্যাস এভাবে আমাদের একটা কলব্যাকের ভিতরে আরেকটা কলব্যাক দিয়ে ডাড়া উদ্ধার করতে হলো। কিন্তু নতুন <code class=\"markup--code markup--p-code\">async</code> আর <code class=\"markup--code markup--p-code\">await</code> হলে একই কাজটা আরো ক্লিন লাইন বাই লাইন ইন্সট্রাকশনে করা যাবেঃ</p>\n<pre class=\"graf graf--pre\">const getMyDetails = <strong class=\"markup--strong markup--pre-strong\">async</strong>() =&gt; {\r\n   const name = <strong class=\"markup--strong markup--pre-strong\">await</strong> getMyName;\r\n   const age = <strong class=\"markup--strong markup--pre-strong\">await</strong> getAge(name);\r\n   console.log('My name is ' + name + ' and I am ' + age + ' years old!');\r\n}</pre>\n<p class=\"graf graf--p\">কত ক্লিন কোড হয়ে গেলো দেখুন। এটাই <code class=\"markup--code markup--p-code\">async</code> <code class=\"markup--code markup--p-code\">await</code> এর আসল কাজ। এখন আমরা সিম্পলি ফাংশনটাকে কল করলেই ব্যাস ফলাফল সামনেঃ</p>\n<pre class=\"graf graf--pre\">getMyDetails();</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/880/1*9lMp3IK3llISdDGE4lkC9g.png?resize=525%2C138&#038;ssl=1\" data-image-id=\"1*9lMp3IK3llISdDGE4lkC9g.png\" data-width=\"525\" data-height=\"138\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">বাস্তবে কলব্যাক হেলের সমস্যা খুব প্রখর। তাছাড়া আমরা কলব্যাকে একটা আর্গুমেন্ট নিয়ে কাজ করলেও বাস্তবে সেখানে আরো অনেক আর্গুমেন্ট পাবেন। এভাবে কলব্যাক দিয়ে কাজ করতে গেলে সহজেই খেই হারিয়ে ফেলবেন। তাই নতুন টেকনিক ব্যবহার করাই ভালো।</p>\n<div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d7fc4690b55b-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d7fc4690b55b-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>আমরা জাভাস্ক্রিপ্ট এ প্রমিসের কথা জানি, প্রমিস হ্যান্ডেল করতে এবং প্রমিস থেকে ডাটা উদ্ধার করতে কলব্যাক কিভাবে ব্যবহার করতে হয় সেটা নিয়েও আমরা জানি। আমরা দেখেছি কিভাবে একটা প্রমিস হ্যান্ডেল করার পর এটার ভিতরে কলব্যাক ফাংশন কল করতে হয়। আবার সেই কলব্যাক ফাংশনের ভিতরে প্রমিস থেকে আসা ডাটাগুলো অ্যাক্সেস করতে হয়। এভাবে একটার পর একটার [&hellip;]</p>\n","protected":false},"author":1,"featured_media":576,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,94,108,168,78,86,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/617"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=617"}],"version-history":[{"count":3,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/617/revisions"}],"predecessor-version":[{"id":622,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/617/revisions/622"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/576"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=617"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=617"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=617"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}