{"componentChunkName":"component---src-templates-post-page-js","path":"/soft/273","webpackCompilationHash":"bb1b708645f75543030c","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":273,"date":"2018-05-05T09:48:29","date_gmt":"2018-05-05T09:48:29","guid":{"rendered":"https://with.zonayed.me/?p=273"},"modified":"2018-07-08T11:06:00","modified_gmt":"2018-07-08T11:06:00","slug":"%e0%a6%93%e0%a7%9f%e0%a7%87%e0%a6%ac%e0%a6%aa%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%95-%e0%a6%a6%e0%a6%bf%e0%a7%9f%e0%a7%87-%e0%a6%b0%e0%a6%bf%e0%a6%85%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%95%e0%a7%8d%e0%a6%9f","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%9f%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%b8-%e0%a6%8f%e0%a6%a8%e0%a7%8d%e0%a6%a1-%e0%a6%9f%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%95%e0%a7%8d%e0%a6%b8/%e0%a6%93%e0%a7%9f%e0%a7%87%e0%a6%ac%e0%a6%aa%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%95-%e0%a6%a6%e0%a6%bf%e0%a7%9f%e0%a7%87-%e0%a6%b0%e0%a6%bf%e0%a6%85%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%95%e0%a7%8d%e0%a6%9f/","title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">আমরা রিঅ্যাক্ট এ অ্যাপ্লিকেশন ডেভেলপমেন্ট করার আগে সাধারণত <code class=\"markup--code markup--p-code\">create-react-app</code> CLI দিয়ে প্রথমের রিঅ্যাক্ট এর স্টার্টার প্যাক বানিয়ে ফেলি। অথবা অলরেডি এরকম বানানো আছে এমন প্যাক নামিয়ে সেটার উপর কাজ করা শুরু করি। বিগিনার লেভেল এর জন্যে এই পদ্ধতিটাই সবচেয়ে বেস্ট, কারণ এই প্যাক এর এনভারোমেন্ট সেটাপ করতে করতেই অনেকে ডিমোটিভেট হয়ে আসল রিঅ্যাক্ট শিখাই বাদ দিয়ে দিতে পারে। তাই যাদের একান্ত ইচ্ছা আছে বা আসলেই জানতে চান কিভাবে এই স্টার্টার প্যাকটা বানানো হয়, কি কি থাকে, কিভাবে কি কাজ করে, তাহলে তাদের জন্যেই আজকে আমার লেখা।</p>\n<p class=\"graf graf--p\">আমি সবকিছু একদম পার্ট পার্ট করে ব্যাখ্যা করে দিবো, এবং সবশেষে আমার বানানো প্যাকগুলোর লিঙ্কও পাবেন, যেগুলো ডাউনলোড করে আপনি আপনার মন মতো কাস্টমাইজ করেও কাজ করতে পারবেন। চাইলে লাইভের পোর্ট চ্যাঞ্জ করতে পারবেন, নতুন কোনো প্লাগিনও লাগাতে পারবেন আপনার কাজকে আরো অটোম্যাট করতে।</p>\n<p class=\"graf graf--p\">প্রথমেই আপনার ডিভাইসে অবশ্যই নোড জেএস ইন্সটল থাকতে হবে। নোড জেএস এবং NPM আছে কিনা দেখার জন্যে এদের ভার্শন চ্যাক করতে পারেন কমান্ড লাইন থেকে। বাই দ্যা ওয়ে, কমান্ড লাইন আপনার পছন্দমতো যেকোনো একটা ইউজ করলেই হবে। জাস্ট কাজ করলেই হবে।</p>\n<p class=\"graf graf--p\">Node JS এবং NPM এর ভার্শন চ্যাক করুনঃ</p>\n<pre class=\"graf graf--pre\">node --version \r\nবা,\r\nnode -v</pre>\n<pre class=\"graf graf--pre\">এবং</pre>\n<pre class=\"graf graf--pre\">npm --version\r\nবা,\r\nnpm -v</pre>\n<p class=\"graf graf--p\">ভার্শন দেখালে ঠিক আছে। অন্যকিছু দেখালে তাহলে হয়তো আপনাকে Node JS ইন্সটল করতে হবে।</p>\n<p class=\"graf graf--p\">যাই হউক এবার আমরা মেইন প্রোজেক্টে কাজ করবো। একদম স্ক্র্যাচ থেকে সবকিছু শুরু করবো। আপনার মনমতো যেকোনো জায়গায় একটা ডিরেক্টরি নিয়ে প্রোজেক্ট শুরু করুন।</p>\n<pre class=\"graf graf--pre\">mkdir react-starter-pack</pre>\n<p class=\"graf graf--p\">এবার আপনার ডিরেক্টরিতে চলে যানঃ</p>\n<pre class=\"graf graf--pre\">cd react-starter-pack</pre>\n<p class=\"graf graf--p\">এবার একটা NPM প্রোজেক্ট ইনিশিয়েট করুনঃ</p>\n<pre class=\"graf graf--pre\">npm init</pre>\n<p class=\"graf graf--p\">এখানে আপনার পছন্দমতো ডিটেইলস দিয়ে সবকিছু পূরণ করুন। সবশেষে কনফার্ম করে ফেলুন। দেখবেন আপনার ডিরেক্টরিতে সব ঠিক থাকলে একটা এরকম <code class=\"markup--code markup--p-code\">package.json</code> ফাইল তৈরী হয়েছেঃ</p>\n<pre class=\"graf graf--pre\">{\r\n  \"name\": \"react-starter-pack\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\r\n  },\r\n  \"author\": \"Zonayed Ahmed\",\r\n  \"license\": \"MIT\"\r\n}</pre>\n<p class=\"graf graf--p\">এবার রিঅ্যাক্ট এ সাধারণত সব স্ক্রিপ্ট ফাইলগুলো বান্ডেল হয়ে প্রোডাকশন ভার্শনে একটা স্ক্রিপ্ট ফাইলে চলে যায়। যেই কাজটাই ওয়েবপ্যাক দিয়ে করা হয়। আবার একই সাথে ডেভেলপমেন্ট এর সময় আমাদের লাইভসার্ভারের কাজও লাগে যেটা লোকাহোস্টের একটা পোর্টে চলন্ত অবস্থায় থাকে। আমাদের বান্ডেল করার জন্যে <code class=\"markup--code markup--p-code\">webpack</code>, লাইভ ডেভেলপমেন্ট সার্ভারের জন্যে <code class=\"markup--code markup--p-code\">webpack-dev-server</code> এবং সবশেষে webpack কম্পাইলারের জন্যে <code class=\"markup--code markup--p-code\">webpack-cli</code> প্যাকেজ লাগবে। এগুলো ডেভ ডিপেন্ডেসি হিসাবে ইন্সটল করে ফেলুনঃ</p>\n<pre class=\"graf graf--pre\">npm install --save-dev webpack webpack-dev-server webpack-cli</pre>\n<p class=\"graf graf--p\">এখন ওয়েবপ্যাকের জন্যে একটা প্রোজেক্টের রুটে <code class=\"markup--code markup--p-code\">webpack.config.js</code> ফাইল বানাতে হবে যেখানে ওয়েবপ্যাকের কনফিগারেশনগুলো থাকবেঃ</p>\n<pre class=\"graf graf--pre\">touch webpack.config.js</pre>\n<p class=\"graf graf--p\">এখন ওয়েব ডেভেলপমেন্ট এ কনভেনশনালি প্রোজেক্টের স্ট্রাকচার অনেকটা দেখবেন একটা <code class=\"markup--code markup--p-code\">src</code> ডিরেক্টরি থাকে যেখানে আপনার ডেভেলপমেন্ট এর সময়কার ফাইল/কোড গুলো থাকে, আর আরেকটা <code class=\"markup--code markup--p-code\">dist</code> বা <code class=\"markup--code markup--p-code\">build</code> নামে একটা ডিরেক্টরি থাকে যেখানে আপনার প্রোডাকশন ভার্শন থাকে। আমাদের এই প্যাকেও আমরা সেইম কনভেনশান মেনেই স্টারকচার করবো। তবে আপনি চাইলে আপনার মতো করেও যেকোনোভাবে করতে পারবেন।</p>\n<p class=\"graf graf--p\">একটা ডিরেক্টরি তৈরী করুন <code class=\"markup--code markup--p-code\">src</code> নামে যেটার ভিতরে একটা স্ক্রিপ্ট ফাইল রাখুন <code class=\"markup--code markup--p-code\">index.js</code> নামেঃ</p>\n<pre class=\"graf graf--pre\">mkdir src\r\ntouch src/index.js</pre>\n<p class=\"graf graf--p\">এবার index.js er ফাইলের ভিতরে কিছু কোড লিখুন জাস্ট দেখার জন্যেঃ</p>\n<pre class=\"graf graf--pre\">console.log('Hello React Starter Pack!');</pre>\n<p class=\"graf graf--p\">এবার আমরা এটাকে <code class=\"markup--code markup--p-code\">dist</code> নামে একটা ফোল্ডারে নিয়ে বান্ডেল তৈরী করবো। এর জন্যে আমাদের <code class=\"markup--code markup--p-code\">webpack.config.js</code> এ ওয়েবপ্যাকের জন্যে কিছু কনফিগারেশন করে দিতে হবে এরকমঃ</p>\n<pre class=\"graf graf--pre\">module.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: __dirname + '/dist',\r\n    filename: 'bundle.js'\r\n  }\r\n}</pre>\n<p class=\"graf graf--p\">এখানে একটা অবজেক্ট ক্রিয়েট করে সেটা এক্সপোর্ট করা হচ্ছে। সাথে সেই অবজেক্ট এর ভিতরে এন্ট্রি পয়েন্ট দিতে হবে। এর নিচে আবার আউটপুট নামেরও আরেকটা অবজেক্ট নিতে হবে যেখানে আপনি আপনার পাথ মেনশন করে দিতে হবে যেখানে আপনি বান্ডেল ফাইলটা রাখতে চাচ্ছেন। কিন্তু এখানে পাথ এর লোকেশান একদম অ্যাবসিলিউট হতে হবে, তাই আপনারে <code class=\"markup--code markup--p-code\">__dirname</code> ইউজ করে বাকি পাথটা রিলেটেভলি মেনশন করে দিতে হবে, অন্যথায় এরর আসবে। এবং দ্বিতীয়টায় আপনাকে বান্ডেল করা ফাইলের নামটাও মেনশন করে দিতে হবে। আমি এখানে আমার বর্তমার প্রোজেক্টের ডিরেক্টরিতে <code class=\"markup--code markup--p-code\">dist</code> নামে একটা ডিরেক্টরির ভিতরে <code class=\"markup--code markup--p-code\">bundle.js</code> নামে একটা ফাইলে বান্ডেলটা রাখতে চাচ্ছি। আপনি এখানে চাইলে যেকোনো নামই ইউজ করতে পারবেন।</p>\n<p class=\"graf graf--p\">এবার ওয়েবপ্যাকের ব্যাসিক কনফিগারেশন রেডী। এবার NPM দিয়ে এটা রান করাতে চাচ্ছি, তাই <code class=\"markup--code markup--p-code\">package.json</code> এ কিছু <code class=\"markup--code markup--p-code\">scripts</code> লিখতে হবে। <code class=\"markup--code markup--p-code\">package.json</code> ওপেন করে <code class=\"markup--code markup--p-code\">scripts</code> এর ভিতরে সবকিছু কেটে নতুন একটা <code class=\"markup--code markup--p-code\">build</code> স্ক্রিপ্ট লিখুনঃ</p>\n<pre class=\"graf graf--pre\">...\r\n\"scripts\": {\r\n    \"build\": \"webpack\"\r\n  },\r\n...</pre>\n<p class=\"graf graf--p\">এবার স্ক্রিপ্ট রেডি। কমান্ড লাইন থেকে <code class=\"markup--code markup--p-code\">build</code> স্ক্রিপ্টটা রান করানঃ</p>\n<pre class=\"graf graf--pre\">npm run build</pre>\n<p class=\"graf graf--p\">আর দেখুন একটা <code class=\"markup--code markup--p-code\">dist</code> ডিরেক্টরিসহ ভিতরে <code class=\"markup--code markup--p-code\">bundle.js</code> তৈরী হয়ে গেছে আপনার প্রোজেক্টে।</p>\n<p class=\"graf graf--p\">এখন এখানে <code class=\"markup--code markup--p-code\">build</code> স্ক্রিপ্ট এ কিছু ফ্ল্যাগও দিতে পারবেন। যেমন আমরা সাধারণত প্রোডাকশন ভার্শনে মিনিমাইজড ভার্শনের বান্ডেলটাই রাখি। কম সাইজ, লোড তাড়াতাড়ি হবে। তাই এখানে কিছু ফ্ল্যাগ লাগিয়ে দিতে পারেন সে কাজটা করার জন্যেঃ</p>\n<pre class=\"graf graf--pre\">...\r\n\"scripts\": {\r\n    \"build\": \"webpack --mode production\"\r\n  },\r\n...</pre>\n<p class=\"graf graf--p\">এবার এই স্ক্রিপ্ট রান করালে প্রোডাকশন ভার্শনের বান্ডেল পাবেন। <strong class=\"markup--strong markup--p-strong\">নোটঃ</strong> কোনো <code class=\"markup--code markup--p-code\">mode</code> না দিলে ওয়েবপ্যাক বাই ডিফল্ট প্রোডাকশন ভার্শনে বান্ডেল করে। কিন্তু এখানে একটা ওয়ার্নিং আসবে তাই মুড মেনশন করে দেওয়াই ভালো।</p>\n<p class=\"graf graf--p\">এবার আপনার অনেক প্রোজেক্টে দেখবেন একটা <code class=\"markup--code markup--p-code\">public</code> নামে একটা ডিরেক্টরি থাকে যেখানে আপনার ব্যাসিক ফাইলগুলো যেমন <code class=\"markup--code markup--p-code\">index.html</code> থাকে। এখন আমরা তাই একটা প্লাগিন <code class=\"markup--code markup--p-code\">html-webpack-plugin</code> ইউজ করবো এই উদ্দেশ্যে। এখন এই প্লাগিনটা ইউজ না করলেও ম্যানুয়ালিও আপনি index.html বানিয়ে public ডিরেক্টরিতে রেখে কাজ করতে পারবেন। তবে এই প্লাগিন আমাদের কিছু কাজ জিনিস সহজ করে দিবে তাই আমরা ইউজ করবো। প্রথমে ডেভ ডিপেন্ডেসি হিসাবে নামিয়ে ফেলুনঃ</p>\n<pre class=\"graf graf--pre\">npm install --save-dev <code class=\"markup--code markup--pre-code\">html-webpack-plugin</code></pre>\n<p class=\"graf graf--p\">এখন এইটার কনফিগারেশন গুলো মেনশন করে দিতে হবে <code class=\"markup--code markup--p-code\">webpack.config.js</code> ফাইলের ভিতরে। যেহেতু এটা ওয়েবপ্যাকের প্লাগিন তাই এটা entry, output এর পরে plugins নামে একটা অ্যারের ভিতরে যাবে। এবং অবশ্যই আগে এটা <code class=\"markup--code markup--p-code\">require</code> করিয়ে নিতে হবে।</p>\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">const HtmlWebpackPlugin = require('html-webpack-plugin');</strong></pre>\n<pre class=\"graf graf--pre\">module.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: __dirname + '/dist',\r\n    filename: 'bundle.js'\r\n  }<strong class=\"markup--strong markup--pre-strong\">,</strong>\r\n  <strong class=\"markup--strong markup--pre-strong\">plugins: [\r\n    new HtmlWebpackPlugin()\r\n  ]</strong>\r\n}</pre>\n<p class=\"graf graf--p\">এখন এভাবে রেখে যদি <code class=\"markup--code markup--p-code\">npm run build</code> দেই তাহলে <code class=\"markup--code markup--p-code\">html-webpack-plugin</code> একটা ব্যাসিক <code class=\"markup--code markup--p-code\">index.html</code> ফাইল ক্রিয়েট করে দিবে <code class=\"markup--code markup--p-code\">dist</code> ডিরেক্টরিতে। এখানে দেখুন অটোম্যাটিকভাবেই আপনার বান্ডেল ফাইলটা লিঙ্ক করে দিয়েছে এই প্লাগিনটা, আমরা ব্যাসিকালি এই কাজের জন্যেই এটা ইউজ করতেছি। কিন্তু রিঅ্যাক্ট এ আমাদের একটা ইলিমেন্ট সিলেক্ট করতে হবে রিঅ্যাক্ট ঐখানে রেন্ডার করার জন্যে। তাই আমাদের এই <code class=\"markup--code markup--p-code\">html-webpack-plugin</code> কিছু অপশন পাস করে দিতে হবে যাতে আমাদের তৈরী করা স্ট্রাকচারের উপরই <code class=\"markup--code markup--p-code\">index.html</code> ফাইলটা জেনারেট করে। কনভেনশনালি <code class=\"markup--code markup--p-code\">public</code> ডিরেক্টরিতেই আমাদের স্ট্রাকচারের <code class=\"markup--code markup--p-code\">index.html </code>ফাইল রেখে প্লাগিনটাকে বলে দিতে হবে এটা দেখে দেখে প্রোডাকশন ভার্শনের ফাইল জেনারেট করো। তাই প্রথমে ফাইলটা বানিয়ে নিনঃ</p>\n<pre class=\"graf graf--pre\">mkdir public\r\ntouch public/index.html</pre>\n<p class=\"graf graf--p\">এখন <code class=\"markup--code markup--p-code\">index.html</code> এর ভিতরে আপনি আপনার স্ট্রাকচার রাখবেন। ব্যাসিকালি আপনার একটা ইলিমেন্ট লাগবে যেটাতে রিঅ্যাক্ট রেন্ডার হবে। অনেকটা এরকমঃ</p>\n<pre class=\"graf graf--pre\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\r\n    &lt;title&gt;React Starter Pack From Scratch&lt;/title&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    <strong class=\"markup--strong markup--pre-strong\">&lt;div id=\"app\"&gt;&lt;/div&gt;</strong>\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</pre>\n<p class=\"graf graf--p\">এখন আমাদের এখানে বান্ডেল ফাইলের কথা মেনশন করতে হবে না, এটা অটোম্যাটিকালি প্লাগিনটাই করে দিবে। তারজন্যে <code class=\"markup--code markup--p-code\">webpack.config.js</code> এর <code class=\"markup--code markup--p-code\">html-webpack-plugin</code> এর জন্যে কিছু অপশন পাস করে দিতে হবে এরকমঃ</p>\n<pre class=\"graf graf--pre\">...\r\n    new HtmlWebpackPlugin(<strong class=\"markup--strong markup--pre-strong\">{\r\n      template: './public/index.html'\r\n    }</strong>)\r\n...</pre>\n<p class=\"graf graf--p\">এখানে কোন ফাইল থেকে <code class=\"markup--code markup--p-code\">index.html</code> নিতে চাচ্ছেন সেটার লোকেশান মেনশন করে দিতে হবে। আর এগুলো সব <code class=\"markup--code markup--p-code\">html-webpack-plugin</code> এর <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/jantimon/html-webpack-plugin\">ডকুমেন্টেশন</a> থেকে জানতে পারবেন। আরো ইউজফুল অনেক কিছু আছে তাই <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/jantimon/html-webpack-plugin\">ডকুমেন্টেশন</a> চ্যাক করতে পারেন চাইলে।</p>\n<p class=\"graf graf--p\">এখন আমরা রিঅ্যাক্ট এ সাধারণত jsx লিখি, জাভাস্ক্রিপ্ট এর ES6 ভার্শনের কোড লিখি, কিন্তু এগুলো আমাদের সব ব্রাউজার ফ্রেন্ডলি না। তাই আমাদের এই কোডগুলোও কম্পাইল করে বান্ডেলে নিতে হবে যাতে আমাদের সব ব্রাউজার বুঝতে পারে। এজন্যে আমাদের <code class=\"markup--code markup--p-code\">babel-core</code>ব্যাবেল কোর কম্পাইলারের জন্যে, <code class=\"markup--code markup--p-code\">babel-loader</code>জাভাস্ক্রিপ্ট কোড ট্রান্সপাইলিং এর জন্যে, <code class=\"markup--code markup--p-code\">babel-preset-env </code>আপনার ইনভারোমেন্ট ডিটেক্ট করে হায়ার ভার্শনের জাভাস্ক্রিপ্ট(ES6+)কে সাপোর্টের ভার্শনের জাভাস্ক্রিপ্ট(ES5) এ নেওয়ার জন্যে এবং <code class=\"markup--code markup--p-code\">babel-preset-react</code> jsx কে কনভার্ট করার জন্যে ইউজ করতে হবে। এই প্যাকেজ সবগুলো ডেভ ডিপেন্ডেসি হিসেবে নামিয়ে ফেলুনঃ</p>\n<pre class=\"graf graf--pre\">npm install --save-dev babel-core babel-loader\r\nnpm install --save-dev babel-preset-env babel-preset-react</pre>\n<p class=\"graf graf--p\">এখন এই ব্যাবেলের জন্যেও কনফিগারেশন লাগবে। কনফিগারেশন দুইভাবে করা যায়। রুট ডিরেক্টরিতে <code class=\"markup--code markup--p-code\">.babelrc</code> নামে একটা ফাইল বানিয়ে ঐখানেও কনফিগারেশনগুলো রাখতে পারবেন আবার চাইলে <code class=\"markup--code markup--p-code\">package.json</code> এই <code class=\"markup--code markup--p-code\">babel</code> নামে কনফিগারেশনগুলো রাখতে পারবেন। আমরা এখানে <code class=\"markup--code markup--p-code\">package.json</code> এই রাখবো। নিচের এগুলো লিখে ফেলেন <code class=\"markup--code markup--p-code\">package.json</code> এঃ</p>\n<pre class=\"graf graf--pre\">...\r\n\"babel\": {\r\n    \"presets\": [\r\n      \"env\",\r\n      \"react\"\r\n    ]\r\n }\r\n...</pre>\n<p class=\"graf graf--p\">এখানে আমরা ইন্সটল করা ব্যাবেলের দুইটা প্রিসেট <code class=\"markup--code markup--p-code\">babel-preset-env </code>আর <code class=\"markup--code markup--p-code\">babel-preset-react</code> ইউজ করতে চাচ্ছি তাই এভাবে কনফিগার করে নিতে হবে।</p>\n<p class=\"graf graf--p\">এখন আমাদের <code class=\"markup--code markup--p-code\">webpack.config.js</code> এ ব্যাবেলকে ইউজ করার জন্যে কনফিগার করে দিতে হবেঃ</p>\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">module: {\r\n  rules: [\r\n    {\r\n      test: /\\.js$/, </strong>//সব ফাইল js বা jsx গুলোর উপরে অ্যাপ্লাই করার জন্যে<strong class=\"markup--strong markup--pre-strong\">\r\n      exclude: /node_modules/, </strong>// node_modules বাদ দিয়ে<strong class=\"markup--strong markup--pre-strong\">\r\n      use: {\r\n        loader: 'babel-loader'\r\n      }\r\n    }\r\n  ]\r\n}</strong></pre>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">webpack.config.js</code> ফাইলটা এখন এরকম দেখা যাবেঃ</p>\n<pre class=\"graf graf--pre\">const HtmlWebpackPlugin = require('html-webpack-plugin');</pre>\n<pre class=\"graf graf--pre\">module.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: __dirname + '/dist',\r\n    filename: 'bundle.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/, \r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader'\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      template: './public/index.html'\r\n    })\r\n  ]\r\n}</pre>\n<p class=\"graf graf--p\">এবার আমাদের সবকিছু অনেকটাই তৈরী। এখন <code class=\"markup--code markup--p-code\">src</code> এর ভিতরের <code class=\"markup--code markup--p-code\">index.js</code> থেকে রিঅ্যাক্ট কোড লিখেই <code class=\"markup--code markup--p-code\">npm run build</code> দিলে দেখবেন প্রোডাকশন ভার্শন রেডী।</p>\n<p class=\"graf graf--p\">এবার কিছু রিঅ্যাক্ট দিয়ে খেলাধুলা করা যাক। কিন্তু তার আগে অবশ্যই <code class=\"markup--code markup--p-code\">react</code> এবং <code class=\"markup--code markup--p-code\">react-dom</code> ডিপেন্ডেসি হিসাবে ইন্সটল করতে ভুলবেন না।</p>\n<pre class=\"graf graf--pre\">npm install --save react react-dom</pre>\n<p class=\"graf graf--p\">এবার <code class=\"markup--code markup--p-code\">index.js</code> ওপেন করে ভিতরে রিঅ্যাক্ট লিখা শুরু করুন</p>\n<pre class=\"graf graf--pre\">import React from 'react';\r\nimport ReactDOM from 'react-dom';</pre>\n<pre class=\"graf graf--pre\">const Root = () =&gt; {\r\n  return (\r\n    &lt;h1&gt;Hello World&lt;/h1&gt;\r\n  )\r\n}</pre>\n<pre class=\"graf graf--pre\">ReactDOM.render(&lt;Root /&gt;, document.getElementById('app'));</pre>\n<p class=\"graf graf--p\">এখন এখানে <code class=\"markup--code markup--p-code\">index.js</code> আপনার এন্ট্রি পয়েন্ট, তারপর ভিতরে যতই Component, Package বা আর যা দিয়েই কাজ করেন না কেনো সবই এটার সাথে কোনো না কোনোভাবে অ্যাড থাকবে আর এভাবেই ওয়েবপ্যাক আপনার ফাইলগুলো বান্ডেল করে ফেলবে।</p>\n<h4 class=\"graf graf--h4\">ডেভেলপমেন্ট সার্ভার তৈরী</h4>\n<p class=\"graf graf--p\">এবার এ তো গেলো কিভাবে ওয়েবপ্যাক কনফিগার করতে হবে। কিন্তু আমাদের ডেভেলপমেন্ট এর সময় লাইভ ডেভেলপমেন্ট সার্ভারেরও প্রয়োজন হয়। তাই এবার আমরা সেটা কিভাবে বানাবো সেটাই দেখবো। একবার ওয়েবপ্যাক ঠিকমতো কনফিগার হয়ে গেলে <code class=\"markup--code markup--p-code\">webpack-dev-server</code> ইউজ করে খুব সহজেই ডেভেলপমেন্ট সার্ভার বানিয়ে ফেল যায়।</p>\n<p class=\"graf graf--p\">আপনার <code class=\"markup--code markup--p-code\">package.json</code> ফাইলটা ওপেন করুন আর নতুন একটা স্ক্রিপ্ট অ্যাড করুন ডেভেলপমেন্ট এর জন্যেঃ</p>\n<pre class=\"graf graf--pre\">\"scripts\": {\r\n  \"start\": \"webpack-dev-server --mode development\",\r\n  ...\r\n},</pre>\n<p class=\"graf graf--p\">এখন <code class=\"markup--code markup--p-code\">npm start</code> দিলেই দেখবেন আপনার সার্ভার রানিং আছে, বাই ডিফল্ট লোকালহোস্টের পোর্ট <code class=\"markup--code markup--p-code\">8080</code> হবে। কিন্তু আমরা সবকিছু নিজের হাতে করতেছি তাই আমরা পুরো কন্ট্রোল নিয়ে নিবো। যেখানে মন চায় সেখানেই রান করাবো, যেভাবে মন চায় সেভাবেই রান করাবো। তাই কিছু ফ্ল্যাগ ইউজ করবো। পোর্ট মেনশন করার জন্যে <code class=\"markup--code markup--p-code\">--port</code> , ফাইলে এডিট করার সাথে সাথেই ব্রাউজারে অটো রিলোডের জন্যে <code class=\"markup--code markup--p-code\">--hot</code> এবং সবশেষে চাচ্ছি <code class=\"markup--code markup--p-code\">npm start</code> দেওয়ার সাথে সাথেই লাইভ আমাদের বাই ডিফল্ট ব্রাউজারে যাতে ওপেন হয়ে যায়, সেজন্য <code class=\"markup--code markup--p-code\">--open</code> ফ্ল্যাগ ইউজ করবো। সবশেষে package.json এর ভিতরে স্ক্রিপ্টগুলো এরকম দেখা যাবেঃ</p>\n<pre class=\"graf graf--pre\">\"scripts\": {\r\n  \"start\": \"webpack-dev-server --mode development --hot --open --port 4004\",\r\n  \"build\": \"webpack --mode production\"\r\n},</pre>\n<p class=\"graf graf--p\">এখানে পোর্ট আমি 4004 দিয়েছি, আপনি যেখানেই দিবেন, যতক্ষন পর্যন্ত ঐ পোর্ট আর কোথাও ইউজ না হচ্ছে। আপনি সেখানেই দিয়ে কাজ করতে পারবেন।</p>\n<p class=\"graf graf--p\">ব্যাসিকালি আমাদের কাজ এখানেই শেষ। আপনি এখন একদম আপনার নিজের হাতে বানানো প্যাক পেয়ে ফেললেন। এখন যতো ইচ্ছা নিজের মন মতো কাস্টমাইজ করে, নিজের প্রয়োজনমতো যা ইচ্ছা করতে পারবেন। কিন্ত আমি আরেকটা জিনিস দেখবো এখানে যেটা আসলে ইউজফুল। আপনি এখন CSS ইউজ করতে পারবেন না। এজন্যেও আরো কিছু মডিউল ইউজ করতে হবে আপনাকে।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<h4 class=\"graf graf--h4\">CSS সাপোর্টেড বান্ডেলঃ</h4>\n<p class=\"graf graf--p\">CSS সাপোর্ট করানোর জন্যে আপনাকে আরো দুইটা প্যাকেজ ডেভ ডিপেন্ডেসি হিসাবে নামিয়ে ইউজ করতে হবে ওয়েবপ্যাকের মডিউল হিসাবে।</p>\n<pre class=\"graf graf--pre\">npm install --save-dev style-loader css-loader</pre>\n<p class=\"graf graf--p\">এখন এই মডিউলগুলো webpack.config.js এর ভিতরে কনফিগার করে দিতে হবেঃ</p>\n<pre class=\"graf graf--pre\">{\r\n  test: /\\.css$/,\r\n  use: [ 'style-loader', 'css-loader' ]\r\n}</pre>\n<p class=\"graf graf--p\">এটা অ্যাড করার পর webpack.config.js অনেকটা এরকম দেখাবেঃ</p>\n<pre class=\"graf graf--pre\">const HtmlWebpackPlugin = require('html-webpack-plugin');</pre>\n<pre class=\"graf graf--pre\">module.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: __dirname + '/dist',\r\n    filename: 'bundle.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader'\r\n        }\r\n      }, {\r\n        test: /\\.css$/,\r\n        use: [ 'style-loader', 'css-loader' ]\r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      template: './public/index.html'\r\n    })\r\n  ]\r\n}</pre>\n<p class=\"graf graf--p\">এখন আপনি <code class=\"markup--code markup--p-code\">import ‘./index.css’</code> এভাবে স্টাইল ইম্পোর্ট করতে পারবেন রিঅ্যাক্টের ভিতরে। এগুলো বান্ডেল হয়ে যাবে সবকিছুর সাথে একসাথে।</p>\n<h4 class=\"graf graf--h4\">ইমেজ সাপোর্ট অ্যাড করাঃ</h4>\n<p class=\"graf graf--p\">সেইমভাবে এজন্যেই <code class=\"markup--code markup--p-code\">file-loader</code> নামে একটা প্যাকেজ ইউজ করতে হবে এবং এটার জন্যেও ওয়েবপ্যাকে কনফিগার করে নিতে হবে এরকমঃ</p>\n<pre class=\"graf graf--pre\">module: {\r\n  rules: [\r\n    ..., \r\n    ..., {\r\n      test: /\\.(gif|png|jpe?g|svg)$/i,\r\n      use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[path][name].[ext]'\r\n            }\r\n          }\r\n      ]\r\n    }\r\n  ]\r\n},</pre>\n<p class=\"graf graf--p\">এখন চাইলেই রিঅ্যাক্ট এ আপনি ইমেজ এভাবে, <code class=\"markup--code markup--p-code\">import favicon from ‘./favicon.png’</code> ইম্পোর্ট করে ইউজ করতে পারবেন <code class=\"markup--code markup--p-code\">&lt;img src={favicon} /&gt;</code> । <code class=\"markup--code markup--p-code\">dist</code> এর ভিতরে একটা <code class=\"markup--code markup--p-code\">src</code> নামে ডিরেক্টরি তৈরী হয়ে ইমেজগুলো স্টোর হবে। আপনি চাইল <a class=\"markup--anchor markup--p-anchor\" href=\"https://www.npmjs.com/package/file-loader\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.npmjs.com/package/file-loader\">ডকুমেন্টেশন</a> থেকে আরো মডিফাই, নিজের মনমতো করে করতে পারবেন।</p>\n<p class=\"graf graf--p\">আজকে এই পর্যন্তই। আশা করি কিভাবে কি হচ্ছে সবকিছু সম্পর্কে অন্তত আমার লেখা দেখে ধারণা করতে পারবেন। আর অবশ্যই যে প্যাকেজগুলোর কথা এখানে বলা হয়েছে সেগুলোর ডকুমেন্টেশন দেখে দেখে আরো অনেকভাবে মডিফাই করে নিজের মতো করে বানিয়ে নিতে পারবেন।</p>\n<p class=\"graf graf--p\">আমার এই কোর্সে বানানো প্যাক/ফাইলগুলো গিটহাবে পাবেন। এটার ব্রাঞ্চ এ আপনি স্পেসেফিক ভার্শনগুলোও পাবেন। চাইলে গিটহাব থেকে দেখে নিতে পারেন। এই ভার্শনটা একটু মডিফাই করা হয়েছে যাতে কেউ চাইলে এটা স্টার্টার প্যাক হিসাবে ইউজ করতে পারে।</p>\n<div class=\"graf graf--mixtapeEmbed\"><a class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/zonayedpca/react-starter-pack\" href=\"https://github.com/zonayedpca/react-starter-pack\" data-href=\"https://github.com/zonayedpca/react-starter-pack\"><strong class=\"markup--strong markup--mixtapeEmbed-strong\">zonayedpca/react-starter-pack</strong><br />\n<em class=\"markup--em markup--mixtapeEmbed-em\">Contribute to react-starter-pack development by creating an account on GitHub.</em>github.com</a></div>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d80d7a7a89e5-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d80d7a7a89e5-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>আমরা রিঅ্যাক্ট এ অ্যাপ্লিকেশন ডেভেলপমেন্ট করার আগে সাধারণত create-react-app CLI দিয়ে প্রথমের রিঅ্যাক্ট এর স্টার্টার প্যাক বানিয়ে ফেলি। অথবা অলরেডি এরকম বানানো আছে এমন প্যাক নামিয়ে সেটার উপর কাজ করা শুরু করি। বিগিনার লেভেল এর জন্যে এই পদ্ধতিটাই সবচেয়ে বেস্ট, কারণ এই প্যাক এর এনভারোমেন্ট সেটাপ করতে করতেই অনেকে ডিমোটিভেট হয়ে আসল রিঅ্যাক্ট শিখাই বাদ [&hellip;]</p>\n","protected":false},"author":1,"featured_media":275,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,13,60,130,28],"tags":[84,94,108,166,96,92,86],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/273"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=273"}],"version-history":[{"count":1,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/273/revisions"}],"predecessor-version":[{"id":276,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/273/revisions/276"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/275"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=273"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=273"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=273"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}