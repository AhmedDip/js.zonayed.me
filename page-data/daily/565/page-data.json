{"componentChunkName":"component---src-templates-post-page-js","path":"/daily/565","webpackCompilationHash":"e241c95965eeb9bd39d1","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":565,"date":"2018-08-27T12:43:25","date_gmt":"2018-08-27T12:43:25","guid":{"rendered":"https://with.zonayed.me/?p=565"},"modified":"2018-08-27T12:43:25","modified_gmt":"2018-08-27T12:43:25","slug":"%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-5","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%a8%e0%a6%bf%e0%a6%a4%e0%a7%8d%e0%a6%af%e0%a6%a6%e0%a6%bf%e0%a6%a8%e0%a7%87%e0%a6%b0-%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa-5/","title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-divider\"></div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">আমরা জাভাস্ক্রিপ্ট এ কখনো কোনো অবজেক্ট থেকে কোনো প্রপার্টি অ্যাক্সেস করতে গেলে দুই উপারে সেটা করতে পারিঃ</p>\n<ul class=\"postList\">\n<li class=\"graf graf--li\">ডট নোটেশান (Dot Notation)</li>\n<li class=\"graf graf--li\">ব্র্যাকেটস নোটেশান (Brackets Notation)</li>\n</ul>\n<p class=\"graf graf--p\">প্রথমেই আমরা একটা উদাহরণ দেখে নেই, তাহলে আসলে এদেরকে আমরা ঠিক কোথায় ইউজ করি সেটা বুঝে আসবে। ধরি আমাদের একটা অবজেক্ট আছেঃ</p>\n<pre class=\"graf graf--pre\">const obj = {\r\n   property: 'value'\r\n}</pre>\n<p class=\"graf graf--p\">এখন এই অবজেক্ট থেকে যদি আমরা <code class=\"markup--code markup--p-code\">property</code> টা অ্যাক্সেস করতে চাই, ডট নোটেশন ইউজ করলেঃ</p>\n<pre class=\"graf graf--pre\">obj.property</pre>\n<p class=\"graf graf--p\">আর যদি ব্র্যাকেটস নোটেশন ইউজ করিঃ</p>\n<pre class=\"graf graf--pre\">obj['property']</pre>\n<p class=\"graf graf--p\">তাহলে এদেরকে এখন দুইভাবেই অ্যাক্সেস করে প্রিন্ট করলেঃ</p>\n<pre class=\"graf graf--pre\">console.log(obj.property);\r\nconsole.log(obj['property']);</pre>\n<p class=\"graf graf--p\">দুইটা সেইমভাবেই আউটপুট দিবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*_kkgeIwjofsJ6GeI74ZsNg.png?resize=266%2C85&#038;ssl=1\" data-image-id=\"1*_kkgeIwjofsJ6GeI74ZsNg.png\" data-width=\"266\" data-height=\"85\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">তো এখন দুইটা যদি একই আউটপুট দেয়, তাহলে এই দুইটার দরকারটা কি? যেকোনো একটা রাখলেই তো হয়, নাকি?</p>\n<p class=\"graf graf--p\">কিন্তু না! কারণ এখানে ডট নোটেশন বেশীরভাগ সময়েই ব্যবহার করা হলেও কোনো কোনো পরিস্থিতিতে ব্র্যাকেটস নোটেশনও কাজে লাগে। আজকে আমি আমার লেখায় ঠিক সেটাই দেখাবো। কখন ডট নোটেশন আর কখন ব্র্যাকেটস নোটেশন ইউজ করবো আমরা। তবে একটা কথা, যেখানে ব্র্যাকেটস নোটেশনে কাজ হয়ে যায় সেখানে ব্যাকেটস নোটেশনই ইউজ করা কনভেনশন(ডেভেলপারদের মধ্যে প্রিয়)।</p>\n<h4 class=\"graf graf--h4\">ডট নোটেশন(Dot Notation):</h4>\n<p class=\"graf graf--p\">ধরি আমাদের একটা অবজেক্ট আছেঃ</p>\n<pre class=\"graf graf--pre\">const person = {\r\n   name: 'Zonayed Ahmed',\r\n   age: 21,\r\n   job: 'Student'\r\n}</pre>\n<p class=\"graf graf--p\">এখন যদি আমরা এই <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট থেকে <code class=\"markup--code markup--p-code\">name</code> প্রপার্টিটা চাই তাহলে আমাদের ডট নোটশন ইউজ করে এভাবে এটাকে বের করতে হবেঃ</p>\n<pre class=\"graf graf--pre\">person.name</pre>\n<p class=\"graf graf--p\">এখন এখানে <code class=\"markup--code markup--p-code\">person</code> হচ্ছে আমাদের অবজেক্টটা, তারপর একটা ডট <code class=\"markup--code markup--p-code\">.</code> মানে এর ভিতরে , তারপরে <code class=\"markup--code markup--p-code\">name</code> হচ্ছে প্রপার্টির নাম। মোট কথা আমরা <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট এর ভিতরে <code class=\"markup--code markup--p-code\">name</code> নামে একটা প্রপার্টি অ্যাক্সেস করতে চাচ্ছি। আর তাই এটা প্রিন্ট করলেঃ</p>\n<pre class=\"graf graf--pre\">console.log(person.name);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/1000/1*UiL8DEvhaIKNTqPlxpd-Gg.png?resize=214%2C47&#038;ssl=1\" data-image-id=\"1*UiL8DEvhaIKNTqPlxpd-Gg.png\" data-width=\"214\" data-height=\"47\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">দেখবেন আপনার <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট এর <code class=\"markup--code markup--p-code\">name</code> প্রপার্টির ভ্যালুটা বের হয়ে আসবে। এখানে ভ্যালুটা হচ্ছে <code class=\"markup--code markup--p-code\">Zonayed Ahmed</code> । এখন ধরুন আপনাকে আপনার কোডের সরাসরি প্রপার্টির নাম দেওয়ার সুযোগ দেওয়া হলো না। বরং আপনার প্রপার্টির নাম একটা ভ্যারিয়েবলের ভিতরে আছে এরকমঃ</p>\n<pre class=\"graf graf--pre\">const personName = 'name';</pre>\n<p class=\"graf graf--p\">এখন আপনি এই ভ্যারিয়েবল ইউজ করে আপনার <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট থেকে <code class=\"markup--code markup--p-code\">name</code> প্রপার্টিটা বের করতে হবে। সোজাই তো ঠিক না? এরকম করলেই তো হবেঃ</p>\n<pre class=\"graf graf--pre\">person.personName</pre>\n<p class=\"graf graf--p\">আচ্ছা দেখি তাহলে প্রিন্ট করেঃ</p>\n<pre class=\"graf graf--pre\">console.log(person.personName);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*MpfcoxVjDENl5EjTmXxzmg.png?resize=263%2C47&#038;ssl=1\" data-image-id=\"1*MpfcoxVjDENl5EjTmXxzmg.png\" data-width=\"263\" data-height=\"47\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">রেজাল্ট <code class=\"markup--code markup--p-code\">undefined</code> দেখাচ্ছে! কিন্তু কেনো? হ্যাঁ এখানেই বুঝার ব্যাপার। আমরা যখন বলেছি আমরা <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট থেকে একটা প্রপার্টি অ্যাক্সেস করতে চাচ্ছি, তখন সেই প্রপার্টির নাম দিয়েছি <code class=\"markup--code markup--p-code\">personName</code> । যদিও আমাদের এই সেইম নামেই একটা ভ্যারিয়েবল আছে। কিন্তু এখানে ডট দেওয়ার জাভাস্ক্রিপ্ট আপনার <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট এর ভিতর থেকে <code class=\"markup--code markup--p-code\">personName</code> নামেই একটা প্রপার্টি খুঁজবে। কিন্তু আপনার অবজেক্ট এর ভিতরে তো এই নামে কোনো প্রপার্টিই নাই। আর তাই এটা <code class=\"markup--code markup--p-code\">undefined</code> দেখাচ্ছে।</p>\n<p class=\"graf graf--p\">কিন্তু তাইলে আমরা যে <code class=\"markup--code markup--p-code\">personName</code> নামে একটা ভ্যারিয়েবল নিলাম, আর সেই ভ্যারিয়েবলে প্রপার্টির নাম <code class=\"markup--code markup--p-code\">name</code> স্টোর করলাম, এখন <code class=\"markup--code markup--p-code\">personName</code> দিয়ে <code class=\"markup--code markup--p-code\">person</code> থেকে <code class=\"markup--code markup--p-code\">name</code> প্রপার্টি কিভাবে অ্যাক্সেস করবো? হ্যাঁ সেজন্যেই আমাদের এখন ব্র্যাকেটস নোটেশনের কাজ লাগবে।</p>\n<h4 class=\"graf graf--h4\">ব্র্যাকেটস নোটেশন(Brackets Notation):</h4>\n<p class=\"graf graf--p\">উপরের এরকম সিচুয়েশনে এখন আমরা একটা ভ্যারিয়েবল থেকে প্রপার্টির নাম নিয়ে যদি কোনো অবজেক্ট থেকে কোনো প্রপার্টি অ্যাক্সেস করতে চাই, তাহলে আমাদের এই ব্র্যাকেটস নোটেশনের সাহায্য নিতে হবেঃ</p>\n<pre class=\"graf graf--pre\">person[personName]</pre>\n<p class=\"graf graf--p\">এখন এটাকে প্রিন্ট করলেঃ</p>\n<pre class=\"graf graf--pre\">console.log(person[personName]);</pre>\n<p class=\"graf graf--p\">এটা একদম ঠিক আমরা যেভাবে চেয়েছি সেভাবেই প্রিন্ট করবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/1000/1*bA1BAsLAoEhtzSXofZrrnA.png?resize=277%2C49&#038;ssl=1\" data-image-id=\"1*bA1BAsLAoEhtzSXofZrrnA.png\" data-width=\"277\" data-height=\"49\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানেই আমাদের এই ব্র্যাকেটস নোটেশনের খেলা। ব্র্যাকেটস নোটেশনে এভাবে আপনি ভ্যারিয়েবল পাস করতে পারবেন। মূলত এখানে আপনি স্ট্রিং পাস করতে পারবেন। উপরের কাজটা এভাবেও করা যেতো ডট নোটেশনের বদলেঃ</p>\n<pre class=\"graf graf--pre\">console.log(person['name']);</pre>\n<p class=\"graf graf--p\">এটাও একইরকম আউটপুট দিবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*MyCq5N_CZBjKin9glgiU2w.png?resize=252%2C43&#038;ssl=1\" data-image-id=\"1*MyCq5N_CZBjKin9glgiU2w.png\" data-width=\"252\" data-height=\"43\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">যদিও এই সিচুয়েশনে ডট নোটেশনেই কাজ করে, তাই ডট নোটেশনই ইউজ করা উচিত। কারণ ডট নোটেশন দেখতেও সুন্দর, আর কোডও অনেকটা পরিষ্কার দেখা যায়।</p>\n<p class=\"graf graf--p\">এখন ব্র্যাকেটস নোটেশনের আরো কিছু কাজ দেখি। ধরি আমাদের আরেকটা অবজেক্ট আছেঃ</p>\n<pre class=\"graf graf--pre\">const anyObj = {\r\n   Student: 'A property name to match with previous one'\r\n}</pre>\n<p class=\"graf graf--p\">এখানে <code class=\"markup--code markup--p-code\">anyObj</code> এর প্রপার্টির নামটা ঠিক এভাবে দিয়েছি কারণ আগের আমাদের <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট এ একটা প্রপার্টির ভ্যালু <code class=\"markup--code markup--p-code\">Student</code> আমরা ঐ ভ্যালুটা ইউজ করে এখানের এই <code class=\"markup--code markup--p-code\">Student</code> প্রপার্টিটাকে অ্যাক্সেস করতে পারি কিনা দেখিঃ</p>\n<pre class=\"graf graf--pre\">anyObj[person.job]</pre>\n<p class=\"graf graf--p\">এখানে আমরা <code class=\"markup--code markup--p-code\">anyObj</code> থেকে ব্র্যাকেটস নোটেশন ইউজ করে একটা প্রপার্টি অ্যাক্সেস করতে চাচ্ছি। এখন সেই প্রপার্টিটা কি? সেটা হচ্ছে <code class=\"markup--code markup--p-code\">person.job</code> । এখন তাহলে দেখতে হবে <code class=\"markup--code markup--p-code\">person.job</code> এর ভ্যালু কি। <code class=\"markup--code markup--p-code\">person.job</code> এর ভ্যালু হচ্ছে <code class=\"markup--code markup--p-code\">Student</code> । তার মানে আমরা আসলে <code class=\"markup--code markup--p-code\">anyObj</code> এর <code class=\"markup--code markup--p-code\">Student</code> নামে কোনো প্রপার্টির ভ্যালু খুঁজছিঃ</p>\n<pre class=\"graf graf--pre\">console.log(anyObj[person.job]);</pre>\n<p class=\"graf graf--p\">এবং ঠিক যেভাবে বলা সেভাবেই কাজঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*lS3W0Fh6p0oyFSsH87hzdA.png?resize=347%2C53&#038;ssl=1\" data-image-id=\"1*lS3W0Fh6p0oyFSsH87hzdA.png\" data-width=\"347\" data-height=\"53\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন ডট নোটেশনের কাজ তো জানলামই। বরং আমরা বেশীরভাবে ক্ষেত্রেই ডট নোটেশন নিয়েই কাজ করবো। কিন্তু ব্র্যাকেটস নোটেশন কখন ইউজ করবো? হ্যাঁ এখন <code class=\"markup--code markup--p-code\">for</code> লুপ ইউজ করে অবজেক্ট থেকে যদি সব প্রপার্টির ভ্যালু অ্যাক্সেস করতে চাই তাহলে এই ব্র্যাকেটস নোটেশন কাজে লাগে। ধরি আমরা উপরের <code class=\"markup--code markup--p-code\">person</code> অবজেক্ট এর সবগুলো প্রপার্টির ভ্যালুগুলো প্রিন্ট করতে চাচ্ছিঃ</p>\n<pre class=\"graf graf--pre\">for(aVal in person) {\r\n   console.log(`aVal is here: ${aVal}`);\r\n}</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/1000/1*m2y3C_oCR3a_PMCzasgq_g.png?resize=330%2C124&#038;ssl=1\" data-image-id=\"1*m2y3C_oCR3a_PMCzasgq_g.png\" data-width=\"330\" data-height=\"124\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">দেখেন এই লুপ ইউজ করে আমরা প্রপার্টি কী গুলোর নাম পাচ্ছি। কিন্তু তাহলে ভ্যালুগুলো কিভাবে পেতে পারি? হ্যাঁ এই কীগুলোর নামই ব্র্যাকেটস নোটেশন ইউজ করে ভ্যালুগুলোও পেতে পারি এভাবেঃ</p>\n<pre class=\"graf graf--pre\">for(aVal in person) {\r\n   console.log(`Value: ${person[aVal]}`);\r\n}</pre>\n<p class=\"graf graf--p\">একদম পার্ফেক্টঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*Uwbj00YX9CL3apYMdLdV-Q.png?resize=333%2C116&#038;ssl=1\" data-image-id=\"1*Uwbj00YX9CL3apYMdLdV-Q.png\" data-width=\"333\" data-height=\"116\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এটা যদি আমরা ডট নোটেশন দিয়ে ট্রাই করি তাহলে কাজ করবে নাঃ</p>\n<pre class=\"graf graf--pre\">for(aVal in person) {\r\n   console.log(`Value: ${person.aVal}`);\r\n}</pre>\n<p class=\"graf graf--p\">এখানে দেখবেন সেই <code class=\"markup--code markup--p-code\">undefined</code> ই।</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/1000/1*IOMFndN60e4ZwZJpNFVx2w.png?resize=330%2C78&#038;ssl=1\" data-image-id=\"1*IOMFndN60e4ZwZJpNFVx2w.png\" data-width=\"330\" data-height=\"78\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কেনো এরকম প্রিন্ট করলো সেটা হয়তো বুঝে ফেলেছেন এতোক্ষনে। আর তাই এক্ষেত্রে ডট নোটেশনের পরবর্তিতে ব্র্যাকেটস নোটেশন কাজ করবে।</p>\n<p class=\"graf graf--p\">শুধুমাত্র <code class=\"markup--code markup--p-code\">for</code> লুপের ক্ষেত্রেই না, আরো অনেক কাজেও এটা লাগতে পারে। তাই জেনে রাখা ভালো। আশা করি এরকম পরিস্থিতিতে পড়লে এটা আপনার কাজে আসবে।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d7fc5469b444-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d7fc5469b444-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>আমরা জাভাস্ক্রিপ্ট এ কখনো কোনো অবজেক্ট থেকে কোনো প্রপার্টি অ্যাক্সেস করতে গেলে দুই উপারে সেটা করতে পারিঃ ডট নোটেশান (Dot Notation) ব্র্যাকেটস নোটেশান (Brackets Notation) প্রথমেই আমরা একটা উদাহরণ দেখে নেই, তাহলে আসলে এদেরকে আমরা ঠিক কোথায় ইউজ করি সেটা বুঝে আসবে। ধরি আমাদের একটা অবজেক্ট আছেঃ const obj = { property: &#8216;value&#8217; } এখন [&hellip;]</p>\n","protected":false},"author":1,"featured_media":557,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,94,108,168,78,86,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/565"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=565"}],"version-history":[{"count":1,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/565/revisions"}],"predecessor-version":[{"id":566,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/565/revisions/566"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/557"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=565"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=565"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=565"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}