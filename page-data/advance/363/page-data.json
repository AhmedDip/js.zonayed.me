{"componentChunkName":"component---src-templates-post-page-js","path":"/advance/363","webpackCompilationHash":"4773ba0761f985d5e81e","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":363,"date":"2018-07-08T14:37:39","date_gmt":"2018-07-08T14:37:39","guid":{"rendered":"https://with.zonayed.me/?p=363"},"modified":"2018-08-15T12:17:48","modified_gmt":"2018-08-15T12:17:48","slug":"%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%85%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%a1%e0%a6%ad%e0%a6%be%e0%a6%a8-3","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%85%e0%a7%8d%e0%a6%af%e0%a6%be%e0%a6%a1%e0%a6%ad%e0%a6%be%e0%a6%a8-3/","title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-divider\"></div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">জাভাস্ক্রিপ্ট আসলে অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজ(Object Oriented Programming Language)। যদিও অন্যান্য OOP(Object Oriented Programming) ল্যাংগুয়েজগুলো থেকে জাভাস্ক্রিপ্ট এ অনেক কিছু একটু অন্যরকম, কিন্তু তারপরেও এটা অবজেক্ট ওরিয়েন্টেটেড ল্যাংগুয়েজের মধ্যেই পড়ে। নতুন ভার্শনগুলোয় সেগুলো আপডেটও করা হচ্ছে আস্তে আস্তে। আর তাই আজকে এই পর্বে আমরা সেই অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট নিয়ে আলোচনা করবো।</p>\n<p class=\"graf graf--p\">জাভাস্ক্রিপ্ট এ অলমোস্ট সবকিছুই অবজেক্ট। কিছু ছাড়া, যেগুলোকে প্রিমিটিভ ডাটা টাইপ বলে।</p>\n<p class=\"graf graf--p\">জাভাস্ক্রিপ্ট এ সাধারণত দুই ধরনের ডাটা টাইপ আছেঃ</p>\n<p class=\"graf graf--p\">১। প্রিমিটিভ ডাটা টাইপ(Primitive Data Type)</p>\n<p class=\"graf graf--p\">২। অবজেক্ট</p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">১। প্রিমিটিভ ডাটা টাইপ(Primitive Data Type)ঃ </strong>জাভাস্ক্রিপ্ট এ প্রিমিটিভ ডাটা টাইপ খুবই অল্প। যেমন নাম্বার(Number), স্ট্রিং(String), বুলিয়ান(Boolean), আন্ডিফাইন্ড(<code class=\"markup--code markup--p-code\">undefined</code>), নাল(<code class=\"markup--code markup--p-code\">null</code>) এগুলো হচ্ছে প্রিমিটিভ ডাটা টাইপ।</p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">২। অবজেক্টঃ</strong> উপরে উল্লেখিত প্রিমিটিভ ডাটা টাইপগুলো ছাড়া বাকি সবই জাভাস্ক্রিপ্ট এ অবজেক্ট। যেমনঃ অ্যারে, ফাংশন, অবজেক্ট, ডেট, নাম্বার/স্ট্রিং/বুলিয়ান এর র‍্যাপার(Wrapper) ফাংশন সবই অবজেক্ট।</p>\n<p class=\"graf graf--p\">এখন প্রিমিটিভ ডাটা টাইপ আর অবজেক্ট এর মধ্যে প্রধান ডিফারেন্স হচ্ছে এদের ভ্যালু স্টোর করার সিস্টেমে। যেখানে প্রিমিটিভ ডাটা টাইপে ভ্যালু নিজের কাছেই স্টোর করে, অন্যদিকে অবজেক্ট সাধারণত সরাসরি ডাটা স্টোর করে না, বরং ঐ ডাটাটা অন্যকোথাও থাকে, অবজেক্ট এ জাস্ট ঐটার রেফারেন্স থাকে।</p>\n<p class=\"graf graf--p\">আর যখন আমরা প্রিমিটিভ টাইপের কোনো ডাটা প্যারামিটার/আর্গুমেন্ট হিসাবে কোনো ফাংশনে পাস করি, ঐটা সবসময় ঐ ডাটার কপি পাঠায়, সরাসরি ডাটা পাঠায় না। একটা কমন উদাহরণ দিলে হয়তো বুঝতে পারবেন। নিচের এই প্রোগ্রামটা দেখিঃ</p>\n<pre class=\"graf graf--pre\">var a = 10, b = 20;</pre>\n<pre class=\"graf graf--pre\">console.log('Before swap: Value of a: ' + a + ' and value of b: ' + b);</pre>\n<pre class=\"graf graf--pre\">function swap(a, b) {\r\n   console.log('Before Swap inside function: Value of a: ' + a + ' and value of b: ' + b);\r\n   var temp = a;\r\n   a = b;\r\n   b = temp;\r\n   console.log('After Swap inside function: Value of a: ' + a + ' and value of b: ' + b);\r\n}</pre>\n<pre class=\"graf graf--pre\">swap(a, b);\r\nconsole.log('After swap: Value of a: ' + a + ' and value of b: ' + b);</pre>\n<p class=\"graf graf--p\">এ প্রোগ্রামটা রান করালে দেখবেন ফাংশনের ভিতরে <code class=\"markup--code markup--p-code\">a</code> এবং <code class=\"markup--code markup--p-code\">b</code> ঠিকি সোয়াপ হয়েছে কিন্তু বাইরের <code class=\"markup--code markup--p-code\">a</code> আর <code class=\"markup--code markup--p-code\">b</code> তে কোনো ইফেক্ট পড়ে নাইঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*_P3eJBPVXIq0AiPq_hDqlA.png?resize=651%2C256&#038;ssl=1\" data-image-id=\"1*_P3eJBPVXIq0AiPq_hDqlA.png\" data-width=\"651\" data-height=\"256\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\"> কারণ এখানে আমরা প্রিমিটিভ টাইপের ডাটা পাঠিয়েছি আর্গুমেন্টে, এটা নিজের ডাটা সেন্ড না করে সেটার কপি সেন্ড করছে, আর তাই এটার নিজের উপর কোনো ইফেক্ট পড়ে নাই।</p>\n<p class=\"graf graf--p\">কিন্তু সেইম কাজ যদি আমরা অবজেক্ট(রেফারেন্স) ডাটা টাইপ দিয়ে করিঃ</p>\n<pre class=\"graf graf--pre\">var obj = {\r\n   a: 10,\r\n   b: 20\r\n};</pre>\n<pre class=\"graf graf--pre\">console.log('Before swap: Value of a: ' + obj.a + ' and value of b: ' + obj.b);</pre>\n<pre class=\"graf graf--pre\">function swap(x) {\r\n   console.log('Before Swap inside function: Value of a: ' + x.a + ' and value of b: ' + x.b);\r\n   var temp = x.a;\r\n   x.a = x.b;\r\n   x.b = temp;\r\n   console.log('After Swap inside function: Value of a: ' + x.a + ' and value of b: ' + x.b);\r\n}</pre>\n<pre class=\"graf graf--pre\">swap(obj);\r\nconsole.log('After swap: Value of a: ' + obj.a + ' and value of b: ' + obj.b);</pre>\n<p class=\"graf graf--p\">এখন দেখবেন আপনার ডাটা ফাংশনের ভিতরেও চেঞ্জ হয়েছে আবার সেটার ইফেক্ট বাইরেও পড়েছে। আপনার আসল <code class=\"markup--code markup--p-code\">obj</code> এর ডাটাও চেঞ্জ হয়ে গেছে। এটার কারণ একটাই, এখানে <code class=\"markup--code markup--p-code\">obj</code> অবজেক্ট টাইপ ডাটা, যেটা নিজে ডাটা হোল্ড করে না, বরং সেই ডাটার একটা রেফারেন্স হোল্ড করে যে এই ডাটাটা অমুক জায়গায় আছে। আপনি যখন একে আর্গুমেন্টে পাস করলেন, তো আপনি সেই রেফারেন্সটাই পাস করলেন। এখন ফাংশনের ভিতরে যখন ডাটাগুলো সোয়াপ করলেন, সেটা সেই রেফারেন্স অনুযায়ী গিয়ে আসল ডাটাকেই সোয়াপ করে দিছে। এজন্যে ফাংশন শেষ হওয়ার পরেও, ফাংশন থেকে কিছু রিটার্ন না করা সত্বেও আপনার ডাটা দেখবেন চেঞ্জ হয়ে গেছেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*qPlIQNcyUQvD9AunWYaO3Q.png?resize=655%2C295&#038;ssl=1\" data-image-id=\"1*qPlIQNcyUQvD9AunWYaO3Q.png\" data-width=\"655\" data-height=\"295\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">আশা করি এই দুই টাইপের ডাটা সম্পর্কে ধারণা হয়েছে। আরো জানতে চাইলে আপনি মাদার অব অল ল্যাংগুয়েজ C শিখতে পারেন।</p>\n<p class=\"graf graf--p\">এখন অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজগুলোতে সবকিছুই অবজেক্ট। এখন অবজেক্টটা কি? হ্যাঁ অবজেক্ট হচ্ছেন আপনি, আপনি পুরোটা একটা অবজেক্ট। আপনার কিছু প্রপার্টিজ(properties) আছে যেমন আপনার গায়ের রঙ, আপনার উচ্চতা, আপনি কোন দেশে থাকেন, আপনার নাম, আপনার চাকরী এগুলো সবই আপনার সম্পর্কে তথ্য দেয়। আপনাকে কেউ যদি জিজ্ঞাসা করে আপনার নাম কি তাহলে আপনি আপনার নাম বলবেন। ঠিক তেমনি জাভাস্ক্রিপ্ট এর অবজেক্ট এরও এরকম প্রপার্টিজ আছে। আর আমাদের অনেক ভাগ্য ভালো যে জাভাস্ক্রিপ্ট এ আসলে অবজেক্ট এর এইসব প্রপার্টিজ ব্রাউজারের কন্সোলে ওপেন করে দেখা যায়। কার কি প্রপার্টি আছে সবই দেখতে পারবেন ব্রাউজারের কন্সোল থেকে। যাই হউক ধরি আমাদের একটা অ্যারে আছেঃ</p>\n<pre class=\"graf graf--pre\">var arr = [0, 1, 3, 4, 8];</pre>\n<p class=\"graf graf--p\">এখন এই অ্যারেতে কয়টা ইলিমেন্ট আছে সেটা জানতে আপনার নিজের গণনা করার দরকার নাই, আপনি চাইলে এই অ্যারেকেও জিজ্ঞাসা করতে পারেন। কারণ অ্যারেরও একটা প্রপার্টি আছে যে জানে তার ইলিমেন্ট কয়টাঃ</p>\n<pre class=\"graf graf--pre\">arr.length;</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*XNYZg4jhvDxSyR6VEQOxUA.png?resize=211%2C85&#038;ssl=1\" data-image-id=\"1*XNYZg4jhvDxSyR6VEQOxUA.png\" data-width=\"211\" data-height=\"85\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এভাবেই অবজেক্টগুলোতে তাদের নিজস্ব প্রপার্টি থাকে। এখন আপনার কাছে একটা মোবাইল ফোনও আছে(অনেকের কাছে নাও থাকতে পারে তবে ধরে নেই আছে)। এখন এই মোবাইল ইউজ করে আপনি কিছু অপারেশন করতে পারেন, যেমন দূরের কারো সাথে যোগাযোগ করা বা ইন্টারনেট ব্রাউজ করা। এমন অবজেক্টগুলোরও কিছু ম্যাশিন থাকে, যেগুলোকে ওদের মেথড বলে। মেথডও এক রকমের ফাংশন। যেমন আমরা যদি উক্ত অ্যারেতে আরেকটা আইটেম ঢুকাতে চাই তাহলে সেই অ্যারের একটা মেথড ইউজ করতে পারিঃ</p>\n<pre class=\"graf graf--pre\">arr.push(100);</pre>\n<p class=\"graf graf--p\">এখন দেখেন অ্যারেতে সেটা অ্যাড হয়ে গেছেঃ</p>\n<pre class=\"graf graf--pre\">arr</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*AEGfX3tG7qJHWBsiDVimZA.png?resize=210%2C91&#038;ssl=1\" data-image-id=\"1*AEGfX3tG7qJHWBsiDVimZA.png\" data-width=\"210\" data-height=\"91\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এই <code class=\"markup--code markup--p-code\">push</code> মেথড আসলো কোথা থেকে? হ্যাঁ সেটা আপনি এই অবজেক্ট অ্যারেটা ওপেন করে দেখতে পারেনঃ</p>\n<pre class=\"graf graf--pre\">console.dir(arr);</pre>\n<p class=\"graf graf--p\">এটা রান করলে ব্রাউজারের কন্সোলে দেখবেন আপনার <code class=\"markup--code markup--p-code\">Array</code> অবজেক্ট টা আসছে। এখন পাশের ত্রিভুজাকৃতির বাটনে ক্লিক করলে সেই অবজেক্ট টা খুলে যাবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*TT-8pzqXhDoeMrauLPu9Ew.png?resize=203%2C193&#038;ssl=1\" data-image-id=\"1*TT-8pzqXhDoeMrauLPu9Ew.png\" data-width=\"203\" data-height=\"193\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে আমরা <code class=\"markup--code markup--p-code\">length</code> প্রপার্টি দেখতে পাচ্ছি, যেটা এই অ্যারে অবজেক্ট এর একটা প্রপার্টি সেটা কনফার্ম হওয়া গেলো। কিন্তু <code class=\"markup--code markup--p-code\">push</code> মেথডটা কোথায়? হ্যাঁ সেজন্যেই নিচে দেখেন <code class=\"markup--code markup--p-code\">__proto__</code> নামে আরেকটা জিনিস আছে। ঐটাও ওপেন করতে পারবেন। ওপেন করলে অনেকগুলো প্রপার্টি আর মেথড দেখবেন। এগুলো সবই অ্যারের মেথড। এখানে খুজলে আপনার <code class=\"markup--code markup--p-code\">push</code> মেথডও পাবেনঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*8qbLgrYlLb-tCH1TtJGThQ.png?resize=368%2C200&#038;ssl=1\" data-image-id=\"1*8qbLgrYlLb-tCH1TtJGThQ.png\" data-width=\"368\" data-height=\"200\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">তো এখানেই অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজগুলোর আসল খেলা। এভাবেই অবজেক্টগুলো একটা আরেকটার সাথে মিলিতভাবে কমপ্লেক্স একটা স্ট্রাকচার তৈরী করে আমাদের কাজের সুবিধার্থে অনেকগুলো প্রপার্টি আর মেথড একসাথে করে ফেলে। এখানে যেমনটা দেখলেম <code class=\"markup--code markup--p-code\">length</code> আর <code class=\"markup--code markup--p-code\">push</code> ।</p>\n<p class=\"graf graf--p\">এভাবেই প্রত্যেকটা জাভাস্ক্রিপ্ট অবজেক্ট এর প্রোটোটাইপ প্রপার্টি(Prototype property) থাকে যার জন্যে এরকম প্রপার্টি বা মেথড ধার(Inherit) করে আনা যায়। আর এভাবেই জাভাস্ক্রিপ্ট বাই ডিফল্ট প্রোটোটাইপ প্রপার্টি(Prototype property) তে মেথড বা প্রপার্টিগুলো রাখে আমাদের পরবর্তিতে সেই অবজেক্ট এর সাথে ইউজ করার জন্যে। আমরা চাইলে নিজেওরাও কাস্টমভাবে সেই প্রোটোটাইপ প্রপার্টি(Prototype property) তে মেথড বা প্রপার্টি রাখতে পারবো। তবে সেটা আমি পরে কোনো পর্বে দেখাবো। আজকে জাস্ট মেইন আইডিয়াটা দিয়ে রাখলাম।</p>\n<h4 class=\"graf graf--h4\"><strong class=\"markup--strong markup--h4-strong\">প্রোটোটাইপ চেইন(Prototype Chain):</strong></h4>\n<p class=\"graf graf--p\">জাভাস্ক্রিপ্ট অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাঙ্গুয়েজ হলেও মূলত এটা প্রোটোটাইপ বেসড। অন্যান্য মেজর ল্যাঙ্গুয়েজের অবজেক্ট মডেল আর জাভাস্ক্রিপ্ট এর অবজেক্ট মডেল এক না। জাভাস্ক্রিপ্ট এর সব অবজেক্টেই প্রোটোটাইপ <code class=\"markup--code markup--p-code\">__proto__</code> অবজেক্ট পাবেনঃ</p>\n<pre class=\"graf graf--pre\">console.dir({});</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/880/1*H_N-TWOZ2GEUjp6B64gKCw.png?resize=179%2C57&#038;ssl=1\" data-image-id=\"1*H_N-TWOZ2GEUjp6B64gKCw.png\" data-width=\"179\" data-height=\"57\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এই <code class=\"markup--code markup--p-code\">__proto__</code> টাকে আসলে ডান্ডার প্রোটো (dunder proto) বলে। সব অবজেক্টেই পাবেন এটাঃ</p>\n<pre class=\"graf graf--pre\">var oneArr = [1, 2, 3, 4, 5];\r\nconsole.dir(oneArr);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/880/1*c0ksTeuQ6DqQtoPeTvnl2Q.png?resize=232%2C172&#038;ssl=1\" data-image-id=\"1*c0ksTeuQ6DqQtoPeTvnl2Q.png\" data-width=\"232\" data-height=\"172\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এভাবে যখন আমরা আমাদের অ্যারের ভিতরে প্রথম ওপেন করার পর শুধুমাত্র ইলিমেন্ট আর <code class=\"markup--code markup--p-code\">length</code> প্রপার্টি টা দেখলেম শুধুমাত্র, বাকিগুলো বা <code class=\"markup--code markup--p-code\">push</code> মেথড কিন্তু সেখানে ছিলো না। সেটা যখন আমরা আবার ডান্ডার প্রোটো <code class=\"markup--code markup--p-code\">__proto__</code> (Dunder Proto) ওপেন করলাম তখন আমরা <code class=\"markup--code markup--p-code\">push</code> পাইলাম। আবার একদম নিচে গেলে আবার দেখবেন সেই ডান্ডার প্রোটো আরেকটা আছে। ঐটা ওপেন করলেও আরো কিছু মেথড পাবেন। এখন এটাকেই আসলে প্রোটোটাইপ চেইন বলে। এখানে যখন একটা মেথড কল করা হয়, প্রথমে সেটা একদম প্রথম থেকে অবজেক্ট একদম নিজের থেকে খোঁজাখুঁজি শুরু করে, সেখানে না পাওয়া গেলে ভিতরে(ডান্ডার প্রোটোর ভিতরে) আবার খোঁজা হয়, সেখানেও না পাওয়া গেলে আরো ভিতরে(আরেকটা ডান্ডার প্রোটোর ভিতরে) খোঁজা হয়… এরকমভাবে খুঁজতেই থাকে যতক্ষন না সেই মেথড বা প্রপার্টি না পাওয়া যায়।</p>\n<p class=\"graf graf--p\">তো এভাবেই জাভাস্ক্রিপ্ট এর অবজেক্ট ওরিয়েন্টেড এর ব্যাপারটা প্রোটোটাইপ বেসড কাজ করে। সব অবজেক্ট এভাবে একটা আরেকটার সাথে লিঙ্ক হয়ে থাকে এই মডেলের মাধ্যমে।</p>\n<p class=\"graf graf--p\">এখন আমরা এখানে জানলাম স্ট্রিং নাকি অবজেক্ট না, প্রিমিটিভ। তাহলে স্ট্রিং এর তো কোনো প্রপার্টি বা মেথড থাকার কথা না। নাকি? চলুন দেখি তাহলেঃ</p>\n<pre class=\"graf graf--pre\">var str = 'My name is Zonayed Ahmed';</pre>\n<p class=\"graf graf--p\">দেখি তাহলে কিছু আছে নাকিঃ</p>\n<pre class=\"graf graf--pre\">console.dir(str);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*zF1sBYZyPvHYTRkI9uJHbA.png?resize=284%2C99&#038;ssl=1\" data-image-id=\"1*zF1sBYZyPvHYTRkI9uJHbA.png\" data-width=\"284\" data-height=\"99\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কিচ্ছু নাই! হ্যাঁ এটাই আমরা আশা করছিলাম। কারণ এটা প্রিমিটিভ, তাই স্বাভাবিকভাবেই এর কোনো প্রপার্টি বা মেথড থাকার কথা না। কিন্তু দেখি একটা অপারেশন চালিয়েঃ</p>\n<pre class=\"graf graf--pre\">str.length</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*qaVoWGjPEH5ERAx50aAP6g.png?resize=183%2C67&#038;ssl=1\" data-image-id=\"1*qaVoWGjPEH5ERAx50aAP6g.png\" data-width=\"183\" data-height=\"67\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কিন্তু একি! এরো দেখি <code class=\"markup--code markup--p-code\">length</code> প্রপার্টি আছে! কিভাবে কি…? প্রিমিটিভ হলে তো কোনো প্রপার্টি থাকার কথা না। হ্যাঁ এখানেই আসে র‍্যাপার(Wrapper) ফাংশনের কথা।</p>\n<p class=\"graf graf--p\">আপনি সেইম স্ট্রিং টা একটা স্ট্রিং র‍্যাপার(Wrapper) ফাংশন দিয়েও নিতে পারবেনঃ</p>\n<pre class=\"graf graf--pre\">var str = new String('My name is Zonayed Ahmed');</pre>\n<p class=\"graf graf--p\">এখন এটাকে খুলে দেখলেঃ</p>\n<pre class=\"graf graf--pre\">console.dir(str);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*oMTsnm8pwNui6NelR2cOCQ.png?resize=361%2C82&#038;ssl=1\" data-image-id=\"1*oMTsnm8pwNui6NelR2cOCQ.png\" data-width=\"361\" data-height=\"82\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখন এখানে এটা অবজেক্ট। আপনি খুলে ভিতরে এর প্রপার্টি বা মেথডগুলোও দেখতে পারবেন। র‍্যাপার(Wrapper) ফাংশনের কাজগুলো ঠিক তাই। এটা একটা প্রিমিটিভকে অবজেক্ট করে ফেলতে পারে, আর সেই সুবিধার্থে আমরা অনেকগুলো প্রপার্টি ও মেথড এর অ্যাক্সেস পাই। এখন স্ট্রিং এর জন্যে <code class=\"markup--code markup--p-code\">String</code> আর নাম্বারের জন্যে <code class=\"markup--code markup--p-code\">Number</code> এবং বুলিয়ান এর জন্যে <code class=\"markup--code markup--p-code\">Boolean</code> র‍্যাপার ফাংশন রয়েছেঃ</p>\n<pre class=\"graf graf--pre\">var num = new Number(10);\r\nconsole.dir(num);\r\n  \r\nvar bool = new Boolean(true);\r\nconsole.dir(bool);</pre>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*uliuFMzV22QgUHBHuWDDAA.png?resize=253%2C201&#038;ssl=1\" data-image-id=\"1*uliuFMzV22QgUHBHuWDDAA.png\" data-width=\"253\" data-height=\"201\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এগুলোর কাজই হচ্ছে কাঙ্ক্ষিত প্রিমিটিভ ডাটা টাইপকে অবজেক্ট টাইপ করে ফেলা আর সেই সুবাধে আমরাও অনেক প্রপার্টি বা মেথডের অ্যাক্সেস পাই।</p>\n<p class=\"graf graf--p\">কিন্ত উপরের উদাহরণে দেখলাম প্রিমিটিভ টাইপ নেওয়ার পরও আমাদের কিছু প্রপার্টির অ্যাক্সেস পাচ্ছি। কিভাবে? হ্যাঁ এখানেই আসল ফ্লেক্সিবিলিটি। আমাদের সেই প্রিমিটিভ টাইপেও ঐটার অবজেক্ট রূপে ঠিক যতগুলো প্রপার্টি বা মেথডের অ্যাক্সেস পাইতাম ঐটাতেও আমরা অটোম্যাটিকালি সেগুলো পাবো। কারণ আমরা যখন সেই প্রিমিটিভ এর কোনো প্রপার্টি বা মেথডের জন্য কোড রান করি, জাভাস্ক্রিপ্ট তখন সেটাকে ফোর্স করে র‍্যাপার ফাংশন দিয়ে(<code class=\"markup--code markup--p-code\">new String</code>, <code class=\"markup--code markup--p-code\">new Boolean</code>, <code class=\"markup--code markup--p-code\">new Number</code>) অবজেক্ট রূপে নিয়ে যায় আর আমাদের কোডও ঠিকমতো রান করে। আমাদের ভাবাই লাগে না। এজন্যেই আমরা যখন প্রিমিটিভ টাইপের ডাটা খুলতে চেষ্টা করি, তখন কিছু পাই না। কিন্তু কোনো মেথড বা প্রপার্টি দিলে তখন আবার কাজ করে। কারণ আমরা যখনি কোনো মেথড বা প্রপার্টি দেই, তখনি সেটাকে জাভাস্ক্রিপ্ট ফোর্স করে সেটাকে অবজেক্ট এ নিয়ে যায়। আবার মনে রাখবেন একবার প্রপার্টি বা মেথড অ্যাক্সেস করার কারণে কিন্তু আপনার প্রিমিটিভ টাইপের ডাটা অবজেক্ট রূপে পার্মানেন্টলি চলে যায় না, কারণ এখানে আপনার মেইন ডাটা টাচ করাই হয় না। আপনি চাইলে আপনার কন্সোলেও দেখতে পারেন একটা ট্রাই করে।</p>\n<p class=\"graf graf--p\">উপরের অপারেশনটা আরো গভীরভাবে দেখলেঃ</p>\n<pre class=\"graf graf--pre\">var str = 'My name is Zonayed Ahmed';</pre>\n<p class=\"graf graf--p\">এখন আমরা <code class=\"markup--code markup--p-code\">length</code> অ্যাক্সেস করতে চাই এভাবেঃ</p>\n<pre class=\"graf graf--pre\">str.length</pre>\n<p class=\"graf graf--p\">কিন্তু পিছনে আসলে যা হয়ঃ</p>\n<pre class=\"graf graf--pre\">(<strong class=\"markup--strong markup--pre-strong\">new</strong> String(str)).length</pre>\n<p class=\"graf graf--p\">এর ফলে আমরা দেখতে পাই আমাদের ফলাফলঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*tlPhqhD2SqHfh_VRkko7Cg.png?resize=305%2C119&#038;ssl=1\" data-image-id=\"1*tlPhqhD2SqHfh_VRkko7Cg.png\" data-width=\"305\" data-height=\"119\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কিন্তু এটা দেখেন পার্মানেন্ট কোথাও অ্যাসাইন করা হচ্ছে না, তাই আমাদের আসল প্রিমিটিভ প্রিমিটিভই থেকে যাচ্ছে। ঐ ডাটাকে টাচই করা হয় নাই।</p>\n<p class=\"graf graf--p\">আশা করি আজকে অবজেক্ট সম্পর্কে ভালো আইডিয়া হয়েছে। আর কখনো এটা নিয়ে কনফিউজ হবেন না। তারপরেও কোনো প্রশ্ন থাকলে আমাকে ইমেইল করতে পারেন <code class=\"markup--code markup--p-code\">contact@zonayed.me</code> এ</p>\n<p class=\"graf graf--p\">তো আজকে এই পর্যন্তই, ভালো থাকবেন আর পাশের মানুষটিকে ভালো রাখবেন।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d7fba9989495-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d7fba9989495-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>জাভাস্ক্রিপ্ট আসলে অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাংগুয়েজ(Object Oriented Programming Language)। যদিও অন্যান্য OOP(Object Oriented Programming) ল্যাংগুয়েজগুলো থেকে জাভাস্ক্রিপ্ট এ অনেক কিছু একটু অন্যরকম, কিন্তু তারপরেও এটা অবজেক্ট ওরিয়েন্টেটেড ল্যাংগুয়েজের মধ্যেই পড়ে। নতুন ভার্শনগুলোয় সেগুলো আপডেটও করা হচ্ছে আস্তে আস্তে। আর তাই আজকে এই পর্বে আমরা সেই অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট নিয়ে আলোচনা করবো। জাভাস্ক্রিপ্ট এ অলমোস্ট সবকিছুই [&hellip;]</p>\n","protected":false},"author":1,"featured_media":354,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,94,158,108,78,86,160,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/363"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=363"}],"version-history":[{"count":5,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/363/revisions"}],"predecessor-version":[{"id":476,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/363/revisions/476"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/354"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=363"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=363"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=363"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}