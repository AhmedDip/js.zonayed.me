{"componentChunkName":"component---src-templates-post-page-js","path":"/es6/325","webpackCompilationHash":"6cfd4e5916fa0746c332","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":{"id":325,"date":"2018-06-28T14:11:16","date_gmt":"2018-06-28T14:11:16","guid":{"rendered":"https://with.zonayed.me/?p=325"},"modified":"2018-06-28T14:11:16","modified_gmt":"2018-06-28T14:11:16","slug":"%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%87%e0%a6%8f%e0%a6%b8-%e0%a7%aces6-let-%e0%a6%8f%e0%a6%ac%e0%a6%82-const","status":"publish","type":"post","link":"https://with.zonayed.me/%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a7%87%e0%a6%8f%e0%a6%b8-%e0%a6%aa%e0%a7%8d%e0%a6%b0%e0%a7%8b%e0%a6%97%e0%a7%8d%e0%a6%b0%e0%a6%be%e0%a6%ae%e0%a6%bf%e0%a6%82/%e0%a6%9c%e0%a6%be%e0%a6%ad%e0%a6%be%e0%a6%b8%e0%a7%8d%e0%a6%95%e0%a7%8d%e0%a6%b0%e0%a6%bf%e0%a6%aa%e0%a7%8d%e0%a6%9f-%e0%a6%87%e0%a6%8f%e0%a6%b8-%e0%a7%aces6-let-%e0%a6%8f%e0%a6%ac%e0%a6%82-const/","title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"},"content":{"rendered":"<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\">জাভাস্ক্রিপ্ট এ প্রথমেই আমার ব্যাক্তিগতভাবে যে জিনিসটা ভালো লেগেছিলো সেটা হচ্ছে যে টাইপের ডাটাই নেই না কেনো সবকিছুই একটা কীওয়ার্ড <code class=\"markup--code markup--p-code\">var</code> দিয়ে ডিক্লেয়ার করতে হয়। হাই-লেভেল প্রোগ্রামিং ল্যাংগুয়েজ হওয়ার কারনে আমাদের স্পেসেফিকলি মেনশন করতে হয় না যে আমরা যে টাইপের ডাটা নিচ্ছি সেটা কি ইন্টিজার, নাকি ক্যারেক্টার নাকি স্ট্রিং… জাভাস্ক্রিপ্ট অটোমেটিক্যালি ডিটারমাইন করে নিতে পারে। আমরা শুধুমাত্র <code class=\"markup--code markup--p-code\">var</code> ইউজ করেই ডিক্লেয়ারেশনের ঝামেলা সারতে পারি।</p>\n<p class=\"graf graf--p\">তবে ইএস ৬ এ নতুন আরো দুইটা কীওয়ার্ড আসছে, <code class=\"markup--code markup--p-code\">let</code> আর <code class=\"markup--code markup--p-code\">const</code> । তবে নতুন আরো কীওয়ার্ড অ্যাড হওয়ায় ভয়ের কোনো কারন নাই, কারন ডাটা টাইপের সাথে বরাবরের মতোই এগুলোরও কোনো সম্পর্ক নাই। আপনি যেকোনো টাইপের ডাটাই ডিক্লেয়ার করতে এগুলো ইউজ করতে পারবেন। কিন্তু এদের মেইন পার্থক্য এদের বিহ্যেভিয়ারে।</p>\n<p class=\"graf graf--p\">তবে নতুন এই দুই কীওয়ার্ডের মধ্যে আমরা প্রথমেই বলতে পারি <code class=\"markup--code markup--p-code\">let</code> কিছুটা <code class=\"markup--code markup--p-code\">var</code> এর মতোই। কিন্তু <code class=\"markup--code markup--p-code\">const</code> একটু অন্যরকম। যেমন আমরা চাইলে <code class=\"markup--code markup--p-code\">var</code> দিয়ে একটা ভ্যারিয়েবল ডিক্লেয়ার করে পরবর্তিতে আমরা চাইলে সেটার ভ্যালু চেঞ্জ করতে পারি, যেটা <code class=\"markup--code markup--p-code\">let</code> এর ক্ষেত্রেও পুরোপুরি সম্ভব।</p>\n<p class=\"graf graf--p\">ইএস ৫ এ <code class=\"markup--code markup--p-code\">var</code> দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা এবং পরবর্তিতে ভ্যালু চেঞ্জ করাঃ</p>\n<pre class=\"graf graf--pre\">var a = 'Zonayed Ahmed';\r\nconsole.log('My name is: ' + a);\r\na = 'Zawad Ahmed';\r\nconsole.log('Now the name is: ' + a);</pre>\n<p class=\"graf graf--p\">আউটপুট আসবে এভাবে, কোনো এরর নাই এবং এটা সম্পূর্ন ভ্যালিডঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*OQFi65LP8TEECb8wKn75WA.png?resize=319%2C107&#038;ssl=1\" data-image-id=\"1*OQFi65LP8TEECb8wKn75WA.png\" data-width=\"319\" data-height=\"107\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">একইভাবে যদি সেইম কাজটা আমরা <code class=\"markup--code markup--p-code\">let</code> দিয়ে করিঃ</p>\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">let</strong> a6 = 'Zonayed Ahmed';\r\nconsole.log('My name is: ' + a6);\r\na6 = 'Zawad Ahmed';\r\nconsole.log('Now the name is: ' + a6);</pre>\n<p class=\"graf graf--p\">এটারও সেইম আউটপুটই আসবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*6sk1mleG8lq6XMRu74F_kg.png?resize=316%2C130&#038;ssl=1\" data-image-id=\"1*6sk1mleG8lq6XMRu74F_kg.png\" data-width=\"316\" data-height=\"130\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কিন্তু <code class=\"markup--code markup--p-code\">const</code> একটু অন্যরকম। এটা আসলে যে নামে নামকরন করা হয়েছে এটার বিহ্যেভও অনেকটা ঐরকমই। <code class=\"markup--code markup--p-code\">const</code> মানে কন্সট্যান্ট, যার ভ্যালু চেঞ্জ করা যায় না। তাই আপনি কোনোকিছু একবার <code class=\"markup--code markup--p-code\">const</code> দিয়ে ডিক্লেয়ার করলে সেটার পরে আর পরিবর্তন করতে পারবেন না। করতে চাইলে এরর আসবে। উপরের উদাহরনটাই <code class=\"markup--code markup--p-code\">const</code> দিয়ে করলেঃ</p>\n<pre class=\"graf graf--pre\">const b6 = 'Zonayed Ahmed';\r\nconsole.log('My name is: ' + b6);\r\nb6 = 'Zawad Ahmed';\r\nconsole.log('Now the name is: ' + b6);</pre>\n<p class=\"graf graf--p\">আউটপুটে এরর আসবে, বলা হবে <strong class=\"markup--strong markup--p-strong\">Uncaught TypeError: Assignment to constant variable:</strong></p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*IPz4AgKATRd5-PRDFrmfvg.png?resize=435%2C120&#038;ssl=1\" data-image-id=\"1*IPz4AgKATRd5-PRDFrmfvg.png\" data-width=\"435\" data-height=\"120\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এর মানে হচ্ছে আপনি <code class=\"markup--code markup--p-code\">const</code> দিয়ে ডিক্লেয়ার করা ভ্যারিয়েবলে অ্যাসাইনমেন্ট ইউজ করতে পারবেন না।</p>\n<p class=\"graf graf--p\">এতো গেলো ব্যাসিক পার্থক্য। কিন্তু এর বাইরেও এই নতুন দুইটা কীওয়ার্ড <code class=\"markup--code markup--p-code\">var</code> থেকে একটু আলাদা। সেটা হচ্ছে স্কোপিং এ।</p>\n<ul class=\"postList\">\n<li class=\"graf graf--li\"><code class=\"markup--code markup--li-code\">var</code> কীওয়ার্ড ফাংশন স্কোপ মেইন্টেইন করে</li>\n<li class=\"graf graf--li\"><code class=\"markup--code markup--li-code\">let</code> ও <code class=\"markup--code markup--li-code\">const</code> ব্লক(Block) স্কোপ মেইন্টেইন করে</li>\n</ul>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">var</code> কীওয়ার্ড দিয়ে যদি আমরা কোনো ফাংশনের ভিতরে ভ্যারিয়েবল ডিক্লেয়ার করি তাহলে সেটার স্কোপ সেই ফাংশনের ভিতরে সবজায়গায় থাকবে। যেমন নিচে আমরা এই উদাহরনটায় দেখতে পারিঃ</p>\n<pre class=\"graf graf--pre\">function es5var() {\r\n   if(true) {\r\n      var a = 5;\r\n   }\r\n   console.log('Value: ' + a);\r\n}</pre>\n<pre class=\"graf graf--pre\">es5var();</pre>\n<p class=\"graf graf--p\">এটা ঠিকঠাক আউটপুট দেখাবে। যারা অন্য লো লেভেলে কোনো প্রোগ্রামিং ল্যাংগুয়েজ জানেন তাদের কাছে এটা একটু আশ্চর্যই লাগতে পারে। এটা ঠিক এরকম আউটপুট দিবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i0.wp.com/cdn-images-1.medium.com/max/800/1*Cb5A4eUfLDxk0FsIgEGvSA.png?resize=288%2C141&#038;ssl=1\" data-image-id=\"1*Cb5A4eUfLDxk0FsIgEGvSA.png\" data-width=\"288\" data-height=\"141\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে ভ্যারিয়েবল <code class=\"markup--code markup--p-code\">a</code> <code class=\"markup--code markup--p-code\">if</code> ব্লকের ভিতরে ডিক্লেয়ার করা হলেও এটার ভ্যালু এই ব্লকের বাইরে থেকেও অ্যাক্সেস করা যাচ্ছে। কারন হচ্ছে <code class=\"markup--code markup--p-code\">var</code> ফাংশন স্কোপে কাজ করে।</p>\n<p class=\"graf graf--p\">কিন্তু এবার সেইম কাজটাই যদি আমরা <code class=\"markup--code markup--p-code\">let</code> বা <code class=\"markup--code markup--p-code\">const</code> দিয়ে করিঃ</p>\n<pre class=\"graf graf--pre\">function es6var() {\r\n   if(true) {\r\n      const a = 6;\r\n   }\r\n   console.log('Value: ' + a);\r\n}</pre>\n<pre class=\"graf graf--pre\">es6var();</pre>\n<p class=\"graf graf--p\">এটার আউটপুটে এরর আসবে, বা ব্লক স্কোপ বা গ্লোবাল স্কোপের মধ্যে যদি এই নামে ভ্যারিয়েবল ডিক্লেয়ার করা থাকে সেটা প্রিন্ট হবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*Y7C6VRP8vIgeomAGzhjk3w.png?resize=369%2C183&#038;ssl=1\" data-image-id=\"1*Y7C6VRP8vIgeomAGzhjk3w.png\" data-width=\"369\" data-height=\"183\" data-recalc-dims=\"1\" /><figcaption class=\"imageCaption\">সেইম let এর ক্ষেত্রেও</figcaption></figure>\n<p class=\"graf graf--p\">কারন কি? হ্যাঁ কারন হচ্ছে <code class=\"markup--code markup--p-code\">let</code> বা <code class=\"markup--code markup--p-code\">const</code> হচ্ছে ব্লক স্কোপে কাজ করে। এখানে <code class=\"markup--code markup--p-code\">if</code> এর ভিতরে ডিক্লেয়ার করা ভ্যারিয়েবল <code class=\"markup--code markup--p-code\">a</code> <code class=\"markup--code markup--p-code\">if</code> ব্লকের ভিতরের স্কোপই পাবে একমাত্র, এর বাইরে এটা অ্যাক্সেস করা যাবেনা, যদিও একই ফাংশনের ভিতরে।</p>\n<p class=\"graf graf--p\">এখন আরো পার্থক্য হোইস্টিং এর মধ্যে, <code class=\"markup--code markup--p-code\">var</code> দিয়ে কোনো ভ্যারিয়েবল ডিক্লেয়ার করার আগে ইউজ করা হলে সেটা <code class=\"markup--code markup--p-code\">undefined</code> দেখায় হোইস্টিং এর কারনেঃ</p>\n<pre class=\"graf graf--pre\">console.log(aVar);\r\nvar aVar = 'I am defined here';</pre>\n<p class=\"graf graf--p\">আউটপুট এরকম আসবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*AJ1krB3iXrhPLrdMGximQg.png?resize=266%2C92&#038;ssl=1\" data-image-id=\"1*AJ1krB3iXrhPLrdMGximQg.png\" data-width=\"266\" data-height=\"92\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">কিন্তু <code class=\"markup--code markup--p-code\">let</code> বা <code class=\"markup--code markup--p-code\">const</code> দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করলে, বা ডিক্লেয়ার করার আগে সেই ভ্যারিয়েবল অ্যাক্সেস করতে চাইলে এরর আসবেঃ</p>\n<pre class=\"graf graf--pre\">console.log(varWith6);\r\nconst varWith6 = 'I am defined here';</pre>\n<p class=\"graf graf--p\">এটার আউটপুটে এরর আসবেঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i1.wp.com/cdn-images-1.medium.com/max/800/1*VFLQMFKMKgGgJ2tdg7XIig.png?resize=392%2C116&#038;ssl=1\" data-image-id=\"1*VFLQMFKMKgGgJ2tdg7XIig.png\" data-width=\"392\" data-height=\"116\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে এদেরকেও হোইস্টিং এর সিস্টেমে হোইস্টেড করা হয়। কিন্তু ‘<strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">Temporal Dead Zone</em></strong>’ এর কারনে আমরা চাইলেও এদেরকে ডিক্লেয়ার করার আগে অ্যাক্সেস করতে পারি না। একটা ভ্যারিয়েবল ডিক্লেয়ার করা হলে সেটাকে অ্যাক্সেস করা যায়, এখন ভ্যারিয়েবল ডিক্লেয়ারেশন আর সেটার স্কোপ পাওয়ার মধ্যে একটা সময় আছে, ঐ সময়টাকেই ‘<strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">Temporal Dead Zone</em></strong>’ বলে।</p>\n<p class=\"graf graf--p\">নিচে আরেকটা উদাহরন দেখিয়ে আজকের এই লেখা শেষ করবো। আমাদের কেনো এদের মধ্যকার পার্থক্য ঠিকমতো বুঝতে হবে সেটাই ফোকাস করা হবে এই উদাহরনে। সেইম দুইটা কোডের আউটপুট ভিন্ন আসবে শুধুমাত্র ভ্যারিয়েবল ডিক্লেয়ারশনের জন্যে <code class=\"markup--code markup--p-code\">var</code> এর বদলে <code class=\"markup--code markup--p-code\">let</code> বা <code class=\"markup--code markup--p-code\">const</code> ইউজ করায়।</p>\n<p class=\"graf graf--p\"><code class=\"markup--code markup--p-code\">var</code> দিয়ে লেখা একটা ছোটো প্রোগ্রামঃ</p>\n<pre class=\"graf graf--pre\">var i = 13;</pre>\n<pre class=\"graf graf--pre\">for(var i = 0; i &lt; 5; i++) {\r\n   console.log(i);\r\n}</pre>\n<pre class=\"graf graf--pre\">console.log('Value: ' + i);</pre>\n<p class=\"graf graf--p\">এটার আউটপুটঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*IouGd7XpN6VubhdRU5KeFw.png?resize=263%2C215&#038;ssl=1\" data-image-id=\"1*IouGd7XpN6VubhdRU5KeFw.png\" data-width=\"263\" data-height=\"215\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">সেইম প্রোগ্রাম ইএস ৬ এর <code class=\"markup--code markup--p-code\">let</code> বা <code class=\"markup--code markup--p-code\">const</code> ইউজ করলেঃ</p>\n<pre class=\"graf graf--pre\">let i6 = 13;</pre>\n<pre class=\"graf graf--pre\">for(let i6 = 0; i6 &lt; 5; i6++) {\r\n   console.log(i6);\r\n}</pre>\n<pre class=\"graf graf--pre\">console.log('Value: ' + i6);</pre>\n<p class=\"graf graf--p\">এটার আউটপুট আসবে এরকমঃ</p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https://i2.wp.com/cdn-images-1.medium.com/max/800/1*7mTaqmXKSOSo5bZbtkWIlg.png?resize=277%2C203&#038;ssl=1\" data-image-id=\"1*7mTaqmXKSOSo5bZbtkWIlg.png\" data-width=\"277\" data-height=\"203\" data-recalc-dims=\"1\" /></figure>\n<p class=\"graf graf--p\">এখানে <code class=\"markup--code markup--p-code\">let</code> এর ক্ষেত্রে ভ্যারিয়েবল দুইটা সেইম নামের হলেও এরা আলাদা হয়ে গেছে ব্লক স্কোপিং এর কারনে। <code class=\"markup--code markup--p-code\">for</code> এর ভিতরের টা এই ব্লকের জন্য লোকাল ভ্যারিয়েবল, আর এর বাইরে যেটা আছে সেটা গ্লোবাল ভ্যারিয়েবল। মনে রাখবেন এই উদাহরনের জন্যে কিন্তু আপনি <code class=\"markup--code markup--p-code\">const</code> ইউজ করতে পারবেন না, কারন এখানে গ্লোবাল ভ্যারিয়েবলের প্রভাব <code class=\"markup--code markup--p-code\">for</code> এর ভিতরেও আছে। তাই এটার ভিতরে যদি আবার অ্যাসাইন করতে চান সেইম ভ্যারিয়েবল তাহলে এরর পাবেন <code class=\"markup--code markup--p-code\">const</code> এর ক্ষেত্রে।</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p class=\"graf graf--p\"><div class=\"widget_wysija_cont shortcode_wysija\"><div id=\"msg-form-wysija-shortcode5d7fc46395c1c-6\" class=\"wysija-msg ajax\"></div><form id=\"form-wysija-shortcode5d7fc46395c1c-6\" method=\"post\" action=\"#wysija\" class=\"widget_wysija shortcode_wysija\">\n\nআমার নতুন ব্লগ পোস্ট গুলোর আপডেট পেতে আপনি আপনার ইমেইল দিয়ে আমার ব্লগ পোস্টগুলো সাবস্ক্রাইব করে রাখতে পারেন, নতুন পোস্টগুলো সপ্তাহে একদিন আপনার ইনবক্সে চলে যাবে\n<p class=\"wysija-paragraph\">\n    \n    \n    \t<input type=\"text\" name=\"wysija[user][email]\" class=\"wysija-input validate[required,custom[email]]\" title=\"আপনার ইমেইল\" placeholder=\"আপনার ইমেইল\" value=\"\" />\n    \n    \n    \n    <span class=\"abs-req\">\n        <input type=\"text\" name=\"wysija[user][abs][email]\" class=\"wysija-input validated[abs][email]\" value=\"\" />\n    </span>\n    \n</p>\n\r\n<input class=\"wysija-submit wysija-submit-field\" type=\"submit\" value=\"সাবস্ক্রাইব করুন\" />\n\n    <input type=\"hidden\" name=\"form_id\" value=\"6\" />\n    <input type=\"hidden\" name=\"action\" value=\"save\" />\n    <input type=\"hidden\" name=\"controller\" value=\"subscribers\" />\n    <input type=\"hidden\" value=\"1\" name=\"wysija-page\" />\n\n    \n        <input type=\"hidden\" name=\"wysija[user_list][list_ids]\" value=\"8\" />\n    \n </form></div></p>\n</div>\n</div>\n</section>\n</div>\n</div>\n</section>\n","protected":false},"excerpt":{"rendered":"<p>জাভাস্ক্রিপ্ট এ প্রথমেই আমার ব্যাক্তিগতভাবে যে জিনিসটা ভালো লেগেছিলো সেটা হচ্ছে যে টাইপের ডাটাই নেই না কেনো সবকিছুই একটা কীওয়ার্ড var দিয়ে ডিক্লেয়ার করতে হয়। হাই-লেভেল প্রোগ্রামিং ল্যাংগুয়েজ হওয়ার কারনে আমাদের স্পেসেফিকলি মেনশন করতে হয় না যে আমরা যে টাইপের ডাটা নিচ্ছি সেটা কি ইন্টিজার, নাকি ক্যারেক্টার নাকি স্ট্রিং… জাভাস্ক্রিপ্ট অটোমেটিক্যালি ডিটারমাইন করে নিতে পারে। [&hellip;]</p>\n","protected":false},"author":1,"featured_media":323,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[54,50,60],"tags":[84,154,150,94,108,78,86,106],"_links":{"self":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts/325"}],"collection":[{"href":"https://with.zonayed.me/wp-json/wp/v2/posts"}],"about":[{"href":"https://with.zonayed.me/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/comments?post=325"}],"version-history":[{"count":1,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/325/revisions"}],"predecessor-version":[{"id":326,"href":"https://with.zonayed.me/wp-json/wp/v2/posts/325/revisions/326"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/media/323"}],"wp:attachment":[{"href":"https://with.zonayed.me/wp-json/wp/v2/media?parent=325"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/categories?post=325"},{"taxonomy":"post_tag","embeddable":true,"href":"https://with.zonayed.me/wp-json/wp/v2/tags?post=325"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},"allData":{"basic":[{"id":197,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কি, কেন, কখন?"}},{"id":202,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কোথায় এবং কিভাবে ইউজ করা হয়?"}},{"id":214,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ক্রোম ডেভেলপার কন্সোল"}},{"id":224,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ভ্যারিয়েবল এবং ডাটা টাইপ"}},{"id":226,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অপারেটর নিয়ে সবকিছু"}},{"id":228,"title":{"rendered":"জাভাস্ক্রিপ্টঃ কন্ডিশনাল স্টেটমেন্ট নিয়ে সবকিছু"}},{"id":239,"title":{"rendered":"জাভাস্ক্রিপ্টঃ লুপ নিয়ে সবকিছু"}},{"id":241,"title":{"rendered":"জাভাস্ক্রিপ্টঃ অ্যারে নিয়ে সবকিছু"}},{"id":243,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক অবজেক্ট"}},{"id":248,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ব্যাসিক ফাংশন"}},{"id":252,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্ট্যাটমেন্ট আর এক্সপ্রেশন"}},{"id":257,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ড্রাই প্রিন্সিপ্যাল"}},{"id":259,"title":{"rendered":"জাভাস্ক্রিপ্টঃ নাকি ইকমাস্ক্রিপ্ট?"}},{"id":288,"title":{"rendered":"জাভাস্ক্রিপ্টঃ বিহ্যাইন্ড দ্যা সীন"}},{"id":290,"title":{"rendered":"জাভাস্ক্রিপ্টঃ হোইস্টিং(Hoisting) নিয়ে ধারণা"}},{"id":292,"title":{"rendered":"জাভাস্ক্রিপ্টঃ স্কোপ(Scope) নিয়ে ধারণা"}},{"id":294,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ক্লোজারস(Closures) নিয়ে ধারণা"}},{"id":296,"title":{"rendered":"জাভাস্ক্রিপ্টঃ ইফি, Immediately Invoked Function Expressions (IIFE)"}}],"advance":[{"id":352,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ &#8216;this&#8217; কীওয়ার্ড"}},{"id":356,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ call(), bind() এবং apply() মেথড"}},{"id":363,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ অবজেক্ট ওরিয়েন্টেড জাভাস্ক্রিপ্ট"}},{"id":449,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ফাংশন কন্সট্রাকটর(Constructor) এবং ‘new’ কীওয়ার্ড"}},{"id":458,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ ইনহেরিট্যান্স (Inheritance)"}},{"id":480,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যাডভান্সঃ স্ট্রিক্ট (Strict) মোড"}}],"es6":[{"id":322,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): নতুন কি আছে?"}},{"id":325,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): let এবং const দিয়ে ভ্যারিয়েবল ডিক্লেয়ার করা"}},{"id":327,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6):ইফি (Immediately Invoked Function Expressions)"}},{"id":330,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): টেমপ্লেট লিটারেল(Template Literal) ও স্ট্রিং মেথড"}},{"id":400,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারো (Arrow) ফাংশন ও লেক্সিক্যাল(Lexical) ‘this’ কীওয়ার্ড "}},{"id":407,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডি-স্ট্রাকচারিং (Destructuring)"}},{"id":409,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): অ্যারে (Array)"}},{"id":414,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): স্প্রেড(Spread) অপারেটর"}},{"id":416,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): রেস্ট(Rest) প্যারামিটার"}},{"id":419,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ডিফল্ট(Default) প্যারামিটার"}},{"id":423,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ম্যাপ (Map)"}},{"id":466,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস (Class)"}},{"id":485,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): ক্লাস ও ইনহেরিট্যান্স (Inheritance)"}},{"id":547,"title":{"rendered":"জাভাস্ক্রিপ্ট ইএস ৬(ES6): সব ইনভারোমেন্ট এ ইএস৬ "}}],"dom":[{"id":630,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ জাভাস্ক্রিপ্ট আর ডম"}},{"id":642,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট সিলেক্ট করা"}},{"id":644,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইলিমেন্ট নিয়ে খেলা"}},{"id":649,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ ইভেন্ট(Event)"}},{"id":651,"title":{"rendered":"জাভাস্ক্রিপ্ট ডম ম্যানিপুলেশনঃ অ্যাজাক্স(AJAX)"}}],"daily":[{"id":234,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ফার্স্ট ক্লাস ফাংশন ও হাইয়ার অর্ডার ফাংশন"}},{"id":255,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ map(), filter() ও reduce()"}},{"id":558,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ some() ও every() মেথড"}},{"id":561,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অবজেক্ট এ লুপ চালানো"}},{"id":565,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডট নোটেশন এবং ব্র্যাকেটস নোটেশন"}},{"id":568,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ম্যাথ (Math) অবজেক্ট"}},{"id":575,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেট (Date) অবজেক্ট"}},{"id":589,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ লজিক্যাল অপারেটর অর (।।) এবং অ্যান্ড (&#038;&#038;)"}},{"id":591,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কন্ডিশনাল/টার্নারি (Ternary) অপারেটর"}},{"id":594,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ রেগুলার এক্সপ্রেশন (Regular Expression)"}},{"id":599,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ এরর হ্যান্ডলিং (Error Handling)"}},{"id":602,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ ডেভেলপার কন্সোল (Console)"}},{"id":604,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ অ্যাসিনক্রোনাস (Asynchronous)"}},{"id":608,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ কলব্যাক(Callback) ফাংশন"}},{"id":612,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ প্রমিস (Promise)"}},{"id":617,"title":{"rendered":"নিত্যদিনের জাভাস্ক্রিপ্টঃ async এবং await"}}],"algods":[{"id":634,"title":{"rendered":"জাভাস্ক্রিপ্ট অ্যালগরিদম ও ডাটা স্ট্রাকচারঃ স্ট্রিং উল্টানো"}}],"soft":[{"id":206,"title":{"rendered":"ক্রস প্ল্যাটফর্ম ডেস্কটপ অ্যাপ বানিয়ে ফেলুন ৫ মিনিটে — ফান প্রোজেক্ট"}},{"id":270,"title":{"rendered":"এক পলকে Gulp JS — টাস্ক স্বয়ংক্রিয় করুন"}},{"id":273,"title":{"rendered":"ওয়েবপ্যাক দিয়ে রিঅ্যাক্ট এর স্টার্টার প্যাক — স্ক্র্যাচ থেকে"}}]}}}}